
Cable-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a24  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd4  08000bd4  00010bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000267d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000008a8  00000000  00000000  000226f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000308  00000000  00000000  00022fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000022e  00000000  00000000  000232a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ce0a  00000000  00000000  000234d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000028a4  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a265d  00000000  00000000  00042b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b28  00000000  00000000  000e51e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000e5d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000bb8 	.word	0x08000bb8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08000bb8 	.word	0x08000bb8

080001ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f003 0307 	and.w	r3, r3, #7
 80001fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <__NVIC_SetPriorityGrouping+0x44>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000202:	68ba      	ldr	r2, [r7, #8]
 8000204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000208:	4013      	ands	r3, r2
 800020a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800021c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800021e:	4a04      	ldr	r2, [pc, #16]	; (8000230 <__NVIC_SetPriorityGrouping+0x44>)
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	60d3      	str	r3, [r2, #12]
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_GetPriorityGrouping+0x18>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	0a1b      	lsrs	r3, r3, #8
 800023e:	f003 0307 	and.w	r3, r3, #7
}
 8000242:	4618      	mov	r0, r3
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr
 800024c:	e000ed00 	.word	0xe000ed00

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000260:	2b00      	cmp	r3, #0
 8000262:	db0a      	blt.n	800027a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	b2da      	uxtb	r2, r3
 8000268:	490c      	ldr	r1, [pc, #48]	; (800029c <__NVIC_SetPriority+0x4c>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	0112      	lsls	r2, r2, #4
 8000270:	b2d2      	uxtb	r2, r2
 8000272:	440b      	add	r3, r1
 8000274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000278:	e00a      	b.n	8000290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <__NVIC_SetPriority+0x50>)
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	f003 030f 	and.w	r3, r3, #15
 8000286:	3b04      	subs	r3, #4
 8000288:	0112      	lsls	r2, r2, #4
 800028a:	b2d2      	uxtb	r2, r2
 800028c:	440b      	add	r3, r1
 800028e:	761a      	strb	r2, [r3, #24]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000e100 	.word	0xe000e100
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b089      	sub	sp, #36	; 0x24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	f1c3 0307 	rsb	r3, r3, #7
 80002be:	2b04      	cmp	r3, #4
 80002c0:	bf28      	it	cs
 80002c2:	2304      	movcs	r3, #4
 80002c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2b06      	cmp	r3, #6
 80002cc:	d902      	bls.n	80002d4 <NVIC_EncodePriority+0x30>
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	3b03      	subs	r3, #3
 80002d2:	e000      	b.n	80002d6 <NVIC_EncodePriority+0x32>
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	f04f 32ff 	mov.w	r2, #4294967295
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	43da      	mvns	r2, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	401a      	ands	r2, r3
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ec:	f04f 31ff 	mov.w	r1, #4294967295
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	fa01 f303 	lsl.w	r3, r1, r3
 80002f6:	43d9      	mvns	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	4313      	orrs	r3, r2
         );
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3724      	adds	r7, #36	; 0x24
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
	...

0800030c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <LL_RCC_HSI_Enable+0x1c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <LL_RCC_HSI_Enable+0x1c>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6013      	str	r3, [r2, #0]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40023800 	.word	0x40023800

0800032c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <LL_RCC_HSI_IsReady+0x20>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f003 0302 	and.w	r3, r3, #2
 8000338:	2b02      	cmp	r3, #2
 800033a:	bf0c      	ite	eq
 800033c:	2301      	moveq	r3, #1
 800033e:	2300      	movne	r3, #0
 8000340:	b2db      	uxtb	r3, r3
}
 8000342:	4618      	mov	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	40023800 	.word	0x40023800

08000350 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	4904      	ldr	r1, [pc, #16]	; (8000378 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000366:	4313      	orrs	r3, r2
 8000368:	600b      	str	r3, [r1, #0]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800

0800037c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <LL_RCC_SetSysClkSource+0x24>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	f023 0203 	bic.w	r2, r3, #3
 800038c:	4904      	ldr	r1, [pc, #16]	; (80003a0 <LL_RCC_SetSysClkSource+0x24>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4313      	orrs	r3, r2
 8000392:	608b      	str	r3, [r1, #8]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40023800 	.word	0x40023800

080003a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <LL_RCC_GetSysClkSource+0x18>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f003 030c 	and.w	r3, r3, #12
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800

080003c0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	608b      	str	r3, [r1, #8]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40023800 	.word	0x40023800

080003e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_SetAPB1Prescaler+0x24>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80003f8:	4904      	ldr	r1, [pc, #16]	; (800040c <LL_RCC_SetAPB1Prescaler+0x24>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	608b      	str	r3, [r1, #8]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40023800 	.word	0x40023800

08000410 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <LL_RCC_SetAPB2Prescaler+0x24>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000420:	4904      	ldr	r1, [pc, #16]	; (8000434 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	608b      	str	r3, [r1, #8]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40023800 	.word	0x40023800

08000438 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <LL_RCC_SetTIMPrescaler+0x28>)
 8000442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000446:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800044a:	4905      	ldr	r1, [pc, #20]	; (8000460 <LL_RCC_SetTIMPrescaler+0x28>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4313      	orrs	r3, r2
 8000450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40023800 	.word	0x40023800

08000464 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800046e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000470:	4907      	ldr	r1, [pc, #28]	; (8000490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800047a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4013      	ands	r3, r2
 8000480:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40023800 	.word	0x40023800

08000494 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800049e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004a0:	4907      	ldr	r1, [pc, #28]	; (80004c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4013      	ands	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b2:	68fb      	ldr	r3, [r7, #12]
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40023800 	.word	0x40023800

080004c4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004d0:	4907      	ldr	r1, [pc, #28]	; (80004f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4013      	ands	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e2:	68fb      	ldr	r3, [r7, #12]
}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40023800 	.word	0x40023800

080004f4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <LL_FLASH_SetLatency+0x24>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f023 020f 	bic.w	r2, r3, #15
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <LL_FLASH_SetLatency+0x24>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	600b      	str	r3, [r1, #0]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40023c00 	.word	0x40023c00

0800051c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <LL_FLASH_GetLatency+0x18>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f003 030f 	and.w	r3, r3, #15
}
 8000528:	4618      	mov	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40023c00 	.word	0x40023c00

08000538 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <LL_PWR_DisableOverDriveMode+0x1c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <LL_PWR_DisableOverDriveMode+0x1c>)
 8000542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40007000 	.word	0x40007000

08000558 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40007000 	.word	0x40007000

08000580 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	619a      	str	r2, [r3, #24]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	4013      	ands	r3, r2
 80005b2:	041a      	lsls	r2, r3, #16
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	43d9      	mvns	r1, r3
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	400b      	ands	r3, r1
 80005bc:	431a      	orrs	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	619a      	str	r2, [r3, #24]
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005d8:	f7ff ff74 	bl	80004c4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005e0:	f7ff ff58 	bl	8000494 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f7ff fe01 	bl	80001ec <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80005ea:	f7ff fe23 	bl	8000234 <__NVIC_GetPriorityGrouping>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2200      	movs	r2, #0
 80005f2:	210f      	movs	r1, #15
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fe55 	bl	80002a4 <NVIC_EncodePriority>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000602:	f7ff fe25 	bl	8000250 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f80f 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f849 	bl	80006a0 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <main+0x54>)
 8000614:	f7ff ffc2 	bl	800059c <LL_GPIO_TogglePin>
	LL_mDelay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f000 fa72 	bl	8000b04 <LL_mDelay>
	LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
 8000620:	e7f5      	b.n	800060e <main+0x3e>
 8000622:	bf00      	nop
 8000624:	40021800 	.word	0x40021800

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff61 	bl	80004f4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000632:	bf00      	nop
 8000634:	f7ff ff72 	bl	800051c <LL_FLASH_GetLatency>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1fa      	bne.n	8000634 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 800063e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000642:	f7ff ff89 	bl	8000558 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000646:	f7ff ff77 	bl	8000538 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 800064a:	2010      	movs	r0, #16
 800064c:	f7ff fe80 	bl	8000350 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000650:	f7ff fe5c 	bl	800030c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000654:	bf00      	nop
 8000656:	f7ff fe69 	bl	800032c <LL_RCC_HSI_IsReady>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d1fa      	bne.n	8000656 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fead 	bl	80003c0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff febe 	bl	80003e8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff fecf 	bl	8000410 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fe82 	bl	800037c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000678:	bf00      	nop
 800067a:	f7ff fe93 	bl	80003a4 <LL_RCC_GetSysClkSource>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1fa      	bne.n	800067a <SystemClock_Config+0x52>
  {

  }
  LL_Init1msTick(16000000);
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <SystemClock_Config+0x74>)
 8000686:	f000 fa2f 	bl	8000ae8 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <SystemClock_Config+0x74>)
 800068c:	f000 fa60 	bl	8000b50 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fed1 	bl	8000438 <LL_RCC_SetTIMPrescaler>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	00f42400 	.word	0x00f42400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80006b6:	2040      	movs	r0, #64	; 0x40
 80006b8:	f7ff fed4 	bl	8000464 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOG, LL_GPIO_PIN_14);
 80006bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0x50>)
 80006c2:	f7ff ff5d 	bl	8000580 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80006c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <MX_GPIO_Init+0x50>)
 80006e2:	f000 f973 	bl	80009cc <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021800 	.word	0x40021800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079a:	f7ff ffd7 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f000 f9e7 	bl	8000b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a2:	f7ff ff15 	bl	80005d0 <main>
  bx  lr    
 80007a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80007a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007b4:	08000bd8 	.word	0x08000bd8
  ldr r2, =_sbss
 80007b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007bc:	20000020 	.word	0x20000020

080007c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC_IRQHandler>

080007c2 <LL_GPIO_SetPinMode>:
{
 80007c2:	b480      	push	{r7}
 80007c4:	b089      	sub	sp, #36	; 0x24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	fa93 f3a3 	rbit	r3, r3
 80007dc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	fab3 f383 	clz	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	2103      	movs	r1, #3
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	401a      	ands	r2, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	fa93 f3a3 	rbit	r3, r3
 80007fc:	61bb      	str	r3, [r7, #24]
  return result;
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	fab3 f383 	clz	r3, r3
 8000804:	b2db      	uxtb	r3, r3
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	431a      	orrs	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	3724      	adds	r7, #36	; 0x24
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_GPIO_SetPinOutputType>:
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	43db      	mvns	r3, r3
 8000834:	401a      	ands	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	fb01 f303 	mul.w	r3, r1, r3
 800083e:	431a      	orrs	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	605a      	str	r2, [r3, #4]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_GPIO_SetPinSpeed>:
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa93 f3a3 	rbit	r3, r3
 800086a:	613b      	str	r3, [r7, #16]
  return result;
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	fab3 f383 	clz	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2103      	movs	r1, #3
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	401a      	ands	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	fa93 f3a3 	rbit	r3, r3
 800088a:	61bb      	str	r3, [r7, #24]
  return result;
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fab3 f383 	clz	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	fa01 f303 	lsl.w	r3, r1, r3
 800089c:	431a      	orrs	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	609a      	str	r2, [r3, #8]
}
 80008a2:	bf00      	nop
 80008a4:	3724      	adds	r7, #36	; 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <LL_GPIO_SetPinPull>:
{
 80008ae:	b480      	push	{r7}
 80008b0:	b089      	sub	sp, #36	; 0x24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	fa93 f3a3 	rbit	r3, r3
 80008c8:	613b      	str	r3, [r7, #16]
  return result;
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	fab3 f383 	clz	r3, r3
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	401a      	ands	r2, r3
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa93 f3a3 	rbit	r3, r3
 80008e8:	61bb      	str	r3, [r7, #24]
  return result;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	fab3 f383 	clz	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	431a      	orrs	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	60da      	str	r2, [r3, #12]
}
 8000900:	bf00      	nop
 8000902:	3724      	adds	r7, #36	; 0x24
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <LL_GPIO_SetAFPin_0_7>:
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6a1a      	ldr	r2, [r3, #32]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa93 f3a3 	rbit	r3, r3
 8000926:	613b      	str	r3, [r7, #16]
  return result;
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	fab3 f383 	clz	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	210f      	movs	r1, #15
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	401a      	ands	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	fa93 f3a3 	rbit	r3, r3
 8000946:	61bb      	str	r3, [r7, #24]
  return result;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fab3 f383 	clz	r3, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	431a      	orrs	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	621a      	str	r2, [r3, #32]
}
 800095e:	bf00      	nop
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <LL_GPIO_SetAFPin_8_15>:
{
 800096a:	b480      	push	{r7}
 800096c:	b089      	sub	sp, #36	; 0x24
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	613b      	str	r3, [r7, #16]
  return result;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	210f      	movs	r1, #15
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	fa93 f3a3 	rbit	r3, r3
 80009a8:	61bb      	str	r3, [r7, #24]
  return result;
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	fab3 f383 	clz	r3, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	431a      	orrs	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009c0:	bf00      	nop
 80009c2:	3724      	adds	r7, #36	; 0x24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa93 f3a3 	rbit	r3, r3
 80009ea:	613b      	str	r3, [r7, #16]
  return result;
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	fab3 f383 	clz	r3, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80009f6:	e050      	b.n	8000a9a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2101      	movs	r1, #1
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d042      	beq.n	8000a94 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d003      	beq.n	8000a1e <LL_GPIO_Init+0x52>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d10d      	bne.n	8000a3a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	461a      	mov	r2, r3
 8000a24:	69b9      	ldr	r1, [r7, #24]
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ff12 	bl	8000850 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	461a      	mov	r2, r3
 8000a32:	69b9      	ldr	r1, [r7, #24]
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fef3 	bl	8000820 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	69b9      	ldr	r1, [r7, #24]
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ff33 	bl	80008ae <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d11a      	bne.n	8000a86 <LL_GPIO_Init+0xba>
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	fa93 f3a3 	rbit	r3, r3
 8000a5a:	60bb      	str	r3, [r7, #8]
  return result;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000a5e:	fab3 f383 	clz	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b07      	cmp	r3, #7
 8000a66:	d807      	bhi.n	8000a78 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	69b9      	ldr	r1, [r7, #24]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff4b 	bl	800090c <LL_GPIO_SetAFPin_0_7>
 8000a76:	e006      	b.n	8000a86 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	69b9      	ldr	r1, [r7, #24]
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff72 	bl	800096a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	69b9      	ldr	r1, [r7, #24]
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fe97 	bl	80007c2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	3301      	adds	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1a7      	bne.n	80009f8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <LL_InitTick+0x30>)
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <LL_InitTick+0x30>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <LL_InitTick+0x30>)
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ffdd 	bl	8000ab4 <LL_InitTick>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <LL_mDelay+0x48>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1a:	d00c      	beq.n	8000b36 <LL_mDelay+0x32>
  {
    Delay++;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000b22:	e008      	b.n	8000b36 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <LL_mDelay+0x48>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <LL_mDelay+0x32>
    {
      Delay--;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1f3      	bne.n	8000b24 <LL_mDelay+0x20>
    }
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <LL_SetSystemCoreClock+0x1c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000000 	.word	0x20000000

08000b70 <__libc_init_array>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4d0d      	ldr	r5, [pc, #52]	; (8000ba8 <__libc_init_array+0x38>)
 8000b74:	4c0d      	ldr	r4, [pc, #52]	; (8000bac <__libc_init_array+0x3c>)
 8000b76:	1b64      	subs	r4, r4, r5
 8000b78:	10a4      	asrs	r4, r4, #2
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	42a6      	cmp	r6, r4
 8000b7e:	d109      	bne.n	8000b94 <__libc_init_array+0x24>
 8000b80:	4d0b      	ldr	r5, [pc, #44]	; (8000bb0 <__libc_init_array+0x40>)
 8000b82:	4c0c      	ldr	r4, [pc, #48]	; (8000bb4 <__libc_init_array+0x44>)
 8000b84:	f000 f818 	bl	8000bb8 <_init>
 8000b88:	1b64      	subs	r4, r4, r5
 8000b8a:	10a4      	asrs	r4, r4, #2
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	42a6      	cmp	r6, r4
 8000b90:	d105      	bne.n	8000b9e <__libc_init_array+0x2e>
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b98:	4798      	blx	r3
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7ee      	b.n	8000b7c <__libc_init_array+0xc>
 8000b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba2:	4798      	blx	r3
 8000ba4:	3601      	adds	r6, #1
 8000ba6:	e7f2      	b.n	8000b8e <__libc_init_array+0x1e>
 8000ba8:	08000bd0 	.word	0x08000bd0
 8000bac:	08000bd0 	.word	0x08000bd0
 8000bb0:	08000bd0 	.word	0x08000bd0
 8000bb4:	08000bd4 	.word	0x08000bd4

08000bb8 <_init>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	bf00      	nop
 8000bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bbe:	bc08      	pop	{r3}
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	4770      	bx	lr

08000bc4 <_fini>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr
