/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/main_menu_screen/Main_MenuViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Main_MenuViewBase::Main_MenuViewBase() :
    buttonCallback(this, &Main_MenuViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    image_background.setXY(0, 0);
    image_background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_2_RESIZED_4_ID));
    add(image_background);

    textArea_auto_off.setXY(87, 308);
    textArea_auto_off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_auto_off.setLinespacing(0);
    Unicode::snprintf(textArea_auto_offBuffer, TEXTAREA_AUTO_OFF_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UQO1).getText());
    textArea_auto_off.setWildcard(textArea_auto_offBuffer);
    textArea_auto_off.resizeToCurrentText();
    textArea_auto_off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2SIJ));
    add(textArea_auto_off);

    buttonWithLabel_ProjectInfo.setXY(33, 240);
    buttonWithLabel_ProjectInfo.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_NORMAL_ID));
    buttonWithLabel_ProjectInfo.setLabelText(touchgfx::TypedText(T___SINGLEUSE_WFCV));
    buttonWithLabel_ProjectInfo.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_ProjectInfo.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_ProjectInfo.setAction(buttonCallback);
    add(buttonWithLabel_ProjectInfo);

    buttonWithLabel_Calibration.setXY(33, 170);
    buttonWithLabel_Calibration.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_NORMAL_ID));
    buttonWithLabel_Calibration.setLabelText(touchgfx::TypedText(T___SINGLEUSE_6X9O));
    buttonWithLabel_Calibration.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_Calibration.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_Calibration.setAction(buttonCallback);
    add(buttonWithLabel_Calibration);

    buttonWithLabel_Measure.setXY(33, 100);
    buttonWithLabel_Measure.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_NORMAL_ID));
    buttonWithLabel_Measure.setLabelText(touchgfx::TypedText(T___SINGLEUSE_8673));
    buttonWithLabel_Measure.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_Measure.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_Measure.setAction(buttonCallback);
    add(buttonWithLabel_Measure);

    line2.setPosition(0, 75, 240, 10);
    line2Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    line2.setPainter(line2Painter);
    line2.setStart(5, 5);
    line2.setEnd(235, 5);
    line2.setLineWidth(1);
    line2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(line2);

    textArea_menu.setXY(88, 60);
    textArea_menu.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_menu.setLinespacing(0);
    textArea_menu.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L4HV));
    add(textArea_menu);

    line1.setPosition(0, 50, 240, 10);
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    line1.setPainter(line1Painter);
    line1.setStart(5, 5);
    line1.setEnd(235, 5);
    line1.setLineWidth(1);
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(line1);

    textArea_name.setXY(69, 35);
    textArea_name.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_name.setLinespacing(0);
    textArea_name.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6D7Z));
    add(textArea_name);

    textArea_title.setXY(54, 12);
    textArea_title.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_title.setLinespacing(0);
    textArea_title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9K1W));
    add(textArea_title);

    buttonWithIcon_turn_off.setXY(198, 5);
    buttonWithIcon_turn_off.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_POWER_OFF_36X36_ID), touchgfx::Bitmap(BITMAP_POWER_OFF_36X36_ID));
    buttonWithIcon_turn_off.setIconXY(0, 0);
    buttonWithIcon_turn_off.setAction(buttonCallback);
    add(buttonWithIcon_turn_off);

    buttonWithIcon_settings.setXY(6, 5);
    buttonWithIcon_settings.setBitmaps(touchgfx::Bitmap(BITMAP_SETTINGS_ID), touchgfx::Bitmap(BITMAP_SETTINGS_ID), touchgfx::Bitmap(BITMAP_SETTINGS_ID), touchgfx::Bitmap(BITMAP_SETTINGS_ID));
    buttonWithIcon_settings.setIconXY(0, 0);
    buttonWithIcon_settings.setAction(buttonCallback);
    add(buttonWithIcon_settings);
}

Main_MenuViewBase::~Main_MenuViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Main_MenuViewBase::setupScreen()
{

}

void Main_MenuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel_Measure)
    {
        //Interaction1
        //When buttonWithLabel_Measure clicked change screen to Measurement
        //Go to Measurement with screen transition towards East
        application().gotoMeasurementScreenWipeTransitionEast();
    }
    if (&src == &buttonWithLabel_Calibration)
    {
        //Interaction2
        //When buttonWithLabel_Calibration clicked change screen to Calibration
        //Go to Calibration with screen transition towards East
        application().gotoCalibrationScreenWipeTransitionEast();
    }
    if (&src == &buttonWithLabel_ProjectInfo)
    {
        //Interaction3
        //When buttonWithLabel_ProjectInfo clicked change screen to Project_Info
        //Go to Project_Info with screen transition towards East
        application().gotoProject_InfoScreenWipeTransitionEast();
    }
    if (&src == &buttonWithIcon_turn_off)
    {
        //Interaction4
        //When buttonWithIcon_turn_off clicked execute C++ code
        //Execute C++ code
        #ifndef SIMULATOR
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
        #endif
        //Interaction5
        //When buttonWithIcon_turn_off clicked change screen to Shutting_Off
        //Go to Shutting_Off with no screen transition
        application().gotoShutting_OffScreenNoTransition();
    }
    if (&src == &buttonWithIcon_settings)
    {
        //Interaction6
        //When buttonWithIcon_settings clicked change screen to Settings
        //Go to Settings with screen transition towards East
        application().gotoSettingsScreenWipeTransitionEast();
    }
}
