/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/measurement_single_display_1p_screen/Measurement_Single_Display_1PViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Measurement_Single_Display_1PViewBase::Measurement_Single_Display_1PViewBase() :
    buttonCallback(this, &Measurement_Single_Display_1PViewBase::buttonCallbackHandler),
    frameCountInteraction2Interval(0)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    image_background.setXY(0, 0);
    image_background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_2_RESIZED_4_ID));
    add(image_background);

    buttonWithLabel_return.setXY(33, 256);
    buttonWithLabel_return.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_NORMAL_ID));
    buttonWithLabel_return.setLabelText(touchgfx::TypedText(T___SINGLEUSE_7H5T));
    buttonWithLabel_return.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_return.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    buttonWithLabel_return.setAction(buttonCallback);
    add(buttonWithLabel_return);

    textArea_n90C.setXY(0, 194);
    textArea_n90C.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_n90C.setLinespacing(0);
    textArea_n90C.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VCZH));
    add(textArea_n90C);

    textArea_p90C.setXY(217, 194);
    textArea_p90C.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_p90C.setLinespacing(0);
    textArea_p90C.setTypedText(touchgfx::TypedText(T___SINGLEUSE_B5GD));
    add(textArea_p90C);

    textArea_0C.setXY(113, 85);
    textArea_0C.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_0C.setLinespacing(0);
    textArea_0C.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Q5GP));
    add(textArea_0C);

    SMD1_Current.setPosition(0, 239, 240, 15);
    SMD1_Current.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    SMD1_Current.setLinespacing(0);
    Unicode::snprintf(SMD1_CurrentBuffer, SMD1_CURRENT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LFLK).getText());
    SMD1_Current.setWildcard(SMD1_CurrentBuffer);
    SMD1_Current.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G8ED));
    add(SMD1_Current);

    SMD1_Frequency.setPosition(0, 224, 240, 15);
    SMD1_Frequency.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    SMD1_Frequency.setLinespacing(0);
    Unicode::snprintf(SMD1_FrequencyBuffer, SMD1_FREQUENCY_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9OHS).getText());
    SMD1_Frequency.setWildcard(SMD1_FrequencyBuffer);
    SMD1_Frequency.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PCCW));
    add(SMD1_Frequency);

    SMD1_Distance.setPosition(0, 209, 240, 15);
    SMD1_Distance.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    SMD1_Distance.setLinespacing(0);
    Unicode::snprintf(SMD1_DistanceBuffer, SMD1_DISTANCE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LVUK).getText());
    SMD1_Distance.setWildcard(SMD1_DistanceBuffer);
    SMD1_Distance.setTypedText(touchgfx::TypedText(T_AMD1_DISTANCE));
    add(SMD1_Distance);

    SMD1_Gauge.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_SMALL_BACKGROUNDS_LIGHT_PRECISION_ID));
    SMD1_Gauge.setPosition(28, 103, 184, 106);
    SMD1_Gauge.setCenter(92, 92);
    SMD1_Gauge.setStartEndAngle(-90, 90);
    SMD1_Gauge.setRange(-90, 90);
    SMD1_Gauge.setValue(0);
    SMD1_Gauge.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_SMALL_NEEDLES_ROUGH_ID, 8, 53);
    SMD1_Gauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    SMD1_Gauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(SMD1_Gauge);

    line2.setPosition(0, 75, 240, 10);
    line2Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    line2.setPainter(line2Painter);
    line2.setStart(5, 5);
    line2.setEnd(235, 5);
    line2.setLineWidth(1);
    line2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(line2);

    textArea_menu.setXY(31, 60);
    textArea_menu.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_menu.setLinespacing(0);
    textArea_menu.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M3QF));
    add(textArea_menu);

    line1.setPosition(0, 50, 240, 10);
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    line1.setPainter(line1Painter);
    line1.setStart(5, 5);
    line1.setEnd(235, 5);
    line1.setLineWidth(1);
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(line1);

    textArea_name.setXY(69, 35);
    textArea_name.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_name.setLinespacing(0);
    textArea_name.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9O3K));
    add(textArea_name);

    textArea_titel.setXY(54, 12);
    textArea_titel.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea_titel.setLinespacing(0);
    textArea_titel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T27V));
    add(textArea_titel);
}

Measurement_Single_Display_1PViewBase::~Measurement_Single_Display_1PViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Measurement_Single_Display_1PViewBase::setupScreen()
{

}

void Measurement_Single_Display_1PViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel_return)
    {
        //Interaction1
        //When buttonWithLabel_return clicked change screen to Measurement_Single
        //Go to Measurement_Single with screen transition towards East
        application().gotoMeasurement_SingleScreenWipeTransitionEast();
    }
}

void Measurement_Single_Display_1PViewBase::handleTickEvent()
{
    frameCountInteraction2Interval++;
    if(frameCountInteraction2Interval == TICK_INTERACTION2_INTERVAL)
    {
        //Interaction2
        //When every N tick call virtual function
        //Call single_measure
        single_measure();
        frameCountInteraction2Interval = 0;
    }
}
