/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FRONTENDHEAPBASE_HPP
#define FRONTENDHEAPBASE_HPP

#include <common/Meta.hpp>
#include <common/Partition.hpp>
#include <mvp/MVPHeap.hpp>

#include <touchgfx/transitions/NoTransition.hpp>
#include <touchgfx/transitions/WipeTransition.hpp>

#include <gui/common/FrontendApplication.hpp>
#include <gui/model/Model.hpp>

#include <gui/main_menu_screen/Main_MenuView.hpp>
#include <gui/main_menu_screen/Main_MenuPresenter.hpp>
#include <gui/measurement_screen/MeasurementView.hpp>
#include <gui/measurement_screen/MeasurementPresenter.hpp>
#include <gui/measurement_single_screen/Measurement_SingleView.hpp>
#include <gui/measurement_single_screen/Measurement_SinglePresenter.hpp>
#include <gui/measurement_single_display_1p_screen/Measurement_Single_Display_1PView.hpp>
#include <gui/measurement_single_display_1p_screen/Measurement_Single_Display_1PPresenter.hpp>
#include <gui/measurement_single_display_3p_screen/Measurement_Single_Display_3PView.hpp>
#include <gui/measurement_single_display_3p_screen/Measurement_Single_Display_3PPresenter.hpp>
#include <gui/measurement_accurate_screen/Measurement_AccurateView.hpp>
#include <gui/measurement_accurate_screen/Measurement_AccuratePresenter.hpp>
#include <gui/measurement_accurate_display_screen/Measurement_Accurate_DisplayView.hpp>
#include <gui/measurement_accurate_display_screen/Measurement_Accurate_DisplayPresenter.hpp>
#include <gui/measurement_accurate_display_2_screen/Measurement_Accurate_Display_2View.hpp>
#include <gui/measurement_accurate_display_2_screen/Measurement_Accurate_Display_2Presenter.hpp>
#include <gui/calibration_pad_screen/Calibration_PadView.hpp>
#include <gui/calibration_pad_screen/Calibration_PadPresenter.hpp>
#include <gui/project_info_screen/Project_InfoView.hpp>
#include <gui/project_info_screen/Project_InfoPresenter.hpp>
#include <gui/shutting_off_screen/Shutting_OffView.hpp>
#include <gui/shutting_off_screen/Shutting_OffPresenter.hpp>


/**
 * This class provides the memory that shall be used for memory allocations
 * in the frontend. A single instance of the FrontendHeap is allocated once (in heap
 * memory), and all other frontend objects such as views, presenters and data model are
 * allocated within the scope of this FrontendHeap. As such, the RAM usage of the entire
 * user interface is sizeof(FrontendHeap).
 *
 * @note The FrontendHeap reserves memory for the most memory-consuming presenter and
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
{
public:
    /**
     * A list of all view types. Must end with meta::Nil.
     * @note All view types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< Main_MenuView,
            touchgfx::meta::TypeList< MeasurementView,
            touchgfx::meta::TypeList< Measurement_SingleView,
            touchgfx::meta::TypeList< Measurement_Single_Display_1PView,
            touchgfx::meta::TypeList< Measurement_Single_Display_3PView,
            touchgfx::meta::TypeList< Measurement_AccurateView,
            touchgfx::meta::TypeList< Measurement_Accurate_DisplayView,
            touchgfx::meta::TypeList< Measurement_Accurate_Display_2View,
            touchgfx::meta::TypeList< Calibration_PadView,
            touchgfx::meta::TypeList< Project_InfoView,
            touchgfx::meta::TypeList< Shutting_OffView,
            touchgfx::meta::Nil > > > > > > > > > >
            > GeneratedViewTypes;

    /**
     * Determine (compile time) the View type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedViewTypes >::type MaxGeneratedViewType;

    /**
     * A list of all presenter types. Must end with meta::Nil.
     * @note All presenter types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< Main_MenuPresenter,
            touchgfx::meta::TypeList< MeasurementPresenter,
            touchgfx::meta::TypeList< Measurement_SinglePresenter,
            touchgfx::meta::TypeList< Measurement_Single_Display_1PPresenter,
            touchgfx::meta::TypeList< Measurement_Single_Display_3PPresenter,
            touchgfx::meta::TypeList< Measurement_AccuratePresenter,
            touchgfx::meta::TypeList< Measurement_Accurate_DisplayPresenter,
            touchgfx::meta::TypeList< Measurement_Accurate_Display_2Presenter,
            touchgfx::meta::TypeList< Calibration_PadPresenter,
            touchgfx::meta::TypeList< Project_InfoPresenter,
            touchgfx::meta::TypeList< Shutting_OffPresenter,
            touchgfx::meta::Nil > > > > > > > > > >
            > GeneratedPresenterTypes;

    /**
     * Determine (compile time) the Presenter type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedPresenterTypes >::type MaxGeneratedPresenterType;

    /**
     * A list of all transition types. Must end with meta::Nil.
     * @note All transition types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< touchgfx::NoTransition,
            touchgfx::meta::TypeList< WipeTransition<EAST>,
            touchgfx::meta::TypeList< WipeTransition<WEST>,
            touchgfx::meta::Nil > >
            > GeneratedTransitionTypes;

    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMain_MenuScreenNoTransition();
    }
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
    {

    }

};

#endif // FRONTENDHEAPBASE_HPP
