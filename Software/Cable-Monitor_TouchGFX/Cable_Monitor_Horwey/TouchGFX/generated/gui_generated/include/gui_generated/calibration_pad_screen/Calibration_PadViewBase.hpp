/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CALIBRATION_PADVIEWBASE_HPP
#define CALIBRATION_PADVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/calibration_pad_screen/Calibration_PadPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class Calibration_PadViewBase : public touchgfx::View<Calibration_PadPresenter>
{
public:
    Calibration_PadViewBase();
    virtual ~Calibration_PadViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void function_cali_pad()
    {
        // Override and implement this function in Calibration_Pad
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::TextAreaWithOneWildcard CALIBRATION_PADR_S;
    touchgfx::TextAreaWithOneWildcard CALIBRATION_PADR_F;
    touchgfx::TextAreaWithOneWildcard CALIBRATION_PADL_F;
    touchgfx::TextAreaWithOneWildcard CALIBRATION_PADL_S;
    touchgfx::ButtonWithLabel buttonWithLabel3;
    touchgfx::TextArea textArea3;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;
    touchgfx::TextArea textArea2;
    touchgfx::TextArea textArea1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CALIBRATION_PADR_S_SIZE = 10;
    touchgfx::Unicode::UnicodeChar CALIBRATION_PADR_SBuffer[CALIBRATION_PADR_S_SIZE];
    static const uint16_t CALIBRATION_PADR_F_SIZE = 10;
    touchgfx::Unicode::UnicodeChar CALIBRATION_PADR_FBuffer[CALIBRATION_PADR_F_SIZE];
    static const uint16_t CALIBRATION_PADL_F_SIZE = 10;
    touchgfx::Unicode::UnicodeChar CALIBRATION_PADL_FBuffer[CALIBRATION_PADL_F_SIZE];
    static const uint16_t CALIBRATION_PADL_S_SIZE = 10;
    touchgfx::Unicode::UnicodeChar CALIBRATION_PADL_SBuffer[CALIBRATION_PADL_S_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Calibration_PadViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_INTERACTION2_INTERVAL = 5;
    uint32_t frameCountInteraction2Interval;

};

#endif // CALIBRATION_PADVIEWBASE_HPP
