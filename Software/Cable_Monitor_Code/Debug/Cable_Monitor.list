
Cable_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000170c8  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080210f8  080210f8  000403c8  2**0
                  CONTENTS
  4 .ARM          00000008  080210f8  080210f8  000310f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021100  08021100  000403c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021100  08021100  00031100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021104  08021104  00031104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08021108  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  200003c8  080214d0  000403c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  080214d0  00040c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  000403f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168cb  00000000  00000000  000404a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e9a  00000000  00000000  00056d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0005ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8b  00000000  00000000  0005c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bae  00000000  00000000  0005d103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2b5  00000000  00000000  00083cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfa9f  00000000  00000000  0009df66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ce8  00000000  00000000  0017da08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  001836f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000330c  00000000  00000000  0018378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  00186a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003c8 	.word	0x200003c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a018 	.word	0x0800a018

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003cc 	.word	0x200003cc
 80001ec:	0800a018 	.word	0x0800a018

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	; 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b970 	b.w	80009c0 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	460d      	mov	r5, r1
 8000700:	4604      	mov	r4, r0
 8000702:	460f      	mov	r7, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4694      	mov	ip, r2
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0xe2>
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	b143      	cbz	r3, 8000726 <__udivmoddi4+0x2e>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0220 	rsb	r2, r3, #32
 800071c:	409f      	lsls	r7, r3
 800071e:	fa20 f202 	lsr.w	r2, r0, r2
 8000722:	4317      	orrs	r7, r2
 8000724:	409c      	lsls	r4, r3
 8000726:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000732:	0c22      	lsrs	r2, r4, #16
 8000734:	fb0e 7711 	mls	r7, lr, r1, r7
 8000738:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800073c:	fb01 f005 	mul.w	r0, r1, r5
 8000740:	4290      	cmp	r0, r2
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x62>
 8000744:	eb1c 0202 	adds.w	r2, ip, r2
 8000748:	f101 37ff 	add.w	r7, r1, #4294967295
 800074c:	f080 811c 	bcs.w	8000988 <__udivmoddi4+0x290>
 8000750:	4290      	cmp	r0, r2
 8000752:	f240 8119 	bls.w	8000988 <__udivmoddi4+0x290>
 8000756:	3902      	subs	r1, #2
 8000758:	4462      	add	r2, ip
 800075a:	1a12      	subs	r2, r2, r0
 800075c:	b2a4      	uxth	r4, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	fb00 f505 	mul.w	r5, r0, r5
 800076e:	42a5      	cmp	r5, r4
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x90>
 8000772:	eb1c 0404 	adds.w	r4, ip, r4
 8000776:	f100 32ff 	add.w	r2, r0, #4294967295
 800077a:	f080 8107 	bcs.w	800098c <__udivmoddi4+0x294>
 800077e:	42a5      	cmp	r5, r4
 8000780:	f240 8104 	bls.w	800098c <__udivmoddi4+0x294>
 8000784:	4464      	add	r4, ip
 8000786:	3802      	subs	r0, #2
 8000788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	2100      	movs	r1, #0
 8000790:	b11e      	cbz	r6, 800079a <__udivmoddi4+0xa2>
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2300      	movs	r3, #0
 8000796:	e9c6 4300 	strd	r4, r3, [r6]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0xbc>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80ed 	beq.w	8000982 <__udivmoddi4+0x28a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e9c6 0500 	strd	r0, r5, [r6]
 80007ae:	4608      	mov	r0, r1
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	fab3 f183 	clz	r1, r3
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d149      	bne.n	8000850 <__udivmoddi4+0x158>
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d302      	bcc.n	80007c6 <__udivmoddi4+0xce>
 80007c0:	4282      	cmp	r2, r0
 80007c2:	f200 80f8 	bhi.w	80009b6 <__udivmoddi4+0x2be>
 80007c6:	1a84      	subs	r4, r0, r2
 80007c8:	eb65 0203 	sbc.w	r2, r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	4617      	mov	r7, r2
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d0e2      	beq.n	800079a <__udivmoddi4+0xa2>
 80007d4:	e9c6 4700 	strd	r4, r7, [r6]
 80007d8:	e7df      	b.n	800079a <__udivmoddi4+0xa2>
 80007da:	b902      	cbnz	r2, 80007de <__udivmoddi4+0xe6>
 80007dc:	deff      	udf	#255	; 0xff
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8090 	bne.w	8000908 <__udivmoddi4+0x210>
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2101      	movs	r1, #1
 80007f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007f8:	fb07 2015 	mls	r0, r7, r5, r2
 80007fc:	0c22      	lsrs	r2, r4, #16
 80007fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000802:	fb0e f005 	mul.w	r0, lr, r5
 8000806:	4290      	cmp	r0, r2
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x124>
 800080a:	eb1c 0202 	adds.w	r2, ip, r2
 800080e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4290      	cmp	r0, r2
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2b8>
 800081a:	4645      	mov	r5, r8
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb2 f0f7 	udiv	r0, r2, r7
 8000824:	fb07 2210 	mls	r2, r7, r0, r2
 8000828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x14e>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 32ff 	add.w	r2, r0, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x14c>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2c2>
 8000844:	4610      	mov	r0, r2
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800084e:	e79f      	b.n	8000790 <__udivmoddi4+0x98>
 8000850:	f1c1 0720 	rsb	r7, r1, #32
 8000854:	408b      	lsls	r3, r1
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa05 f401 	lsl.w	r4, r5, r1
 8000862:	fa20 f307 	lsr.w	r3, r0, r7
 8000866:	40fd      	lsrs	r5, r7
 8000868:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086c:	4323      	orrs	r3, r4
 800086e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	fb09 5518 	mls	r5, r9, r8, r5
 800087a:	0c1c      	lsrs	r4, r3, #16
 800087c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000880:	fb08 f50e 	mul.w	r5, r8, lr
 8000884:	42a5      	cmp	r5, r4
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	fa00 f001 	lsl.w	r0, r0, r1
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2b4>
 800089c:	42a5      	cmp	r5, r4
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2b4>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4464      	add	r4, ip
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	b29d      	uxth	r5, r3
 80008ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b0:	fb09 4413 	mls	r4, r9, r3, r4
 80008b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008bc:	45a6      	cmp	lr, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2ac>
 80008ca:	45a6      	cmp	lr, r4
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2ac>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4464      	add	r4, ip
 80008d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d6:	fba3 9502 	umull	r9, r5, r3, r2
 80008da:	eba4 040e 	sub.w	r4, r4, lr
 80008de:	42ac      	cmp	r4, r5
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46ae      	mov	lr, r5
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x29c>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x298>
 80008e8:	b156      	cbz	r6, 8000900 <__udivmoddi4+0x208>
 80008ea:	ebb0 0208 	subs.w	r2, r0, r8
 80008ee:	eb64 040e 	sbc.w	r4, r4, lr
 80008f2:	fa04 f707 	lsl.w	r7, r4, r7
 80008f6:	40ca      	lsrs	r2, r1
 80008f8:	40cc      	lsrs	r4, r1
 80008fa:	4317      	orrs	r7, r2
 80008fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000900:	4618      	mov	r0, r3
 8000902:	2100      	movs	r1, #0
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	f1c3 0120 	rsb	r1, r3, #32
 800090c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000910:	fa20 f201 	lsr.w	r2, r0, r1
 8000914:	fa25 f101 	lsr.w	r1, r5, r1
 8000918:	409d      	lsls	r5, r3
 800091a:	432a      	orrs	r2, r5
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb1 f0f7 	udiv	r0, r1, r7
 8000928:	fb07 1510 	mls	r5, r7, r0, r1
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000932:	fb00 f50e 	mul.w	r5, r0, lr
 8000936:	428d      	cmp	r5, r1
 8000938:	fa04 f403 	lsl.w	r4, r4, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x258>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b0>
 8000948:	428d      	cmp	r5, r1
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b0>
 800094c:	3802      	subs	r0, #2
 800094e:	4461      	add	r1, ip
 8000950:	1b49      	subs	r1, r1, r5
 8000952:	b292      	uxth	r2, r2
 8000954:	fbb1 f5f7 	udiv	r5, r1, r7
 8000958:	fb07 1115 	mls	r1, r7, r5, r1
 800095c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000960:	fb05 f10e 	mul.w	r1, r5, lr
 8000964:	4291      	cmp	r1, r2
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x282>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 8000972:	4291      	cmp	r1, r2
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0xfc>
 8000982:	4631      	mov	r1, r6
 8000984:	4630      	mov	r0, r6
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xa2>
 8000988:	4639      	mov	r1, r7
 800098a:	e6e6      	b.n	800075a <__udivmoddi4+0x62>
 800098c:	4610      	mov	r0, r2
 800098e:	e6fb      	b.n	8000788 <__udivmoddi4+0x90>
 8000990:	4548      	cmp	r0, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb65 0e0c 	sbc.w	lr, r5, ip
 800099c:	3b01      	subs	r3, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f0>
 80009a0:	4645      	mov	r5, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x282>
 80009a4:	462b      	mov	r3, r5
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x258>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009b0:	3d02      	subs	r5, #2
 80009b2:	4462      	add	r2, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x124>
 80009b6:	4608      	mov	r0, r1
 80009b8:	e70a      	b.n	80007d0 <__udivmoddi4+0xd8>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x14e>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <GPIO_Init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
	GPIOE-> OSPEEDR |= 0x400;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);*/

	// Initialize the GPIO pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOE_CLK_ENABLE(); // Enable the GPIO E clock
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <GPIO_Init+0x84>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <GPIO_Init+0x84>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <GPIO_Init+0x84>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

	// Configure PE3 in input mode
	GPIO_InitStruct.Pin = PIN_PE3;
 80009e6:	2308      	movs	r3, #8
 80009e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <GPIO_Init+0x88>)
 80009f8:	f004 f968 	bl	8004ccc <HAL_GPIO_Init>

	// Configure PE5 in output push-pull mode
	GPIO_InitStruct.Pin = PIN_PE5;
 80009fc:	2320      	movs	r3, #32
 80009fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480e      	ldr	r0, [pc, #56]	; (8000a4c <GPIO_Init+0x88>)
 8000a12:	f004 f95b 	bl	8004ccc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2120      	movs	r1, #32
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <GPIO_Init+0x88>)
 8000a1c:	f004 fb1a 	bl	8005054 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 8000a20:	e002      	b.n	8000a28 <GPIO_Init+0x64>
	{
	  HAL_Delay(100);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f003 fbc8 	bl	80041b8 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 8000a28:	2108      	movs	r1, #8
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <GPIO_Init+0x88>)
 8000a2c:	f004 fafa 	bl	8005024 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d0f5      	beq.n	8000a22 <GPIO_Init+0x5e>
	}
	HAL_Delay(3000);
 8000a36:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a3a:	f003 fbbd 	bl	80041b8 <HAL_Delay>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40021000 	.word	0x40021000

08000a50 <calculate_main_frequency>:
 * @param fft_len The length of the FFT.
 * @param output Pointer to the array to store the FFT output.
 * @return The main frequency for the specific channel.
 */

float calculate_main_frequency(uint8_t Channel, uint32_t* samples, uint8_t num_channels, uint32_t buffer_size, uint32_t sampling_freq) {
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4604      	mov	r4, r0
 8000a5a:	f507 7050 	add.w	r0, r7, #832	; 0x340
 8000a5e:	f5a0 704e 	sub.w	r0, r0, #824	; 0x338
 8000a62:	6001      	str	r1, [r0, #0]
 8000a64:	4611      	mov	r1, r2
 8000a66:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8000a6a:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000a74:	f2a3 3331 	subw	r3, r3, #817	; 0x331
 8000a78:	4622      	mov	r2, r4
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000a80:	f2a3 3332 	subw	r3, r3, #818	; 0x332
 8000a84:	460a      	mov	r2, r1
 8000a86:	701a      	strb	r2, [r3, #0]
    // Perform FFT using CMSIS-DSP library
    const uint32_t fft_size = buffer_size;
 8000a88:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000a8c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    float32_t input_samples[64];

    for (uint32_t i = 0; i < fft_size; i++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8000a9c:	e02a      	b.n	8000af4 <calculate_main_frequency+0xa4>
        input_samples[i] = (float32_t)samples[i * num_channels + (Channel - 1)];
 8000a9e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000aa2:	f2a3 3332 	subw	r3, r3, #818	; 0x332
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000aac:	fb03 f202 	mul.w	r2, r3, r2
 8000ab0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000ab4:	f2a3 3331 	subw	r3, r3, #817	; 0x331
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	3b01      	subs	r3, #1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8000ac4:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8000ac8:	6812      	ldr	r2, [r2, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	ee07 3a90 	vmov	s15, r3
 8000ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000ada:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000ade:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < fft_size; i++) {
 8000aea:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000aee:	3301      	adds	r3, #1
 8000af0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8000af4:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000af8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d3ce      	bcc.n	8000a9e <calculate_main_frequency+0x4e>
    }
    
    // remove DC component
    for (uint32_t i = 0; i < fft_size; i++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8000b06:	e01c      	b.n	8000b42 <calculate_main_frequency+0xf2>
        input_samples[i] -= 2047.5;
 8000b08:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000b0c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000b10:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000be8 <calculate_main_frequency+0x198>
 8000b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b24:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000b28:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000b2c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < fft_size; i++) {
 8000b38:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8000b42:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8000b46:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d3dc      	bcc.n	8000b08 <calculate_main_frequency+0xb8>
    }

    float32_t output[128];
    arm_rfft_fast_instance_f32 fft_struct;
    arm_rfft_fast_init_f32(&fft_struct, fft_size);
 8000b4e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 fcac 	bl	80084b8 <arm_rfft_fast_init_f32>

    // Perform the FFT on the input samples
    arm_rfft_fast_f32(&fft_struct, input_samples, output, 0);
 8000b60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000b64:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8000b68:	f107 0018 	add.w	r0, r7, #24
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f007 fd25 	bl	80085bc <arm_rfft_fast_f32>

    // Calculate magnitude of complex numbers
    arm_cmplx_mag_f32(output, output, fft_size / 2);
 8000b72:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b76:	085a      	lsrs	r2, r3, #1
 8000b78:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 f987 	bl	8008e94 <arm_cmplx_mag_f32>

    // Find the index of the maximum magnitude in the first half of the array
    uint32_t maxIndex;
    float32_t maxValue;
    arm_max_f32(output, fft_size / 2, &maxValue, &maxIndex);
 8000b86:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b8a:	0859      	lsrs	r1, r3, #1
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000b98:	f007 fc26 	bl	80083e8 <arm_max_f32>

    // Calculate the main frequency
    float main_frequency = (float)maxIndex * ((float)sampling_freq) / fft_size;
 8000b9c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000ba0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bae:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000bb2:	ee07 3a90 	vmov	s15, r3
 8000bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000bbe:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bce:	edc7 7acc 	vstr	s15, [r7, #816]	; 0x330
    
    return main_frequency;
 8000bd2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000bd6:	ee07 3a90 	vmov	s15, r3
}
 8000bda:	eeb0 0a67 	vmov.f32	s0, s15
 8000bde:	f507 7751 	add.w	r7, r7, #836	; 0x344
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd90      	pop	{r4, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	44fff000 	.word	0x44fff000

08000bec <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000bec:	b598      	push	{r3, r4, r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    HAL_Init();  // Initialize the system
 8000bf0:	f003 fa68 	bl	80040c4 <HAL_Init>

    SystemClock_Config();  // Configure system clocks
 8000bf4:	f000 f850 	bl	8000c98 <SystemClock_Config>

    GPIO_Init();  // Init PE5 and set it to HIGH
 8000bf8:	f7ff fee4 	bl	80009c4 <GPIO_Init>

#ifdef FLIPPED_LCD
    BSP_LCD_Init_Flipped();  // Initialize the LCD for flipped orientation
#else
    BSP_LCD_Init();  // Initialize the LCD display
 8000bfc:	f002 f9b8 	bl	8002f70 <BSP_LCD_Init>
#endif
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000c00:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000c04:	2001      	movs	r0, #1
 8000c06:	f002 fa35 	bl	8003074 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f002 fa96 	bl	800313c <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 8000c10:	f002 fd66 	bl	80036e0 <BSP_LCD_DisplayOn>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f002 faec 	bl	80031f4 <BSP_LCD_Clear>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());  // Touchscreen
 8000c1c:	f002 fa12 	bl	8003044 <BSP_LCD_GetXSize>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29c      	uxth	r4, r3
 8000c24:	f002 fa1a 	bl	800305c <BSP_LCD_GetYSize>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f003 f944 	bl	8003ebc <BSP_TS_Init>
    /* Uncomment next line to enable touchscreen interrupt */
    // BSP_TS_ITConfig();					// Enable
    // Touchscreen interrupt

    PB_init();       // Initialize the user pushbutton
 8000c34:	f001 f898 	bl	8001d68 <PB_init>
    PB_enableIRQ();  // Enable interrupt on user pushbutton
 8000c38:	f001 f8b6 	bl	8001da8 <PB_enableIRQ>

    BSP_LED_Init(LED3);  // Toggles in while loop
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f001 fdb3 	bl	80027a8 <BSP_LED_Init>
    BSP_LED_Init(LED4);  // Is toggled by user button
 8000c42:	2001      	movs	r0, #1
 8000c44:	f001 fdb0 	bl	80027a8 <BSP_LED_Init>

    // MENU_hint();						// Show hint at
    // startup MENU_draw(0,3);						// Draw
    // the menu
    DISP_info_screen(MENU_HOME);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 fe17 	bl	800187c <DISP_info_screen>

    gyro_disable();  // Disable gyro, use those analog inputs
 8000c4e:	f000 f8a1 	bl	8000d94 <gyro_disable>

    MEAS_GPIO_analog_init();         // Configure GPIOs in analog mode
 8000c52:	f000 f989 	bl	8000f68 <MEAS_GPIO_analog_init>
    MEAS_timer_init();               // Configure the timer
 8000c56:	f000 fa09 	bl	800106c <MEAS_timer_init>
    OUTPUT_MEAS_timer_init();        // Configure the timer for output
 8000c5a:	f000 fb5b 	bl	8001314 <OUTPUT_MEAS_timer_init>
                                     /* Clear the display */
    BSP_LCD_Clear(LCD_COLOR_BLACK);  // Clear display
 8000c5e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c62:	f002 fac7 	bl	80031f4 <BSP_LCD_Clear>

    /* Infinite while loop */
    while (1) {                // Infinitely loop in main function
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 fdf2 	bl	8002850 <BSP_LED_Toggle>
                        BSP_LED_Off(LED4);
                }
        }*/

        // Check if Device should power off (PE3)
        if (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET) {
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <main+0xa8>)
 8000c70:	f004 f9d8 	bl	8005024 <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d108      	bne.n	8000c8c <main+0xa0>
            // Set PE5 low
            HAL_GPIO_WritePin(GPIOE, PIN_PE5, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <main+0xa8>)
 8000c80:	f004 f9e8 	bl	8005054 <HAL_GPIO_WritePin>
            // Delay for 3 seconds
            HAL_Delay(3000);
 8000c84:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c88:	f003 fa96 	bl	80041b8 <HAL_Delay>

        // DISP_info_screen();

        // MENU_main();					// Check for user input

        HAL_Delay(100);  // Wait or sleep
 8000c8c:	2064      	movs	r0, #100	; 0x64
 8000c8e:	f003 fa93 	bl	80041b8 <HAL_Delay>
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 8000c92:	e7e8      	b.n	8000c66 <main+0x7a>
 8000c94:	40021000 	.word	0x40021000

08000c98 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0a0      	sub	sp, #128	; 0x80
 8000c9c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ca2:	2230      	movs	r2, #48	; 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f008 fd02 	bl	80096b0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2230      	movs	r2, #48	; 0x30
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f008 fcf3 	bl	80096b0 <memset>
    /* Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <SystemClock_Config+0xf0>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <SystemClock_Config+0xf0>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <SystemClock_Config+0xf0>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <SystemClock_Config+0xf4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <SystemClock_Config+0xf4>)
 8000cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <SystemClock_Config+0xf4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
    /* Initialize High Speed External Oscillator and PLL circuits */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d14:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000d16:	2308      	movs	r3, #8
 8000d18:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000d1a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d1e:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d24:	2307      	movs	r3, #7
 8000d26:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fcad 	bl	800668c <HAL_RCC_OscConfig>
    /* Initialize gates and clock dividers for CPU, AHB and APB busses */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000d32:	230f      	movs	r3, #15
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000d4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d4e:	2105      	movs	r1, #5
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 ff09 	bl	8006b68 <HAL_RCC_ClockConfig>
    /* Initialize PLL and clock divider for the LCD */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d56:	2308      	movs	r3, #8
 8000d58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f006 f907 	bl	8006f80 <HAL_RCCEx_PeriphCLKConfig>
    /* Set clock prescaler for ADCs */
    ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <SystemClock_Config+0xf8>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <SystemClock_Config+0xf8>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	6053      	str	r3, [r2, #4]
}
 8000d7e:	bf00      	nop
 8000d80:	3780      	adds	r7, #128	; 0x80
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000
 8000d90:	40012300 	.word	0x40012300

08000d94 <gyro_disable>:
 * which is done with the code below.
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <gyro_disable+0xb4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <gyro_disable+0xb4>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <gyro_disable+0xb4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
    /* Disable PC1 and PF8 first */
    GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;        // Reset mode for PC1
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <gyro_disable+0xb8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <gyro_disable+0xb8>)
 8000dbc:	f023 030c 	bic.w	r3, r3, #12
 8000dc0:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;  // Set PC1 as output
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <gyro_disable+0xb8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <gyro_disable+0xb8>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6013      	str	r3, [r2, #0]
    GPIOC->BSRR |= GPIO_BSRR_BR1;  // Set GYRO (CS) to 0 for a short time
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <gyro_disable+0xb8>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <gyro_disable+0xb8>)
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	6193      	str	r3, [r2, #24]
    HAL_Delay(10);                 // Wait some time
 8000dda:	200a      	movs	r0, #10
 8000ddc:	f003 f9ec 	bl	80041b8 <HAL_Delay>
    GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;  // Analog PC1 = ADC123_IN11
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <gyro_disable+0xb8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <gyro_disable+0xb8>)
 8000de6:	f043 030c 	orr.w	r3, r3, #12
 8000dea:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <gyro_disable+0xb4>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <gyro_disable+0xb4>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <gyro_disable+0xb4>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]
    GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;  // Reset speed of PF8
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <gyro_disable+0xbc>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <gyro_disable+0xbc>)
 8000e0e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e12:	6093      	str	r3, [r2, #8]
    GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;  // Reset alternate function of PF8
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <gyro_disable+0xbc>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <gyro_disable+0xbc>)
 8000e1a:	f023 030f 	bic.w	r3, r3, #15
 8000e1e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;   // Reset pulup/down of PF8
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <gyro_disable+0xbc>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <gyro_disable+0xbc>)
 8000e26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e2a:	60d3      	str	r3, [r2, #12]
    HAL_Delay(10);                           // Wait some time
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f003 f9c3 	bl	80041b8 <HAL_Delay>
    GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos;  // Analog mode PF8 = ADC3_IN4
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <gyro_disable+0xbc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <gyro_disable+0xbc>)
 8000e38:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40021400 	.word	0x40021400

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db12      	blt.n	8000ec8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	490a      	ldr	r1, [pc, #40]	; (8000ed4 <__NVIC_DisableIRQ+0x44>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	3320      	adds	r3, #32
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebc:	f3bf 8f4f 	dsb	sy
}
 8000ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec2:	f3bf 8f6f 	isb	sy
}
 8000ec6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0c      	blt.n	8000f04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_ClearPendingIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	3360      	adds	r3, #96	; 0x60
 8000f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <MEAS_GPIO_analog_init>:
 * - ADC3_IN4 = GPIO PF6 (Pad left)
 * - ADC123_IN13 = GPIO PC3 (Pad right)
 * - ADC3_IN6 = GPIO PF8 (Hall sensor Left)
 * - ADC123_IN11 = GPIO PC1 (Hall sensor Right)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MEAS_GPIO_analog_init+0x7c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <MEAS_GPIO_analog_init+0x7c>)
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MEAS_GPIO_analog_init+0x7c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0320 	and.w	r3, r3, #32
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);  // Analog PF6 = ADC3_IN4
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MEAS_GPIO_analog_init+0x80>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <MEAS_GPIO_analog_init+0x80>)
 8000f90:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f94:	6013      	str	r3, [r2, #0]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER8_Pos);  // Analog PF8 = ADC3_IN6
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MEAS_GPIO_analog_init+0x80>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <MEAS_GPIO_analog_init+0x80>)
 8000f9c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000fa0:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MEAS_GPIO_analog_init+0x7c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <MEAS_GPIO_analog_init+0x7c>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MEAS_GPIO_analog_init+0x7c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);  // Analog PC3 = ADC3_IN13
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MEAS_GPIO_analog_init+0x84>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <MEAS_GPIO_analog_init+0x84>)
 8000fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fc8:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER1_Pos);  // Analog PC1 = ADC3_IN11
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MEAS_GPIO_analog_init+0x84>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <MEAS_GPIO_analog_init+0x84>)
 8000fd0:	f043 030c 	orr.w	r3, r3, #12
 8000fd4:	6013      	str	r3, [r2, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40020800 	.word	0x40020800

08000ff0 <MEAS_ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void MEAS_ADC_reset(void) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
    RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;   // Reset ADCs
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MEAS_ADC_reset+0x38>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <MEAS_ADC_reset+0x38>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6253      	str	r3, [r2, #36]	; 0x24
    RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;  // Release reset of ADCs
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MEAS_ADC_reset+0x38>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <MEAS_ADC_reset+0x38>)
 8001006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800100a:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->CR1 &= ~TIM_CR1_CEN;              // Disable timer
 800100c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <MEAS_Buffer_reset>:
/** ***************************************************************************
 * @brief Resets the buffer and the flag (data ready for new measurement)
 * @param[in] channels	input channels
 * @param[in] buffer	buffer pointer
 *****************************************************************************/
static void MEAS_Buffer_reset(uint8_t channels, uint32_t* buffer) {
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
    /* Clear buffer and flag */
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e008      	b.n	8001050 <MEAS_Buffer_reset+0x24>
        buffer[i] = 0;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	4413      	add	r3, r2
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	019b      	lsls	r3, r3, #6
 8001054:	461a      	mov	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4293      	cmp	r3, r2
 800105a:	d3f0      	bcc.n	800103e <MEAS_Buffer_reset+0x12>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <MEAS_timer_init>:
/** ***************************************************************************
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();  // Enable Clock for TIM2
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MEAS_timer_init+0x50>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <MEAS_timer_init+0x50>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MEAS_timer_init+0x50>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
    TIM2->PSC = TIM_PRESCALE;     // Prescaler for clock freq. = 1MHz
 800108e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001092:	f243 3244 	movw	r2, #13124	; 0x3344
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = TIM_TOP;          // Auto reload = counter top value
 8001098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109c:	2209      	movs	r2, #9
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR2 |= TIM_CR2_MMS_1;   // TRGO on update
 80010a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	6053      	str	r3, [r2, #4]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40023800 	.word	0x40023800

080010c0 <MEAS_ADC3_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC3_IN4 = GPIO PF6 (Pad Left), ADC3_IN13 = GPIO PC3
 *(Pad Right), ADC_IN6 = GPIO PF8 (HS-Left), ADC3_IN11 = GPIO PC1 (HS-Right)
 *****************************************************************************/
void MEAS_ADC3_scan_init(void) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
    __HAL_RCC_ADC3_CLK_ENABLE();               // Enable Clock for ADC3
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <MEAS_ADC3_scan_init+0x138>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <MEAS_ADC3_scan_init+0x138>)
 80010d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b48      	ldr	r3, [pc, #288]	; (80011f8 <MEAS_ADC3_scan_init+0x138>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
    ADC3->SQR1 |= (3UL << ADC_SQR1_L_Pos);     // Convert 4 inputs (4-1)
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	4a45      	ldr	r2, [pc, #276]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 80010e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80010ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);   // Input 4 = first conversion
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (13UL << ADC_SQR3_SQ2_Pos);  // Input 13 = second conversion
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 80010fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fe:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001100:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 8001104:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (6UL << ADC_SQR3_SQ3_Pos);   // Input 6 = third conversion
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	4a3c      	ldr	r2, [pc, #240]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 800110c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8001110:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (11UL << ADC_SQR3_SQ4_Pos);  // Input 11 = fourth conversion
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	4a39      	ldr	r2, [pc, #228]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001118:	f443 23b0 	orr.w	r3, r3, #360448	; 0x58000
 800111c:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->CR1 |= ADC_CR1_SCAN;                 // Enable scan mode
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a36      	ldr	r2, [pc, #216]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6053      	str	r3, [r2, #4]
    ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);   // En. ext. trigger on rising e.
 800112a:	4b34      	ldr	r3, [pc, #208]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	4a33      	ldr	r2, [pc, #204]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);  // Timer 2 TRGO event
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	4a30      	ldr	r2, [pc, #192]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 800113c:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8001140:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= ADC_CR2_DMA;                  // Enable DMA mode
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <MEAS_ADC3_scan_init+0x13c>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6093      	str	r3, [r2, #8]
    __HAL_RCC_DMA2_CLK_ENABLE();               // Enable Clock for DMA2
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MEAS_ADC3_scan_init+0x138>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <MEAS_ADC3_scan_init+0x138>)
 8001158:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MEAS_ADC3_scan_init+0x138>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
    DMA2_Stream1->CR &= ~DMA_SxCR_EN;          // Disable the DMA stream 1
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 8001176:	bf00      	nop
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <MEAS_ADC3_scan_init+0xb8>
        ;
    }                                 // Wait for DMA to finish
    DMA2->LIFCR |= DMA_LIFCR_CTCIF1;  // Clear transfer complete interrupt fl.
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MEAS_ADC3_scan_init+0x144>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MEAS_ADC3_scan_init+0x144>)
 800118a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800118e:	6093      	str	r3, [r2, #8]
    DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);  // Select channel 2
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 8001196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800119a:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PL_1;                // Priority high
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a17      	ldr	r2, [pc, #92]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a6:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;  // Memory data size = 32 bit
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b2:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;  // Peripheral data size = 32 bit
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011be:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MINC;     // Increment memory address pointer
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_TCIE;     // Transfer complete interrupt enable
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->NDTR =
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	605a      	str	r2, [r3, #4]
        INPUT_COUNT * ADC_NUMS;  // Number of data items to transfer
    DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;     // Peripheral register address
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <MEAS_ADC3_scan_init+0x148>)
 80011e4:	609a      	str	r2, [r3, #8]
    DMA2_Stream1->M0AR = (uint32_t)ADC_samples;  // Buffer memory loc. address
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MEAS_ADC3_scan_init+0x140>)
 80011e8:	4a08      	ldr	r2, [pc, #32]	; (800120c <MEAS_ADC3_scan_init+0x14c>)
 80011ea:	60da      	str	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40012200 	.word	0x40012200
 8001200:	40026428 	.word	0x40026428
 8001204:	40026400 	.word	0x40026400
 8001208:	4001224c 	.word	0x4001224c
 800120c:	200003e8 	.word	0x200003e8

08001210 <MEAS_ADC3_scan_start>:

/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void MEAS_ADC3_scan_start(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
    DMA2_Stream1->CR |= DMA_SxCR_EN;          // Enable DMA
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MEAS_ADC3_scan_start+0x3c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <MEAS_ADC3_scan_start+0x3c>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 8001220:	2039      	movs	r0, #57	; 0x39
 8001222:	f7ff fe59 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream1_IRQn);  // Enable DMA interrupt in the NVIC
 8001226:	2039      	movs	r0, #57	; 0x39
 8001228:	f7ff fe14 	bl	8000e54 <__NVIC_EnableIRQ>
    ADC3->CR2 |= ADC_CR2_ADON;          // Enable ADC3
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MEAS_ADC3_scan_start+0x40>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <MEAS_ADC3_scan_start+0x40>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6093      	str	r3, [r2, #8]
    TIM2->CR1 |= TIM_CR1_CEN;           // Enable timer
 8001238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40026428 	.word	0x40026428
 8001250:	40012200 	.word	0x40012200

08001254 <DMA2_Stream1_IRQHandler>:
 * @brief Interrupt handler for DMA2 Stream1
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF1) {  // Stream1 transfer compl. interrupt f.
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <DMA2_Stream1_IRQHandler+0x78>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001260:	2b00      	cmp	r3, #0
 8001262:	d031      	beq.n	80012c8 <DMA2_Stream1_IRQHandler+0x74>
        NVIC_DisableIRQ(
 8001264:	2039      	movs	r0, #57	; 0x39
 8001266:	f7ff fe13 	bl	8000e90 <__NVIC_DisableIRQ>
            DMA2_Stream1_IRQn);  // Disable DMA interrupt in the NVIC
        NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 800126a:	2039      	movs	r0, #57	; 0x39
 800126c:	f7ff fe34 	bl	8000ed8 <__NVIC_ClearPendingIRQ>
        DMA2_Stream1->CR &= ~DMA_SxCR_EN;         // Disable the DMA
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <DMA2_Stream1_IRQHandler+0x7c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <DMA2_Stream1_IRQHandler+0x7c>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]
        while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 800127c:	bf00      	nop
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <DMA2_Stream1_IRQHandler+0x7c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <DMA2_Stream1_IRQHandler+0x2a>
            ;
        }  // Wait for DMA to finish
        DMA2->LIFCR |=
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <DMA2_Stream1_IRQHandler+0x78>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <DMA2_Stream1_IRQHandler+0x78>)
 8001290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001294:	6093      	str	r3, [r2, #8]
            DMA_LIFCR_CTCIF1;        // Clear transfer complete interrupt fl.
        TIM2->CR1 &= ~TIM_CR1_CEN;   // Disable timer
 8001296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]
        ADC3->CR2 &= ~ADC_CR2_ADON;  // Disable ADC3
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <DMA2_Stream1_IRQHandler+0x80>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <DMA2_Stream1_IRQHandler+0x80>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6093      	str	r3, [r2, #8]
        ADC3->CR2 &= ~ADC_CR2_DMA;   // Disable DMA mode
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <DMA2_Stream1_IRQHandler+0x80>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <DMA2_Stream1_IRQHandler+0x80>)
 80012b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012bc:	6093      	str	r3, [r2, #8]
        // copy data from DMA buffer to ADC_samples
        MEAS_ADC_reset();
 80012be:	f7ff fe97 	bl	8000ff0 <MEAS_ADC_reset>
        MEAS_data_ready = true;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <DMA2_Stream1_IRQHandler+0x84>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
    }
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40026400 	.word	0x40026400
 80012d0:	40026428 	.word	0x40026428
 80012d4:	40012200 	.word	0x40012200
 80012d8:	200003e4 	.word	0x200003e4

080012dc <MEAS_start_measure>:
 * @return ADC samples pointer
 *
 * @note The result is stored alternated e.g. every 4th is together.
 *****************************************************************************/
// Start the measurement procedure
uint32_t* MEAS_start_measure(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
    MEAS_Buffer_reset(INPUT_COUNT, ADC_samples);
 80012e0:	490a      	ldr	r1, [pc, #40]	; (800130c <MEAS_start_measure+0x30>)
 80012e2:	2004      	movs	r0, #4
 80012e4:	f7ff fea2 	bl	800102c <MEAS_Buffer_reset>
    MEAS_ADC3_scan_init();
 80012e8:	f7ff feea 	bl	80010c0 <MEAS_ADC3_scan_init>
    MEAS_ADC3_scan_start();
 80012ec:	f7ff ff90 	bl	8001210 <MEAS_ADC3_scan_start>
    while (!MEAS_data_ready)
 80012f0:	bf00      	nop
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MEAS_start_measure+0x34>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f8      	bne.n	80012f2 <MEAS_start_measure+0x16>
        ;  // Wait for data
    MEAS_data_ready = false;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <MEAS_start_measure+0x34>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]

    return ADC_samples;
 8001306:	4b01      	ldr	r3, [pc, #4]	; (800130c <MEAS_start_measure+0x30>)
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200003e8 	.word	0x200003e8
 8001310:	200003e4 	.word	0x200003e4

08001314 <OUTPUT_MEAS_timer_init>:
 * This function enables the clock for timer 3, sets the prescaler to 16000,
 * sets the auto reload register to 100, enables the update interrupt,
 * enables timer 3, and enables the timer 3 interrupt.
 * This timer is used to trigger the data output to the display every 800ms.
 */
void OUTPUT_MEAS_timer_init(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // enable clock for timer 3
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <OUTPUT_MEAS_timer_init+0x4c>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a10      	ldr	r2, [pc, #64]	; (8001360 <OUTPUT_MEAS_timer_init+0x4c>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
    TIM3->PSC = 16000 - 1;               // set prescaler to 16000
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <OUTPUT_MEAS_timer_init+0x50>)
 8001326:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 800 - 1;                 // set auto reload register to 800
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <OUTPUT_MEAS_timer_init+0x50>)
 800132e:	f240 321f 	movw	r2, #799	; 0x31f
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->DIER |= TIM_DIER_UIE;          // enable update interrupt
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <OUTPUT_MEAS_timer_init+0x50>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <OUTPUT_MEAS_timer_init+0x50>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN;            // enable timer 3
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <OUTPUT_MEAS_timer_init+0x50>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <OUTPUT_MEAS_timer_init+0x50>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM3_IRQn, 3);
 800134c:	2103      	movs	r1, #3
 800134e:	201d      	movs	r0, #29
 8001350:	f7ff fde0 	bl	8000f14 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);  // enable timer 3 interrupt
 8001354:	201d      	movs	r0, #29
 8001356:	f7ff fd7d 	bl	8000e54 <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40000400 	.word	0x40000400

08001368 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/

void MEAS_show_data(void) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b09b      	sub	sp, #108	; 0x6c
 800136c:	af02      	add	r7, sp, #8
    const uint8_t ADC_RES = 12;
 800136e:	230c      	movs	r3, #12
 8001370:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    // Define Samples variable and start measurement
    uint32_t* Samples = MEAS_start_measure();
 8001374:	f7ff ffb2 	bl	80012dc <MEAS_start_measure>
 8001378:	6338      	str	r0, [r7, #48]	; 0x30
    /* Calculate the factor to scale the values to the display */
    const uint32_t Y_OFFSET = 100;
 800137a:	2364      	movs	r3, #100	; 0x64
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t X_SIZE = 240;
 800137e:	23f0      	movs	r3, #240	; 0xf0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t f = (1 << ADC_RES) / Y_OFFSET + 1;  // Scaling factor
 8001382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001386:	2201      	movs	r2, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	461a      	mov	r2, r3
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	fbb2 f3f3 	udiv	r3, r2, r3
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t data;
    uint32_t data_last;
    /* Clear the display */

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001398:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800139c:	f001 fede 	bl	800315c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	2000      	movs	r0, #0
 80013b0:	f002 f914 	bl	80035dc <BSP_LCD_FillRect>
    /* Write first 4 samples as numbers */

    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80013b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013b8:	f001 fee8 	bl	800318c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f001 fecc 	bl	800315c <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font12);
 80013c4:	489f      	ldr	r0, [pc, #636]	; (8001644 <MEAS_show_data+0x2dc>)
 80013c6:	f001 fefb 	bl	80031c0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"ADC Resolution: 12 bit",
 80013ca:	2301      	movs	r3, #1
 80013cc:	4a9e      	ldr	r2, [pc, #632]	; (8001648 <MEAS_show_data+0x2e0>)
 80013ce:	2150      	movs	r1, #80	; 0x50
 80013d0:	2000      	movs	r0, #0
 80013d2:	f001 ff7b 	bl	80032cc <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Peak Values and frequency", CENTER_MODE);
 80013d6:	2301      	movs	r3, #1
 80013d8:	4a9c      	ldr	r2, [pc, #624]	; (800164c <MEAS_show_data+0x2e4>)
 80013da:	2164      	movs	r1, #100	; 0x64
 80013dc:	2000      	movs	r0, #0
 80013de:	f001 ff75 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 120, (uint8_t*)"of Channels 1 to 4:", CENTER_MODE);
 80013e2:	2301      	movs	r3, #1
 80013e4:	4a9a      	ldr	r2, [pc, #616]	; (8001650 <MEAS_show_data+0x2e8>)
 80013e6:	2178      	movs	r1, #120	; 0x78
 80013e8:	2000      	movs	r0, #0
 80013ea:	f001 ff6f 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 260, (uint8_t*)"(without VGND -> peak - 2048)",
 80013ee:	2301      	movs	r3, #1
 80013f0:	4a98      	ldr	r2, [pc, #608]	; (8001654 <MEAS_show_data+0x2ec>)
 80013f2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80013f6:	2000      	movs	r0, #0
 80013f8:	f001 ff68 	bl	80032cc <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font20);
 80013fc:	4896      	ldr	r0, [pc, #600]	; (8001658 <MEAS_show_data+0x2f0>)
 80013fe:	f001 fedf 	bl	80031c0 <BSP_LCD_SetFont>
    char text[32];
	// Calculate the frequency of channel 1
	static float frequency = 0;
	frequency = calculate_main_frequency(1, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 8001402:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	2204      	movs	r2, #4
 800140c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fb1e 	bl	8000a50 <calculate_main_frequency>
 8001414:	eef0 7a40 	vmov.f32	s15, s0
 8001418:	4b90      	ldr	r3, [pc, #576]	; (800165c <MEAS_show_data+0x2f4>)
 800141a:	edc3 7a00 	vstr	s15, [r3]
    //uint32_t frequency = frequency_calculation(0, Samples);
    // Calculate the peak value of channel 1
    uint32_t peak = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	657b      	str	r3, [r7, #84]	; 0x54
 8001426:	e010      	b.n	800144a <MEAS_show_data+0xe2>
        if (Samples[4 * i] > peak) {
 8001428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800142e:	4413      	add	r3, r2
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001434:	429a      	cmp	r2, r3
 8001436:	d205      	bcs.n	8001444 <MEAS_show_data+0xdc>
            peak = Samples[4 * i];
 8001438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001446:	3301      	adds	r3, #1
 8001448:	657b      	str	r3, [r7, #84]	; 0x54
 800144a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800144c:	2b3f      	cmp	r3, #63	; 0x3f
 800144e:	d9eb      	bls.n	8001428 <MEAS_show_data+0xc0>
        }
    }
    peak -= 2048;
 8001450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001452:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001456:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8001458:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800145c:	f001 fe7e 	bl	800315c <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C1:%4d f:%3d HZ", (int)(peak), (int)(frequency));
 8001460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001462:	4a7e      	ldr	r2, [pc, #504]	; (800165c <MEAS_show_data+0x2f4>)
 8001464:	edd2 7a00 	vldr	s15, [r2]
 8001468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146c:	ee17 2a90 	vmov	r2, s15
 8001470:	4638      	mov	r0, r7
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	4a7a      	ldr	r2, [pc, #488]	; (8001660 <MEAS_show_data+0x2f8>)
 8001476:	2128      	movs	r1, #40	; 0x28
 8001478:	f008 f8e6 	bl	8009648 <sniprintf>
    // snprintf(text, 15, "C1 %4d", (int)(Samples[0]));
    BSP_LCD_DisplayStringAt(0, 140, (uint8_t*)text, LEFT_MODE);
 800147c:	463a      	mov	r2, r7
 800147e:	2303      	movs	r3, #3
 8001480:	218c      	movs	r1, #140	; 0x8c
 8001482:	2000      	movs	r0, #0
 8001484:	f001 ff22 	bl	80032cc <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 2
	frequency = calculate_main_frequency(2, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 8001488:	f44f 7320 	mov.w	r3, #640	; 0x280
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2340      	movs	r3, #64	; 0x40
 8001490:	2204      	movs	r2, #4
 8001492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001494:	2002      	movs	r0, #2
 8001496:	f7ff fadb 	bl	8000a50 <calculate_main_frequency>
 800149a:	eef0 7a40 	vmov.f32	s15, s0
 800149e:	4b6f      	ldr	r3, [pc, #444]	; (800165c <MEAS_show_data+0x2f4>)
 80014a0:	edc3 7a00 	vstr	s15, [r3]
    //frequency = frequency_calculation(1, Samples);
    // Calculate the peak value of channel 2
    peak = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	653b      	str	r3, [r7, #80]	; 0x50
 80014ac:	e012      	b.n	80014d4 <MEAS_show_data+0x16c>
        if (Samples[4 * i + 1] > peak) {
 80014ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	3304      	adds	r3, #4
 80014b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014b6:	4413      	add	r3, r2
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014bc:	429a      	cmp	r2, r3
 80014be:	d206      	bcs.n	80014ce <MEAS_show_data+0x166>
            peak = Samples[4 * i + 1];
 80014c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	3304      	adds	r3, #4
 80014c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80014ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014d0:	3301      	adds	r3, #1
 80014d2:	653b      	str	r3, [r7, #80]	; 0x50
 80014d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014d6:	2b3f      	cmp	r3, #63	; 0x3f
 80014d8:	d9e9      	bls.n	80014ae <MEAS_show_data+0x146>
        }
    }
    peak -= 2048;
 80014da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014dc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014e0:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80014e2:	4860      	ldr	r0, [pc, #384]	; (8001664 <MEAS_show_data+0x2fc>)
 80014e4:	f001 fe3a 	bl	800315c <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C2:%4d f:%3d HZ", (int)(peak), (int)(frequency));
 80014e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <MEAS_show_data+0x2f4>)
 80014ec:	edd2 7a00 	vldr	s15, [r2]
 80014f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f4:	ee17 2a90 	vmov	r2, s15
 80014f8:	4638      	mov	r0, r7
 80014fa:	9200      	str	r2, [sp, #0]
 80014fc:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <MEAS_show_data+0x300>)
 80014fe:	2128      	movs	r1, #40	; 0x28
 8001500:	f008 f8a2 	bl	8009648 <sniprintf>
    // snprintf(text, 15, "C2 %4d", (int)(Samples[1]));
    BSP_LCD_DisplayStringAt(0, 170, (uint8_t*)text, LEFT_MODE);
 8001504:	463a      	mov	r2, r7
 8001506:	2303      	movs	r3, #3
 8001508:	21aa      	movs	r1, #170	; 0xaa
 800150a:	2000      	movs	r0, #0
 800150c:	f001 fede 	bl	80032cc <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 3
	frequency = calculate_main_frequency(3, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 8001510:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	2204      	movs	r2, #4
 800151a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800151c:	2003      	movs	r0, #3
 800151e:	f7ff fa97 	bl	8000a50 <calculate_main_frequency>
 8001522:	eef0 7a40 	vmov.f32	s15, s0
 8001526:	4b4d      	ldr	r3, [pc, #308]	; (800165c <MEAS_show_data+0x2f4>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
    //frequency = frequency_calculation(2, Samples);
    // Calculate the peak value of channel 3
    peak = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001534:	e012      	b.n	800155c <MEAS_show_data+0x1f4>
        if (Samples[4 * i + 2] > peak) {
 8001536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	3308      	adds	r3, #8
 800153c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800153e:	4413      	add	r3, r2
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001544:	429a      	cmp	r2, r3
 8001546:	d206      	bcs.n	8001556 <MEAS_show_data+0x1ee>
            peak = Samples[4 * i + 2];
 8001548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	3308      	adds	r3, #8
 800154e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001558:	3301      	adds	r3, #1
 800155a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800155c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800155e:	2b3f      	cmp	r3, #63	; 0x3f
 8001560:	d9e9      	bls.n	8001536 <MEAS_show_data+0x1ce>
        }
    }
    peak -= 2048;
 8001562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001564:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001568:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800156a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800156e:	f001 fdf5 	bl	800315c <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C3:%4d f:%3d HZ ", (int)(peak), (int)(frequency));
 8001572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001574:	4a39      	ldr	r2, [pc, #228]	; (800165c <MEAS_show_data+0x2f4>)
 8001576:	edd2 7a00 	vldr	s15, [r2]
 800157a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157e:	ee17 2a90 	vmov	r2, s15
 8001582:	4638      	mov	r0, r7
 8001584:	9200      	str	r2, [sp, #0]
 8001586:	4a39      	ldr	r2, [pc, #228]	; (800166c <MEAS_show_data+0x304>)
 8001588:	2128      	movs	r1, #40	; 0x28
 800158a:	f008 f85d 	bl	8009648 <sniprintf>
    // snprintf(text, 15, "C3 %4d", (int)(Samples[2]));
    BSP_LCD_DisplayStringAt(0, 200, (uint8_t*)text, LEFT_MODE);
 800158e:	463a      	mov	r2, r7
 8001590:	2303      	movs	r3, #3
 8001592:	21c8      	movs	r1, #200	; 0xc8
 8001594:	2000      	movs	r0, #0
 8001596:	f001 fe99 	bl	80032cc <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 4
	frequency = calculate_main_frequency(4, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 800159a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2340      	movs	r3, #64	; 0x40
 80015a2:	2204      	movs	r2, #4
 80015a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015a6:	2004      	movs	r0, #4
 80015a8:	f7ff fa52 	bl	8000a50 <calculate_main_frequency>
 80015ac:	eef0 7a40 	vmov.f32	s15, s0
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <MEAS_show_data+0x2f4>)
 80015b2:	edc3 7a00 	vstr	s15, [r3]
    //frequency = frequency_calculation(3, Samples);
    // Calculate the peak value of channel 4
    peak = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80015be:	e012      	b.n	80015e6 <MEAS_show_data+0x27e>
        if (Samples[4 * i + 3] > peak) {
 80015c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	330c      	adds	r3, #12
 80015c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d206      	bcs.n	80015e0 <MEAS_show_data+0x278>
            peak = Samples[4 * i + 3];
 80015d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	330c      	adds	r3, #12
 80015d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80015e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e2:	3301      	adds	r3, #1
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80015e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e8:	2b3f      	cmp	r3, #63	; 0x3f
 80015ea:	d9e9      	bls.n	80015c0 <MEAS_show_data+0x258>
        }
    }
    peak -= 2048;
 80015ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80015f2:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80015f4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80015f8:	f001 fdb0 	bl	800315c <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C4:%4d f:%3d HZ", (int)(peak), (float)(frequency));
 80015fc:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <MEAS_show_data+0x2f4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f808 	bl	8000618 <__aeabi_f2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4638      	mov	r0, r7
 800160e:	e9cd 2300 	strd	r2, r3, [sp]
 8001612:	4623      	mov	r3, r4
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <MEAS_show_data+0x308>)
 8001616:	2128      	movs	r1, #40	; 0x28
 8001618:	f008 f816 	bl	8009648 <sniprintf>
    // snprintf(text, 15, "C4 %4d", (int)(Samples[3]));
    BSP_LCD_DisplayStringAt(0, 230, (uint8_t*)text, LEFT_MODE);
 800161c:	463a      	mov	r2, r7
 800161e:	2303      	movs	r3, #3
 8001620:	21e6      	movs	r1, #230	; 0xe6
 8001622:	2000      	movs	r0, #0
 8001624:	f001 fe52 	bl	80032cc <BSP_LCD_DisplayStringAt>
    /* Draw the  values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8001628:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800162c:	f001 fd96 	bl	800315c <BSP_LCD_SetTextColor>
    data = Samples[0] / f;
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	e044      	b.n	80016cc <MEAS_show_data+0x364>
 8001642:	bf00      	nop
 8001644:	20000364 	.word	0x20000364
 8001648:	0800a030 	.word	0x0800a030
 800164c:	0800a048 	.word	0x0800a048
 8001650:	0800a064 	.word	0x0800a064
 8001654:	0800a078 	.word	0x0800a078
 8001658:	20000354 	.word	0x20000354
 800165c:	200007e8 	.word	0x200007e8
 8001660:	0800a098 	.word	0x0800a098
 8001664:	ffff0000 	.word	0xffff0000
 8001668:	0800a0a8 	.word	0x0800a0a8
 800166c:	0800a0b8 	.word	0x0800a0b8
 8001670:	0800a0cc 	.word	0x0800a0cc
        data_last = data;
 8001674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001676:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i]) / f;
 8001678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167e:	4413      	add	r3, r2
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 800168a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	429a      	cmp	r2, r3
 8001690:	d901      	bls.n	8001696 <MEAS_show_data+0x32e>
            data = Y_OFFSET;
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001698:	3b01      	subs	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	b298      	uxth	r0, r3
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b299      	uxth	r1, r3
 80016ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	b29c      	uxth	r4, r3
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4622      	mov	r2, r4
 80016c2:	f001 fec1 	bl	8003448 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80016c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c8:	3301      	adds	r3, #1
 80016ca:	647b      	str	r3, [r7, #68]	; 0x44
 80016cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ce:	2b3f      	cmp	r3, #63	; 0x3f
 80016d0:	d9d0      	bls.n	8001674 <MEAS_show_data+0x30c>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 2 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80016d2:	485f      	ldr	r0, [pc, #380]	; (8001850 <MEAS_show_data+0x4e8>)
 80016d4:	f001 fd42 	bl	800315c <BSP_LCD_SetTextColor>
    data = Samples[1] / f;
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	3304      	adds	r3, #4
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
 80016ea:	e02c      	b.n	8001746 <MEAS_show_data+0x3de>
        data_last = data;
 80016ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ee:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i + 1]) / f;
 80016f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	3304      	adds	r3, #4
 80016f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016f8:	4413      	add	r3, r2
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 8001704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	429a      	cmp	r2, r3
 800170a:	d901      	bls.n	8001710 <MEAS_show_data+0x3a8>
            data = Y_OFFSET;
 800170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170e:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001712:	3b01      	subs	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	b298      	uxth	r0, r3
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	b29a      	uxth	r2, r3
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	b29b      	uxth	r3, r3
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b299      	uxth	r1, r3
 8001726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001728:	b29b      	uxth	r3, r3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	b29c      	uxth	r4, r3
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	b29a      	uxth	r2, r3
 8001732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001734:	b29b      	uxth	r3, r3
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	4622      	mov	r2, r4
 800173c:	f001 fe84 	bl	8003448 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001742:	3301      	adds	r3, #1
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
 8001746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001748:	2b3f      	cmp	r3, #63	; 0x3f
 800174a:	d9cf      	bls.n	80016ec <MEAS_show_data+0x384>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 3 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800174c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001750:	f001 fd04 	bl	800315c <BSP_LCD_SetTextColor>
    data = Samples[2] / f;
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	3308      	adds	r3, #8
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001760:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001762:	2300      	movs	r3, #0
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001766:	e02c      	b.n	80017c2 <MEAS_show_data+0x45a>
        data_last = data;
 8001768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176a:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i + 2]) / f;
 800176c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	3308      	adds	r3, #8
 8001772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001774:	4413      	add	r3, r2
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 8001780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001784:	429a      	cmp	r2, r3
 8001786:	d901      	bls.n	800178c <MEAS_show_data+0x424>
            data = Y_OFFSET;
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 800178c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178e:	3b01      	subs	r3, #1
 8001790:	b29b      	uxth	r3, r3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	b298      	uxth	r0, r3
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	b29a      	uxth	r2, r3
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	b29b      	uxth	r3, r3
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b299      	uxth	r1, r3
 80017a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	b29c      	uxth	r4, r3
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4622      	mov	r2, r4
 80017b8:	f001 fe46 	bl	8003448 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80017bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017be:	3301      	adds	r3, #1
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c4:	2b3f      	cmp	r3, #63	; 0x3f
 80017c6:	d9cf      	bls.n	8001768 <MEAS_show_data+0x400>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 4 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80017c8:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80017cc:	f001 fcc6 	bl	800315c <BSP_LCD_SetTextColor>
    data = Samples[3] / f;
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	330c      	adds	r3, #12
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80017e2:	e02c      	b.n	800183e <MEAS_show_data+0x4d6>
        data_last = data;
 80017e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e6:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i + 3]) / f;
 80017e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	330c      	adds	r3, #12
 80017ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017f0:	4413      	add	r3, r2
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 80017fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	429a      	cmp	r2, r3
 8001802:	d901      	bls.n	8001808 <MEAS_show_data+0x4a0>
            data = Y_OFFSET;
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180a:	3b01      	subs	r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	b298      	uxth	r0, r3
 8001812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001814:	b29a      	uxth	r2, r3
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	b29b      	uxth	r3, r3
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b299      	uxth	r1, r3
 800181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001820:	b29b      	uxth	r3, r3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	b29c      	uxth	r4, r3
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	b29a      	uxth	r2, r3
 800182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182c:	b29b      	uxth	r3, r3
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b29b      	uxth	r3, r3
 8001832:	4622      	mov	r2, r4
 8001834:	f001 fe08 	bl	8003448 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183a:	3301      	adds	r3, #1
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
 800183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001840:	2b3f      	cmp	r3, #63	; 0x3f
 8001842:	d9cf      	bls.n	80017e4 <MEAS_show_data+0x47c>
                         Y_OFFSET - data);
    }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3764      	adds	r7, #100	; 0x64
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop
 8001850:	ffff0000 	.word	0xffff0000

08001854 <TIM3_IRQHandler>:
 *
 * This function is called when the update interrupt flag of TIM3 is set.
 * It clears the update interrupt flag and calls the MEAS_show_data() function
 * to output data to the display.
 */
void TIM3_IRQHandler(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {  // check if update interrupt flag is set
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <TIM3_IRQHandler+0x24>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <TIM3_IRQHandler+0x20>
        TIM3->SR &= ~TIM_SR_UIF;  // clear update interrupt flag
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <TIM3_IRQHandler+0x24>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <TIM3_IRQHandler+0x24>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6113      	str	r3, [r2, #16]
        MEAS_show_data();         // output data to display
 8001870:	f7ff fd7a 	bl	8001368 <MEAS_show_data>
    }
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40000400 	.word	0x40000400

0800187c <DISP_info_screen>:
 * @brief Displays the info screen
 * @param[in] type	Actual menu type
 *
 * Displays the title and information on each screen.
 *****************************************************************************/
void DISP_info_screen(MENU_type_t type) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_Clear(LCD_COLOR_WHITE);  // Clear display
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	f001 fcb3 	bl	80031f4 <BSP_LCD_Clear>
    MENU_draw(type);                 // Draw the home menu
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f85f 	bl	8001954 <MENU_draw>

    switch (type) {
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d847      	bhi.n	800192c <DISP_info_screen+0xb0>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <DISP_info_screen+0x28>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018c5 	.word	0x080018c5
 80018a8:	080018d9 	.word	0x080018d9
 80018ac:	080018e7 	.word	0x080018e7
 80018b0:	080018f5 	.word	0x080018f5
 80018b4:	08001903 	.word	0x08001903
 80018b8:	08001911 	.word	0x08001911
 80018bc:	0800191f 	.word	0x0800191f
 80018c0:	080018d3 	.word	0x080018d3
        case MENU_HOME:
            /* Show info home */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: HOME", LEFT_MODE);
 80018c4:	2303      	movs	r3, #3
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <DISP_info_screen+0xbc>)
 80018c8:	213c      	movs	r1, #60	; 0x3c
 80018ca:	2005      	movs	r0, #5
 80018cc:	f001 fcfe 	bl	80032cc <BSP_LCD_DisplayStringAt>
            break;
 80018d0:	e02d      	b.n	800192e <DISP_info_screen+0xb2>

        case MENU_INFO:
            /* Show info info */
            MENU_Info();
 80018d2:	f000 f903 	bl	8001adc <MENU_Info>
            break;
 80018d6:	e02a      	b.n	800192e <DISP_info_screen+0xb2>

        case MENU_M:
            /* Show measurement menu */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Measurement",
 80018d8:	2303      	movs	r3, #3
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <DISP_info_screen+0xc0>)
 80018dc:	213c      	movs	r1, #60	; 0x3c
 80018de:	2005      	movs	r0, #5
 80018e0:	f001 fcf4 	bl	80032cc <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);

            
            // MENU_Measurements();
            break;
 80018e4:	e023      	b.n	800192e <DISP_info_screen+0xb2>

        case MENU_M_SI:
            /* Show info single meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. Single",
 80018e6:	2303      	movs	r3, #3
 80018e8:	4a15      	ldr	r2, [pc, #84]	; (8001940 <DISP_info_screen+0xc4>)
 80018ea:	213c      	movs	r1, #60	; 0x3c
 80018ec:	2005      	movs	r0, #5
 80018ee:	f001 fced 	bl	80032cc <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Single Meas.");
            break;
 80018f2:	e01c      	b.n	800192e <DISP_info_screen+0xb2>
        case MENU_M_AC:
            /* Show info accurate meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. acc",
 80018f4:	2303      	movs	r3, #3
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <DISP_info_screen+0xc8>)
 80018f8:	213c      	movs	r1, #60	; 0x3c
 80018fa:	2005      	movs	r0, #5
 80018fc:	f001 fce6 	bl	80032cc <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Accurate Meas.");
            break;
 8001900:	e015      	b.n	800192e <DISP_info_screen+0xb2>
        case MENU_CALI:
            /* Show info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: calibration",
 8001902:	2303      	movs	r3, #3
 8001904:	4a10      	ldr	r2, [pc, #64]	; (8001948 <DISP_info_screen+0xcc>)
 8001906:	213c      	movs	r1, #60	; 0x3c
 8001908:	2005      	movs	r0, #5
 800190a:	f001 fcdf 	bl	80032cc <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // MENU_Calibrations();
            // DISP_info_calibration();
            break;
 800190e:	e00e      	b.n	800192e <DISP_info_screen+0xb2>
        case MENU_C_CO:
            /* Show coil info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali coil",
 8001910:	2303      	movs	r3, #3
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <DISP_info_screen+0xd0>)
 8001914:	213c      	movs	r1, #60	; 0x3c
 8001916:	2005      	movs	r0, #5
 8001918:	f001 fcd8 	bl	80032cc <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_coil();
            break;
 800191c:	e007      	b.n	800192e <DISP_info_screen+0xb2>
        case MENU_C_PA:
            /* Show pad info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali pad",
 800191e:	2303      	movs	r3, #3
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <DISP_info_screen+0xd4>)
 8001922:	213c      	movs	r1, #60	; 0x3c
 8001924:	2005      	movs	r0, #5
 8001926:	f001 fcd1 	bl	80032cc <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_pad();
            break;
 800192a:	e000      	b.n	800192e <DISP_info_screen+0xb2>
        default:
            /* Should never occur */
            break;
 800192c:	bf00      	nop
    }
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	0800a0dc 	.word	0x0800a0dc
 800193c:	0800a0e8 	.word	0x0800a0e8
 8001940:	0800a0fc 	.word	0x0800a0fc
 8001944:	0800a110 	.word	0x0800a110
 8001948:	0800a120 	.word	0x0800a120
 800194c:	0800a134 	.word	0x0800a134
 8001950:	0800a144 	.word	0x0800a144

08001954 <MENU_draw>:
 *
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(MENU_type_t type) {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_SetFont(MENU_FONT);
 800195e:	485c      	ldr	r0, [pc, #368]	; (8001ad0 <MENU_draw+0x17c>)
 8001960:	f001 fc2e 	bl	80031c0 <BSP_LCD_SetFont>
    uint32_t x, y, m, w, h, offset;
    y = MENU_Y;
 8001964:	f001 fb7a 	bl	800305c <BSP_LCD_GetYSize>
 8001968:	4603      	mov	r3, r0
 800196a:	3b28      	subs	r3, #40	; 0x28
 800196c:	61fb      	str	r3, [r7, #28]
    m = MENU_MARGIN;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    w = BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM;
 8001972:	f001 fb67 	bl	8003044 <BSP_LCD_GetXSize>
 8001976:	4603      	mov	r3, r0
 8001978:	4a56      	ldr	r2, [pc, #344]	; (8001ad4 <MENU_draw+0x180>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	617b      	str	r3, [r7, #20]
    h = MENU_HEIGHT;
 8001982:	2328      	movs	r3, #40	; 0x28
 8001984:	613b      	str	r3, [r7, #16]
    offset = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    if (type < MENU_NUM_OF_DIFF_MENU) {
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b05      	cmp	r3, #5
 800198e:	d804      	bhi.n	800199a <MENU_draw+0x46>
        offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the menu
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
 800199e:	e08e      	b.n	8001abe <MENU_draw+0x16a>
        x = i * w;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	60fb      	str	r3, [r7, #12]
        BSP_LCD_SetTextColor(MENU_entry[i + offset].back_color);
 80019aa:	6a3a      	ldr	r2, [r7, #32]
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	441a      	add	r2, r3
 80019b0:	4949      	ldr	r1, [pc, #292]	; (8001ad8 <MENU_draw+0x184>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3324      	adds	r3, #36	; 0x24
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fbcb 	bl	800315c <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(x + m, y + m, w - 2 * m, h - 2 * m);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b298      	uxth	r0, r3
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4413      	add	r3, r2
 80019dc:	b299      	uxth	r1, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	b29c      	uxth	r4, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4622      	mov	r2, r4
 8001a00:	f001 fdec 	bl	80035dc <BSP_LCD_FillRect>
        BSP_LCD_SetBackColor(MENU_entry[i + offset].back_color);
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	441a      	add	r2, r3
 8001a0a:	4933      	ldr	r1, [pc, #204]	; (8001ad8 <MENU_draw+0x184>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	3324      	adds	r3, #36	; 0x24
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fbb6 	bl	800318c <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(MENU_entry[i + offset].text_color);
 8001a20:	6a3a      	ldr	r2, [r7, #32]
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	441a      	add	r2, r3
 8001a26:	492c      	ldr	r1, [pc, #176]	; (8001ad8 <MENU_draw+0x184>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3320      	adds	r3, #32
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fb90 	bl	800315c <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	0052      	lsls	r2, r2, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b298      	uxth	r0, r3
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	0052      	lsls	r2, r2, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line1,
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	441a      	add	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <MENU_draw+0x184>)
 8001a74:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 8001a76:	2303      	movs	r3, #3
 8001a78:	f001 fc28 	bl	80032cc <BSP_LCD_DisplayStringAt>
                                LEFT_MODE);
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	0052      	lsls	r2, r2, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b298      	uxth	r0, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	085b      	lsrs	r3, r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line2,
 8001a9e:	6a3a      	ldr	r2, [r7, #32]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	441a      	add	r2, r3
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	3310      	adds	r3, #16
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <MENU_draw+0x184>)
 8001ab0:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	f001 fc0a 	bl	80032cc <BSP_LCD_DisplayStringAt>
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	3301      	adds	r3, #1
 8001abc:	623b      	str	r3, [r7, #32]
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	f67f af6d 	bls.w	80019a0 <MENU_draw+0x4c>
                                LEFT_MODE);
    }
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	372c      	adds	r7, #44	; 0x2c
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}
 8001ad0:	20000364 	.word	0x20000364
 8001ad4:	aaaaaaab 	.word	0xaaaaaaab
 8001ad8:	20000004 	.word	0x20000004

08001adc <MENU_Info>:

/** ***************************************************************************
 * @brief Show some information about the Cable-Monitor.
 *
 *****************************************************************************/
void MENU_Info(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f001 fb52 	bl	800318c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ae8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001aec:	f001 fb36 	bl	800315c <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001af0:	4829      	ldr	r0, [pc, #164]	; (8001b98 <MENU_Info+0xbc>)
 8001af2:	f001 fb65 	bl	80031c0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Cable-Monitor", CENTER_MODE);
 8001af6:	2301      	movs	r3, #1
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <MENU_Info+0xc0>)
 8001afa:	210a      	movs	r1, #10
 8001afc:	2000      	movs	r0, #0
 8001afe:	f001 fbe5 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font12);
 8001b02:	4827      	ldr	r0, [pc, #156]	; (8001ba0 <MENU_Info+0xc4>)
 8001b04:	f001 fb5c 	bl	80031c0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"by Alejandro & Timo",
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <MENU_Info+0xc8>)
 8001b0c:	211e      	movs	r1, #30
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f001 fbdc 	bl	80032cc <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
 8001b14:	4824      	ldr	r0, [pc, #144]	; (8001ba8 <MENU_Info+0xcc>)
 8001b16:	f001 fb53 	bl	80031c0 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"1. Touch a menu item", LEFT_MODE);
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	4a23      	ldr	r2, [pc, #140]	; (8001bac <MENU_Info+0xd0>)
 8001b1e:	213c      	movs	r1, #60	; 0x3c
 8001b20:	2005      	movs	r0, #5
 8001b22:	f001 fbd3 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 80, (uint8_t*)"to start a cable", LEFT_MODE);
 8001b26:	2303      	movs	r3, #3
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <MENU_Info+0xd4>)
 8001b2a:	2150      	movs	r1, #80	; 0x50
 8001b2c:	2005      	movs	r0, #5
 8001b2e:	f001 fbcd 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 100, (uint8_t*)"measurement:", LEFT_MODE);
 8001b32:	2303      	movs	r3, #3
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <MENU_Info+0xd8>)
 8001b36:	2164      	movs	r1, #100	; 0x64
 8001b38:	2005      	movs	r0, #5
 8001b3a:	f001 fbc7 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 120, (uint8_t*)"Single or Accurate.", LEFT_MODE);
 8001b3e:	2303      	movs	r3, #3
 8001b40:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <MENU_Info+0xdc>)
 8001b42:	2178      	movs	r1, #120	; 0x78
 8001b44:	2005      	movs	r0, #5
 8001b46:	f001 fbc1 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 150, (uint8_t*)"Version: 01.00", LEFT_MODE);
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <MENU_Info+0xe0>)
 8001b4e:	2196      	movs	r1, #150	; 0x96
 8001b50:	2005      	movs	r0, #5
 8001b52:	f001 fbbb 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 170, (uint8_t*)"Data: 17.12.2023", LEFT_MODE);
 8001b56:	2303      	movs	r3, #3
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <MENU_Info+0xe4>)
 8001b5a:	21aa      	movs	r1, #170	; 0xaa
 8001b5c:	2005      	movs	r0, #5
 8001b5e:	f001 fbb5 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 190, (uint8_t*)"Authors: Horvat, Wey",
 8001b62:	2303      	movs	r3, #3
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <MENU_Info+0xe8>)
 8001b66:	21be      	movs	r1, #190	; 0xbe
 8001b68:	2005      	movs	r0, #5
 8001b6a:	f001 fbaf 	bl	80032cc <BSP_LCD_DisplayStringAt>
                            LEFT_MODE);
    BSP_LCD_DisplayStringAt(5, 210, (uint8_t*)"Modul: ET.PM3 ZHAW", LEFT_MODE);
 8001b6e:	2303      	movs	r3, #3
 8001b70:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <MENU_Info+0xec>)
 8001b72:	21d2      	movs	r1, #210	; 0xd2
 8001b74:	2005      	movs	r0, #5
 8001b76:	f001 fba9 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 230, (uint8_t*)"Lecturers: Matic &", LEFT_MODE);
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <MENU_Info+0xf0>)
 8001b7e:	21e6      	movs	r1, #230	; 0xe6
 8001b80:	2005      	movs	r0, #5
 8001b82:	f001 fba3 	bl	80032cc <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 250, (uint8_t*)"Ehrensperger", LEFT_MODE);
 8001b86:	2303      	movs	r3, #3
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <MENU_Info+0xf4>)
 8001b8a:	21fa      	movs	r1, #250	; 0xfa
 8001b8c:	2005      	movs	r0, #5
 8001b8e:	f001 fb9d 	bl	80032cc <BSP_LCD_DisplayStringAt>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000034c 	.word	0x2000034c
 8001b9c:	0800a154 	.word	0x0800a154
 8001ba0:	20000364 	.word	0x20000364
 8001ba4:	0800a164 	.word	0x0800a164
 8001ba8:	2000035c 	.word	0x2000035c
 8001bac:	0800a178 	.word	0x0800a178
 8001bb0:	0800a190 	.word	0x0800a190
 8001bb4:	0800a1a4 	.word	0x0800a1a4
 8001bb8:	0800a1b4 	.word	0x0800a1b4
 8001bbc:	0800a1c8 	.word	0x0800a1c8
 8001bc0:	0800a1d8 	.word	0x0800a1d8
 8001bc4:	0800a1ec 	.word	0x0800a1ec
 8001bc8:	0800a204 	.word	0x0800a204
 8001bcc:	0800a218 	.word	0x0800a218
 8001bd0:	0800a22c 	.word	0x0800a22c

08001bd4 <MENU_check_transition>:
 * the variable MENU_transition is set to the touched item.
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
static void MENU_check_transition(MENU_type_t type) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
    static MENU_item_t item_old = MENU_NONE;
    static MENU_item_t item_new = MENU_NONE;
    static TS_StateTypeDef TS_State;  // State of the touch controller
    uint32_t offset = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
    BSP_TS_GetState(&TS_State);  // Get the state
 8001be2:	482d      	ldr	r0, [pc, #180]	; (8001c98 <MENU_check_transition+0xc4>)
 8001be4:	f002 f9b0 	bl	8003f48 <BSP_TS_GetState>
#ifdef EVAL_REV_E
    /* Evalboard revision E (blue) has an inverted y-axis in the touch
     * controller */
    TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;  // Invert the y-axis
 8001be8:	f001 fa38 	bl	800305c <BSP_LCD_GetYSize>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MENU_check_transition+0xc4>)
 8001bf2:	889b      	ldrh	r3, [r3, #4]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <MENU_check_transition+0xc4>)
 8001bfa:	809a      	strh	r2, [r3, #4]
#endif
    if (TS_State.TouchDetected) {  // If a touch was detected
 8001bfc:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <MENU_check_transition+0xc4>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d045      	beq.n	8001c90 <MENU_check_transition+0xbc>
        /* Do only if last transition not pending anymore */
        if (MENU_NONE == MENU_transition) {
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <MENU_check_transition+0xc8>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b15      	cmp	r3, #21
 8001c0a:	d141      	bne.n	8001c90 <MENU_check_transition+0xbc>
            item_old = item_new;  // Store old item
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <MENU_check_transition+0xcc>)
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <MENU_check_transition+0xd0>)
 8001c12:	701a      	strb	r2, [r3, #0]
            /* If touched within the menu bar? */
            if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8001c14:	f001 fa22 	bl	800305c <BSP_LCD_GetYSize>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	3b28      	subs	r3, #40	; 0x28
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <MENU_check_transition+0xc4>)
 8001c1e:	8892      	ldrh	r2, [r2, #4]
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d235      	bcs.n	8001c90 <MENU_check_transition+0xbc>
 8001c24:	f001 fa1a 	bl	800305c <BSP_LCD_GetYSize>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <MENU_check_transition+0xc4>)
 8001c2c:	8892      	ldrh	r2, [r2, #4]
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d92e      	bls.n	8001c90 <MENU_check_transition+0xbc>
                if (type < MENU_NUM_OF_DIFF_MENU) {
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d804      	bhi.n	8001c42 <MENU_check_transition+0x6e>
                    offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the
 8001c38:	79fa      	ldrb	r2, [r7, #7]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
                                                            // menu
                }
                item_new = (TS_State.X  // Calculate new item
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MENU_check_transition+0xc4>)
 8001c44:	885b      	ldrh	r3, [r3, #2]
 8001c46:	461c      	mov	r4, r3
                            / (BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM)) +
 8001c48:	f001 f9fc 	bl	8003044 <BSP_LCD_GetXSize>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <MENU_check_transition+0xd4>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	b2da      	uxtb	r2, r3
                item_new = (TS_State.X  // Calculate new item
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MENU_check_transition+0xcc>)
 8001c66:	701a      	strb	r2, [r3, #0]
                           offset;
                if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MENU_check_transition+0xcc>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b11      	cmp	r3, #17
 8001c6e:	d902      	bls.n	8001c76 <MENU_check_transition+0xa2>
                    item_new = MENU_NONE;  // Out of bounds
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MENU_check_transition+0xcc>)
 8001c72:	2215      	movs	r2, #21
 8001c74:	701a      	strb	r2, [r3, #0]
                }
                if (item_new == item_old) {  // 2 times the same menu item
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MENU_check_transition+0xcc>)
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <MENU_check_transition+0xd0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d106      	bne.n	8001c90 <MENU_check_transition+0xbc>
                    item_new = MENU_NONE;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MENU_check_transition+0xcc>)
 8001c84:	2215      	movs	r2, #21
 8001c86:	701a      	strb	r2, [r3, #0]
                    MENU_transition = item_old;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MENU_check_transition+0xd0>)
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <MENU_check_transition+0xc8>)
 8001c8e:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	200007ec 	.word	0x200007ec
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	200002d4 	.word	0x200002d4
 8001ca4:	200002d5 	.word	0x200002d5
 8001ca8:	aaaaaaab 	.word	0xaaaaaaab

08001cac <EXTI15_10_IRQHandler>:
 * @n Call MENU_check_transition() from the while loop in main for polling.
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR15) {   // Check if interrupt on touchscreen
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <EXTI15_10_IRQHandler+0x40>)
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <EXTI15_10_IRQHandler+0x3c>
        EXTI->PR |= EXTI_PR_PR15;    // Clear pending interrupt on line 15
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <EXTI15_10_IRQHandler+0x40>)
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <EXTI15_10_IRQHandler+0x40>)
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc6:	6153      	str	r3, [r2, #20]
        if (BSP_TS_ITGetStatus()) {  // Get interrupt status
 8001cc8:	f002 f932 	bl	8003f30 <BSP_TS_ITGetStatus>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <EXTI15_10_IRQHandler+0x30>
            BSP_TS_ITClear();        // Clear touchscreen controller int.
 8001cd2:	f002 f9eb 	bl	80040ac <BSP_TS_ITClear>
            MENU_check_transition(MENU_NONE);
 8001cd6:	2015      	movs	r0, #21
 8001cd8:	f7ff ff7c 	bl	8001bd4 <MENU_check_transition>
        }
        EXTI->PR |= EXTI_PR_PR15;  // Clear pending interrupt on line 15
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <EXTI15_10_IRQHandler+0x40>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	4a02      	ldr	r2, [pc, #8]	; (8001cec <EXTI15_10_IRQHandler+0x40>)
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce6:	6153      	str	r3, [r2, #20]
    }
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <__NVIC_EnableIRQ>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_ClearPendingIRQ>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0c      	blt.n	8001d58 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	; (8001d64 <__NVIC_ClearPendingIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	3360      	adds	r3, #96	; 0x60
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <PB_init+0x38>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <PB_init+0x38>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <PB_init+0x38>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <PB_init+0x3c>)
 8001d8c:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <PB_init+0x3c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020000 	.word	0x40020000

08001da8 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <PB_enableIRQ+0x58>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <PB_enableIRQ+0x58>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <PB_enableIRQ+0x58>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <PB_enableIRQ+0x5c>)
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <PB_enableIRQ+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <PB_enableIRQ+0x60>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <PB_enableIRQ+0x60>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <PB_enableIRQ+0x60>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <PB_enableIRQ+0x60>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001dea:	2006      	movs	r0, #6
 8001dec:	f7ff ff9e 	bl	8001d2c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001df0:	2006      	movs	r0, #6
 8001df2:	f7ff ff7d 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <EXTI0_IRQHandler+0x2c>)
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <EXTI0_IRQHandler+0x2c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <EXTI0_IRQHandler+0x2c>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <EXTI0_IRQHandler+0x30>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40013c00 	.word	0x40013c00
 8001e3c:	200007f4 	.word	0x200007f4

08001e40 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8001e52:	e7fe      	b.n	8001e52 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8001e5e:	e7fe      	b.n	8001e5e <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e66 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001e94:	f002 f970 	bl	8004178 <HAL_IncTick>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <SystemInit+0x60>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a15      	ldr	r2, [pc, #84]	; (8001efc <SystemInit+0x60>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <SystemInit+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <SystemInit+0x64>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <SystemInit+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <SystemInit+0x64>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <SystemInit+0x64>)
 8001ec8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <SystemInit+0x64>)
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <SystemInit+0x68>)
 8001ed6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <SystemInit+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <SystemInit+0x64>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <SystemInit+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SystemInit+0x60>)
 8001eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef0:	609a      	str	r2, [r3, #8]
#endif
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	24003010 	.word	0x24003010

08001f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f0e:	e003      	b.n	8001f18 <LoopCopyDataInit>

08001f10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f16:	3104      	adds	r1, #4

08001f18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f20:	d3f6      	bcc.n	8001f10 <CopyDataInit>
  ldr  r2, =_sbss
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f24:	e002      	b.n	8001f2c <LoopFillZerobss>

08001f26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f28:	f842 3b04 	str.w	r3, [r2], #4

08001f2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f30:	d3f9      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f32:	f7ff ffb3 	bl	8001e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f007 fbc3 	bl	80096c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3a:	f7fe fe57 	bl	8000bec <main>
  bx  lr    
 8001f3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f40:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f44:	08021108 	.word	0x08021108
  ldr  r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f4c:	200003c8 	.word	0x200003c8
  ldr  r2, =_sbss
 8001f50:	200003c8 	.word	0x200003c8
  ldr  r3, = _ebss
 8001f54:	20000c08 	.word	0x20000c08

08001f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC_IRQHandler>

08001f5a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f5e:	f000 feb9 	bl	8002cd4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001f62:	20ca      	movs	r0, #202	; 0xca
 8001f64:	f000 f95d 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001f68:	20c3      	movs	r0, #195	; 0xc3
 8001f6a:	f000 f967 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001f6e:	2008      	movs	r0, #8
 8001f70:	f000 f964 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001f74:	2050      	movs	r0, #80	; 0x50
 8001f76:	f000 f961 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001f7a:	20cf      	movs	r0, #207	; 0xcf
 8001f7c:	f000 f951 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f000 f95b 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001f86:	20c1      	movs	r0, #193	; 0xc1
 8001f88:	f000 f958 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001f8c:	2030      	movs	r0, #48	; 0x30
 8001f8e:	f000 f955 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001f92:	20ed      	movs	r0, #237	; 0xed
 8001f94:	f000 f945 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001f98:	2064      	movs	r0, #100	; 0x64
 8001f9a:	f000 f94f 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	f000 f94c 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001fa4:	2012      	movs	r0, #18
 8001fa6:	f000 f949 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001faa:	2081      	movs	r0, #129	; 0x81
 8001fac:	f000 f946 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001fb0:	20e8      	movs	r0, #232	; 0xe8
 8001fb2:	f000 f936 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001fb6:	2085      	movs	r0, #133	; 0x85
 8001fb8:	f000 f940 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f000 f93d 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001fc2:	2078      	movs	r0, #120	; 0x78
 8001fc4:	f000 f93a 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001fc8:	20cb      	movs	r0, #203	; 0xcb
 8001fca:	f000 f92a 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001fce:	2039      	movs	r0, #57	; 0x39
 8001fd0:	f000 f934 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001fd4:	202c      	movs	r0, #44	; 0x2c
 8001fd6:	f000 f931 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f92e 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001fe0:	2034      	movs	r0, #52	; 0x34
 8001fe2:	f000 f92b 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f000 f928 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001fec:	20f7      	movs	r0, #247	; 0xf7
 8001fee:	f000 f918 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001ff2:	2020      	movs	r0, #32
 8001ff4:	f000 f922 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ff8:	20ea      	movs	r0, #234	; 0xea
 8001ffa:	f000 f912 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f91c 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002004:	2000      	movs	r0, #0
 8002006:	f000 f919 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800200a:	20b1      	movs	r0, #177	; 0xb1
 800200c:	f000 f909 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002010:	2000      	movs	r0, #0
 8002012:	f000 f913 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002016:	201b      	movs	r0, #27
 8002018:	f000 f910 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800201c:	20b6      	movs	r0, #182	; 0xb6
 800201e:	f000 f900 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002022:	200a      	movs	r0, #10
 8002024:	f000 f90a 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002028:	20a2      	movs	r0, #162	; 0xa2
 800202a:	f000 f907 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800202e:	20c0      	movs	r0, #192	; 0xc0
 8002030:	f000 f8f7 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002034:	2010      	movs	r0, #16
 8002036:	f000 f901 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800203a:	20c1      	movs	r0, #193	; 0xc1
 800203c:	f000 f8f1 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002040:	2010      	movs	r0, #16
 8002042:	f000 f8fb 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002046:	20c5      	movs	r0, #197	; 0xc5
 8002048:	f000 f8eb 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800204c:	2045      	movs	r0, #69	; 0x45
 800204e:	f000 f8f5 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002052:	2015      	movs	r0, #21
 8002054:	f000 f8f2 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002058:	20c7      	movs	r0, #199	; 0xc7
 800205a:	f000 f8e2 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800205e:	2090      	movs	r0, #144	; 0x90
 8002060:	f000 f8ec 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002064:	2036      	movs	r0, #54	; 0x36
 8002066:	f000 f8dc 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800206a:	20c8      	movs	r0, #200	; 0xc8
 800206c:	f000 f8e6 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002070:	20f2      	movs	r0, #242	; 0xf2
 8002072:	f000 f8d6 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f8e0 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800207c:	20b0      	movs	r0, #176	; 0xb0
 800207e:	f000 f8d0 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002082:	20c2      	movs	r0, #194	; 0xc2
 8002084:	f000 f8da 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002088:	20b6      	movs	r0, #182	; 0xb6
 800208a:	f000 f8ca 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800208e:	200a      	movs	r0, #10
 8002090:	f000 f8d4 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002094:	20a7      	movs	r0, #167	; 0xa7
 8002096:	f000 f8d1 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800209a:	2027      	movs	r0, #39	; 0x27
 800209c:	f000 f8ce 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80020a0:	2004      	movs	r0, #4
 80020a2:	f000 f8cb 	bl	800223c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80020a6:	202a      	movs	r0, #42	; 0x2a
 80020a8:	f000 f8bb 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f8c5 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f000 f8c2 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f000 f8bf 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80020be:	20ef      	movs	r0, #239	; 0xef
 80020c0:	f000 f8bc 	bl	800223c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80020c4:	202b      	movs	r0, #43	; 0x2b
 80020c6:	f000 f8ac 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 f8b6 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f000 f8b3 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 f8b0 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80020dc:	203f      	movs	r0, #63	; 0x3f
 80020de:	f000 f8ad 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80020e2:	20f6      	movs	r0, #246	; 0xf6
 80020e4:	f000 f89d 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f000 f8a7 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f8a4 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80020f4:	2006      	movs	r0, #6
 80020f6:	f000 f8a1 	bl	800223c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80020fa:	202c      	movs	r0, #44	; 0x2c
 80020fc:	f000 f891 	bl	8002222 <ili9341_WriteReg>
  LCD_Delay(200);
 8002100:	20c8      	movs	r0, #200	; 0xc8
 8002102:	f000 fed5 	bl	8002eb0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002106:	2026      	movs	r0, #38	; 0x26
 8002108:	f000 f88b 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800210c:	2001      	movs	r0, #1
 800210e:	f000 f895 	bl	800223c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002112:	20e0      	movs	r0, #224	; 0xe0
 8002114:	f000 f885 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002118:	200f      	movs	r0, #15
 800211a:	f000 f88f 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800211e:	2029      	movs	r0, #41	; 0x29
 8002120:	f000 f88c 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002124:	2024      	movs	r0, #36	; 0x24
 8002126:	f000 f889 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800212a:	200c      	movs	r0, #12
 800212c:	f000 f886 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002130:	200e      	movs	r0, #14
 8002132:	f000 f883 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002136:	2009      	movs	r0, #9
 8002138:	f000 f880 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800213c:	204e      	movs	r0, #78	; 0x4e
 800213e:	f000 f87d 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002142:	2078      	movs	r0, #120	; 0x78
 8002144:	f000 f87a 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002148:	203c      	movs	r0, #60	; 0x3c
 800214a:	f000 f877 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800214e:	2009      	movs	r0, #9
 8002150:	f000 f874 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002154:	2013      	movs	r0, #19
 8002156:	f000 f871 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800215a:	2005      	movs	r0, #5
 800215c:	f000 f86e 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002160:	2017      	movs	r0, #23
 8002162:	f000 f86b 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002166:	2011      	movs	r0, #17
 8002168:	f000 f868 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800216c:	2000      	movs	r0, #0
 800216e:	f000 f865 	bl	800223c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002172:	20e1      	movs	r0, #225	; 0xe1
 8002174:	f000 f855 	bl	8002222 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002178:	2000      	movs	r0, #0
 800217a:	f000 f85f 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800217e:	2016      	movs	r0, #22
 8002180:	f000 f85c 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002184:	201b      	movs	r0, #27
 8002186:	f000 f859 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800218a:	2004      	movs	r0, #4
 800218c:	f000 f856 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002190:	2011      	movs	r0, #17
 8002192:	f000 f853 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002196:	2007      	movs	r0, #7
 8002198:	f000 f850 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800219c:	2031      	movs	r0, #49	; 0x31
 800219e:	f000 f84d 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80021a2:	2033      	movs	r0, #51	; 0x33
 80021a4:	f000 f84a 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80021a8:	2042      	movs	r0, #66	; 0x42
 80021aa:	f000 f847 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80021ae:	2005      	movs	r0, #5
 80021b0:	f000 f844 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80021b4:	200c      	movs	r0, #12
 80021b6:	f000 f841 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80021ba:	200a      	movs	r0, #10
 80021bc:	f000 f83e 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80021c0:	2028      	movs	r0, #40	; 0x28
 80021c2:	f000 f83b 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80021c6:	202f      	movs	r0, #47	; 0x2f
 80021c8:	f000 f838 	bl	800223c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80021cc:	200f      	movs	r0, #15
 80021ce:	f000 f835 	bl	800223c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80021d2:	2011      	movs	r0, #17
 80021d4:	f000 f825 	bl	8002222 <ili9341_WriteReg>
  LCD_Delay(200);
 80021d8:	20c8      	movs	r0, #200	; 0xc8
 80021da:	f000 fe69 	bl	8002eb0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80021de:	2029      	movs	r0, #41	; 0x29
 80021e0:	f000 f81f 	bl	8002222 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80021e4:	202c      	movs	r0, #44	; 0x2c
 80021e6:	f000 f81c 	bl	8002222 <ili9341_WriteReg>
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}

080021ee <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80021f2:	f000 fd6f 	bl	8002cd4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80021f6:	2103      	movs	r1, #3
 80021f8:	20d3      	movs	r0, #211	; 0xd3
 80021fa:	f000 f82c 	bl	8002256 <ili9341_ReadData>
 80021fe:	4603      	mov	r3, r0
 8002200:	b29b      	uxth	r3, r3
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}

08002206 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800220a:	2029      	movs	r0, #41	; 0x29
 800220c:	f000 f809 	bl	8002222 <ili9341_WriteReg>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002218:	2028      	movs	r0, #40	; 0x28
 800221a:	f000 f802 	bl	8002222 <ili9341_WriteReg>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}

08002222 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fdea 	bl	8002e08 <LCD_IO_WriteReg>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fdbb 	bl	8002dc4 <LCD_IO_WriteData>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	460a      	mov	r2, r1
 8002260:	80fb      	strh	r3, [r7, #6]
 8002262:	4613      	mov	r3, r2
 8002264:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002266:	797a      	ldrb	r2, [r7, #5]
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fded 	bl	8002e4c <LCD_IO_ReadData>
 8002272:	4603      	mov	r3, r0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002280:	23f0      	movs	r3, #240	; 0xf0
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002290:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fa59 	bl	8002764 <stmpe811_GetInstance>
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2bff      	cmp	r3, #255	; 0xff
 80022ba:	d112      	bne.n	80022e2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80022bc:	2000      	movs	r0, #0
 80022be:	f000 fa51 	bl	8002764 <stmpe811_GetInstance>
 80022c2:	4603      	mov	r3, r0
 80022c4:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d80a      	bhi.n	80022e2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	b2d1      	uxtb	r1, r2
 80022d2:	4a06      	ldr	r2, [pc, #24]	; (80022ec <stmpe811_Init+0x4c>)
 80022d4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80022d6:	f000 fdf6 	bl	8002ec6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f807 	bl	80022f0 <stmpe811_Reset>
    }
  }
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200007f8 	.word	0x200007f8

080022f0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2202      	movs	r2, #2
 8002300:	2103      	movs	r1, #3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fdeb 	bl	8002ede <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002308:	200a      	movs	r0, #10
 800230a:	f000 fe25 	bl	8002f58 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2200      	movs	r2, #0
 8002314:	2103      	movs	r1, #3
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fde1 	bl	8002ede <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800231c:	2002      	movs	r0, #2
 800231e:	f000 fe1b 	bl	8002f58 <IOE_Delay>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800232a:	b590      	push	{r4, r7, lr}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002334:	f000 fdc7 	bl	8002ec6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fde0 	bl	8002f04 <IOE_Read>
 8002344:	4603      	mov	r3, r0
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fdd7 	bl	8002f04 <IOE_Read>
 8002356:	4603      	mov	r3, r0
 8002358:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800235a:	4323      	orrs	r3, r4
 800235c:	b21b      	sxth	r3, r3
 800235e:	b29b      	uxth	r3, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bd90      	pop	{r4, r7, pc}

08002368 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2109      	movs	r1, #9
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fdc1 	bl	8002f04 <IOE_Read>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	2109      	movs	r1, #9
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fda1 	bl	8002ede <IOE_Write>
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2109      	movs	r1, #9
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fda3 	bl	8002f04 <IOE_Read>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	2109      	movs	r1, #9
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fd83 	bl	8002ede <IOE_Write>
    
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	80fb      	strh	r3, [r7, #6]
 80023ec:	4613      	mov	r3, r2
 80023ee:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	210a      	movs	r1, #10
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fd82 	bl	8002f04 <IOE_Read>
 8002400:	4603      	mov	r3, r0
 8002402:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	797b      	ldrb	r3, [r7, #5]
 8002408:	4313      	orrs	r3, r2
 800240a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	210a      	movs	r1, #10
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fd62 	bl	8002ede <IOE_Write>
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	460a      	mov	r2, r1
 800242c:	80fb      	strh	r3, [r7, #6]
 800242e:	4613      	mov	r3, r2
 8002430:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	210a      	movs	r1, #10
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fd61 	bl	8002f04 <IOE_Read>
 8002442:	4603      	mov	r3, r0
 8002444:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002446:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800244a:	43db      	mvns	r3, r3
 800244c:	b25a      	sxtb	r2, r3
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4013      	ands	r3, r2
 8002454:	b25b      	sxtb	r3, r3
 8002456:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	210a      	movs	r1, #10
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fd3c 	bl	8002ede <IOE_Write>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	460a      	mov	r2, r1
 8002478:	80fb      	strh	r3, [r7, #6]
 800247a:	4613      	mov	r3, r2
 800247c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	210b      	movs	r1, #11
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fd3d 	bl	8002f04 <IOE_Read>
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	797b      	ldrb	r3, [r7, #5]
 8002490:	4013      	ands	r3, r2
 8002492:	b2db      	uxtb	r3, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	460a      	mov	r2, r1
 80024a6:	80fb      	strh	r3, [r7, #6]
 80024a8:	4613      	mov	r3, r2
 80024aa:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	797a      	ldrb	r2, [r7, #5]
 80024b2:	210b      	movs	r1, #11
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fd12 	bl	8002ede <IOE_Write>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	6039      	str	r1, [r7, #0]
 80024cc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2117      	movs	r1, #23
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fd13 	bl	8002f04 <IOE_Read>
 80024de:	4603      	mov	r3, r0
 80024e0:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	b25a      	sxtb	r2, r3
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4013      	ands	r3, r2
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	2117      	movs	r1, #23
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fcee 	bl	8002ede <IOE_Write>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2104      	movs	r1, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fcf2 	bl	8002f04 <IOE_Read>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	2104      	movs	r1, #4
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fcd2 	bl	8002ede <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	21f0      	movs	r1, #240	; 0xf0
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffbf 	bl	80024c2 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	2104      	movs	r1, #4
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fcc2 	bl	8002ede <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2249      	movs	r2, #73	; 0x49
 8002560:	2120      	movs	r1, #32
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fcbb 	bl	8002ede <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002568:	2002      	movs	r0, #2
 800256a:	f000 fcf5 	bl	8002f58 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2201      	movs	r2, #1
 8002574:	2121      	movs	r1, #33	; 0x21
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fcb1 	bl	8002ede <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	229a      	movs	r2, #154	; 0x9a
 8002582:	2141      	movs	r1, #65	; 0x41
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fcaa 	bl	8002ede <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2201      	movs	r2, #1
 8002590:	214a      	movs	r1, #74	; 0x4a
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fca3 	bl	8002ede <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2201      	movs	r2, #1
 800259e:	214b      	movs	r1, #75	; 0x4b
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fc9c 	bl	8002ede <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	214b      	movs	r1, #75	; 0x4b
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fc95 	bl	8002ede <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2201      	movs	r2, #1
 80025ba:	2156      	movs	r1, #86	; 0x56
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fc8e 	bl	8002ede <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2201      	movs	r2, #1
 80025c8:	2158      	movs	r1, #88	; 0x58
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fc87 	bl	8002ede <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2201      	movs	r2, #1
 80025d6:	2140      	movs	r1, #64	; 0x40
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fc80 	bl	8002ede <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	22ff      	movs	r2, #255	; 0xff
 80025e4:	210b      	movs	r1, #11
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fc79 	bl	8002ede <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80025ec:	2002      	movs	r0, #2
 80025ee:	f000 fcb3 	bl	8002f58 <IOE_Delay>
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fc78 	bl	8002f04 <IOE_Read>
 8002614:	4603      	mov	r3, r0
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002626:	7bbb      	ldrb	r3, [r7, #14]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	214c      	movs	r1, #76	; 0x4c
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fc66 	bl	8002f04 <IOE_Read>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e00d      	b.n	8002660 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2201      	movs	r2, #1
 800264a:	214b      	movs	r1, #75	; 0x4b
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fc46 	bl	8002ede <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2200      	movs	r2, #0
 8002658:	214b      	movs	r1, #75	; 0x4b
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fc3f 	bl	8002ede <IOE_Write>
  }
  
  return ret;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002678:	89fb      	ldrh	r3, [r7, #14]
 800267a:	b2d8      	uxtb	r0, r3
 800267c:	f107 0210 	add.w	r2, r7, #16
 8002680:	2304      	movs	r3, #4
 8002682:	21d7      	movs	r1, #215	; 0xd7
 8002684:	f000 fc51 	bl	8002f2a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002688:	7c3b      	ldrb	r3, [r7, #16]
 800268a:	061a      	lsls	r2, r3, #24
 800268c:	7c7b      	ldrb	r3, [r7, #17]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	431a      	orrs	r2, r3
 8002692:	7cbb      	ldrb	r3, [r7, #18]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	4313      	orrs	r3, r2
 8002698:	7cfa      	ldrb	r2, [r7, #19]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	0d1b      	lsrs	r3, r3, #20
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2201      	movs	r2, #1
 80026be:	214b      	movs	r1, #75	; 0x4b
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fc0c 	bl	8002ede <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2200      	movs	r2, #0
 80026cc:	214b      	movs	r1, #75	; 0x4b
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fc05 	bl	8002ede <IOE_Write>
}
 80026d4:	bf00      	nop
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80026e6:	f000 fbf4 	bl	8002ed2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	211f      	movs	r1, #31
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe76 	bl	80023e0 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fe36 	bl	8002368 <stmpe811_EnableGlobalIT>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe47 	bl	80023a4 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	211f      	movs	r1, #31
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fe81 	bl	8002422 <stmpe811_DisableITSource>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	211f      	movs	r1, #31
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fe99 	bl	800246e <stmpe811_ReadGITStatus>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	211f      	movs	r1, #31
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fea1 	bl	800249c <stmpe811_ClearGlobalIT>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e00b      	b.n	8002790 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <stmpe811_GetInstance+0x40>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	b29b      	uxth	r3, r3
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	429a      	cmp	r2, r3
 8002784:	d101      	bne.n	800278a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	e006      	b.n	8002798 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	3301      	adds	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d9f0      	bls.n	8002778 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002796:	23ff      	movs	r3, #255	; 0xff
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	200007f8 	.word	0x200007f8

080027a8 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10e      	bne.n	80027d6 <BSP_LED_Init+0x2e>
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <BSP_LED_Init+0x9c>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <BSP_LED_Init+0x9c>)
 80027c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c6:	6313      	str	r3, [r2, #48]	; 0x30
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <BSP_LED_Init+0x9c>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	e010      	b.n	80027f8 <BSP_LED_Init+0x50>
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d10d      	bne.n	80027f8 <BSP_LED_Init+0x50>
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <BSP_LED_Init+0x9c>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <BSP_LED_Init+0x9c>)
 80027e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ea:	6313      	str	r3, [r2, #48]	; 0x30
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <BSP_LED_Init+0x9c>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	4a13      	ldr	r2, [pc, #76]	; (8002848 <BSP_LED_Init+0xa0>)
 80027fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800280a:	2302      	movs	r3, #2
 800280c:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <BSP_LED_Init+0xa4>)
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	f107 0214 	add.w	r2, r7, #20
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fa55 	bl	8004ccc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <BSP_LED_Init+0xa4>)
 8002826:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <BSP_LED_Init+0xa0>)
 800282e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002832:	2200      	movs	r2, #0
 8002834:	4619      	mov	r1, r3
 8002836:	f002 fc0d 	bl	8005054 <HAL_GPIO_WritePin>
}
 800283a:	bf00      	nop
 800283c:	3728      	adds	r7, #40	; 0x28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	0800a27c 	.word	0x0800a27c
 800284c:	2000033c 	.word	0x2000033c

08002850 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <BSP_LED_Toggle+0x2c>)
 800285e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	4906      	ldr	r1, [pc, #24]	; (8002880 <BSP_LED_Toggle+0x30>)
 8002866:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f002 fc0a 	bl	8005086 <HAL_GPIO_TogglePin>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000033c 	.word	0x2000033c
 8002880:	0800a27c 	.word	0x0800a27c

08002884 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a33      	ldr	r2, [pc, #204]	; (8002960 <I2Cx_MspInit+0xdc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d15f      	bne.n	8002956 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <I2Cx_MspInit+0xe0>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a31      	ldr	r2, [pc, #196]	; (8002964 <I2Cx_MspInit+0xe0>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <I2Cx_MspInit+0xe0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <I2Cx_MspInit+0xe0>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <I2Cx_MspInit+0xe0>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <I2Cx_MspInit+0xe0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80028ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80028d4:	2312      	movs	r3, #18
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80028dc:	2302      	movs	r3, #2
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80028e0:	2304      	movs	r3, #4
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	481f      	ldr	r0, [pc, #124]	; (8002968 <I2Cx_MspInit+0xe4>)
 80028ec:	f002 f9ee 	bl	8004ccc <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80028f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	481b      	ldr	r0, [pc, #108]	; (800296c <I2Cx_MspInit+0xe8>)
 80028fe:	f002 f9e5 	bl	8004ccc <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <I2Cx_MspInit+0xe0>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a16      	ldr	r2, [pc, #88]	; (8002964 <I2Cx_MspInit+0xe0>)
 800290c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <I2Cx_MspInit+0xe0>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <I2Cx_MspInit+0xe0>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <I2Cx_MspInit+0xe0>)
 8002924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002928:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <I2Cx_MspInit+0xe0>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <I2Cx_MspInit+0xe0>)
 8002930:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002934:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	210f      	movs	r1, #15
 800293a:	2048      	movs	r0, #72	; 0x48
 800293c:	f001 fd3b 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002940:	2048      	movs	r0, #72	; 0x48
 8002942:	f001 fd54 	bl	80043ee <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	210f      	movs	r1, #15
 800294a:	2049      	movs	r0, #73	; 0x49
 800294c:	f001 fd33 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002950:	2049      	movs	r0, #73	; 0x49
 8002952:	f001 fd4c 	bl	80043ee <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002956:	bf00      	nop
 8002958:	3728      	adds	r7, #40	; 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40005c00 	.word	0x40005c00
 8002964:	40023800 	.word	0x40023800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020800 	.word	0x40020800

08002970 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002974:	4814      	ldr	r0, [pc, #80]	; (80029c8 <I2Cx_Init+0x58>)
 8002976:	f003 f849 	bl	8005a0c <HAL_I2C_GetState>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d121      	bne.n	80029c4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <I2Cx_Init+0x58>)
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <I2Cx_Init+0x5c>)
 8002984:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <I2Cx_Init+0x58>)
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <I2Cx_Init+0x60>)
 800298a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <I2Cx_Init+0x58>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <I2Cx_Init+0x58>)
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <I2Cx_Init+0x58>)
 800299a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800299e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <I2Cx_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <I2Cx_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <I2Cx_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <I2Cx_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80029b8:	4803      	ldr	r0, [pc, #12]	; (80029c8 <I2Cx_Init+0x58>)
 80029ba:	f7ff ff63 	bl	8002884 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80029be:	4802      	ldr	r0, [pc, #8]	; (80029c8 <I2Cx_Init+0x58>)
 80029c0:	f002 fb7c 	bl	80050bc <HAL_I2C_Init>
  }
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200007fc 	.word	0x200007fc
 80029cc:	40005c00 	.word	0x40005c00
 80029d0:	000186a0 	.word	0x000186a0

080029d4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <I2Cx_ITConfig+0x58>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <I2Cx_ITConfig+0x58>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <I2Cx_ITConfig+0x58>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80029f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80029fc:	2301      	movs	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <I2Cx_ITConfig+0x5c>)
 8002a06:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4809      	ldr	r0, [pc, #36]	; (8002a34 <I2Cx_ITConfig+0x60>)
 8002a0e:	f002 f95d 	bl	8004ccc <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002a12:	2200      	movs	r2, #0
 8002a14:	210f      	movs	r1, #15
 8002a16:	2028      	movs	r0, #40	; 0x28
 8002a18:	f001 fccd 	bl	80043b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002a1c:	2028      	movs	r0, #40	; 0x28
 8002a1e:	f001 fce6 	bl	80043ee <HAL_NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	10210000 	.word	0x10210000
 8002a34:	40020000 	.word	0x40020000

08002a38 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af04      	add	r7, sp, #16
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	460b      	mov	r3, r1
 8002a44:	71bb      	strb	r3, [r7, #6]
 8002a46:	4613      	mov	r3, r2
 8002a48:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	b299      	uxth	r1, r3
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <I2Cx_WriteData+0x4c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	1d7b      	adds	r3, r7, #5
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	4808      	ldr	r0, [pc, #32]	; (8002a88 <I2Cx_WriteData+0x50>)
 8002a68:	f002 fcb0 	bl	80053cc <HAL_I2C_Mem_Write>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a76:	f000 f863 	bl	8002b40 <I2Cx_Error>
  }        
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000344 	.word	0x20000344
 8002a88:	200007fc 	.word	0x200007fc

08002a8c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	4603      	mov	r3, r0
 8002a94:	460a      	mov	r2, r1
 8002a96:	71fb      	strb	r3, [r7, #7]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	b299      	uxth	r1, r3
 8002aa8:	79bb      	ldrb	r3, [r7, #6]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <I2Cx_ReadData+0x50>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	f107 030e 	add.w	r3, r7, #14
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	4808      	ldr	r0, [pc, #32]	; (8002ae0 <I2Cx_ReadData+0x54>)
 8002ac0:	f002 fd7e 	bl	80055c0 <HAL_I2C_Mem_Read>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002ace:	f000 f837 	bl	8002b40 <I2Cx_Error>
  
  }
  return value;
 8002ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000344 	.word	0x20000344
 8002ae0:	200007fc 	.word	0x200007fc

08002ae4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	603a      	str	r2, [r7, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
 8002af2:	460b      	mov	r3, r1
 8002af4:	71bb      	strb	r3, [r7, #6]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	b299      	uxth	r1, r3
 8002b02:	79bb      	ldrb	r3, [r7, #6]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <I2Cx_ReadBuffer+0x54>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	88bb      	ldrh	r3, [r7, #4]
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2301      	movs	r3, #1
 8002b16:	4809      	ldr	r0, [pc, #36]	; (8002b3c <I2Cx_ReadBuffer+0x58>)
 8002b18:	f002 fd52 	bl	80055c0 <HAL_I2C_Mem_Read>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e002      	b.n	8002b30 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002b2a:	f000 f809 	bl	8002b40 <I2Cx_Error>

    return 1;
 8002b2e:	2301      	movs	r3, #1
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000344 	.word	0x20000344
 8002b3c:	200007fc 	.word	0x200007fc

08002b40 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <I2Cx_Error+0x14>)
 8002b46:	f002 fbfd 	bl	8005344 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002b4a:	f7ff ff11 	bl	8002970 <I2Cx_Init>
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200007fc 	.word	0x200007fc

08002b58 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002b5c:	4819      	ldr	r0, [pc, #100]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b5e:	f005 f9e2 	bl	8007f26 <HAL_SPI_GetState>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d12b      	bne.n	8002bc0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <SPIx_Init+0x70>)
 8002b6c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b70:	2218      	movs	r2, #24
 8002b72:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b8e:	2207      	movs	r2, #7
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <SPIx_Init+0x6c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <SPIx_Init+0x6c>)
 8002ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <SPIx_Init+0x6c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <SPIx_Init+0x6c>)
 8002bae:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bb2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002bb4:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <SPIx_Init+0x6c>)
 8002bb6:	f000 f853 	bl	8002c60 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002bba:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <SPIx_Init+0x6c>)
 8002bbc:	f004 fc29 	bl	8007412 <HAL_SPI_Init>
  } 
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000850 	.word	0x20000850
 8002bc8:	40015000 	.word	0x40015000

08002bcc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <SPIx_Read+0x38>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f107 0108 	add.w	r1, r7, #8
 8002be6:	4808      	ldr	r0, [pc, #32]	; (8002c08 <SPIx_Read+0x3c>)
 8002be8:	f004 fe10 	bl	800780c <HAL_SPI_Receive>
 8002bec:	4603      	mov	r3, r0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002bf6:	f000 f827 	bl	8002c48 <SPIx_Error>
  }
  
  return readvalue;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000348 	.word	0x20000348
 8002c08:	20000850 	.word	0x20000850

08002c0c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <SPIx_Write+0x34>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1db9      	adds	r1, r7, #6
 8002c20:	2201      	movs	r2, #1
 8002c22:	4808      	ldr	r0, [pc, #32]	; (8002c44 <SPIx_Write+0x38>)
 8002c24:	f004 fc9c 	bl	8007560 <HAL_SPI_Transmit>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002c32:	f000 f809 	bl	8002c48 <SPIx_Error>
  }
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000348 	.word	0x20000348
 8002c44:	20000850 	.word	0x20000850

08002c48 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002c4c:	4803      	ldr	r0, [pc, #12]	; (8002c5c <SPIx_Error+0x14>)
 8002c4e:	f004 fc4b 	bl	80074e8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002c52:	f7ff ff81 	bl	8002b58 <SPIx_Init>
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000850 	.word	0x20000850

08002c60 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <SPIx_MspInit+0x6c>)
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <SPIx_MspInit+0x6c>)
 8002c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c76:	6453      	str	r3, [r2, #68]	; 0x44
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <SPIx_MspInit+0x6c>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <SPIx_MspInit+0x6c>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <SPIx_MspInit+0x6c>)
 8002c8e:	f043 0320 	orr.w	r3, r3, #32
 8002c92:	6313      	str	r3, [r2, #48]	; 0x30
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <SPIx_MspInit+0x6c>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002ca0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4804      	ldr	r0, [pc, #16]	; (8002cd0 <SPIx_MspInit+0x70>)
 8002cbe:	f002 f805 	bl	8004ccc <HAL_GPIO_Init>
}
 8002cc2:	bf00      	nop
 8002cc4:	3728      	adds	r7, #40	; 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40021400 	.word	0x40021400

08002cd4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <LCD_IO_Init+0xe0>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d164      	bne.n	8002dac <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <LCD_IO_Init+0xe0>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d12:	2302      	movs	r3, #2
 8002d14:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4827      	ldr	r0, [pc, #156]	; (8002dbc <LCD_IO_Init+0xe8>)
 8002d1e:	f001 ffd5 	bl	8004ccc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4619      	mov	r1, r3
 8002d56:	4819      	ldr	r0, [pc, #100]	; (8002dbc <LCD_IO_Init+0xe8>)
 8002d58:	f001 ffb8 	bl	8004ccc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LCD_IO_Init+0xe4>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002d78:	2304      	movs	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <LCD_IO_Init+0xec>)
 8002d90:	f001 ff9c 	bl	8004ccc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002d94:	2200      	movs	r2, #0
 8002d96:	2104      	movs	r1, #4
 8002d98:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <LCD_IO_Init+0xec>)
 8002d9a:	f002 f95b 	bl	8005054 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2104      	movs	r1, #4
 8002da2:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <LCD_IO_Init+0xec>)
 8002da4:	f002 f956 	bl	8005054 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002da8:	f7ff fed6 	bl	8002b58 <SPIx_Init>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200008a8 	.word	0x200008a8
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40020800 	.word	0x40020800

08002dc4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd4:	480a      	ldr	r0, [pc, #40]	; (8002e00 <LCD_IO_WriteData+0x3c>)
 8002dd6:	f002 f93d 	bl	8005054 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2104      	movs	r1, #4
 8002dde:	4809      	ldr	r0, [pc, #36]	; (8002e04 <LCD_IO_WriteData+0x40>)
 8002de0:	f002 f938 	bl	8005054 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff10 	bl	8002c0c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002dec:	2201      	movs	r2, #1
 8002dee:	2104      	movs	r1, #4
 8002df0:	4804      	ldr	r0, [pc, #16]	; (8002e04 <LCD_IO_WriteData+0x40>)
 8002df2:	f002 f92f 	bl	8005054 <HAL_GPIO_WritePin>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40020800 	.word	0x40020800

08002e08 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002e12:	2200      	movs	r2, #0
 8002e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e18:	480a      	ldr	r0, [pc, #40]	; (8002e44 <LCD_IO_WriteReg+0x3c>)
 8002e1a:	f002 f91b 	bl	8005054 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2104      	movs	r1, #4
 8002e22:	4809      	ldr	r0, [pc, #36]	; (8002e48 <LCD_IO_WriteReg+0x40>)
 8002e24:	f002 f916 	bl	8005054 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff feed 	bl	8002c0c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e32:	2201      	movs	r2, #1
 8002e34:	2104      	movs	r1, #4
 8002e36:	4804      	ldr	r0, [pc, #16]	; (8002e48 <LCD_IO_WriteReg+0x40>)
 8002e38:	f002 f90c 	bl	8005054 <HAL_GPIO_WritePin>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40020800 	.word	0x40020800

08002e4c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	460a      	mov	r2, r1
 8002e56:	80fb      	strh	r3, [r7, #6]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002e60:	2200      	movs	r2, #0
 8002e62:	2104      	movs	r1, #4
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <LCD_IO_ReadData+0x5c>)
 8002e66:	f002 f8f5 	bl	8005054 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e70:	480e      	ldr	r0, [pc, #56]	; (8002eac <LCD_IO_ReadData+0x60>)
 8002e72:	f002 f8ef 	bl	8005054 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fec7 	bl	8002c0c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002e7e:	797b      	ldrb	r3, [r7, #5]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fea3 	bl	8002bcc <SPIx_Read>
 8002e86:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e8e:	4807      	ldr	r0, [pc, #28]	; (8002eac <LCD_IO_ReadData+0x60>)
 8002e90:	f002 f8e0 	bl	8005054 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e94:	2201      	movs	r2, #1
 8002e96:	2104      	movs	r1, #4
 8002e98:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <LCD_IO_ReadData+0x5c>)
 8002e9a:	f002 f8db 	bl	8005054 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00

08002eb0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f001 f97d 	bl	80041b8 <HAL_Delay>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002eca:	f7ff fd51 	bl	8002970 <I2Cx_Init>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002ed6:	f7ff fd7d 	bl	80029d4 <I2Cx_ITConfig>
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}

08002ede <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	71bb      	strb	r3, [r7, #6]
 8002eec:	4613      	mov	r3, r2
 8002eee:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002ef0:	797a      	ldrb	r2, [r7, #5]
 8002ef2:	79b9      	ldrb	r1, [r7, #6]
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fd9e 	bl	8002a38 <I2Cx_WriteData>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	71fb      	strb	r3, [r7, #7]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002f14:	79ba      	ldrb	r2, [r7, #6]
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fdb6 	bl	8002a8c <I2Cx_ReadData>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	603a      	str	r2, [r7, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	71bb      	strb	r3, [r7, #6]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002f40:	88bb      	ldrh	r3, [r7, #4]
 8002f42:	79b9      	ldrb	r1, [r7, #6]
 8002f44:	79f8      	ldrb	r0, [r7, #7]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	f7ff fdcc 	bl	8002ae4 <I2Cx_ReadBuffer>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	b29b      	uxth	r3, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f001 f929 	bl	80041b8 <HAL_Delay>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <BSP_LCD_Init+0xbc>)
 8002f76:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <BSP_LCD_Init+0xc0>)
 8002f78:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <BSP_LCD_Init+0xbc>)
 8002f7c:	2209      	movs	r2, #9
 8002f7e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <BSP_LCD_Init+0xbc>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <BSP_LCD_Init+0xbc>)
 8002f88:	221d      	movs	r2, #29
 8002f8a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <BSP_LCD_Init+0xbc>)
 8002f8e:	2203      	movs	r2, #3
 8002f90:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <BSP_LCD_Init+0xbc>)
 8002f94:	f240 120d 	movw	r2, #269	; 0x10d
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <BSP_LCD_Init+0xbc>)
 8002f9c:	f240 1243 	movw	r2, #323	; 0x143
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <BSP_LCD_Init+0xbc>)
 8002fa4:	f240 1217 	movw	r2, #279	; 0x117
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <BSP_LCD_Init+0xbc>)
 8002fac:	f240 1247 	movw	r2, #327	; 0x147
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <BSP_LCD_Init+0xbc>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <BSP_LCD_Init+0xbc>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <BSP_LCD_Init+0xbc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002fca:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <BSP_LCD_Init+0xc4>)
 8002fcc:	2208      	movs	r2, #8
 8002fce:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <BSP_LCD_Init+0xc4>)
 8002fd2:	22c0      	movs	r2, #192	; 0xc0
 8002fd4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <BSP_LCD_Init+0xc4>)
 8002fd8:	2204      	movs	r2, #4
 8002fda:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <BSP_LCD_Init+0xc4>)
 8002fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002fe4:	4813      	ldr	r0, [pc, #76]	; (8003034 <BSP_LCD_Init+0xc4>)
 8002fe6:	f003 ffcb 	bl	8006f80 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <BSP_LCD_Init+0xbc>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <BSP_LCD_Init+0xbc>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <BSP_LCD_Init+0xbc>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <BSP_LCD_Init+0xbc>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003002:	f000 fb7d 	bl	8003700 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003006:	4809      	ldr	r0, [pc, #36]	; (800302c <BSP_LCD_Init+0xbc>)
 8003008:	f003 f866 	bl	80060d8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <BSP_LCD_Init+0xc8>)
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <BSP_LCD_Init+0xcc>)
 8003010:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <BSP_LCD_Init+0xc8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800301a:	f000 fd85 	bl	8003b28 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800301e:	4808      	ldr	r0, [pc, #32]	; (8003040 <BSP_LCD_Init+0xd0>)
 8003020:	f000 f8ce 	bl	80031c0 <BSP_LCD_SetFont>

  return LCD_OK;
 8003024:	2300      	movs	r3, #0
}  
 8003026:	4618      	mov	r0, r3
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200008ac 	.word	0x200008ac
 8003030:	40016800 	.word	0x40016800
 8003034:	20000994 	.word	0x20000994
 8003038:	200009e0 	.word	0x200009e0
 800303c:	200002dc 	.word	0x200002dc
 8003040:	2000034c 	.word	0x2000034c

08003044 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <BSP_LCD_GetXSize+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	4798      	blx	r3
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200009e0 	.word	0x200009e0

0800305c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <BSP_LCD_GetYSize+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	4798      	blx	r3
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200009e0 	.word	0x200009e0

08003074 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003074:	b580      	push	{r7, lr}
 8003076:	b090      	sub	sp, #64	; 0x40
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003084:	f7ff ffde 	bl	8003044 <BSP_LCD_GetXSize>
 8003088:	4603      	mov	r3, r0
 800308a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003090:	f7ff ffe4 	bl	800305c <BSP_LCD_GetYSize>
 8003094:	4603      	mov	r3, r0
 8003096:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80030a0:	23ff      	movs	r3, #255	; 0xff
 80030a2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80030ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80030c0:	2307      	movs	r3, #7
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80030c4:	f7ff ffbe 	bl	8003044 <BSP_LCD_GetXSize>
 80030c8:	4603      	mov	r3, r0
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80030cc:	f7ff ffc6 	bl	800305c <BSP_LCD_GetYSize>
 80030d0:	4603      	mov	r3, r0
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	f107 030c 	add.w	r3, r7, #12
 80030da:	4619      	mov	r1, r3
 80030dc:	4814      	ldr	r0, [pc, #80]	; (8003130 <BSP_LCD_LayerDefaultInit+0xbc>)
 80030de:	f003 f8d5 	bl	800628c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	4913      	ldr	r1, [pc, #76]	; (8003134 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3304      	adds	r3, #4
 80030f2:	f04f 32ff 	mov.w	r2, #4294967295
 80030f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	490e      	ldr	r1, [pc, #56]	; (8003134 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3308      	adds	r3, #8
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <BSP_LCD_LayerDefaultInit+0xc4>)
 800310a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	4909      	ldr	r1, [pc, #36]	; (8003134 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800311e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003120:	4803      	ldr	r0, [pc, #12]	; (8003130 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003122:	f003 f8f1 	bl	8006308 <HAL_LTDC_EnableDither>
}
 8003126:	bf00      	nop
 8003128:	3740      	adds	r7, #64	; 0x40
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200008ac 	.word	0x200008ac
 8003134:	200009c8 	.word	0x200009c8
 8003138:	2000034c 	.word	0x2000034c

0800313c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <BSP_LCD_SelectLayer+0x1c>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6013      	str	r3, [r2, #0]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	200009c4 	.word	0x200009c4

0800315c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <BSP_LCD_SetTextColor+0x28>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <BSP_LCD_SetTextColor+0x2c>)
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	601a      	str	r2, [r3, #0]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	200009c4 	.word	0x200009c4
 8003188:	200009c8 	.word	0x200009c8

0800318c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <BSP_LCD_SetBackColor+0x2c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4908      	ldr	r1, [pc, #32]	; (80031bc <BSP_LCD_SetBackColor+0x30>)
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3304      	adds	r3, #4
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	200009c4 	.word	0x200009c4
 80031bc:	200009c8 	.word	0x200009c8

080031c0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <BSP_LCD_SetFont+0x2c>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4908      	ldr	r1, [pc, #32]	; (80031f0 <BSP_LCD_SetFont+0x30>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3308      	adds	r3, #8
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	601a      	str	r2, [r3, #0]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	200009c4 	.word	0x200009c4
 80031f0:	200009c8 	.word	0x200009c8

080031f4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80031f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <BSP_LCD_Clear+0x48>)
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <BSP_LCD_Clear+0x48>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <BSP_LCD_Clear+0x4c>)
 8003206:	2134      	movs	r1, #52	; 0x34
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	335c      	adds	r3, #92	; 0x5c
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461e      	mov	r6, r3
 8003214:	f7ff ff16 	bl	8003044 <BSP_LCD_GetXSize>
 8003218:	4605      	mov	r5, r0
 800321a:	f7ff ff1f 	bl	800305c <BSP_LCD_GetYSize>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	462a      	mov	r2, r5
 800322c:	4631      	mov	r1, r6
 800322e:	4620      	mov	r0, r4
 8003230:	f000 fc42 	bl	8003ab8 <FillBuffer>
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800323c:	200009c4 	.word	0x200009c4
 8003240:	200008ac 	.word	0x200008ac

08003244 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
 800324e:	460b      	mov	r3, r1
 8003250:	80bb      	strh	r3, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <BSP_LCD_DisplayChar+0x80>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	491b      	ldr	r1, [pc, #108]	; (80032c8 <BSP_LCD_DisplayChar+0x84>)
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3308      	adds	r3, #8
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <BSP_LCD_DisplayChar+0x80>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4c14      	ldr	r4, [pc, #80]	; (80032c8 <BSP_LCD_DisplayChar+0x84>)
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4423      	add	r3, r4
 8003282:	3308      	adds	r3, #8
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003288:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <BSP_LCD_DisplayChar+0x80>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4c0d      	ldr	r4, [pc, #52]	; (80032c8 <BSP_LCD_DisplayChar+0x84>)
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4423      	add	r3, r4
 800329c:	3308      	adds	r3, #8
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	889b      	ldrh	r3, [r3, #4]
 80032a2:	3307      	adds	r3, #7
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da00      	bge.n	80032aa <BSP_LCD_DisplayChar+0x66>
 80032a8:	3307      	adds	r3, #7
 80032aa:	10db      	asrs	r3, r3, #3
 80032ac:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032b0:	18ca      	adds	r2, r1, r3
 80032b2:	88b9      	ldrh	r1, [r7, #4]
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fb44 	bl	8003944 <DrawChar>
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	200009c4 	.word	0x200009c4
 80032c8:	200009c8 	.word	0x200009c8

080032cc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80032cc:	b5b0      	push	{r4, r5, r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60ba      	str	r2, [r7, #8]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	81fb      	strh	r3, [r7, #14]
 80032da:	460b      	mov	r3, r1
 80032dc:	81bb      	strh	r3, [r7, #12]
 80032de:	4613      	mov	r3, r2
 80032e0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80032e2:	2301      	movs	r3, #1
 80032e4:	83fb      	strh	r3, [r7, #30]
 80032e6:	2300      	movs	r3, #0
 80032e8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80032f6:	e002      	b.n	80032fe <BSP_LCD_DisplayStringAt+0x32>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	617a      	str	r2, [r7, #20]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f6      	bne.n	80032f8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800330a:	f7ff fe9b 	bl	8003044 <BSP_LCD_GetXSize>
 800330e:	4601      	mov	r1, r0
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <BSP_LCD_DisplayStringAt+0x174>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	484b      	ldr	r0, [pc, #300]	; (8003444 <BSP_LCD_DisplayStringAt+0x178>)
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4403      	add	r3, r0
 8003320:	3308      	adds	r3, #8
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	889b      	ldrh	r3, [r3, #4]
 8003326:	fbb1 f3f3 	udiv	r3, r1, r3
 800332a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d01c      	beq.n	800336c <BSP_LCD_DisplayStringAt+0xa0>
 8003332:	2b03      	cmp	r3, #3
 8003334:	dc33      	bgt.n	800339e <BSP_LCD_DisplayStringAt+0xd2>
 8003336:	2b01      	cmp	r3, #1
 8003338:	d002      	beq.n	8003340 <BSP_LCD_DisplayStringAt+0x74>
 800333a:	2b02      	cmp	r3, #2
 800333c:	d019      	beq.n	8003372 <BSP_LCD_DisplayStringAt+0xa6>
 800333e:	e02e      	b.n	800339e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad1      	subs	r1, r2, r3
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <BSP_LCD_DisplayStringAt+0x174>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	483e      	ldr	r0, [pc, #248]	; (8003444 <BSP_LCD_DisplayStringAt+0x178>)
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4403      	add	r3, r0
 8003356:	3308      	adds	r3, #8
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	889b      	ldrh	r3, [r3, #4]
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	89fb      	ldrh	r3, [r7, #14]
 8003366:	4413      	add	r3, r2
 8003368:	83fb      	strh	r3, [r7, #30]
      break;
 800336a:	e01b      	b.n	80033a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800336c:	89fb      	ldrh	r3, [r7, #14]
 800336e:	83fb      	strh	r3, [r7, #30]
      break;
 8003370:	e018      	b.n	80033a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	b299      	uxth	r1, r3
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <BSP_LCD_DisplayStringAt+0x174>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4831      	ldr	r0, [pc, #196]	; (8003444 <BSP_LCD_DisplayStringAt+0x178>)
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4403      	add	r3, r0
 800338a:	3308      	adds	r3, #8
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	889b      	ldrh	r3, [r3, #4]
 8003390:	fb11 f303 	smulbb	r3, r1, r3
 8003394:	b29a      	uxth	r2, r3
 8003396:	89fb      	ldrh	r3, [r7, #14]
 8003398:	4413      	add	r3, r2
 800339a:	83fb      	strh	r3, [r7, #30]
      break;
 800339c:	e002      	b.n	80033a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800339e:	89fb      	ldrh	r3, [r7, #14]
 80033a0:	83fb      	strh	r3, [r7, #30]
      break;
 80033a2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033a4:	e01a      	b.n	80033dc <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	89b9      	ldrh	r1, [r7, #12]
 80033ac:	8bfb      	ldrh	r3, [r7, #30]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ff48 	bl	8003244 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <BSP_LCD_DisplayStringAt+0x174>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4922      	ldr	r1, [pc, #136]	; (8003444 <BSP_LCD_DisplayStringAt+0x178>)
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3308      	adds	r3, #8
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	889a      	ldrh	r2, [r3, #4]
 80033ca:	8bfb      	ldrh	r3, [r7, #30]
 80033cc:	4413      	add	r3, r2
 80033ce:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3301      	adds	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
    i++;
 80033d6:	8bbb      	ldrh	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2dc      	uxtb	r4, r3
 80033ea:	f7ff fe2b 	bl	8003044 <BSP_LCD_GetXSize>
 80033ee:	8bb9      	ldrh	r1, [r7, #28]
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <BSP_LCD_DisplayStringAt+0x174>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4d13      	ldr	r5, [pc, #76]	; (8003444 <BSP_LCD_DisplayStringAt+0x178>)
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	442b      	add	r3, r5
 8003400:	3308      	adds	r3, #8
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	889b      	ldrh	r3, [r3, #4]
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	1ac3      	subs	r3, r0, r3
 800340c:	b299      	uxth	r1, r3
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <BSP_LCD_DisplayStringAt+0x174>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	480c      	ldr	r0, [pc, #48]	; (8003444 <BSP_LCD_DisplayStringAt+0x178>)
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4403      	add	r3, r0
 800341e:	3308      	adds	r3, #8
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	889b      	ldrh	r3, [r3, #4]
 8003424:	4299      	cmp	r1, r3
 8003426:	bf2c      	ite	cs
 8003428:	2301      	movcs	r3, #1
 800342a:	2300      	movcc	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	4023      	ands	r3, r4
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1b7      	bne.n	80033a6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bdb0      	pop	{r4, r5, r7, pc}
 8003440:	200009c4 	.word	0x200009c4
 8003444:	200009c8 	.word	0x200009c8

08003448 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	4604      	mov	r4, r0
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	461a      	mov	r2, r3
 8003456:	4623      	mov	r3, r4
 8003458:	80fb      	strh	r3, [r7, #6]
 800345a:	4603      	mov	r3, r0
 800345c:	80bb      	strh	r3, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]
 8003462:	4613      	mov	r3, r2
 8003464:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003466:	2300      	movs	r3, #0
 8003468:	823b      	strh	r3, [r7, #16]
 800346a:	2300      	movs	r3, #0
 800346c:	81fb      	strh	r3, [r7, #14]
 800346e:	2300      	movs	r3, #0
 8003470:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003472:	2300      	movs	r3, #0
 8003474:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003476:	2300      	movs	r3, #0
 8003478:	847b      	strh	r3, [r7, #34]	; 0x22
 800347a:	2300      	movs	r3, #0
 800347c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800347e:	2300      	movs	r3, #0
 8003480:	83fb      	strh	r3, [r7, #30]
 8003482:	2300      	movs	r3, #0
 8003484:	83bb      	strh	r3, [r7, #28]
 8003486:	2300      	movs	r3, #0
 8003488:	837b      	strh	r3, [r7, #26]
 800348a:	2300      	movs	r3, #0
 800348c:	833b      	strh	r3, [r7, #24]
 800348e:	2300      	movs	r3, #0
 8003490:	82fb      	strh	r3, [r7, #22]
 8003492:	2300      	movs	r3, #0
 8003494:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bfb8      	it	lt
 80034a4:	425b      	neglt	r3, r3
 80034a6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80034a8:	883a      	ldrh	r2, [r7, #0]
 80034aa:	88bb      	ldrh	r3, [r7, #4]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bfb8      	it	lt
 80034b2:	425b      	neglt	r3, r3
 80034b4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80034ba:	88bb      	ldrh	r3, [r7, #4]
 80034bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d304      	bcc.n	80034d0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80034c6:	2301      	movs	r3, #1
 80034c8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	843b      	strh	r3, [r7, #32]
 80034ce:	e005      	b.n	80034dc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80034d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034d4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80034d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034da:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80034dc:	883a      	ldrh	r2, [r7, #0]
 80034de:	88bb      	ldrh	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d304      	bcc.n	80034ee <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80034e4:	2301      	movs	r3, #1
 80034e6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80034e8:	2301      	movs	r3, #1
 80034ea:	83bb      	strh	r3, [r7, #28]
 80034ec:	e005      	b.n	80034fa <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80034ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80034f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80034fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80034fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003502:	429a      	cmp	r2, r3
 8003504:	db10      	blt.n	8003528 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003506:	2300      	movs	r3, #0
 8003508:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800350a:	2300      	movs	r3, #0
 800350c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800350e:	8a3b      	ldrh	r3, [r7, #16]
 8003510:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003512:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003516:	0fda      	lsrs	r2, r3, #31
 8003518:	4413      	add	r3, r2
 800351a:	105b      	asrs	r3, r3, #1
 800351c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800351e:	89fb      	ldrh	r3, [r7, #14]
 8003520:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003522:	8a3b      	ldrh	r3, [r7, #16]
 8003524:	82bb      	strh	r3, [r7, #20]
 8003526:	e00f      	b.n	8003548 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003528:	2300      	movs	r3, #0
 800352a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800352c:	2300      	movs	r3, #0
 800352e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003538:	0fda      	lsrs	r2, r3, #31
 800353a:	4413      	add	r3, r2
 800353c:	105b      	asrs	r3, r3, #1
 800353e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003540:	8a3b      	ldrh	r3, [r7, #16]
 8003542:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003548:	2300      	movs	r3, #0
 800354a:	827b      	strh	r3, [r7, #18]
 800354c:	e037      	b.n	80035be <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800354e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003550:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <BSP_LCD_DrawLine+0x18c>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4c20      	ldr	r4, [pc, #128]	; (80035d8 <BSP_LCD_DrawLine+0x190>)
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4423      	add	r3, r4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	f000 f9a1 	bl	80038ac <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800356a:	8b3a      	ldrh	r2, [r7, #24]
 800356c:	8afb      	ldrh	r3, [r7, #22]
 800356e:	4413      	add	r3, r2
 8003570:	b29b      	uxth	r3, r3
 8003572:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003574:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003578:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800357c:	429a      	cmp	r2, r3
 800357e:	db0e      	blt.n	800359e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003580:	8b3a      	ldrh	r2, [r7, #24]
 8003582:	8b7b      	ldrh	r3, [r7, #26]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800358a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800358c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800358e:	4413      	add	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003594:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003596:	8bfb      	ldrh	r3, [r7, #30]
 8003598:	4413      	add	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800359e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035a0:	8c3b      	ldrh	r3, [r7, #32]
 80035a2:	4413      	add	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80035a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035aa:	8bbb      	ldrh	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80035b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	827b      	strh	r3, [r7, #18]
 80035be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	ddc1      	ble.n	800354e <BSP_LCD_DrawLine+0x106>
  }
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	372c      	adds	r7, #44	; 0x2c
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	200009c4 	.word	0x200009c4
 80035d8:	200009c8 	.word	0x200009c8

080035dc <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80035dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	4604      	mov	r4, r0
 80035e6:	4608      	mov	r0, r1
 80035e8:	4611      	mov	r1, r2
 80035ea:	461a      	mov	r2, r3
 80035ec:	4623      	mov	r3, r4
 80035ee:	80fb      	strh	r3, [r7, #6]
 80035f0:	4603      	mov	r3, r0
 80035f2:	80bb      	strh	r3, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003600:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <BSP_LCD_FillRect+0xf4>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4933      	ldr	r1, [pc, #204]	; (80036d4 <BSP_LCD_FillRect+0xf8>)
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fda2 	bl	800315c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003618:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <BSP_LCD_FillRect+0xfc>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d022      	beq.n	8003666 <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <BSP_LCD_FillRect+0xf4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <BSP_LCD_FillRect+0x100>)
 8003626:	2134      	movs	r1, #52	; 0x34
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	335c      	adds	r3, #92	; 0x5c
 8003630:	681c      	ldr	r4, [r3, #0]
 8003632:	f7ff fd07 	bl	8003044 <BSP_LCD_GetXSize>
 8003636:	4603      	mov	r3, r0
 8003638:	425b      	negs	r3, r3
 800363a:	88b9      	ldrh	r1, [r7, #4]
 800363c:	883a      	ldrh	r2, [r7, #0]
 800363e:	440a      	add	r2, r1
 8003640:	fb02 f503 	mul.w	r5, r2, r3
 8003644:	f7ff fcfe 	bl	8003044 <BSP_LCD_GetXSize>
 8003648:	4606      	mov	r6, r0
 800364a:	f7ff fd07 	bl	800305c <BSP_LCD_GetYSize>
 800364e:	4603      	mov	r3, r0
 8003650:	fb06 f303 	mul.w	r3, r6, r3
 8003654:	442b      	add	r3, r5
 8003656:	88f9      	ldrh	r1, [r7, #6]
 8003658:	887a      	ldrh	r2, [r7, #2]
 800365a:	440a      	add	r2, r1
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4423      	add	r3, r4
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e013      	b.n	800368e <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <BSP_LCD_FillRect+0xf4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <BSP_LCD_FillRect+0x100>)
 800366c:	2134      	movs	r1, #52	; 0x34
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	335c      	adds	r3, #92	; 0x5c
 8003676:	681c      	ldr	r4, [r3, #0]
 8003678:	f7ff fce4 	bl	8003044 <BSP_LCD_GetXSize>
 800367c:	4602      	mov	r2, r0
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	fb03 f202 	mul.w	r2, r3, r2
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4423      	add	r3, r4
 800368c:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <BSP_LCD_FillRect+0xf4>)
 8003690:	681c      	ldr	r4, [r3, #0]
 8003692:	68fd      	ldr	r5, [r7, #12]
 8003694:	887e      	ldrh	r6, [r7, #2]
 8003696:	f8b7 8000 	ldrh.w	r8, [r7]
 800369a:	f7ff fcd3 	bl	8003044 <BSP_LCD_GetXSize>
 800369e:	4602      	mov	r2, r0
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	1ad1      	subs	r1, r2, r3
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <BSP_LCD_FillRect+0xf4>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	480a      	ldr	r0, [pc, #40]	; (80036d4 <BSP_LCD_FillRect+0xf8>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4403      	add	r3, r0
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	9100      	str	r1, [sp, #0]
 80036ba:	4643      	mov	r3, r8
 80036bc:	4632      	mov	r2, r6
 80036be:	4629      	mov	r1, r5
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 f9f9 	bl	8003ab8 <FillBuffer>
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d0:	200009c4 	.word	0x200009c4
 80036d4:	200009c8 	.word	0x200009c8
 80036d8:	200009e4 	.word	0x200009e4
 80036dc:	200008ac 	.word	0x200008ac

080036e0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <BSP_LCD_DisplayOn+0x1c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80036ee:	4b03      	ldr	r3, [pc, #12]	; (80036fc <BSP_LCD_DisplayOn+0x1c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4798      	blx	r3
  }
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200009e0 	.word	0x200009e0

08003700 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08e      	sub	sp, #56	; 0x38
 8003704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	4b61      	ldr	r3, [pc, #388]	; (8003890 <BSP_LCD_MspInit+0x190>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a60      	ldr	r2, [pc, #384]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	4b5a      	ldr	r3, [pc, #360]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a59      	ldr	r2, [pc, #356]	; (8003890 <BSP_LCD_MspInit+0x190>)
 800372c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b57      	ldr	r3, [pc, #348]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	4b53      	ldr	r3, [pc, #332]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a52      	ldr	r2, [pc, #328]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b50      	ldr	r3, [pc, #320]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b49      	ldr	r3, [pc, #292]	; (8003890 <BSP_LCD_MspInit+0x190>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	4b45      	ldr	r3, [pc, #276]	; (8003890 <BSP_LCD_MspInit+0x190>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a44      	ldr	r2, [pc, #272]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b42      	ldr	r3, [pc, #264]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <BSP_LCD_MspInit+0x190>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a3d      	ldr	r2, [pc, #244]	; (8003890 <BSP_LCD_MspInit+0x190>)
 800379c:	f043 0308 	orr.w	r3, r3, #8
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <BSP_LCD_MspInit+0x190>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <BSP_LCD_MspInit+0x190>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	4a36      	ldr	r2, [pc, #216]	; (8003890 <BSP_LCD_MspInit+0x190>)
 80037b8:	f043 0320 	orr.w	r3, r3, #32
 80037bc:	6313      	str	r3, [r2, #48]	; 0x30
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <BSP_LCD_MspInit+0x190>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <BSP_LCD_MspInit+0x190>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a2f      	ldr	r2, [pc, #188]	; (8003890 <BSP_LCD_MspInit+0x190>)
 80037d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <BSP_LCD_MspInit+0x190>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80037e6:	f641 0358 	movw	r3, #6232	; 0x1858
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80037ec:	2302      	movs	r3, #2
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80037f4:	2302      	movs	r3, #2
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80037f8:	230e      	movs	r3, #14
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80037fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003800:	4619      	mov	r1, r3
 8003802:	4824      	ldr	r0, [pc, #144]	; (8003894 <BSP_LCD_MspInit+0x194>)
 8003804:	f001 fa62 	bl	8004ccc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003808:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800380e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003812:	4619      	mov	r1, r3
 8003814:	4820      	ldr	r0, [pc, #128]	; (8003898 <BSP_LCD_MspInit+0x198>)
 8003816:	f001 fa59 	bl	8004ccc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800381a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003824:	4619      	mov	r1, r3
 8003826:	481d      	ldr	r0, [pc, #116]	; (800389c <BSP_LCD_MspInit+0x19c>)
 8003828:	f001 fa50 	bl	8004ccc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800382c:	2348      	movs	r3, #72	; 0x48
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003834:	4619      	mov	r1, r3
 8003836:	481a      	ldr	r0, [pc, #104]	; (80038a0 <BSP_LCD_MspInit+0x1a0>)
 8003838:	f001 fa48 	bl	8004ccc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800383c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003846:	4619      	mov	r1, r3
 8003848:	4816      	ldr	r0, [pc, #88]	; (80038a4 <BSP_LCD_MspInit+0x1a4>)
 800384a:	f001 fa3f 	bl	8004ccc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800384e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003858:	4619      	mov	r1, r3
 800385a:	4813      	ldr	r0, [pc, #76]	; (80038a8 <BSP_LCD_MspInit+0x1a8>)
 800385c:	f001 fa36 	bl	8004ccc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003860:	2303      	movs	r3, #3
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003864:	2309      	movs	r3, #9
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386c:	4619      	mov	r1, r3
 800386e:	480a      	ldr	r0, [pc, #40]	; (8003898 <BSP_LCD_MspInit+0x198>)
 8003870:	f001 fa2c 	bl	8004ccc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800387a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387e:	4619      	mov	r1, r3
 8003880:	4809      	ldr	r0, [pc, #36]	; (80038a8 <BSP_LCD_MspInit+0x1a8>)
 8003882:	f001 fa23 	bl	8004ccc <HAL_GPIO_Init>
}
 8003886:	bf00      	nop
 8003888:	3738      	adds	r7, #56	; 0x38
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	40020000 	.word	0x40020000
 8003898:	40020400 	.word	0x40020400
 800389c:	40020800 	.word	0x40020800
 80038a0:	40020c00 	.word	0x40020c00
 80038a4:	40021400 	.word	0x40021400
 80038a8:	40021800 	.word	0x40021800

080038ac <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80038ac:	b5b0      	push	{r4, r5, r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	603a      	str	r2, [r7, #0]
 80038b6:	80fb      	strh	r3, [r7, #6]
 80038b8:	460b      	mov	r3, r1
 80038ba:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80038bc:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <BSP_LCD_DrawPixel+0x8c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01f      	beq.n	8003904 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <BSP_LCD_DrawPixel+0x90>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <BSP_LCD_DrawPixel+0x94>)
 80038ca:	2134      	movs	r1, #52	; 0x34
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	335c      	adds	r3, #92	; 0x5c
 80038d4:	681c      	ldr	r4, [r3, #0]
 80038d6:	f7ff fbb5 	bl	8003044 <BSP_LCD_GetXSize>
 80038da:	4605      	mov	r5, r0
 80038dc:	f7ff fbbe 	bl	800305c <BSP_LCD_GetYSize>
 80038e0:	4603      	mov	r3, r0
 80038e2:	fb03 f205 	mul.w	r2, r3, r5
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	1ad5      	subs	r5, r2, r3
 80038ea:	f7ff fbab 	bl	8003044 <BSP_LCD_GetXSize>
 80038ee:	4602      	mov	r2, r0
 80038f0:	88bb      	ldrh	r3, [r7, #4]
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	1aeb      	subs	r3, r5, r3
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4423      	add	r3, r4
 80038fc:	461a      	mov	r2, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003902:	e015      	b.n	8003930 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003904:	4b0d      	ldr	r3, [pc, #52]	; (800393c <BSP_LCD_DrawPixel+0x90>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <BSP_LCD_DrawPixel+0x94>)
 800390a:	2134      	movs	r1, #52	; 0x34
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	335c      	adds	r3, #92	; 0x5c
 8003914:	681c      	ldr	r4, [r3, #0]
 8003916:	88bd      	ldrh	r5, [r7, #4]
 8003918:	f7ff fb94 	bl	8003044 <BSP_LCD_GetXSize>
 800391c:	4603      	mov	r3, r0
 800391e:	fb03 f205 	mul.w	r2, r3, r5
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4423      	add	r3, r4
 800392a:	461a      	mov	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bdb0      	pop	{r4, r5, r7, pc}
 8003938:	200009e4 	.word	0x200009e4
 800393c:	200009c4 	.word	0x200009c4
 8003940:	200008ac 	.word	0x200008ac

08003944 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	603a      	str	r2, [r7, #0]
 800394e:	80fb      	strh	r3, [r7, #6]
 8003950:	460b      	mov	r3, r1
 8003952:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <DrawChar+0x16c>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4953      	ldr	r1, [pc, #332]	; (8003ab4 <DrawChar+0x170>)
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3308      	adds	r3, #8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	88db      	ldrh	r3, [r3, #6]
 8003976:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003978:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <DrawChar+0x16c>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	494d      	ldr	r1, [pc, #308]	; (8003ab4 <DrawChar+0x170>)
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3308      	adds	r3, #8
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	889b      	ldrh	r3, [r3, #4]
 800398e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003990:	8a3b      	ldrh	r3, [r7, #16]
 8003992:	3307      	adds	r3, #7
 8003994:	2b00      	cmp	r3, #0
 8003996:	da00      	bge.n	800399a <DrawChar+0x56>
 8003998:	3307      	adds	r3, #7
 800399a:	10db      	asrs	r3, r3, #3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	8a3b      	ldrh	r3, [r7, #16]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	e076      	b.n	8003a9e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80039b0:	8a3b      	ldrh	r3, [r7, #16]
 80039b2:	3307      	adds	r3, #7
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da00      	bge.n	80039ba <DrawChar+0x76>
 80039b8:	3307      	adds	r3, #7
 80039ba:	10db      	asrs	r3, r3, #3
 80039bc:	461a      	mov	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80039ca:	8a3b      	ldrh	r3, [r7, #16]
 80039cc:	3307      	adds	r3, #7
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da00      	bge.n	80039d4 <DrawChar+0x90>
 80039d2:	3307      	adds	r3, #7
 80039d4:	10db      	asrs	r3, r3, #3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d002      	beq.n	80039e0 <DrawChar+0x9c>
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d004      	beq.n	80039e8 <DrawChar+0xa4>
 80039de:	e00c      	b.n	80039fa <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	617b      	str	r3, [r7, #20]
      break;
 80039e6:	e016      	b.n	8003a16 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	3201      	adds	r2, #1
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
      break;
 80039f8:	e00d      	b.n	8003a16 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	041a      	lsls	r2, r3, #16
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3301      	adds	r3, #1
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	3202      	adds	r2, #2
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
      break;
 8003a14:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e036      	b.n	8003a8a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003a1c:	8a3a      	ldrh	r2, [r7, #16]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4413      	add	r3, r2
 8003a26:	3b01      	subs	r3, #1
 8003a28:	2201      	movs	r2, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d012      	beq.n	8003a5e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	4413      	add	r3, r2
 8003a40:	b298      	uxth	r0, r3
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <DrawChar+0x16c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	491b      	ldr	r1, [pc, #108]	; (8003ab4 <DrawChar+0x170>)
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	88bb      	ldrh	r3, [r7, #4]
 8003a56:	4619      	mov	r1, r3
 8003a58:	f7ff ff28 	bl	80038ac <BSP_LCD_DrawPixel>
 8003a5c:	e012      	b.n	8003a84 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	4413      	add	r3, r2
 8003a66:	b298      	uxth	r0, r3
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <DrawChar+0x16c>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4911      	ldr	r1, [pc, #68]	; (8003ab4 <DrawChar+0x170>)
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3304      	adds	r3, #4
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	88bb      	ldrh	r3, [r7, #4]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f7ff ff14 	bl	80038ac <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	8a3b      	ldrh	r3, [r7, #16]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d3c4      	bcc.n	8003a1c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003a92:	88bb      	ldrh	r3, [r7, #4]
 8003a94:	3301      	adds	r3, #1
 8003a96:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	8a7b      	ldrh	r3, [r7, #18]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d384      	bcc.n	80039b0 <DrawChar+0x6c>
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	200009c4 	.word	0x200009c4
 8003ab4:	200009c8 	.word	0x200009c8

08003ab8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <FillBuffer+0x68>)
 8003ac8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003acc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <FillBuffer+0x68>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <FillBuffer+0x68>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <FillBuffer+0x68>)
 8003adc:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <FillBuffer+0x6c>)
 8003ade:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003ae0:	480f      	ldr	r0, [pc, #60]	; (8003b20 <FillBuffer+0x68>)
 8003ae2:	f000 fe5d 	bl	80047a0 <HAL_DMA2D_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d115      	bne.n	8003b18 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003aec:	68f9      	ldr	r1, [r7, #12]
 8003aee:	480c      	ldr	r0, [pc, #48]	; (8003b20 <FillBuffer+0x68>)
 8003af0:	f000 ffbe 	bl	8004a70 <HAL_DMA2D_ConfigLayer>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10e      	bne.n	8003b18 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69f9      	ldr	r1, [r7, #28]
 8003b04:	4806      	ldr	r0, [pc, #24]	; (8003b20 <FillBuffer+0x68>)
 8003b06:	f000 fe9e 	bl	8004846 <HAL_DMA2D_Start>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003b10:	210a      	movs	r1, #10
 8003b12:	4803      	ldr	r0, [pc, #12]	; (8003b20 <FillBuffer+0x68>)
 8003b14:	f000 fec2 	bl	800489c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000954 	.word	0x20000954
 8003b24:	4002b000 	.word	0x4002b000

08003b28 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <BSP_SDRAM_Init+0xb0>)
 8003b30:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003b34:	2202      	movs	r2, #2
 8003b36:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003b40:	2204      	movs	r2, #4
 8003b42:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003b46:	2207      	movs	r2, #7
 8003b48:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003b50:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003b52:	2202      	movs	r2, #2
 8003b54:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003b58:	2202      	movs	r2, #2
 8003b5a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b70:	2210      	movs	r2, #16
 8003b72:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b76:	2240      	movs	r2, #64	; 0x40
 8003b78:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b7c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003b80:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b8e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003ba2:	f000 f87f 	bl	8003ca4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003ba6:	490d      	ldr	r1, [pc, #52]	; (8003bdc <BSP_SDRAM_Init+0xb4>)
 8003ba8:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <BSP_SDRAM_Init+0xac>)
 8003baa:	f003 fba9 	bl	8007300 <HAL_SDRAM_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <BSP_SDRAM_Init+0xb8>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <BSP_SDRAM_Init+0xb8>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003bc2:	f240 506a 	movw	r0, #1386	; 0x56a
 8003bc6:	f000 f80d 	bl	8003be4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <BSP_SDRAM_Init+0xb8>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200009e8 	.word	0x200009e8
 8003bd8:	a0000140 	.word	0xa0000140
 8003bdc:	20000a1c 	.word	0x20000a1c
 8003be0:	2000036c 	.word	0x2000036c

08003be4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0c:	4923      	ldr	r1, [pc, #140]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c0e:	4824      	ldr	r0, [pc, #144]	; (8003ca0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c10:	f003 fbb4 	bl	800737c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f000 facf 	bl	80041b8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c22:	2208      	movs	r2, #8
 8003c24:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c36:	4919      	ldr	r1, [pc, #100]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c38:	4819      	ldr	r0, [pc, #100]	; (8003ca0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c3a:	f003 fb9f 	bl	800737c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c40:	2203      	movs	r2, #3
 8003c42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c46:	2208      	movs	r2, #8
 8003c48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c5a:	4910      	ldr	r1, [pc, #64]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5c:	4810      	ldr	r0, [pc, #64]	; (8003ca0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c5e:	f003 fb8d 	bl	800737c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003c62:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003c66:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c70:	2208      	movs	r2, #8
 8003c72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c7e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c84:	4905      	ldr	r1, [pc, #20]	; (8003c9c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c86:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c88:	f003 fb78 	bl	800737c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c90:	f003 fb9f 	bl	80073d2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000a38 	.word	0x20000a38
 8003ca0:	200009e8 	.word	0x200009e8

08003ca4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b090      	sub	sp, #64	; 0x40
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ec 	beq.w	8003e8e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cba:	4b77      	ldr	r3, [pc, #476]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	4a76      	ldr	r2, [pc, #472]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6393      	str	r3, [r2, #56]	; 0x38
 8003cc6:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	4b70      	ldr	r3, [pc, #448]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a6f      	ldr	r2, [pc, #444]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b6d      	ldr	r3, [pc, #436]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a68      	ldr	r2, [pc, #416]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a61      	ldr	r2, [pc, #388]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1a:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a5a      	ldr	r2, [pc, #360]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d30:	f043 0308 	orr.w	r3, r3, #8
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b58      	ldr	r3, [pc, #352]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a53      	ldr	r2, [pc, #332]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d4c:	f043 0310 	orr.w	r3, r3, #16
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b51      	ldr	r3, [pc, #324]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	4b4d      	ldr	r3, [pc, #308]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a4c      	ldr	r2, [pc, #304]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d68:	f043 0320 	orr.w	r3, r3, #32
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a45      	ldr	r2, [pc, #276]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <BSP_SDRAM_MspInit+0x1f4>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003d96:	2302      	movs	r3, #2
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003da2:	230c      	movs	r3, #12
 8003da4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003da6:	2360      	movs	r3, #96	; 0x60
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dae:	4619      	mov	r1, r3
 8003db0:	483a      	ldr	r0, [pc, #232]	; (8003e9c <BSP_SDRAM_MspInit+0x1f8>)
 8003db2:	f000 ff8b 	bl	8004ccc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003db6:	2301      	movs	r3, #1
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4837      	ldr	r0, [pc, #220]	; (8003ea0 <BSP_SDRAM_MspInit+0x1fc>)
 8003dc2:	f000 ff83 	bl	8004ccc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003dc6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4834      	ldr	r0, [pc, #208]	; (8003ea4 <BSP_SDRAM_MspInit+0x200>)
 8003dd4:	f000 ff7a 	bl	8004ccc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003dd8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de2:	4619      	mov	r1, r3
 8003de4:	4830      	ldr	r0, [pc, #192]	; (8003ea8 <BSP_SDRAM_MspInit+0x204>)
 8003de6:	f000 ff71 	bl	8004ccc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003dea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df4:	4619      	mov	r1, r3
 8003df6:	482d      	ldr	r0, [pc, #180]	; (8003eac <BSP_SDRAM_MspInit+0x208>)
 8003df8:	f000 ff68 	bl	8004ccc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003dfc:	f248 1333 	movw	r3, #33075	; 0x8133
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e06:	4619      	mov	r1, r3
 8003e08:	4829      	ldr	r0, [pc, #164]	; (8003eb0 <BSP_SDRAM_MspInit+0x20c>)
 8003e0a:	f000 ff5f 	bl	8004ccc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e0e:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e1a:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e28:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e30:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e38:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e40:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e46:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e50:	2203      	movs	r2, #3
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <BSP_SDRAM_MspInit+0x214>)
 8003e64:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003e72:	4810      	ldr	r0, [pc, #64]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e74:	f000 fb84 	bl	8004580 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003e78:	480e      	ldr	r0, [pc, #56]	; (8003eb4 <BSP_SDRAM_MspInit+0x210>)
 8003e7a:	f000 fad3 	bl	8004424 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	210f      	movs	r1, #15
 8003e82:	2038      	movs	r0, #56	; 0x38
 8003e84:	f000 fa97 	bl	80043b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003e88:	2038      	movs	r0, #56	; 0x38
 8003e8a:	f000 fab0 	bl	80043ee <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003e8e:	bf00      	nop
 8003e90:	3740      	adds	r7, #64	; 0x40
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40020400 	.word	0x40020400
 8003ea0:	40020800 	.word	0x40020800
 8003ea4:	40020c00 	.word	0x40020c00
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40021400 	.word	0x40021400
 8003eb0:	40021800 	.word	0x40021800
 8003eb4:	20000a48 	.word	0x20000a48
 8003eb8:	40026410 	.word	0x40026410

08003ebc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	80fb      	strh	r3, [r7, #6]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003ed0:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <BSP_TS_Init+0x64>)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <BSP_TS_Init+0x68>)
 8003ed8:	88bb      	ldrh	r3, [r7, #4]
 8003eda:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <BSP_TS_Init+0x6c>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2082      	movs	r0, #130	; 0x82
 8003ee2:	4798      	blx	r3
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f640 0311 	movw	r3, #2065	; 0x811
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d104      	bne.n	8003efa <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <BSP_TS_Init+0x70>)
 8003ef2:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <BSP_TS_Init+0x6c>)
 8003ef4:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <BSP_TS_Init+0x70>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2082      	movs	r0, #130	; 0x82
 8003f08:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <BSP_TS_Init+0x70>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2082      	movs	r0, #130	; 0x82
 8003f12:	4798      	blx	r3
  }

  return ret;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000aac 	.word	0x20000aac
 8003f24:	20000aae 	.word	0x20000aae
 8003f28:	20000314 	.word	0x20000314
 8003f2c:	20000aa8 	.word	0x20000aa8

08003f30 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <BSP_TS_ITGetStatus+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	2082      	movs	r0, #130	; 0x82
 8003f3c:	4798      	blx	r3
 8003f3e:	4603      	mov	r3, r0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000aa8 	.word	0x20000aa8

08003f48 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003f50:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <BSP_TS_GetState+0x148>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2082      	movs	r0, #130	; 0x82
 8003f58:	4798      	blx	r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 808d 	beq.w	8004086 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003f6c:	4b48      	ldr	r3, [pc, #288]	; (8004090 <BSP_TS_GetState+0x148>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f107 020c 	add.w	r2, r7, #12
 8003f76:	f107 010e 	add.w	r1, r7, #14
 8003f7a:	2082      	movs	r0, #130	; 0x82
 8003f7c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003f7e:	89bb      	ldrh	r3, [r7, #12]
 8003f80:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003f88:	89bb      	ldrh	r3, [r7, #12]
 8003f8a:	4a42      	ldr	r2, [pc, #264]	; (8004094 <BSP_TS_GetState+0x14c>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003f94:	8abb      	ldrh	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	82bb      	strh	r3, [r7, #20]
 8003f9e:	e008      	b.n	8003fb2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003fa0:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <BSP_TS_GetState+0x150>)
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	8aba      	ldrh	r2, [r7, #20]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d903      	bls.n	8003fb2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <BSP_TS_GetState+0x150>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003fb2:	8abb      	ldrh	r3, [r7, #20]
 8003fb4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d806      	bhi.n	8003fce <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003fc6:	330e      	adds	r3, #14
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	81fb      	strh	r3, [r7, #14]
 8003fcc:	e005      	b.n	8003fda <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003fce:	89fb      	ldrh	r3, [r7, #14]
 8003fd0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	4a2f      	ldr	r2, [pc, #188]	; (800409c <BSP_TS_GetState+0x154>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003fe6:	8afb      	ldrh	r3, [r7, #22]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	82fb      	strh	r3, [r7, #22]
 8003ff0:	e008      	b.n	8004004 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <BSP_TS_GetState+0x158>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	8afa      	ldrh	r2, [r7, #22]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d903      	bls.n	8004004 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <BSP_TS_GetState+0x158>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	3b01      	subs	r3, #1
 8004002:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004004:	8afb      	ldrh	r3, [r7, #22]
 8004006:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	461a      	mov	r2, r3
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <BSP_TS_GetState+0x15c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d906      	bls.n	8004022 <BSP_TS_GetState+0xda>
 8004014:	89fa      	ldrh	r2, [r7, #14]
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <BSP_TS_GetState+0x15c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	b29b      	uxth	r3, r3
 8004020:	e005      	b.n	800402e <BSP_TS_GetState+0xe6>
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <BSP_TS_GetState+0x15c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	b29a      	uxth	r2, r3
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	b29b      	uxth	r3, r3
 800402e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004030:	89bb      	ldrh	r3, [r7, #12]
 8004032:	461a      	mov	r2, r3
 8004034:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <BSP_TS_GetState+0x160>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d906      	bls.n	800404a <BSP_TS_GetState+0x102>
 800403c:	89ba      	ldrh	r2, [r7, #12]
 800403e:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <BSP_TS_GetState+0x160>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	b29b      	uxth	r3, r3
 8004048:	e005      	b.n	8004056 <BSP_TS_GetState+0x10e>
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <BSP_TS_GetState+0x160>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	b29a      	uxth	r2, r3
 8004050:	89bb      	ldrh	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	b29b      	uxth	r3, r3
 8004056:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004058:	8a7a      	ldrh	r2, [r7, #18]
 800405a:	8a3b      	ldrh	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	2b05      	cmp	r3, #5
 8004060:	dd07      	ble.n	8004072 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004062:	89fb      	ldrh	r3, [r7, #14]
 8004064:	461a      	mov	r2, r3
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <BSP_TS_GetState+0x15c>)
 8004068:	601a      	str	r2, [r3, #0]
      _y = y; 
 800406a:	89bb      	ldrh	r3, [r7, #12]
 800406c:	461a      	mov	r2, r3
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <BSP_TS_GetState+0x160>)
 8004070:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <BSP_TS_GetState+0x15c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <BSP_TS_GetState+0x160>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	809a      	strh	r2, [r3, #4]
  }
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000aa8 	.word	0x20000aa8
 8004094:	ba2e8ba3 	.word	0xba2e8ba3
 8004098:	20000aae 	.word	0x20000aae
 800409c:	88888889 	.word	0x88888889
 80040a0:	20000aac 	.word	0x20000aac
 80040a4:	20000ab0 	.word	0x20000ab0
 80040a8:	20000ab4 	.word	0x20000ab4

080040ac <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <BSP_TS_ITClear+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	2082      	movs	r0, #130	; 0x82
 80040b8:	4798      	blx	r3
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000aa8 	.word	0x20000aa8

080040c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040c8:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <HAL_Init+0x40>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <HAL_Init+0x40>)
 80040ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_Init+0x40>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <HAL_Init+0x40>)
 80040da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_Init+0x40>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a07      	ldr	r2, [pc, #28]	; (8004104 <HAL_Init+0x40>)
 80040e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ec:	2003      	movs	r0, #3
 80040ee:	f000 f957 	bl	80043a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040f2:	200f      	movs	r0, #15
 80040f4:	f000 f810 	bl	8004118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040f8:	f000 f806 	bl	8004108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023c00 	.word	0x40023c00

08004108 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_InitTick+0x54>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_InitTick+0x58>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f967 	bl	800440a <HAL_SYSTICK_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00e      	b.n	8004164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d80a      	bhi.n	8004162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800414c:	2200      	movs	r2, #0
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f000 f92f 	bl	80043b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <HAL_InitTick+0x5c>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200002d8 	.word	0x200002d8
 8004170:	20000374 	.word	0x20000374
 8004174:	20000370 	.word	0x20000370

08004178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_IncTick+0x20>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_IncTick+0x24>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_IncTick+0x24>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000374 	.word	0x20000374
 800419c:	20000ab8 	.word	0x20000ab8

080041a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return uwTick;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_GetTick+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000ab8 	.word	0x20000ab8

080041b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041c0:	f7ff ffee 	bl	80041a0 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d005      	beq.n	80041de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_Delay+0x44>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041de:	bf00      	nop
 80041e0:	f7ff ffde 	bl	80041a0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d8f7      	bhi.n	80041e0 <HAL_Delay+0x28>
  {
  }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000374 	.word	0x20000374

08004200 <__NVIC_SetPriorityGrouping>:
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800421c:	4013      	ands	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004232:	4a04      	ldr	r2, [pc, #16]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	60d3      	str	r3, [r2, #12]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <__NVIC_GetPriorityGrouping>:
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <__NVIC_GetPriorityGrouping+0x18>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	f003 0307 	and.w	r3, r3, #7
}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <__NVIC_EnableIRQ>:
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db0b      	blt.n	800428e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	f003 021f 	and.w	r2, r3, #31
 800427c:	4907      	ldr	r1, [pc, #28]	; (800429c <__NVIC_EnableIRQ+0x38>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2001      	movs	r0, #1
 8004286:	fa00 f202 	lsl.w	r2, r0, r2
 800428a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000e100 	.word	0xe000e100

080042a0 <__NVIC_SetPriority>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db0a      	blt.n	80042ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	490c      	ldr	r1, [pc, #48]	; (80042ec <__NVIC_SetPriority+0x4c>)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	0112      	lsls	r2, r2, #4
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	440b      	add	r3, r1
 80042c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042c8:	e00a      	b.n	80042e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4908      	ldr	r1, [pc, #32]	; (80042f0 <__NVIC_SetPriority+0x50>)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	3b04      	subs	r3, #4
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	440b      	add	r3, r1
 80042de:	761a      	strb	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000e100 	.word	0xe000e100
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f1c3 0307 	rsb	r3, r3, #7
 800430e:	2b04      	cmp	r3, #4
 8004310:	bf28      	it	cs
 8004312:	2304      	movcs	r3, #4
 8004314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3304      	adds	r3, #4
 800431a:	2b06      	cmp	r3, #6
 800431c:	d902      	bls.n	8004324 <NVIC_EncodePriority+0x30>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3b03      	subs	r3, #3
 8004322:	e000      	b.n	8004326 <NVIC_EncodePriority+0x32>
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43da      	mvns	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	401a      	ands	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800433c:	f04f 31ff 	mov.w	r1, #4294967295
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43d9      	mvns	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800434c:	4313      	orrs	r3, r2
         );
}
 800434e:	4618      	mov	r0, r3
 8004350:	3724      	adds	r7, #36	; 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3b01      	subs	r3, #1
 8004368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800436c:	d301      	bcc.n	8004372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800436e:	2301      	movs	r3, #1
 8004370:	e00f      	b.n	8004392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <SysTick_Config+0x40>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800437a:	210f      	movs	r1, #15
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	f7ff ff8e 	bl	80042a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <SysTick_Config+0x40>)
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <SysTick_Config+0x40>)
 800438c:	2207      	movs	r2, #7
 800438e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	e000e010 	.word	0xe000e010

080043a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ff29 	bl	8004200 <__NVIC_SetPriorityGrouping>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b086      	sub	sp, #24
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043c8:	f7ff ff3e 	bl	8004248 <__NVIC_GetPriorityGrouping>
 80043cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f7ff ff8e 	bl	80042f4 <NVIC_EncodePriority>
 80043d8:	4602      	mov	r2, r0
 80043da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff5d 	bl	80042a0 <__NVIC_SetPriority>
}
 80043e6:	bf00      	nop
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	4603      	mov	r3, r0
 80043f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff31 	bl	8004264 <__NVIC_EnableIRQ>
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ffa2 	bl	800435c <SysTick_Config>
 8004418:	4603      	mov	r3, r0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004430:	f7ff feb6 	bl	80041a0 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e099      	b.n	8004574 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004460:	e00f      	b.n	8004482 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004462:	f7ff fe9d 	bl	80041a0 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b05      	cmp	r3, #5
 800446e:	d908      	bls.n	8004482 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2203      	movs	r2, #3
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e078      	b.n	8004574 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e8      	bne.n	8004462 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4b38      	ldr	r3, [pc, #224]	; (800457c <HAL_DMA_Init+0x158>)
 800449c:	4013      	ands	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d107      	bne.n	80044ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4313      	orrs	r3, r2
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0307 	bic.w	r3, r3, #7
 8004502:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b04      	cmp	r3, #4
 8004514:	d117      	bne.n	8004546 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00e      	beq.n	8004546 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8bd 	bl	80046a8 <DMA_CheckFifoParam>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2240      	movs	r2, #64	; 0x40
 8004538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004542:	2301      	movs	r3, #1
 8004544:	e016      	b.n	8004574 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f874 	bl	800463c <DMA_CalcBaseAndBitshift>
 8004554:	4603      	mov	r3, r0
 8004556:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	223f      	movs	r2, #63	; 0x3f
 800455e:	409a      	lsls	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	f010803f 	.word	0xf010803f

08004580 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e050      	b.n	8004634 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d101      	bne.n	80045a2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	e048      	b.n	8004634 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2221      	movs	r2, #33	; 0x21
 80045e0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f82a 	bl	800463c <DMA_CalcBaseAndBitshift>
 80045e8:	4603      	mov	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	223f      	movs	r2, #63	; 0x3f
 8004616:	409a      	lsls	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	3b10      	subs	r3, #16
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <DMA_CalcBaseAndBitshift+0x64>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004656:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d909      	bls.n	800467e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	1d1a      	adds	r2, r3, #4
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	659a      	str	r2, [r3, #88]	; 0x58
 800467c:	e007      	b.n	800468e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	aaaaaaab 	.word	0xaaaaaaab
 80046a4:	0800dc64 	.word	0x0800dc64

080046a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d11f      	bne.n	8004702 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d856      	bhi.n	8004776 <DMA_CheckFifoParam+0xce>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <DMA_CheckFifoParam+0x28>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046f3 	.word	0x080046f3
 80046d8:	080046e1 	.word	0x080046e1
 80046dc:	08004777 	.word	0x08004777
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d046      	beq.n	800477a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f0:	e043      	b.n	800477a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046fa:	d140      	bne.n	800477e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e03d      	b.n	800477e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470a:	d121      	bne.n	8004750 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d837      	bhi.n	8004782 <DMA_CheckFifoParam+0xda>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <DMA_CheckFifoParam+0x70>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	08004729 	.word	0x08004729
 800471c:	0800472f 	.word	0x0800472f
 8004720:	08004729 	.word	0x08004729
 8004724:	08004741 	.word	0x08004741
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e030      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d025      	beq.n	8004786 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473e:	e022      	b.n	8004786 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004748:	d11f      	bne.n	800478a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800474e:	e01c      	b.n	800478a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d903      	bls.n	800475e <DMA_CheckFifoParam+0xb6>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d003      	beq.n	8004764 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800475c:	e018      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      break;
 8004762:	e015      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00e      	beq.n	800478e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      break;
 8004774:	e00b      	b.n	800478e <DMA_CheckFifoParam+0xe6>
      break;
 8004776:	bf00      	nop
 8004778:	e00a      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      break;
 800477a:	bf00      	nop
 800477c:	e008      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      break;
 800477e:	bf00      	nop
 8004780:	e006      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      break;
 8004782:	bf00      	nop
 8004784:	e004      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      break;   
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <DMA_CheckFifoParam+0xe8>
      break;
 800478e:	bf00      	nop
    }
  } 
  
  return status; 
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop

080047a0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e03b      	b.n	800482a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f833 	bl	8004832 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	f023 0107 	bic.w	r1, r3, #7
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800480a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68d1      	ldr	r1, [r2, #12]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	430b      	orrs	r3, r1
 8004818:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af02      	add	r7, sp, #8
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_DMA2D_Start+0x1c>
 800485e:	2302      	movs	r3, #2
 8004860:	e018      	b.n	8004894 <HAL_DMA2D_Start+0x4e>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f989 	bl	8004b94 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d056      	beq.n	8004966 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80048b8:	f7ff fc72 	bl	80041a0 <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80048be:	e04b      	b.n	8004958 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d023      	beq.n	800491a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	f043 0202 	orr.w	r2, r3, #2
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2221      	movs	r2, #33	; 0x21
 8004904:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e0a5      	b.n	8004a66 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d01a      	beq.n	8004958 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004922:	f7ff fc3d 	bl	80041a0 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <HAL_DMA2D_PollForTransfer+0x9c>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10f      	bne.n	8004958 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2203      	movs	r2, #3
 8004948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e086      	b.n	8004a66 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ac      	beq.n	80048c0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d061      	beq.n	8004a4c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004988:	f7ff fc0a 	bl	80041a0 <HAL_GetTick>
 800498c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800498e:	e056      	b.n	8004a3e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d02e      	beq.n	8004a00 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	f043 0204 	orr.w	r2, r3, #4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	f043 0202 	orr.w	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	f043 0201 	orr.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2229      	movs	r2, #41	; 0x29
 80049ea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2204      	movs	r2, #4
 80049f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e032      	b.n	8004a66 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d01a      	beq.n	8004a3e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004a08:	f7ff fbca 	bl	80041a0 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <HAL_DMA2D_PollForTransfer+0x182>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e013      	b.n	8004a66 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0a1      	beq.n	8004990 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2212      	movs	r2, #18
 8004a52:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_DMA2D_ConfigLayer+0x20>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e079      	b.n	8004b84 <HAL_DMA2D_ConfigLayer+0x114>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004aba:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <HAL_DMA2D_ConfigLayer+0x120>)
 8004abc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	d003      	beq.n	8004ace <HAL_DMA2D_ConfigLayer+0x5e>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b09      	cmp	r3, #9
 8004acc:	d107      	bne.n	8004ade <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e005      	b.n	8004aea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d120      	bne.n	8004b32 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	ea02 0103 	and.w	r1, r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b0a      	cmp	r3, #10
 8004b18:	d003      	beq.n	8004b22 <HAL_DMA2D_ConfigLayer+0xb2>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	d127      	bne.n	8004b72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b30:	e01f      	b.n	8004b72 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	ea02 0103 	and.w	r1, r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b0a      	cmp	r3, #10
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA2D_ConfigLayer+0xf4>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b09      	cmp	r3, #9
 8004b62:	d106      	bne.n	8004b72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b70:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	ff03000f 	.word	0xff03000f

08004b94 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b08b      	sub	sp, #44	; 0x2c
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	041a      	lsls	r2, r3, #16
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bcc:	d174      	bne.n	8004cb8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004be4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d108      	bne.n	8004c06 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
 8004c04:	e053      	b.n	8004cae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d106      	bne.n	8004c1c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	e048      	b.n	8004cae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d111      	bne.n	8004c48 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	0cdb      	lsrs	r3, r3, #19
 8004c28:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	0a9b      	lsrs	r3, r3, #10
 8004c2e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	02db      	lsls	r3, r3, #11
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
 8004c46:	e032      	b.n	8004cae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d117      	bne.n	8004c80 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	0fdb      	lsrs	r3, r3, #31
 8004c54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	0cdb      	lsrs	r3, r3, #19
 8004c5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	0adb      	lsrs	r3, r3, #11
 8004c60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	08db      	lsrs	r3, r3, #3
 8004c66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	431a      	orrs	r2, r3
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	03db      	lsls	r3, r3, #15
 8004c76:	4313      	orrs	r3, r2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	e016      	b.n	8004cae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	0f1b      	lsrs	r3, r3, #28
 8004c84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	0b1b      	lsrs	r3, r3, #12
 8004c90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	011a      	lsls	r2, r3, #4
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	031b      	lsls	r3, r3, #12
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004cb6:	e003      	b.n	8004cc0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	372c      	adds	r7, #44	; 0x2c
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	; 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e177      	b.n	8004fd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ce8:	2201      	movs	r2, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	f040 8166 	bne.w	8004fd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d00b      	beq.n	8004d26 <HAL_GPIO_Init+0x5a>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d007      	beq.n	8004d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d1a:	2b11      	cmp	r3, #17
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b12      	cmp	r3, #18
 8004d24:	d130      	bne.n	8004d88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	2203      	movs	r2, #3
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 0201 	and.w	r2, r3, #1
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2203      	movs	r2, #3
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d003      	beq.n	8004dc8 <HAL_GPIO_Init+0xfc>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b12      	cmp	r3, #18
 8004dc6:	d123      	bne.n	8004e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	08da      	lsrs	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3208      	adds	r2, #8
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0203 	and.w	r2, r3, #3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80c0 	beq.w	8004fd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	4b66      	ldr	r3, [pc, #408]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	4a65      	ldr	r2, [pc, #404]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e60:	6453      	str	r3, [r2, #68]	; 0x44
 8004e62:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e6e:	4a61      	ldr	r2, [pc, #388]	; (8004ff4 <HAL_GPIO_Init+0x328>)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	3302      	adds	r3, #2
 8004e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a58      	ldr	r2, [pc, #352]	; (8004ff8 <HAL_GPIO_Init+0x32c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d037      	beq.n	8004f0a <HAL_GPIO_Init+0x23e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <HAL_GPIO_Init+0x330>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d031      	beq.n	8004f06 <HAL_GPIO_Init+0x23a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a56      	ldr	r2, [pc, #344]	; (8005000 <HAL_GPIO_Init+0x334>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <HAL_GPIO_Init+0x236>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a55      	ldr	r2, [pc, #340]	; (8005004 <HAL_GPIO_Init+0x338>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x232>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a54      	ldr	r2, [pc, #336]	; (8005008 <HAL_GPIO_Init+0x33c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x22e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a53      	ldr	r2, [pc, #332]	; (800500c <HAL_GPIO_Init+0x340>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x22a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a52      	ldr	r2, [pc, #328]	; (8005010 <HAL_GPIO_Init+0x344>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x226>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a51      	ldr	r2, [pc, #324]	; (8005014 <HAL_GPIO_Init+0x348>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x222>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a50      	ldr	r2, [pc, #320]	; (8005018 <HAL_GPIO_Init+0x34c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x21e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4f      	ldr	r2, [pc, #316]	; (800501c <HAL_GPIO_Init+0x350>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x21a>
 8004ee2:	2309      	movs	r3, #9
 8004ee4:	e012      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004ee6:	230a      	movs	r3, #10
 8004ee8:	e010      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004eea:	2308      	movs	r3, #8
 8004eec:	e00e      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004eee:	2307      	movs	r3, #7
 8004ef0:	e00c      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	e00a      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	e008      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004efa:	2304      	movs	r3, #4
 8004efc:	e006      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004efe:	2303      	movs	r3, #3
 8004f00:	e004      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e002      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_GPIO_Init+0x240>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	f002 0203 	and.w	r2, r2, #3
 8004f12:	0092      	lsls	r2, r2, #2
 8004f14:	4093      	lsls	r3, r2
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f1c:	4935      	ldr	r1, [pc, #212]	; (8004ff4 <HAL_GPIO_Init+0x328>)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	3302      	adds	r3, #2
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f4e:	4a34      	ldr	r2, [pc, #208]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f54:	4b32      	ldr	r3, [pc, #200]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f78:	4a29      	ldr	r2, [pc, #164]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f7e:	4b28      	ldr	r3, [pc, #160]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fcc:	4a14      	ldr	r2, [pc, #80]	; (8005020 <HAL_GPIO_Init+0x354>)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b0f      	cmp	r3, #15
 8004fdc:	f67f ae84 	bls.w	8004ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40013800 	.word	0x40013800
 8004ff8:	40020000 	.word	0x40020000
 8004ffc:	40020400 	.word	0x40020400
 8005000:	40020800 	.word	0x40020800
 8005004:	40020c00 	.word	0x40020c00
 8005008:	40021000 	.word	0x40021000
 800500c:	40021400 	.word	0x40021400
 8005010:	40021800 	.word	0x40021800
 8005014:	40021c00 	.word	0x40021c00
 8005018:	40022000 	.word	0x40022000
 800501c:	40022400 	.word	0x40022400
 8005020:	40013c00 	.word	0x40013c00

08005024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	887b      	ldrh	r3, [r7, #2]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
 8005040:	e001      	b.n	8005046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	807b      	strh	r3, [r7, #2]
 8005060:	4613      	mov	r3, r2
 8005062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005064:	787b      	ldrb	r3, [r7, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005070:	e003      	b.n	800507a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	041a      	lsls	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	619a      	str	r2, [r3, #24]
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	460b      	mov	r3, r1
 8005090:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	401a      	ands	r2, r3
 800509a:	887b      	ldrh	r3, [r7, #2]
 800509c:	429a      	cmp	r2, r3
 800509e:	d104      	bne.n	80050aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80050a0:	887b      	ldrh	r3, [r7, #2]
 80050a2:	041a      	lsls	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80050a8:	e002      	b.n	80050b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80050aa:	887a      	ldrh	r2, [r7, #2]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	619a      	str	r2, [r3, #24]
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e12b      	b.n	8005326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f95d 	bl	80053a2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2224      	movs	r2, #36	; 0x24
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800510e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800511e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005120:	f001 ff1a 	bl	8006f58 <HAL_RCC_GetPCLK1Freq>
 8005124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4a81      	ldr	r2, [pc, #516]	; (8005330 <HAL_I2C_Init+0x274>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d807      	bhi.n	8005140 <HAL_I2C_Init+0x84>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a80      	ldr	r2, [pc, #512]	; (8005334 <HAL_I2C_Init+0x278>)
 8005134:	4293      	cmp	r3, r2
 8005136:	bf94      	ite	ls
 8005138:	2301      	movls	r3, #1
 800513a:	2300      	movhi	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e006      	b.n	800514e <HAL_I2C_Init+0x92>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a7d      	ldr	r2, [pc, #500]	; (8005338 <HAL_I2C_Init+0x27c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	bf94      	ite	ls
 8005148:	2301      	movls	r3, #1
 800514a:	2300      	movhi	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0e7      	b.n	8005326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a78      	ldr	r2, [pc, #480]	; (800533c <HAL_I2C_Init+0x280>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a6a      	ldr	r2, [pc, #424]	; (8005330 <HAL_I2C_Init+0x274>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d802      	bhi.n	8005190 <HAL_I2C_Init+0xd4>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	3301      	adds	r3, #1
 800518e:	e009      	b.n	80051a4 <HAL_I2C_Init+0xe8>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	4a69      	ldr	r2, [pc, #420]	; (8005340 <HAL_I2C_Init+0x284>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	3301      	adds	r3, #1
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	495c      	ldr	r1, [pc, #368]	; (8005330 <HAL_I2C_Init+0x274>)
 80051c0:	428b      	cmp	r3, r1
 80051c2:	d819      	bhi.n	80051f8 <HAL_I2C_Init+0x13c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e59      	subs	r1, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051d8:	400b      	ands	r3, r1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_I2C_Init+0x138>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1e59      	subs	r1, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ec:	3301      	adds	r3, #1
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	e051      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f4:	2304      	movs	r3, #4
 80051f6:	e04f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d111      	bne.n	8005224 <HAL_I2C_Init+0x168>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e58      	subs	r0, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	440b      	add	r3, r1
 800520e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005212:	3301      	adds	r3, #1
 8005214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e012      	b.n	800524a <HAL_I2C_Init+0x18e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1e58      	subs	r0, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	0099      	lsls	r1, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	fbb0 f3f3 	udiv	r3, r0, r3
 800523a:	3301      	adds	r3, #1
 800523c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_I2C_Init+0x196>
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <HAL_I2C_Init+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1e58      	subs	r0, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	440b      	add	r3, r1
 8005268:	fbb0 f3f3 	udiv	r3, r0, r3
 800526c:	3301      	adds	r3, #1
 800526e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005276:	e00f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	6809      	ldr	r1, [r1, #0]
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6911      	ldr	r1, [r2, #16]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	430b      	orrs	r3, r1
 80052da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	000186a0 	.word	0x000186a0
 8005334:	001e847f 	.word	0x001e847f
 8005338:	003d08ff 	.word	0x003d08ff
 800533c:	431bde83 	.word	0x431bde83
 8005340:	10624dd3 	.word	0x10624dd3

08005344 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e021      	b.n	800539a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2224      	movs	r2, #36	; 0x24
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f821 	bl	80053b6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	461a      	mov	r2, r3
 80053da:	4603      	mov	r3, r0
 80053dc:	817b      	strh	r3, [r7, #10]
 80053de:	460b      	mov	r3, r1
 80053e0:	813b      	strh	r3, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053e6:	f7fe fedb 	bl	80041a0 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	f040 80d9 	bne.w	80055ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2319      	movs	r3, #25
 8005400:	2201      	movs	r2, #1
 8005402:	496d      	ldr	r1, [pc, #436]	; (80055b8 <HAL_I2C_Mem_Write+0x1ec>)
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fc89 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
 8005412:	e0cc      	b.n	80055ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_I2C_Mem_Write+0x56>
 800541e:	2302      	movs	r3, #2
 8005420:	e0c5      	b.n	80055ae <HAL_I2C_Mem_Write+0x1e2>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d007      	beq.n	8005448 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005456:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2221      	movs	r2, #33	; 0x21
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a4d      	ldr	r2, [pc, #308]	; (80055bc <HAL_I2C_Mem_Write+0x1f0>)
 8005488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800548a:	88f8      	ldrh	r0, [r7, #6]
 800548c:	893a      	ldrh	r2, [r7, #8]
 800548e:	8979      	ldrh	r1, [r7, #10]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	4603      	mov	r3, r0
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fac4 	bl	8005a28 <I2C_RequestMemoryWrite>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d052      	beq.n	800554c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e081      	b.n	80055ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fd0a 	bl	8005ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d107      	bne.n	80054d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e06b      	b.n	80055ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b04      	cmp	r3, #4
 8005512:	d11b      	bne.n	800554c <HAL_I2C_Mem_Write+0x180>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d017      	beq.n	800554c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1aa      	bne.n	80054aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fcf6 	bl	8005f4a <I2C_WaitOnBTFFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	2b04      	cmp	r3, #4
 800556a:	d107      	bne.n	800557c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e016      	b.n	80055ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	00100002 	.word	0x00100002
 80055bc:	ffff0000 	.word	0xffff0000

080055c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	; 0x30
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	817b      	strh	r3, [r7, #10]
 80055d2:	460b      	mov	r3, r1
 80055d4:	813b      	strh	r3, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055da:	f7fe fde1 	bl	80041a0 <HAL_GetTick>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	f040 8208 	bne.w	80059fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	2319      	movs	r3, #25
 80055f4:	2201      	movs	r2, #1
 80055f6:	497b      	ldr	r1, [pc, #492]	; (80057e4 <HAL_I2C_Mem_Read+0x224>)
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fb8f 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
 8005606:	e1fb      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_I2C_Mem_Read+0x56>
 8005612:	2302      	movs	r3, #2
 8005614:	e1f4      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b01      	cmp	r3, #1
 800562a:	d007      	beq.n	800563c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800564a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2222      	movs	r2, #34	; 0x22
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2240      	movs	r2, #64	; 0x40
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800566c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a5b      	ldr	r2, [pc, #364]	; (80057e8 <HAL_I2C_Mem_Read+0x228>)
 800567c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800567e:	88f8      	ldrh	r0, [r7, #6]
 8005680:	893a      	ldrh	r2, [r7, #8]
 8005682:	8979      	ldrh	r1, [r7, #10]
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4603      	mov	r3, r0
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 fa5e 	bl	8005b50 <I2C_RequestMemoryRead>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e1b0      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d113      	bne.n	80056ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	623b      	str	r3, [r7, #32]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e184      	b.n	80059d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d11b      	bne.n	800570e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e164      	b.n	80059d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005712:	2b02      	cmp	r3, #2
 8005714:	d11b      	bne.n	800574e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005724:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	e144      	b.n	80059d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005764:	e138      	b.n	80059d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	2b03      	cmp	r3, #3
 800576c:	f200 80f1 	bhi.w	8005952 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005774:	2b01      	cmp	r3, #1
 8005776:	d123      	bne.n	80057c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fc25 	bl	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e139      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057be:	e10b      	b.n	80059d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d14e      	bne.n	8005866 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	2200      	movs	r2, #0
 80057d0:	4906      	ldr	r1, [pc, #24]	; (80057ec <HAL_I2C_Mem_Read+0x22c>)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 faa2 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e10e      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
 80057e2:	bf00      	nop
 80057e4:	00100002 	.word	0x00100002
 80057e8:	ffff0000 	.word	0xffff0000
 80057ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005864:	e0b8      	b.n	80059d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2200      	movs	r2, #0
 800586e:	4966      	ldr	r1, [pc, #408]	; (8005a08 <HAL_I2C_Mem_Read+0x448>)
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fa53 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0bf      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2200      	movs	r2, #0
 80058ca:	494f      	ldr	r1, [pc, #316]	; (8005a08 <HAL_I2C_Mem_Read+0x448>)
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fa25 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e091      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005950:	e042      	b.n	80059d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fb38 	bl	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e04c      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d118      	bne.n	80059d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f47f aec2 	bne.w	8005766 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3728      	adds	r7, #40	; 0x28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	00010004 	.word	0x00010004

08005a0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	4608      	mov	r0, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	817b      	strh	r3, [r7, #10]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	813b      	strh	r3, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f95c 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e05f      	b.n	8005b44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a84:	897b      	ldrh	r3, [r7, #10]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	492c      	ldr	r1, [pc, #176]	; (8005b4c <I2C_RequestMemoryWrite+0x124>)
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f995 	bl	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e04c      	b.n	8005b44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac2:	6a39      	ldr	r1, [r7, #32]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f9ff 	bl	8005ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00d      	beq.n	8005aec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d107      	bne.n	8005ae8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e02b      	b.n	8005b44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af2:	893b      	ldrh	r3, [r7, #8]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	611a      	str	r2, [r3, #16]
 8005afc:	e021      	b.n	8005b42 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005afe:	893b      	ldrh	r3, [r7, #8]
 8005b00:	0a1b      	lsrs	r3, r3, #8
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	6a39      	ldr	r1, [r7, #32]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f9d9 	bl	8005ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d107      	bne.n	8005b34 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e005      	b.n	8005b44 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b38:	893b      	ldrh	r3, [r7, #8]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	00010002 	.word	0x00010002

08005b50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	817b      	strh	r3, [r7, #10]
 8005b62:	460b      	mov	r3, r1
 8005b64:	813b      	strh	r3, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f8c0 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00c      	beq.n	8005bbc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0a9      	b.n	8005d10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bbc:	897b      	ldrh	r3, [r7, #10]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	4951      	ldr	r1, [pc, #324]	; (8005d18 <I2C_RequestMemoryRead+0x1c8>)
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f8f9 	bl	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e096      	b.n	8005d10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	6a39      	ldr	r1, [r7, #32]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f963 	bl	8005ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d107      	bne.n	8005c20 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e075      	b.n	8005d10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2a:	893b      	ldrh	r3, [r7, #8]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	611a      	str	r2, [r3, #16]
 8005c34:	e021      	b.n	8005c7a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c36:	893b      	ldrh	r3, [r7, #8]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	6a39      	ldr	r1, [r7, #32]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f93d 	bl	8005ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00d      	beq.n	8005c70 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d107      	bne.n	8005c6c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e04f      	b.n	8005d10 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7c:	6a39      	ldr	r1, [r7, #32]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f922 	bl	8005ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d107      	bne.n	8005ca2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e034      	b.n	8005d10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f82a 	bl	8005d1c <I2C_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e013      	b.n	8005d10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ce8:	897b      	ldrh	r3, [r7, #10]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	6a3a      	ldr	r2, [r7, #32]
 8005cfc:	4906      	ldr	r1, [pc, #24]	; (8005d18 <I2C_RequestMemoryRead+0x1c8>)
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f863 	bl	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	00010002 	.word	0x00010002

08005d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d2c:	e025      	b.n	8005d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d021      	beq.n	8005d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d36:	f7fe fa33 	bl	80041a0 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d302      	bcc.n	8005d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d116      	bne.n	8005d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e023      	b.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10d      	bne.n	8005da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	43da      	mvns	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	e00c      	b.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	43da      	mvns	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4013      	ands	r3, r2
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf0c      	ite	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	2300      	movne	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d0b6      	beq.n	8005d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dd8:	e051      	b.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d123      	bne.n	8005e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f043 0204 	orr.w	r2, r3, #4
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e046      	b.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d021      	beq.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3a:	f7fe f9b1 	bl	80041a0 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d302      	bcc.n	8005e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d116      	bne.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e020      	b.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10c      	bne.n	8005ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	43da      	mvns	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4013      	ands	r3, r2
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bf14      	ite	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	2300      	moveq	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	e00b      	b.n	8005eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	43da      	mvns	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf14      	ite	ne
 8005eb4:	2301      	movne	r3, #1
 8005eb6:	2300      	moveq	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d18d      	bne.n	8005dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ed4:	e02d      	b.n	8005f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f8ce 	bl	8006078 <I2C_IsAcknowledgeFailed>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e02d      	b.n	8005f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d021      	beq.n	8005f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eee:	f7fe f957 	bl	80041a0 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d302      	bcc.n	8005f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d116      	bne.n	8005f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e007      	b.n	8005f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d1ca      	bne.n	8005ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f56:	e02d      	b.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f88d 	bl	8006078 <I2C_IsAcknowledgeFailed>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e02d      	b.n	8005fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d021      	beq.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f70:	f7fe f916 	bl	80041a0 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d302      	bcc.n	8005f86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e007      	b.n	8005fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d1ca      	bne.n	8005f58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fd8:	e042      	b.n	8006060 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d119      	bne.n	800601c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0210 	mvn.w	r2, #16
 8005ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e029      	b.n	8006070 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601c:	f7fe f8c0 	bl	80041a0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	429a      	cmp	r2, r3
 800602a:	d302      	bcc.n	8006032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d116      	bne.n	8006060 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	f043 0220 	orr.w	r2, r3, #32
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e007      	b.n	8006070 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d1b5      	bne.n	8005fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608e:	d11b      	bne.n	80060c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006098:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	f043 0204 	orr.w	r2, r3, #4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e0bf      	b.n	800626a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f8ba 	bl	8006278 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800611a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006130:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6899      	ldr	r1, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <HAL_LTDC_Init+0x19c>)
 800614c:	400b      	ands	r3, r1
 800614e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	041b      	lsls	r3, r3, #16
 8006156:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68d9      	ldr	r1, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4b3e      	ldr	r3, [pc, #248]	; (8006274 <HAL_LTDC_Init+0x19c>)
 800617a:	400b      	ands	r3, r1
 800617c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68d9      	ldr	r1, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6919      	ldr	r1, [r3, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b33      	ldr	r3, [pc, #204]	; (8006274 <HAL_LTDC_Init+0x19c>)
 80061a8:	400b      	ands	r3, r1
 80061aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6919      	ldr	r1, [r3, #16]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6959      	ldr	r1, [r3, #20]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b27      	ldr	r3, [pc, #156]	; (8006274 <HAL_LTDC_Init+0x19c>)
 80061d6:	400b      	ands	r3, r1
 80061d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6959      	ldr	r1, [r3, #20]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800621a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0206 	orr.w	r2, r2, #6
 8006246:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	f000f800 	.word	0xf000f800

08006278 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800628c:	b5b0      	push	{r4, r5, r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_LTDC_ConfigLayer+0x1a>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e02c      	b.n	8006300 <HAL_LTDC_ConfigLayer+0x74>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2134      	movs	r1, #52	; 0x34
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	4413      	add	r3, r2
 80062c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f83b 	bl	800635c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2201      	movs	r2, #1
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bdb0      	pop	{r4, r5, r7, pc}

08006308 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_LTDC_EnableDither+0x16>
 800631a:	2302      	movs	r3, #2
 800631c:	e016      	b.n	800634c <HAL_LTDC_EnableDither+0x44>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <HAL_LTDC_EnableDither+0x50>)
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <HAL_LTDC_EnableDither+0x50>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006338:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40016800 	.word	0x40016800

0800635c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800635c:	b480      	push	{r7}
 800635e:	b089      	sub	sp, #36	; 0x24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006378:	4413      	add	r3, r2
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	4413      	add	r3, r2
 800638a:	3384      	adds	r3, #132	; 0x84
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	4611      	mov	r1, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	01d2      	lsls	r2, r2, #7
 8006398:	440a      	add	r2, r1
 800639a:	3284      	adds	r2, #132	; 0x84
 800639c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0c1b      	lsrs	r3, r3, #16
 80063ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b2:	4413      	add	r3, r2
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	01db      	lsls	r3, r3, #7
 80063c0:	440b      	add	r3, r1
 80063c2:	3384      	adds	r3, #132	; 0x84
 80063c4:	4619      	mov	r1, r3
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063da:	4413      	add	r3, r2
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	01db      	lsls	r3, r3, #7
 80063ea:	4413      	add	r3, r2
 80063ec:	3384      	adds	r3, #132	; 0x84
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	4611      	mov	r1, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	01d2      	lsls	r2, r2, #7
 80063fa:	440a      	add	r2, r1
 80063fc:	3284      	adds	r2, #132	; 0x84
 80063fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006402:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006412:	4413      	add	r3, r2
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4619      	mov	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	01db      	lsls	r3, r3, #7
 8006420:	440b      	add	r3, r1
 8006422:	3384      	adds	r3, #132	; 0x84
 8006424:	4619      	mov	r1, r3
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4313      	orrs	r3, r2
 800642a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	01db      	lsls	r3, r3, #7
 8006436:	4413      	add	r3, r2
 8006438:	3384      	adds	r3, #132	; 0x84
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	4611      	mov	r1, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	01d2      	lsls	r2, r2, #7
 8006446:	440a      	add	r2, r1
 8006448:	3284      	adds	r2, #132	; 0x84
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	01db      	lsls	r3, r3, #7
 800645a:	4413      	add	r3, r2
 800645c:	3384      	adds	r3, #132	; 0x84
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	061b      	lsls	r3, r3, #24
 8006480:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4413      	add	r3, r2
 800648e:	3384      	adds	r3, #132	; 0x84
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	4413      	add	r3, r2
 800649e:	3384      	adds	r3, #132	; 0x84
 80064a0:	461a      	mov	r2, r3
 80064a2:	2300      	movs	r3, #0
 80064a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064ac:	461a      	mov	r2, r3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	01db      	lsls	r3, r3, #7
 80064c0:	440b      	add	r3, r1
 80064c2:	3384      	adds	r3, #132	; 0x84
 80064c4:	4619      	mov	r1, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	01db      	lsls	r3, r3, #7
 80064d6:	4413      	add	r3, r2
 80064d8:	3384      	adds	r3, #132	; 0x84
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	4611      	mov	r1, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	01d2      	lsls	r2, r2, #7
 80064e6:	440a      	add	r2, r1
 80064e8:	3284      	adds	r2, #132	; 0x84
 80064ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	01db      	lsls	r3, r3, #7
 80064fa:	4413      	add	r3, r2
 80064fc:	3384      	adds	r3, #132	; 0x84
 80064fe:	461a      	mov	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	01db      	lsls	r3, r3, #7
 8006510:	4413      	add	r3, r2
 8006512:	3384      	adds	r3, #132	; 0x84
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	4611      	mov	r1, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	01d2      	lsls	r2, r2, #7
 8006520:	440a      	add	r2, r1
 8006522:	3284      	adds	r2, #132	; 0x84
 8006524:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6809      	ldr	r1, [r1, #0]
 800653a:	4608      	mov	r0, r1
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	01c9      	lsls	r1, r1, #7
 8006540:	4401      	add	r1, r0
 8006542:	3184      	adds	r1, #132	; 0x84
 8006544:	4313      	orrs	r3, r2
 8006546:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	4413      	add	r3, r2
 8006554:	3384      	adds	r3, #132	; 0x84
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	01db      	lsls	r3, r3, #7
 8006562:	4413      	add	r3, r2
 8006564:	3384      	adds	r3, #132	; 0x84
 8006566:	461a      	mov	r2, r3
 8006568:	2300      	movs	r3, #0
 800656a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	01db      	lsls	r3, r3, #7
 8006576:	4413      	add	r3, r2
 8006578:	3384      	adds	r3, #132	; 0x84
 800657a:	461a      	mov	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d102      	bne.n	8006590 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800658a:	2304      	movs	r3, #4
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	e01b      	b.n	80065c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d102      	bne.n	800659e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006598:	2303      	movs	r3, #3
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e014      	b.n	80065c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d00b      	beq.n	80065be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d007      	beq.n	80065be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d003      	beq.n	80065be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065ba:	2b07      	cmp	r3, #7
 80065bc:	d102      	bne.n	80065c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80065be:	2302      	movs	r3, #2
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	e001      	b.n	80065c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80065c4:	2301      	movs	r3, #1
 80065c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	01db      	lsls	r3, r3, #7
 80065d2:	4413      	add	r3, r2
 80065d4:	3384      	adds	r3, #132	; 0x84
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	4611      	mov	r1, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	01d2      	lsls	r2, r2, #7
 80065e2:	440a      	add	r2, r1
 80065e4:	3284      	adds	r2, #132	; 0x84
 80065e6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80065ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	041a      	lsls	r2, r3, #16
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	1acb      	subs	r3, r1, r3
 8006602:	69f9      	ldr	r1, [r7, #28]
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	3303      	adds	r3, #3
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	6809      	ldr	r1, [r1, #0]
 800660e:	4608      	mov	r0, r1
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	01c9      	lsls	r1, r1, #7
 8006614:	4401      	add	r1, r0
 8006616:	3184      	adds	r1, #132	; 0x84
 8006618:	4313      	orrs	r3, r2
 800661a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	01db      	lsls	r3, r3, #7
 8006626:	4413      	add	r3, r2
 8006628:	3384      	adds	r3, #132	; 0x84
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	4611      	mov	r1, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	01d2      	lsls	r2, r2, #7
 8006636:	440a      	add	r2, r1
 8006638:	3284      	adds	r2, #132	; 0x84
 800663a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800663e:	f023 0307 	bic.w	r3, r3, #7
 8006642:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	01db      	lsls	r3, r3, #7
 800664e:	4413      	add	r3, r2
 8006650:	3384      	adds	r3, #132	; 0x84
 8006652:	461a      	mov	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	01db      	lsls	r3, r3, #7
 8006664:	4413      	add	r3, r2
 8006666:	3384      	adds	r3, #132	; 0x84
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	4611      	mov	r1, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	01d2      	lsls	r2, r2, #7
 8006674:	440a      	add	r2, r1
 8006676:	3284      	adds	r2, #132	; 0x84
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6013      	str	r3, [r2, #0]
}
 800667e:	bf00      	nop
 8006680:	3724      	adds	r7, #36	; 0x24
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e25e      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d075      	beq.n	8006796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066aa:	4b88      	ldr	r3, [pc, #544]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d00c      	beq.n	80066d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066b6:	4b85      	ldr	r3, [pc, #532]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d112      	bne.n	80066e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066c2:	4b82      	ldr	r3, [pc, #520]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ce:	d10b      	bne.n	80066e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d0:	4b7e      	ldr	r3, [pc, #504]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d05b      	beq.n	8006794 <HAL_RCC_OscConfig+0x108>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d157      	bne.n	8006794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e239      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f0:	d106      	bne.n	8006700 <HAL_RCC_OscConfig+0x74>
 80066f2:	4b76      	ldr	r3, [pc, #472]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a75      	ldr	r2, [pc, #468]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e01d      	b.n	800673c <HAL_RCC_OscConfig+0xb0>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006708:	d10c      	bne.n	8006724 <HAL_RCC_OscConfig+0x98>
 800670a:	4b70      	ldr	r3, [pc, #448]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a6f      	ldr	r2, [pc, #444]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	4b6d      	ldr	r3, [pc, #436]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a6c      	ldr	r2, [pc, #432]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 800671c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	e00b      	b.n	800673c <HAL_RCC_OscConfig+0xb0>
 8006724:	4b69      	ldr	r3, [pc, #420]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a68      	ldr	r2, [pc, #416]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 800672a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4b66      	ldr	r3, [pc, #408]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a65      	ldr	r2, [pc, #404]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800673a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d013      	beq.n	800676c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006744:	f7fd fd2c 	bl	80041a0 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800674c:	f7fd fd28 	bl	80041a0 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b64      	cmp	r3, #100	; 0x64
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e1fe      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675e:	4b5b      	ldr	r3, [pc, #364]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0xc0>
 800676a:	e014      	b.n	8006796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800676c:	f7fd fd18 	bl	80041a0 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006774:	f7fd fd14 	bl	80041a0 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b64      	cmp	r3, #100	; 0x64
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e1ea      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006786:	4b51      	ldr	r3, [pc, #324]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0xe8>
 8006792:	e000      	b.n	8006796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d063      	beq.n	800686a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067a2:	4b4a      	ldr	r3, [pc, #296]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 030c 	and.w	r3, r3, #12
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ae:	4b47      	ldr	r3, [pc, #284]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d11c      	bne.n	80067f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ba:	4b44      	ldr	r3, [pc, #272]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d116      	bne.n	80067f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c6:	4b41      	ldr	r3, [pc, #260]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_RCC_OscConfig+0x152>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d001      	beq.n	80067de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e1be      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067de:	4b3b      	ldr	r3, [pc, #236]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4937      	ldr	r1, [pc, #220]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f2:	e03a      	b.n	800686a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d020      	beq.n	800683e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067fc:	4b34      	ldr	r3, [pc, #208]	; (80068d0 <HAL_RCC_OscConfig+0x244>)
 80067fe:	2201      	movs	r2, #1
 8006800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006802:	f7fd fccd 	bl	80041a0 <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006808:	e008      	b.n	800681c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800680a:	f7fd fcc9 	bl	80041a0 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e19f      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800681c:	4b2b      	ldr	r3, [pc, #172]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0f0      	beq.n	800680a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006828:	4b28      	ldr	r3, [pc, #160]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4925      	ldr	r1, [pc, #148]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006838:	4313      	orrs	r3, r2
 800683a:	600b      	str	r3, [r1, #0]
 800683c:	e015      	b.n	800686a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <HAL_RCC_OscConfig+0x244>)
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fd fcac 	bl	80041a0 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800684c:	f7fd fca8 	bl	80041a0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e17e      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800685e:	4b1b      	ldr	r3, [pc, #108]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f0      	bne.n	800684c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d036      	beq.n	80068e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d016      	beq.n	80068ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <HAL_RCC_OscConfig+0x248>)
 8006880:	2201      	movs	r2, #1
 8006882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006884:	f7fd fc8c 	bl	80041a0 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800688c:	f7fd fc88 	bl	80041a0 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e15e      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800689e:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <HAL_RCC_OscConfig+0x240>)
 80068a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f0      	beq.n	800688c <HAL_RCC_OscConfig+0x200>
 80068aa:	e01b      	b.n	80068e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_RCC_OscConfig+0x248>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b2:	f7fd fc75 	bl	80041a0 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b8:	e00e      	b.n	80068d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ba:	f7fd fc71 	bl	80041a0 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d907      	bls.n	80068d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e147      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
 80068cc:	40023800 	.word	0x40023800
 80068d0:	42470000 	.word	0x42470000
 80068d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d8:	4b88      	ldr	r3, [pc, #544]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 80068da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1ea      	bne.n	80068ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8097 	beq.w	8006a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f6:	4b81      	ldr	r3, [pc, #516]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10f      	bne.n	8006922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	4b7d      	ldr	r3, [pc, #500]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	4a7c      	ldr	r2, [pc, #496]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 800690c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006910:	6413      	str	r3, [r2, #64]	; 0x40
 8006912:	4b7a      	ldr	r3, [pc, #488]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800691a:	60bb      	str	r3, [r7, #8]
 800691c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800691e:	2301      	movs	r3, #1
 8006920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006922:	4b77      	ldr	r3, [pc, #476]	; (8006b00 <HAL_RCC_OscConfig+0x474>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	2b00      	cmp	r3, #0
 800692c:	d118      	bne.n	8006960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800692e:	4b74      	ldr	r3, [pc, #464]	; (8006b00 <HAL_RCC_OscConfig+0x474>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a73      	ldr	r2, [pc, #460]	; (8006b00 <HAL_RCC_OscConfig+0x474>)
 8006934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800693a:	f7fd fc31 	bl	80041a0 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006940:	e008      	b.n	8006954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006942:	f7fd fc2d 	bl	80041a0 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e103      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006954:	4b6a      	ldr	r3, [pc, #424]	; (8006b00 <HAL_RCC_OscConfig+0x474>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f0      	beq.n	8006942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d106      	bne.n	8006976 <HAL_RCC_OscConfig+0x2ea>
 8006968:	4b64      	ldr	r3, [pc, #400]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	4a63      	ldr	r2, [pc, #396]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	6713      	str	r3, [r2, #112]	; 0x70
 8006974:	e01c      	b.n	80069b0 <HAL_RCC_OscConfig+0x324>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b05      	cmp	r3, #5
 800697c:	d10c      	bne.n	8006998 <HAL_RCC_OscConfig+0x30c>
 800697e:	4b5f      	ldr	r3, [pc, #380]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	4a5e      	ldr	r2, [pc, #376]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006984:	f043 0304 	orr.w	r3, r3, #4
 8006988:	6713      	str	r3, [r2, #112]	; 0x70
 800698a:	4b5c      	ldr	r3, [pc, #368]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a5b      	ldr	r2, [pc, #364]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	e00b      	b.n	80069b0 <HAL_RCC_OscConfig+0x324>
 8006998:	4b58      	ldr	r3, [pc, #352]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	4a57      	ldr	r2, [pc, #348]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 800699e:	f023 0301 	bic.w	r3, r3, #1
 80069a2:	6713      	str	r3, [r2, #112]	; 0x70
 80069a4:	4b55      	ldr	r3, [pc, #340]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	4a54      	ldr	r2, [pc, #336]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 80069aa:	f023 0304 	bic.w	r3, r3, #4
 80069ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d015      	beq.n	80069e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b8:	f7fd fbf2 	bl	80041a0 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069be:	e00a      	b.n	80069d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c0:	f7fd fbee 	bl	80041a0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e0c2      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d6:	4b49      	ldr	r3, [pc, #292]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 80069d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0ee      	beq.n	80069c0 <HAL_RCC_OscConfig+0x334>
 80069e2:	e014      	b.n	8006a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069e4:	f7fd fbdc 	bl	80041a0 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ea:	e00a      	b.n	8006a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ec:	f7fd fbd8 	bl	80041a0 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e0ac      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a02:	4b3e      	ldr	r3, [pc, #248]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1ee      	bne.n	80069ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d105      	bne.n	8006a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a14:	4b39      	ldr	r3, [pc, #228]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	4a38      	ldr	r2, [pc, #224]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8098 	beq.w	8006b5a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a2a:	4b34      	ldr	r3, [pc, #208]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 030c 	and.w	r3, r3, #12
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d05c      	beq.n	8006af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d141      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a3e:	4b31      	ldr	r3, [pc, #196]	; (8006b04 <HAL_RCC_OscConfig+0x478>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a44:	f7fd fbac 	bl	80041a0 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a4c:	f7fd fba8 	bl	80041a0 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e07e      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a5e:	4b27      	ldr	r3, [pc, #156]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69da      	ldr	r2, [r3, #28]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	019b      	lsls	r3, r3, #6
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	3b01      	subs	r3, #1
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	061b      	lsls	r3, r3, #24
 8006a8e:	491b      	ldr	r1, [pc, #108]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <HAL_RCC_OscConfig+0x478>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9a:	f7fd fb81 	bl	80041a0 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fd fb7d 	bl	80041a0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e053      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab4:	4b11      	ldr	r3, [pc, #68]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0f0      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x416>
 8006ac0:	e04b      	b.n	8006b5a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <HAL_RCC_OscConfig+0x478>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac8:	f7fd fb6a 	bl	80041a0 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad0:	f7fd fb66 	bl	80041a0 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e03c      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_RCC_OscConfig+0x470>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f0      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x444>
 8006aee:	e034      	b.n	8006b5a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e02f      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
 8006afc:	40023800 	.word	0x40023800
 8006b00:	40007000 	.word	0x40007000
 8006b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b08:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <HAL_RCC_OscConfig+0x4d8>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d11c      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d115      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b30:	4013      	ands	r3, r2
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10d      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d106      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d001      	beq.n	8006b5a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40023800 	.word	0x40023800

08006b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0cc      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b68      	ldr	r3, [pc, #416]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d90c      	bls.n	8006ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b65      	ldr	r3, [pc, #404]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b92:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0b8      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d020      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bbc:	4b59      	ldr	r3, [pc, #356]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4a58      	ldr	r2, [pc, #352]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bd4:	4b53      	ldr	r3, [pc, #332]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be0:	4b50      	ldr	r3, [pc, #320]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	494d      	ldr	r1, [pc, #308]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d044      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d107      	bne.n	8006c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c06:	4b47      	ldr	r3, [pc, #284]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d119      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e07f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d107      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c26:	4b3f      	ldr	r3, [pc, #252]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e06f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c36:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e067      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c46:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 0203 	bic.w	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4934      	ldr	r1, [pc, #208]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c58:	f7fd faa2 	bl	80041a0 <HAL_GetTick>
 8006c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c60:	f7fd fa9e 	bl	80041a0 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e04f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c76:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 020c 	and.w	r2, r3, #12
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1eb      	bne.n	8006c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c88:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d20c      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e032      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4916      	ldr	r1, [pc, #88]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	490e      	ldr	r1, [pc, #56]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cee:	f000 f821 	bl	8006d34 <HAL_RCC_GetSysClockFreq>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	490a      	ldr	r1, [pc, #40]	; (8006d28 <HAL_RCC_ClockConfig+0x1c0>)
 8006d00:	5ccb      	ldrb	r3, [r1, r3]
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fd fa02 	bl	8004118 <HAL_InitTick>

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40023c00 	.word	0x40023c00
 8006d24:	40023800 	.word	0x40023800
 8006d28:	0800a264 	.word	0x0800a264
 8006d2c:	200002d8 	.word	0x200002d8
 8006d30:	20000370 	.word	0x20000370

08006d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d38:	b094      	sub	sp, #80	; 0x50
 8006d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d40:	2300      	movs	r3, #0
 8006d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d44:	2300      	movs	r3, #0
 8006d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d4c:	4b79      	ldr	r3, [pc, #484]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 030c 	and.w	r3, r3, #12
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d00d      	beq.n	8006d74 <HAL_RCC_GetSysClockFreq+0x40>
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	f200 80e1 	bhi.w	8006f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x34>
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d003      	beq.n	8006d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8006d66:	e0db      	b.n	8006f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d68:	4b73      	ldr	r3, [pc, #460]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d6c:	e0db      	b.n	8006f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d6e:	4b73      	ldr	r3, [pc, #460]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8006d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d72:	e0d8      	b.n	8006f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d74:	4b6f      	ldr	r3, [pc, #444]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d7e:	4b6d      	ldr	r3, [pc, #436]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d063      	beq.n	8006e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d8a:	4b6a      	ldr	r3, [pc, #424]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	099b      	lsrs	r3, r3, #6
 8006d90:	2200      	movs	r2, #0
 8006d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d9e:	2300      	movs	r3, #0
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
 8006da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006da6:	4622      	mov	r2, r4
 8006da8:	462b      	mov	r3, r5
 8006daa:	f04f 0000 	mov.w	r0, #0
 8006dae:	f04f 0100 	mov.w	r1, #0
 8006db2:	0159      	lsls	r1, r3, #5
 8006db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006db8:	0150      	lsls	r0, r2, #5
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	1a51      	subs	r1, r2, r1
 8006dc2:	6139      	str	r1, [r7, #16]
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dd8:	4659      	mov	r1, fp
 8006dda:	018b      	lsls	r3, r1, #6
 8006ddc:	4651      	mov	r1, sl
 8006dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006de2:	4651      	mov	r1, sl
 8006de4:	018a      	lsls	r2, r1, #6
 8006de6:	4651      	mov	r1, sl
 8006de8:	ebb2 0801 	subs.w	r8, r2, r1
 8006dec:	4659      	mov	r1, fp
 8006dee:	eb63 0901 	sbc.w	r9, r3, r1
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e06:	4690      	mov	r8, r2
 8006e08:	4699      	mov	r9, r3
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	eb18 0303 	adds.w	r3, r8, r3
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	462b      	mov	r3, r5
 8006e14:	eb49 0303 	adc.w	r3, r9, r3
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e26:	4629      	mov	r1, r5
 8006e28:	024b      	lsls	r3, r1, #9
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e30:	4621      	mov	r1, r4
 8006e32:	024a      	lsls	r2, r1, #9
 8006e34:	4610      	mov	r0, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e44:	f7f9 fc40 	bl	80006c8 <__aeabi_uldivmod>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e50:	e058      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e52:	4b38      	ldr	r3, [pc, #224]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	099b      	lsrs	r3, r3, #6
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e62:	623b      	str	r3, [r7, #32]
 8006e64:	2300      	movs	r3, #0
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
 8006e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	464b      	mov	r3, r9
 8006e70:	f04f 0000 	mov.w	r0, #0
 8006e74:	f04f 0100 	mov.w	r1, #0
 8006e78:	0159      	lsls	r1, r3, #5
 8006e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e7e:	0150      	lsls	r0, r2, #5
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4641      	mov	r1, r8
 8006e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	00eb      	lsls	r3, r5, #3
 8006eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eba:	00e2      	lsls	r2, r4, #3
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	461d      	mov	r5, r3
 8006ec0:	4643      	mov	r3, r8
 8006ec2:	18e3      	adds	r3, r4, r3
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	eb45 0303 	adc.w	r3, r5, r3
 8006ecc:	607b      	str	r3, [r7, #4]
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eda:	4629      	mov	r1, r5
 8006edc:	028b      	lsls	r3, r1, #10
 8006ede:	4621      	mov	r1, r4
 8006ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	028a      	lsls	r2, r1, #10
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4619      	mov	r1, r3
 8006eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eee:	2200      	movs	r2, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	61fa      	str	r2, [r7, #28]
 8006ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ef8:	f7f9 fbe6 	bl	80006c8 <__aeabi_uldivmod>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4613      	mov	r3, r2
 8006f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	3301      	adds	r3, #1
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f1e:	e002      	b.n	8006f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3750      	adds	r7, #80	; 0x50
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f32:	bf00      	nop
 8006f34:	40023800 	.word	0x40023800
 8006f38:	00f42400 	.word	0x00f42400
 8006f3c:	007a1200 	.word	0x007a1200

08006f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f44:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f46:	681b      	ldr	r3, [r3, #0]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	200002d8 	.word	0x200002d8

08006f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f5c:	f7ff fff0 	bl	8006f40 <HAL_RCC_GetHCLKFreq>
 8006f60:	4602      	mov	r2, r0
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	0a9b      	lsrs	r3, r3, #10
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	4903      	ldr	r1, [pc, #12]	; (8006f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6e:	5ccb      	ldrb	r3, [r1, r3]
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	0800a274 	.word	0x0800a274

08006f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d075      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fb4:	4b91      	ldr	r3, [pc, #580]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fba:	f7fd f8f1 	bl	80041a0 <HAL_GetTick>
 8006fbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fc2:	f7fd f8ed 	bl	80041a0 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e189      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fd4:	4b8a      	ldr	r3, [pc, #552]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1f0      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	019a      	lsls	r2, r3, #6
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	071b      	lsls	r3, r3, #28
 8006ff8:	4981      	ldr	r1, [pc, #516]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01f      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800700c:	4b7c      	ldr	r3, [pc, #496]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800700e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007012:	0f1b      	lsrs	r3, r3, #28
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	019a      	lsls	r2, r3, #6
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	061b      	lsls	r3, r3, #24
 8007026:	431a      	orrs	r2, r3
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	071b      	lsls	r3, r3, #28
 800702c:	4974      	ldr	r1, [pc, #464]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800702e:	4313      	orrs	r3, r2
 8007030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007034:	4b72      	ldr	r3, [pc, #456]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800703a:	f023 021f 	bic.w	r2, r3, #31
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	3b01      	subs	r3, #1
 8007044:	496e      	ldr	r1, [pc, #440]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00d      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	019a      	lsls	r2, r3, #6
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	061b      	lsls	r3, r3, #24
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	071b      	lsls	r3, r3, #28
 800706c:	4964      	ldr	r1, [pc, #400]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007074:	4b61      	ldr	r3, [pc, #388]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800707a:	f7fd f891 	bl	80041a0 <HAL_GetTick>
 800707e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007080:	e008      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007082:	f7fd f88d 	bl	80041a0 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e129      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007094:	4b5a      	ldr	r3, [pc, #360]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f0      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d105      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d079      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070b8:	4b52      	ldr	r3, [pc, #328]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070be:	f7fd f86f 	bl	80041a0 <HAL_GetTick>
 80070c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070c4:	e008      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070c6:	f7fd f86b 	bl	80041a0 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e107      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070d8:	4b49      	ldr	r3, [pc, #292]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e4:	d0ef      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d020      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070f2:	4b43      	ldr	r3, [pc, #268]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f8:	0f1b      	lsrs	r3, r3, #28
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	019a      	lsls	r2, r3, #6
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	431a      	orrs	r2, r3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	071b      	lsls	r3, r3, #28
 8007112:	493b      	ldr	r1, [pc, #236]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800711a:	4b39      	ldr	r3, [pc, #228]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007120:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	3b01      	subs	r3, #1
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	4934      	ldr	r1, [pc, #208]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01e      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007140:	4b2f      	ldr	r3, [pc, #188]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	0e1b      	lsrs	r3, r3, #24
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	019a      	lsls	r2, r3, #6
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	061b      	lsls	r3, r3, #24
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	071b      	lsls	r3, r3, #28
 8007160:	4927      	ldr	r1, [pc, #156]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800716a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	4922      	ldr	r1, [pc, #136]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007178:	4313      	orrs	r3, r2
 800717a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800717e:	4b21      	ldr	r3, [pc, #132]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007184:	f7fd f80c 	bl	80041a0 <HAL_GetTick>
 8007188:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800718a:	e008      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800718c:	f7fd f808 	bl	80041a0 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e0a4      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800719e:	4b18      	ldr	r3, [pc, #96]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071aa:	d1ef      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 808b 	beq.w	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	4b10      	ldr	r3, [pc, #64]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	4a0f      	ldr	r2, [pc, #60]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ca:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a0b      	ldr	r2, [pc, #44]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071e2:	f7fc ffdd 	bl	80041a0 <HAL_GetTick>
 80071e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071e8:	e010      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071ea:	f7fc ffd9 	bl	80041a0 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d909      	bls.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e075      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80071fc:	42470068 	.word	0x42470068
 8007200:	40023800 	.word	0x40023800
 8007204:	42470070 	.word	0x42470070
 8007208:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800720c:	4b38      	ldr	r3, [pc, #224]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0e8      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007218:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007220:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d02f      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	d028      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007236:	4b2f      	ldr	r3, [pc, #188]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007240:	4b2d      	ldr	r3, [pc, #180]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007246:	4b2c      	ldr	r3, [pc, #176]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800724c:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007252:	4b28      	ldr	r3, [pc, #160]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b01      	cmp	r3, #1
 800725c:	d114      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800725e:	f7fc ff9f 	bl	80041a0 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007264:	e00a      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007266:	f7fc ff9b 	bl	80041a0 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f241 3288 	movw	r2, #5000	; 0x1388
 8007274:	4293      	cmp	r3, r2
 8007276:	d901      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e035      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727c:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800727e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0ee      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007294:	d10d      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007296:	4b17      	ldr	r3, [pc, #92]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072aa:	4912      	ldr	r1, [pc, #72]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	608b      	str	r3, [r1, #8]
 80072b0:	e005      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	4a0f      	ldr	r2, [pc, #60]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072bc:	6093      	str	r3, [r2, #8]
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ca:	490a      	ldr	r1, [pc, #40]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80072e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40007000 	.word	0x40007000
 80072f4:	40023800 	.word	0x40023800
 80072f8:	42470e40 	.word	0x42470e40
 80072fc:	424711e0 	.word	0x424711e0

08007300 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e025      	b.n	8007360 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d106      	bne.n	800732e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f81d 	bl	8007368 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f000 ff0f 	bl	8008164 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	461a      	mov	r2, r3
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	f000 ff7a 	bl	800824a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d101      	bne.n	8007398 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007394:	2302      	movs	r3, #2
 8007396:	e018      	b.n	80073ca <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 ffcd 	bl	8008348 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d104      	bne.n	80073c0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2205      	movs	r2, #5
 80073ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80073be:	e003      	b.n	80073c8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d101      	bne.n	80073ec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80073e8:	2302      	movs	r3, #2
 80073ea:	e00e      	b.n	800740a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 ffe0 	bl	80083c0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e05d      	b.n	80074e0 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f87d 	bl	8007538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007454:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	ea42 0103 	orr.w	r1, r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	0c1b      	lsrs	r3, r3, #16
 800749c:	f003 0104 	and.w	r1, r3, #4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b4:	d104      	bne.n	80074c0 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80074be:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69da      	ldr	r2, [r3, #28]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e01a      	b.n	8007530 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007510:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f81a 	bl	800754c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_SPI_Transmit+0x22>
 800757e:	2302      	movs	r3, #2
 8007580:	e140      	b.n	8007804 <HAL_SPI_Transmit+0x2a4>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800758a:	f7fc fe09 	bl	80041a0 <HAL_GetTick>
 800758e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	d002      	beq.n	80075a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
 80075a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075a4:	e125      	b.n	80077f2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_SPI_Transmit+0x52>
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075b6:	e11c      	b.n	80077f2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2203      	movs	r2, #3
 80075bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	88fa      	ldrh	r2, [r7, #6]
 80075d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	88fa      	ldrh	r2, [r7, #6]
 80075d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fe:	d107      	bne.n	8007610 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800760e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007618:	d10f      	bne.n	800763a <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007638:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d007      	beq.n	8007658 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007660:	d14b      	bne.n	80076fa <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Transmit+0x110>
 800766a:	8afb      	ldrh	r3, [r7, #22]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d13e      	bne.n	80076ee <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	1c9a      	adds	r2, r3, #2
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007694:	e02b      	b.n	80076ee <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d112      	bne.n	80076ca <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	881a      	ldrh	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	1c9a      	adds	r2, r3, #2
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80076c8:	e011      	b.n	80076ee <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ca:	f7fc fd69 	bl	80041a0 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d803      	bhi.n	80076e2 <HAL_SPI_Transmit+0x182>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d102      	bne.n	80076e8 <HAL_SPI_Transmit+0x188>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076ec:	e081      	b.n	80077f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1ce      	bne.n	8007696 <HAL_SPI_Transmit+0x136>
 80076f8:	e04c      	b.n	8007794 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <HAL_SPI_Transmit+0x1a8>
 8007702:	8afb      	ldrh	r3, [r7, #22]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d140      	bne.n	800778a <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	7812      	ldrb	r2, [r2, #0]
 8007714:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800772e:	e02c      	b.n	800778a <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b02      	cmp	r3, #2
 800773c:	d113      	bne.n	8007766 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	86da      	strh	r2, [r3, #54]	; 0x36
 8007764:	e011      	b.n	800778a <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007766:	f7fc fd1b 	bl	80041a0 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d803      	bhi.n	800777e <HAL_SPI_Transmit+0x21e>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d102      	bne.n	8007784 <HAL_SPI_Transmit+0x224>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007788:	e033      	b.n	80077f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1cd      	bne.n	8007730 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800779c:	d107      	bne.n	80077ae <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077ac:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fc94 	bl	80080e0 <SPI_EndRxTxTransaction>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	e000      	b.n	80077f2 <HAL_SPI_Transmit+0x292>
  }

error:
 80077f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007802:	7ffb      	ldrb	r3, [r7, #31]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007828:	d112      	bne.n	8007850 <HAL_SPI_Receive+0x44>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10e      	bne.n	8007850 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2204      	movs	r2, #4
 8007836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f95f 	bl	8007b0a <HAL_SPI_TransmitReceive>
 800784c:	4603      	mov	r3, r0
 800784e:	e158      	b.n	8007b02 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007856:	2b01      	cmp	r3, #1
 8007858:	d101      	bne.n	800785e <HAL_SPI_Receive+0x52>
 800785a:	2302      	movs	r3, #2
 800785c:	e151      	b.n	8007b02 <HAL_SPI_Receive+0x2f6>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007866:	f7fc fc9b 	bl	80041a0 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	d002      	beq.n	800787e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007878:	2302      	movs	r3, #2
 800787a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800787c:	e138      	b.n	8007af0 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_SPI_Receive+0x7e>
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d102      	bne.n	8007890 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800788e:	e12f      	b.n	8007af0 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2204      	movs	r2, #4
 8007894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	88fa      	ldrh	r2, [r7, #6]
 80078a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	88fa      	ldrh	r2, [r7, #6]
 80078ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d6:	d116      	bne.n	8007906 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078f6:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800790e:	d107      	bne.n	8007920 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800791e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792a:	2b40      	cmp	r3, #64	; 0x40
 800792c:	d007      	beq.n	800793e <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d162      	bne.n	8007a0c <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007946:	e02e      	b.n	80079a6 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d115      	bne.n	8007982 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f103 020c 	add.w	r2, r3, #12
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007980:	e011      	b.n	80079a6 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007982:	f7fc fc0d 	bl	80041a0 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d803      	bhi.n	800799a <HAL_SPI_Receive+0x18e>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d102      	bne.n	80079a0 <HAL_SPI_Receive+0x194>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079a4:	e0a4      	b.n	8007af0 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1cb      	bne.n	8007948 <HAL_SPI_Receive+0x13c>
 80079b0:	e031      	b.n	8007a16 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d113      	bne.n	80079e8 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	b292      	uxth	r2, r2
 80079cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	1c9a      	adds	r2, r3, #2
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079e6:	e011      	b.n	8007a0c <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e8:	f7fc fbda 	bl	80041a0 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d803      	bhi.n	8007a00 <HAL_SPI_Receive+0x1f4>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d102      	bne.n	8007a06 <HAL_SPI_Receive+0x1fa>
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d102      	bne.n	8007a0c <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a0a:	e071      	b.n	8007af0 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1cd      	bne.n	80079b2 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1e:	d142      	bne.n	8007aa6 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a2e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2201      	movs	r2, #1
 8007a38:	2101      	movs	r1, #1
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fa81 	bl	8007f42 <SPI_WaitFlagStateUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007a4a:	e051      	b.n	8007af0 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a54:	d107      	bne.n	8007a66 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	b292      	uxth	r2, r2
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	e008      	b.n	8007a78 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f103 020c 	add.w	r2, r3, #12
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	7812      	ldrb	r2, [r2, #0]
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	2101      	movs	r1, #1
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fa5d 	bl	8007f42 <SPI_WaitFlagStateUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	f043 0202 	orr.w	r2, r3, #2
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007a9e:	e027      	b.n	8007af0 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 fab3 	bl	8008016 <SPI_EndRxTransaction>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d10a      	bne.n	8007ae0 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	f043 0202 	orr.w	r2, r3, #2
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007ade:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]
 8007aec:	e000      	b.n	8007af0 <HAL_SPI_Receive+0x2e4>
  }

error :
 8007aee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b08e      	sub	sp, #56	; 0x38
 8007b0e:	af02      	add	r7, sp, #8
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x26>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e1f6      	b.n	8007f1e <HAL_SPI_TransmitReceive+0x414>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b38:	f7fc fb32 	bl	80041a0 <HAL_GetTick>
 8007b3c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b4e:	887b      	ldrh	r3, [r7, #2]
 8007b50:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d00f      	beq.n	8007b7a <HAL_SPI_TransmitReceive+0x70>
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b60:	d107      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x68>
 8007b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d003      	beq.n	8007b7a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b72:	2302      	movs	r3, #2
 8007b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b78:	e1c7      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_SPI_TransmitReceive+0x82>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d002      	beq.n	8007b8c <HAL_SPI_TransmitReceive+0x82>
 8007b86:	887b      	ldrh	r3, [r7, #2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d103      	bne.n	8007b94 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b92:	e1ba      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d003      	beq.n	8007ba8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	887a      	ldrh	r2, [r7, #2]
 8007bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	887a      	ldrh	r2, [r7, #2]
 8007bbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	887a      	ldrh	r2, [r7, #2]
 8007bca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be6:	d10f      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c06:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d007      	beq.n	8007c26 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c2e:	f040 808b 	bne.w	8007d48 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x136>
 8007c3a:	8b7b      	ldrh	r3, [r7, #26]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d178      	bne.n	8007d32 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	881a      	ldrh	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	1c9a      	adds	r2, r3, #2
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c64:	e065      	b.n	8007d32 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d12d      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x1c6>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d028      	beq.n	8007cd0 <HAL_SPI_TransmitReceive+0x1c6>
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d125      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c88:	881a      	ldrh	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	1c9a      	adds	r2, r3, #2
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x1c6>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cbe:	d107      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cce:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d119      	bne.n	8007d12 <HAL_SPI_TransmitReceive+0x208>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d014      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	b292      	uxth	r2, r2
 8007cf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d12:	f7fc fa45 	bl	80041a0 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d807      	bhi.n	8007d32 <HAL_SPI_TransmitReceive+0x228>
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d003      	beq.n	8007d32 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d30:	e0eb      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d194      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x15c>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d18f      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x15c>
 8007d46:	e08e      	b.n	8007e66 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <HAL_SPI_TransmitReceive+0x24c>
 8007d50:	8b7b      	ldrh	r3, [r7, #26]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d17d      	bne.n	8007e52 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	7812      	ldrb	r2, [r2, #0]
 8007d62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d7c:	e069      	b.n	8007e52 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d12e      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x2e0>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d029      	beq.n	8007dea <HAL_SPI_TransmitReceive+0x2e0>
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d126      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	330c      	adds	r3, #12
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10c      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x2e0>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd8:	d107      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007de8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d119      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x322>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d014      	beq.n	8007e2c <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e2c:	f7fc f9b8 	bl	80041a0 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d803      	bhi.n	8007e44 <HAL_SPI_TransmitReceive+0x33a>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d102      	bne.n	8007e4a <HAL_SPI_TransmitReceive+0x340>
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e50:	e05b      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d190      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x274>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d18b      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6e:	d117      	bne.n	8007ea0 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	2201      	movs	r2, #1
 8007e78:	2101      	movs	r1, #1
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 f861 	bl	8007f42 <SPI_WaitFlagStateUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	f043 0202 	orr.w	r2, r3, #2
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007e98:	e037      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d10d      	bne.n	8007eca <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb2:	f043 0202 	orr.w	r2, r3, #2
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007ec2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f906 	bl	80080e0 <SPI_EndRxTxTransaction>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d006      	beq.n	8007ee8 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ee6:	e010      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	e000      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8007f08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3730      	adds	r7, #48	; 0x30
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f34:	b2db      	uxtb	r3, r3
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	603b      	str	r3, [r7, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f52:	e04c      	b.n	8007fee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5a:	d048      	beq.n	8007fee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007f5c:	f7fc f920 	bl	80041a0 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d902      	bls.n	8007f72 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d13d      	bne.n	8007fee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f8a:	d111      	bne.n	8007fb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f94:	d004      	beq.n	8007fa0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f9e:	d107      	bne.n	8007fb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb8:	d10f      	bne.n	8007fda <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e00f      	b.n	800800e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	bf0c      	ite	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	2300      	movne	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	429a      	cmp	r2, r3
 800800a:	d1a3      	bne.n	8007f54 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af02      	add	r7, sp, #8
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800802a:	d111      	bne.n	8008050 <SPI_EndRxTransaction+0x3a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008034:	d004      	beq.n	8008040 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803e:	d107      	bne.n	8008050 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800804e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008058:	d12a      	bne.n	80080b0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008062:	d012      	beq.n	800808a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	2180      	movs	r1, #128	; 0x80
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff ff67 	bl	8007f42 <SPI_WaitFlagStateUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02d      	beq.n	80080d6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	f043 0220 	orr.w	r2, r3, #32
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e026      	b.n	80080d8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2200      	movs	r2, #0
 8008092:	2101      	movs	r1, #1
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff ff54 	bl	8007f42 <SPI_WaitFlagStateUntilTimeout>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01a      	beq.n	80080d6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a4:	f043 0220 	orr.w	r2, r3, #32
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e013      	b.n	80080d8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	2101      	movs	r1, #1
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff ff41 	bl	8007f42 <SPI_WaitFlagStateUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ca:	f043 0220 	orr.w	r2, r3, #32
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e000      	b.n	80080d8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <SPI_EndRxTxTransaction+0x7c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <SPI_EndRxTxTransaction+0x80>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	0d5b      	lsrs	r3, r3, #21
 80080f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080fc:	fb02 f303 	mul.w	r3, r2, r3
 8008100:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800810a:	d112      	bne.n	8008132 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2200      	movs	r2, #0
 8008114:	2180      	movs	r1, #128	; 0x80
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f7ff ff13 	bl	8007f42 <SPI_WaitFlagStateUntilTimeout>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d016      	beq.n	8008150 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f043 0220 	orr.w	r2, r3, #32
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e00f      	b.n	8008152 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00a      	beq.n	800814e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	3b01      	subs	r3, #1
 800813c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d0f2      	beq.n	8008132 <SPI_EndRxTxTransaction+0x52>
 800814c:	e000      	b.n	8008150 <SPI_EndRxTxTransaction+0x70>
        break;
 800814e:	bf00      	nop
  }

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	200002d8 	.word	0x200002d8
 8008160:	165e9f81 	.word	0x165e9f81

08008164 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d029      	beq.n	80081d2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800818a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800818e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008198:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800819e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80081a4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80081aa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80081b0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80081b6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80081bc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80081c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e034      	b.n	800823c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081de:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081e8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80081ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008206:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008210:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008216:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800821c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008222:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008228:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4313      	orrs	r3, r2
 800822e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800824a:	b480      	push	{r7}
 800824c:	b087      	sub	sp, #28
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d02e      	beq.n	80082c2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008270:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	3b01      	subs	r3, #1
 800827e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008280:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	3b01      	subs	r3, #1
 8008288:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800828a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	3b01      	subs	r3, #1
 8008292:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008294:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	3b01      	subs	r3, #1
 800829c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800829e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80082a8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80082b2:	4313      	orrs	r3, r2
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	609a      	str	r2, [r3, #8]
 80082c0:	e03b      	b.n	800833a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082d2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	3b01      	subs	r3, #1
 80082da:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80082e4:	4313      	orrs	r3, r2
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082f8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	3b01      	subs	r3, #1
 8008306:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008308:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	3b01      	subs	r3, #1
 8008310:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008312:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	3b01      	subs	r3, #1
 800831a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800831c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	3b01      	subs	r3, #1
 8008324:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008326:	4313      	orrs	r3, r2
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008364:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	3b01      	subs	r3, #1
 800836c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800836e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008380:	f7fb ff0e 	bl	80041a0 <HAL_GetTick>
 8008384:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008386:	e010      	b.n	80083aa <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d00c      	beq.n	80083aa <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <FMC_SDRAM_SendCommand+0x5e>
 8008396:	f7fb ff03 	bl	80041a0 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d201      	bcs.n	80083aa <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e006      	b.n	80083b8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d0e8      	beq.n	8008388 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
	...

080083e8 <arm_max_f32>:
 80083e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	1e4f      	subs	r7, r1, #1
 80083ee:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80083f2:	f100 0e04 	add.w	lr, r0, #4
 80083f6:	edd0 7a00 	vldr	s15, [r0]
 80083fa:	d058      	beq.n	80084ae <arm_max_f32+0xc6>
 80083fc:	3014      	adds	r0, #20
 80083fe:	46c4      	mov	ip, r8
 8008400:	2604      	movs	r6, #4
 8008402:	2400      	movs	r4, #0
 8008404:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008408:	ed50 6a03 	vldr	s13, [r0, #-12]
 800840c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008410:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008414:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841c:	bfc8      	it	gt
 800841e:	eef0 7a46 	vmovgt.f32	s15, s12
 8008422:	f1a6 0503 	sub.w	r5, r6, #3
 8008426:	eef4 7ae6 	vcmpe.f32	s15, s13
 800842a:	bfc8      	it	gt
 800842c:	462c      	movgt	r4, r5
 800842e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008432:	bf48      	it	mi
 8008434:	eef0 7a66 	vmovmi.f32	s15, s13
 8008438:	f1a6 0502 	sub.w	r5, r6, #2
 800843c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008440:	bf48      	it	mi
 8008442:	462c      	movmi	r4, r5
 8008444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008448:	bf48      	it	mi
 800844a:	eef0 7a47 	vmovmi.f32	s15, s14
 800844e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008452:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008456:	bf48      	it	mi
 8008458:	462c      	movmi	r4, r5
 800845a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845e:	bf48      	it	mi
 8008460:	4634      	movmi	r4, r6
 8008462:	bf48      	it	mi
 8008464:	eef0 7a65 	vmovmi.f32	s15, s11
 8008468:	f1bc 0c01 	subs.w	ip, ip, #1
 800846c:	f100 0010 	add.w	r0, r0, #16
 8008470:	f106 0604 	add.w	r6, r6, #4
 8008474:	d1c6      	bne.n	8008404 <arm_max_f32+0x1c>
 8008476:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800847a:	f017 0003 	ands.w	r0, r7, #3
 800847e:	d018      	beq.n	80084b2 <arm_max_f32+0xca>
 8008480:	1a08      	subs	r0, r1, r0
 8008482:	ecbe 7a01 	vldmia	lr!, {s14}
 8008486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800848a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848e:	bfc8      	it	gt
 8008490:	4604      	movgt	r4, r0
 8008492:	f100 0001 	add.w	r0, r0, #1
 8008496:	bfd8      	it	le
 8008498:	eeb0 7a67 	vmovle.f32	s14, s15
 800849c:	4281      	cmp	r1, r0
 800849e:	eef0 7a47 	vmov.f32	s15, s14
 80084a2:	d1ee      	bne.n	8008482 <arm_max_f32+0x9a>
 80084a4:	ed82 7a00 	vstr	s14, [r2]
 80084a8:	601c      	str	r4, [r3, #0]
 80084aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ae:	4644      	mov	r4, r8
 80084b0:	e7e3      	b.n	800847a <arm_max_f32+0x92>
 80084b2:	eeb0 7a67 	vmov.f32	s14, s15
 80084b6:	e7f5      	b.n	80084a4 <arm_max_f32+0xbc>

080084b8 <arm_rfft_fast_init_f32>:
 80084b8:	084b      	lsrs	r3, r1, #1
 80084ba:	2b80      	cmp	r3, #128	; 0x80
 80084bc:	b410      	push	{r4}
 80084be:	8201      	strh	r1, [r0, #16]
 80084c0:	8003      	strh	r3, [r0, #0]
 80084c2:	d046      	beq.n	8008552 <arm_rfft_fast_init_f32+0x9a>
 80084c4:	d916      	bls.n	80084f4 <arm_rfft_fast_init_f32+0x3c>
 80084c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ca:	d03c      	beq.n	8008546 <arm_rfft_fast_init_f32+0x8e>
 80084cc:	d928      	bls.n	8008520 <arm_rfft_fast_init_f32+0x68>
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d2:	d01f      	beq.n	8008514 <arm_rfft_fast_init_f32+0x5c>
 80084d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d8:	d112      	bne.n	8008500 <arm_rfft_fast_init_f32+0x48>
 80084da:	4920      	ldr	r1, [pc, #128]	; (800855c <arm_rfft_fast_init_f32+0xa4>)
 80084dc:	4a20      	ldr	r2, [pc, #128]	; (8008560 <arm_rfft_fast_init_f32+0xa8>)
 80084de:	4b21      	ldr	r3, [pc, #132]	; (8008564 <arm_rfft_fast_init_f32+0xac>)
 80084e0:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80084e4:	8184      	strh	r4, [r0, #12]
 80084e6:	6081      	str	r1, [r0, #8]
 80084e8:	6042      	str	r2, [r0, #4]
 80084ea:	6143      	str	r3, [r0, #20]
 80084ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084f0:	2000      	movs	r0, #0
 80084f2:	4770      	bx	lr
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d01c      	beq.n	8008532 <arm_rfft_fast_init_f32+0x7a>
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d006      	beq.n	800850a <arm_rfft_fast_init_f32+0x52>
 80084fc:	2b10      	cmp	r3, #16
 80084fe:	d01d      	beq.n	800853c <arm_rfft_fast_init_f32+0x84>
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	2438      	movs	r4, #56	; 0x38
 800850c:	4916      	ldr	r1, [pc, #88]	; (8008568 <arm_rfft_fast_init_f32+0xb0>)
 800850e:	4a17      	ldr	r2, [pc, #92]	; (800856c <arm_rfft_fast_init_f32+0xb4>)
 8008510:	4b17      	ldr	r3, [pc, #92]	; (8008570 <arm_rfft_fast_init_f32+0xb8>)
 8008512:	e7e7      	b.n	80084e4 <arm_rfft_fast_init_f32+0x2c>
 8008514:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008518:	4916      	ldr	r1, [pc, #88]	; (8008574 <arm_rfft_fast_init_f32+0xbc>)
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <arm_rfft_fast_init_f32+0xc0>)
 800851c:	4b17      	ldr	r3, [pc, #92]	; (800857c <arm_rfft_fast_init_f32+0xc4>)
 800851e:	e7e1      	b.n	80084e4 <arm_rfft_fast_init_f32+0x2c>
 8008520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008524:	d1ec      	bne.n	8008500 <arm_rfft_fast_init_f32+0x48>
 8008526:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800852a:	4915      	ldr	r1, [pc, #84]	; (8008580 <arm_rfft_fast_init_f32+0xc8>)
 800852c:	4a15      	ldr	r2, [pc, #84]	; (8008584 <arm_rfft_fast_init_f32+0xcc>)
 800852e:	4b16      	ldr	r3, [pc, #88]	; (8008588 <arm_rfft_fast_init_f32+0xd0>)
 8008530:	e7d8      	b.n	80084e4 <arm_rfft_fast_init_f32+0x2c>
 8008532:	2430      	movs	r4, #48	; 0x30
 8008534:	4915      	ldr	r1, [pc, #84]	; (800858c <arm_rfft_fast_init_f32+0xd4>)
 8008536:	4a16      	ldr	r2, [pc, #88]	; (8008590 <arm_rfft_fast_init_f32+0xd8>)
 8008538:	4b16      	ldr	r3, [pc, #88]	; (8008594 <arm_rfft_fast_init_f32+0xdc>)
 800853a:	e7d3      	b.n	80084e4 <arm_rfft_fast_init_f32+0x2c>
 800853c:	2414      	movs	r4, #20
 800853e:	4916      	ldr	r1, [pc, #88]	; (8008598 <arm_rfft_fast_init_f32+0xe0>)
 8008540:	4a16      	ldr	r2, [pc, #88]	; (800859c <arm_rfft_fast_init_f32+0xe4>)
 8008542:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <arm_rfft_fast_init_f32+0xe8>)
 8008544:	e7ce      	b.n	80084e4 <arm_rfft_fast_init_f32+0x2c>
 8008546:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800854a:	4916      	ldr	r1, [pc, #88]	; (80085a4 <arm_rfft_fast_init_f32+0xec>)
 800854c:	4a16      	ldr	r2, [pc, #88]	; (80085a8 <arm_rfft_fast_init_f32+0xf0>)
 800854e:	4b17      	ldr	r3, [pc, #92]	; (80085ac <arm_rfft_fast_init_f32+0xf4>)
 8008550:	e7c8      	b.n	80084e4 <arm_rfft_fast_init_f32+0x2c>
 8008552:	24d0      	movs	r4, #208	; 0xd0
 8008554:	4916      	ldr	r1, [pc, #88]	; (80085b0 <arm_rfft_fast_init_f32+0xf8>)
 8008556:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <arm_rfft_fast_init_f32+0xfc>)
 8008558:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <arm_rfft_fast_init_f32+0x100>)
 800855a:	e7c3      	b.n	80084e4 <arm_rfft_fast_init_f32+0x2c>
 800855c:	0801ca74 	.word	0x0801ca74
 8008560:	0800dc6c 	.word	0x0800dc6c
 8008564:	08013ddc 	.word	0x08013ddc
 8008568:	08011d6c 	.word	0x08011d6c
 800856c:	0801e834 	.word	0x0801e834
 8008570:	08020d24 	.word	0x08020d24
 8008574:	0801a75c 	.word	0x0801a75c
 8008578:	0801865c 	.word	0x0801865c
 800857c:	08011ddc 	.word	0x08011ddc
 8008580:	080209b4 	.word	0x080209b4
 8008584:	08017ddc 	.word	0x08017ddc
 8008588:	0801ea34 	.word	0x0801ea34
 800858c:	0801b614 	.word	0x0801b614
 8008590:	0801a65c 	.word	0x0801a65c
 8008594:	08011c6c 	.word	0x08011c6c
 8008598:	0801b56c 	.word	0x0801b56c
 800859c:	080185dc 	.word	0x080185dc
 80085a0:	0801b594 	.word	0x0801b594
 80085a4:	0801f234 	.word	0x0801f234
 80085a8:	0801ba74 	.word	0x0801ba74
 80085ac:	0801f5b4 	.word	0x0801f5b4
 80085b0:	08020f24 	.word	0x08020f24
 80085b4:	0801b674 	.word	0x0801b674
 80085b8:	080205b4 	.word	0x080205b4

080085bc <arm_rfft_fast_f32>:
 80085bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c0:	8a06      	ldrh	r6, [r0, #16]
 80085c2:	0876      	lsrs	r6, r6, #1
 80085c4:	4607      	mov	r7, r0
 80085c6:	4615      	mov	r5, r2
 80085c8:	8006      	strh	r6, [r0, #0]
 80085ca:	460c      	mov	r4, r1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d15c      	bne.n	800868a <arm_rfft_fast_f32+0xce>
 80085d0:	461a      	mov	r2, r3
 80085d2:	2301      	movs	r3, #1
 80085d4:	f000 fbe4 	bl	8008da0 <arm_cfft_f32>
 80085d8:	edd4 7a00 	vldr	s15, [r4]
 80085dc:	ed94 7a01 	vldr	s14, [r4, #4]
 80085e0:	883e      	ldrh	r6, [r7, #0]
 80085e2:	6978      	ldr	r0, [r7, #20]
 80085e4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80085e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80085ec:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80085f0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80085f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085f8:	3e01      	subs	r6, #1
 80085fa:	ee26 7a83 	vmul.f32	s14, s13, s6
 80085fe:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008602:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8008606:	ed85 7a00 	vstr	s14, [r5]
 800860a:	edc5 7a01 	vstr	s15, [r5, #4]
 800860e:	3010      	adds	r0, #16
 8008610:	f105 0210 	add.w	r2, r5, #16
 8008614:	3b08      	subs	r3, #8
 8008616:	f104 0110 	add.w	r1, r4, #16
 800861a:	ed93 7a02 	vldr	s14, [r3, #8]
 800861e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8008622:	ed10 6a02 	vldr	s12, [r0, #-8]
 8008626:	edd3 3a03 	vldr	s7, [r3, #12]
 800862a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800862e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008632:	ee77 7a66 	vsub.f32	s15, s14, s13
 8008636:	ee77 4a26 	vadd.f32	s9, s14, s13
 800863a:	ee33 4a85 	vadd.f32	s8, s7, s10
 800863e:	ee66 6a27 	vmul.f32	s13, s12, s15
 8008642:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008646:	ee35 5a63 	vsub.f32	s10, s10, s7
 800864a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800864e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008652:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008656:	ee65 5a84 	vmul.f32	s11, s11, s8
 800865a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800865e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8008662:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008666:	ee27 7a03 	vmul.f32	s14, s14, s6
 800866a:	3e01      	subs	r6, #1
 800866c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008670:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008674:	f1a3 0308 	sub.w	r3, r3, #8
 8008678:	f101 0108 	add.w	r1, r1, #8
 800867c:	f100 0008 	add.w	r0, r0, #8
 8008680:	f102 0208 	add.w	r2, r2, #8
 8008684:	d1c9      	bne.n	800861a <arm_rfft_fast_f32+0x5e>
 8008686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868a:	edd1 7a00 	vldr	s15, [r1]
 800868e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008692:	6941      	ldr	r1, [r0, #20]
 8008694:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008698:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800869c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80086a0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80086a4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80086a8:	3e01      	subs	r6, #1
 80086aa:	ed82 7a00 	vstr	s14, [r2]
 80086ae:	edc2 7a01 	vstr	s15, [r2, #4]
 80086b2:	00f0      	lsls	r0, r6, #3
 80086b4:	b3ee      	cbz	r6, 8008732 <arm_rfft_fast_f32+0x176>
 80086b6:	3808      	subs	r0, #8
 80086b8:	f101 0e10 	add.w	lr, r1, #16
 80086bc:	4420      	add	r0, r4
 80086be:	f104 0110 	add.w	r1, r4, #16
 80086c2:	f102 0c10 	add.w	ip, r2, #16
 80086c6:	ed90 7a02 	vldr	s14, [r0, #8]
 80086ca:	ed51 6a02 	vldr	s13, [r1, #-8]
 80086ce:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80086d2:	ed90 4a03 	vldr	s8, [r0, #12]
 80086d6:	ed11 5a01 	vldr	s10, [r1, #-4]
 80086da:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80086de:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80086e2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80086e6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80086ea:	ee77 6a26 	vadd.f32	s13, s14, s13
 80086ee:	ee35 5a44 	vsub.f32	s10, s10, s8
 80086f2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80086f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80086fa:	ee77 7a05 	vadd.f32	s15, s14, s10
 80086fe:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008702:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008706:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800870a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800870e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008712:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008716:	3e01      	subs	r6, #1
 8008718:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800871c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8008720:	f1a0 0008 	sub.w	r0, r0, #8
 8008724:	f101 0108 	add.w	r1, r1, #8
 8008728:	f10e 0e08 	add.w	lr, lr, #8
 800872c:	f10c 0c08 	add.w	ip, ip, #8
 8008730:	d1c9      	bne.n	80086c6 <arm_rfft_fast_f32+0x10a>
 8008732:	461a      	mov	r2, r3
 8008734:	4629      	mov	r1, r5
 8008736:	4638      	mov	r0, r7
 8008738:	2301      	movs	r3, #1
 800873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	f000 bb2f 	b.w	8008da0 <arm_cfft_f32>
 8008742:	bf00      	nop

08008744 <arm_cfft_radix8by2_f32>:
 8008744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008748:	ed2d 8b08 	vpush	{d8-d11}
 800874c:	4607      	mov	r7, r0
 800874e:	4608      	mov	r0, r1
 8008750:	f8b7 e000 	ldrh.w	lr, [r7]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800875a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800875e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8008762:	f000 80b0 	beq.w	80088c6 <arm_cfft_radix8by2_f32+0x182>
 8008766:	008b      	lsls	r3, r1, #2
 8008768:	3310      	adds	r3, #16
 800876a:	18c6      	adds	r6, r0, r3
 800876c:	3210      	adds	r2, #16
 800876e:	4443      	add	r3, r8
 8008770:	f100 0510 	add.w	r5, r0, #16
 8008774:	f108 0410 	add.w	r4, r8, #16
 8008778:	ed54 1a04 	vldr	s3, [r4, #-16]
 800877c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008780:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008784:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008788:	ed53 5a02 	vldr	s11, [r3, #-8]
 800878c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8008790:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008794:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008798:	ed16 2a04 	vldr	s4, [r6, #-16]
 800879c:	ed56 2a03 	vldr	s5, [r6, #-12]
 80087a0:	ed15 6a03 	vldr	s12, [r5, #-12]
 80087a4:	ed15 7a01 	vldr	s14, [r5, #-4]
 80087a8:	ed15 3a04 	vldr	s6, [r5, #-16]
 80087ac:	ed56 0a02 	vldr	s1, [r6, #-8]
 80087b0:	ed16 1a01 	vldr	s2, [r6, #-4]
 80087b4:	ed55 4a02 	vldr	s9, [r5, #-8]
 80087b8:	ee73 ba21 	vadd.f32	s23, s6, s3
 80087bc:	ee36 ba26 	vadd.f32	s22, s12, s13
 80087c0:	ee37 aa27 	vadd.f32	s20, s14, s15
 80087c4:	ee72 9a04 	vadd.f32	s19, s4, s8
 80087c8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80087cc:	ee31 8a05 	vadd.f32	s16, s2, s10
 80087d0:	ee74 aa80 	vadd.f32	s21, s9, s0
 80087d4:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80087d8:	ed45 ba04 	vstr	s23, [r5, #-16]
 80087dc:	ed05 ba03 	vstr	s22, [r5, #-12]
 80087e0:	ed45 aa02 	vstr	s21, [r5, #-8]
 80087e4:	ed05 aa01 	vstr	s20, [r5, #-4]
 80087e8:	ed06 8a01 	vstr	s16, [r6, #-4]
 80087ec:	ed46 9a04 	vstr	s19, [r6, #-16]
 80087f0:	ed06 9a03 	vstr	s18, [r6, #-12]
 80087f4:	ed46 8a02 	vstr	s17, [r6, #-8]
 80087f8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80087fc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008800:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008804:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008808:	ee33 3a61 	vsub.f32	s6, s6, s3
 800880c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008810:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008814:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008818:	ee63 1a22 	vmul.f32	s3, s6, s5
 800881c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008820:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008824:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008828:	ee23 6a86 	vmul.f32	s12, s7, s12
 800882c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008830:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008834:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008838:	ee72 3a63 	vsub.f32	s7, s4, s7
 800883c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008840:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008844:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008848:	ed43 3a04 	vstr	s7, [r3, #-16]
 800884c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008854:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008858:	ed12 7a01 	vldr	s14, [r2, #-4]
 800885c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008860:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008864:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008868:	ee67 3a87 	vmul.f32	s7, s15, s14
 800886c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008870:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8008874:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008878:	ee64 4a87 	vmul.f32	s9, s9, s14
 800887c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008880:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008884:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008888:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800888c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008890:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008894:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008898:	f1be 0e01 	subs.w	lr, lr, #1
 800889c:	ed44 5a02 	vstr	s11, [r4, #-8]
 80088a0:	f105 0510 	add.w	r5, r5, #16
 80088a4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80088a8:	f106 0610 	add.w	r6, r6, #16
 80088ac:	ed03 6a02 	vstr	s12, [r3, #-8]
 80088b0:	ed03 7a01 	vstr	s14, [r3, #-4]
 80088b4:	f102 0210 	add.w	r2, r2, #16
 80088b8:	f104 0410 	add.w	r4, r4, #16
 80088bc:	f103 0310 	add.w	r3, r3, #16
 80088c0:	f47f af5a 	bne.w	8008778 <arm_cfft_radix8by2_f32+0x34>
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	b28c      	uxth	r4, r1
 80088c8:	4621      	mov	r1, r4
 80088ca:	2302      	movs	r3, #2
 80088cc:	f000 fbca 	bl	8009064 <arm_radix8_butterfly_f32>
 80088d0:	ecbd 8b08 	vpop	{d8-d11}
 80088d4:	4621      	mov	r1, r4
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4640      	mov	r0, r8
 80088da:	2302      	movs	r3, #2
 80088dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	f000 bbc0 	b.w	8009064 <arm_radix8_butterfly_f32>

080088e4 <arm_cfft_radix8by4_f32>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	ed2d 8b0a 	vpush	{d8-d12}
 80088ec:	8802      	ldrh	r2, [r0, #0]
 80088ee:	ed91 6a00 	vldr	s12, [r1]
 80088f2:	b08f      	sub	sp, #60	; 0x3c
 80088f4:	460f      	mov	r7, r1
 80088f6:	0852      	lsrs	r2, r2, #1
 80088f8:	6841      	ldr	r1, [r0, #4]
 80088fa:	900c      	str	r0, [sp, #48]	; 0x30
 80088fc:	0093      	lsls	r3, r2, #2
 80088fe:	4638      	mov	r0, r7
 8008900:	4418      	add	r0, r3
 8008902:	4606      	mov	r6, r0
 8008904:	9009      	str	r0, [sp, #36]	; 0x24
 8008906:	4418      	add	r0, r3
 8008908:	edd0 6a00 	vldr	s13, [r0]
 800890c:	ed96 4a00 	vldr	s8, [r6]
 8008910:	edd6 2a01 	vldr	s5, [r6, #4]
 8008914:	edd0 7a01 	vldr	s15, [r0, #4]
 8008918:	900a      	str	r0, [sp, #40]	; 0x28
 800891a:	ee76 5a26 	vadd.f32	s11, s12, s13
 800891e:	4604      	mov	r4, r0
 8008920:	4625      	mov	r5, r4
 8008922:	441c      	add	r4, r3
 8008924:	edd4 4a00 	vldr	s9, [r4]
 8008928:	ed97 7a01 	vldr	s14, [r7, #4]
 800892c:	ed94 3a01 	vldr	s6, [r4, #4]
 8008930:	9401      	str	r4, [sp, #4]
 8008932:	ee35 5a84 	vadd.f32	s10, s11, s8
 8008936:	4630      	mov	r0, r6
 8008938:	ee35 5a24 	vadd.f32	s10, s10, s9
 800893c:	463e      	mov	r6, r7
 800893e:	ee15 ea10 	vmov	lr, s10
 8008942:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008946:	f846 eb08 	str.w	lr, [r6], #8
 800894a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800894e:	ed90 5a01 	vldr	s10, [r0, #4]
 8008952:	9605      	str	r6, [sp, #20]
 8008954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008958:	9e01      	ldr	r6, [sp, #4]
 800895a:	9707      	str	r7, [sp, #28]
 800895c:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8008960:	ed96 2a01 	vldr	s4, [r6, #4]
 8008964:	ee36 7a05 	vadd.f32	s14, s12, s10
 8008968:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800896c:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8008970:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008974:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8008978:	4604      	mov	r4, r0
 800897a:	46a3      	mov	fp, r4
 800897c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008980:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008984:	ee14 8a10 	vmov	r8, s8
 8008988:	46a4      	mov	ip, r4
 800898a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800898e:	ed87 7a01 	vstr	s14, [r7, #4]
 8008992:	f84b 8b08 	str.w	r8, [fp], #8
 8008996:	f1ac 0704 	sub.w	r7, ip, #4
 800899a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800899e:	f101 0c08 	add.w	ip, r1, #8
 80089a2:	462c      	mov	r4, r5
 80089a4:	f8cd c010 	str.w	ip, [sp, #16]
 80089a8:	ee15 ca90 	vmov	ip, s11
 80089ac:	ee36 6a62 	vsub.f32	s12, s12, s5
 80089b0:	f844 cb08 	str.w	ip, [r4], #8
 80089b4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80089b8:	ee36 6a43 	vsub.f32	s12, s12, s6
 80089bc:	9406      	str	r4, [sp, #24]
 80089be:	ee76 6a83 	vadd.f32	s13, s13, s6
 80089c2:	f101 0410 	add.w	r4, r1, #16
 80089c6:	0852      	lsrs	r2, r2, #1
 80089c8:	9402      	str	r4, [sp, #8]
 80089ca:	ed85 6a01 	vstr	s12, [r5, #4]
 80089ce:	462c      	mov	r4, r5
 80089d0:	f101 0518 	add.w	r5, r1, #24
 80089d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80089d6:	46b2      	mov	sl, r6
 80089d8:	9503      	str	r5, [sp, #12]
 80089da:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80089de:	3a02      	subs	r2, #2
 80089e0:	ee16 5a90 	vmov	r5, s13
 80089e4:	46b6      	mov	lr, r6
 80089e6:	4630      	mov	r0, r6
 80089e8:	0852      	lsrs	r2, r2, #1
 80089ea:	f84a 5b08 	str.w	r5, [sl], #8
 80089ee:	f1a0 0604 	sub.w	r6, r0, #4
 80089f2:	edce 7a01 	vstr	s15, [lr, #4]
 80089f6:	9208      	str	r2, [sp, #32]
 80089f8:	f000 8130 	beq.w	8008c5c <arm_cfft_radix8by4_f32+0x378>
 80089fc:	4691      	mov	r9, r2
 80089fe:	9a07      	ldr	r2, [sp, #28]
 8008a00:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008a04:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008a08:	3b08      	subs	r3, #8
 8008a0a:	f102 0510 	add.w	r5, r2, #16
 8008a0e:	f101 0c20 	add.w	ip, r1, #32
 8008a12:	f1a4 020c 	sub.w	r2, r4, #12
 8008a16:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8008a1a:	4433      	add	r3, r6
 8008a1c:	3410      	adds	r4, #16
 8008a1e:	4650      	mov	r0, sl
 8008a20:	4659      	mov	r1, fp
 8008a22:	ed55 3a02 	vldr	s7, [r5, #-8]
 8008a26:	ed14 5a02 	vldr	s10, [r4, #-8]
 8008a2a:	ed91 7a00 	vldr	s14, [r1]
 8008a2e:	edd0 7a00 	vldr	s15, [r0]
 8008a32:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008a36:	ed15 4a01 	vldr	s8, [r5, #-4]
 8008a3a:	edd0 6a01 	vldr	s13, [r0, #4]
 8008a3e:	ed91 6a01 	vldr	s12, [r1, #4]
 8008a42:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008a46:	ee34 0a25 	vadd.f32	s0, s8, s11
 8008a4a:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008a4e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008a52:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8008a56:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008a5a:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008a5e:	edd1 4a01 	vldr	s9, [r1, #4]
 8008a62:	ed90 4a01 	vldr	s8, [r0, #4]
 8008a66:	ee70 4a24 	vadd.f32	s9, s0, s9
 8008a6a:	ee75 aa06 	vadd.f32	s21, s10, s12
 8008a6e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008a72:	ee35 aac7 	vsub.f32	s20, s11, s14
 8008a76:	ed45 4a01 	vstr	s9, [r5, #-4]
 8008a7a:	edd6 1a00 	vldr	s3, [r6]
 8008a7e:	edd7 0a00 	vldr	s1, [r7]
 8008a82:	ed92 4a02 	vldr	s8, [r2, #8]
 8008a86:	edd3 3a02 	vldr	s7, [r3, #8]
 8008a8a:	ed93 2a01 	vldr	s4, [r3, #4]
 8008a8e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008a92:	edd2 2a01 	vldr	s5, [r2, #4]
 8008a96:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008a9a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008a9e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008aa2:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008aa6:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008aaa:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8008aae:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008ab2:	ee18 aa90 	vmov	sl, s17
 8008ab6:	f847 a908 	str.w	sl, [r7], #-8
 8008aba:	edd2 8a01 	vldr	s17, [r2, #4]
 8008abe:	ed93 9a01 	vldr	s18, [r3, #4]
 8008ac2:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008ac6:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008aca:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008ace:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008ad2:	edc7 8a01 	vstr	s17, [r7, #4]
 8008ad6:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008ada:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008ade:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008ae2:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008ae6:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008aea:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008aee:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008af2:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008af6:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008afa:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008afe:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008b02:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008b06:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008b0a:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008b0e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008b12:	ee1c aa10 	vmov	sl, s24
 8008b16:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008b1a:	f841 ab08 	str.w	sl, [r1], #8
 8008b1e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008b22:	ee3b bacb 	vsub.f32	s22, s23, s22
 8008b26:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8008b2a:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008b2e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008b32:	edc2 8a01 	vstr	s17, [r2, #4]
 8008b36:	ed82 ba02 	vstr	s22, [r2, #8]
 8008b3a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008b3e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008b42:	ee38 8a47 	vsub.f32	s16, s16, s14
 8008b46:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8008b4a:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008b4e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008b52:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008b56:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008b5a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8008b5e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008b62:	ee28 aa24 	vmul.f32	s20, s16, s9
 8008b66:	ee60 9a04 	vmul.f32	s19, s0, s8
 8008b6a:	ee28 8a04 	vmul.f32	s16, s16, s8
 8008b6e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8008b72:	ee63 3a84 	vmul.f32	s7, s7, s8
 8008b76:	ee39 4a68 	vsub.f32	s8, s18, s17
 8008b7a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008b7e:	ee14 aa10 	vmov	sl, s8
 8008b82:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008b86:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008b8a:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008b8e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008b92:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008b96:	f846 a908 	str.w	sl, [r6], #-8
 8008b9a:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008b9e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008ba2:	edc6 3a01 	vstr	s7, [r6, #4]
 8008ba6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8008baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bae:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008bb2:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008bb6:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008bba:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008bbe:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008bc2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008bc6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008bca:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008bce:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008bd2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bda:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008bde:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008be2:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008be6:	ee15 aa90 	vmov	sl, s11
 8008bea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bee:	f840 ab08 	str.w	sl, [r0], #8
 8008bf2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008bf6:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008bfa:	f1b9 0901 	subs.w	r9, r9, #1
 8008bfe:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008c02:	f105 0508 	add.w	r5, r5, #8
 8008c06:	ed83 1a02 	vstr	s2, [r3, #8]
 8008c0a:	edc3 2a01 	vstr	s5, [r3, #4]
 8008c0e:	f108 0808 	add.w	r8, r8, #8
 8008c12:	f1a2 0208 	sub.w	r2, r2, #8
 8008c16:	f10c 0c10 	add.w	ip, ip, #16
 8008c1a:	f104 0408 	add.w	r4, r4, #8
 8008c1e:	f10e 0e18 	add.w	lr, lr, #24
 8008c22:	f1a3 0308 	sub.w	r3, r3, #8
 8008c26:	f47f aefc 	bne.w	8008a22 <arm_cfft_radix8by4_f32+0x13e>
 8008c2a:	9908      	ldr	r1, [sp, #32]
 8008c2c:	9802      	ldr	r0, [sp, #8]
 8008c2e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008c32:	00cb      	lsls	r3, r1, #3
 8008c34:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008c38:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008c3c:	9102      	str	r1, [sp, #8]
 8008c3e:	9905      	ldr	r1, [sp, #20]
 8008c40:	4419      	add	r1, r3
 8008c42:	9105      	str	r1, [sp, #20]
 8008c44:	9904      	ldr	r1, [sp, #16]
 8008c46:	4419      	add	r1, r3
 8008c48:	9104      	str	r1, [sp, #16]
 8008c4a:	9906      	ldr	r1, [sp, #24]
 8008c4c:	449b      	add	fp, r3
 8008c4e:	4419      	add	r1, r3
 8008c50:	449a      	add	sl, r3
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	9106      	str	r1, [sp, #24]
 8008c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	9a05      	ldr	r2, [sp, #20]
 8008c5e:	9806      	ldr	r0, [sp, #24]
 8008c60:	ed92 4a00 	vldr	s8, [r2]
 8008c64:	ed90 7a00 	vldr	s14, [r0]
 8008c68:	ed9b 3a00 	vldr	s6, [fp]
 8008c6c:	edda 3a00 	vldr	s7, [sl]
 8008c70:	edd2 4a01 	vldr	s9, [r2, #4]
 8008c74:	edd0 6a01 	vldr	s13, [r0, #4]
 8008c78:	ed9a 2a01 	vldr	s4, [sl, #4]
 8008c7c:	eddb 7a01 	vldr	s15, [fp, #4]
 8008c80:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008c84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c86:	ee34 6a07 	vadd.f32	s12, s8, s14
 8008c8a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8008c8e:	ee36 5a03 	vadd.f32	s10, s12, s6
 8008c92:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008c96:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008c9a:	ee34 7a47 	vsub.f32	s14, s8, s14
 8008c9e:	ed82 5a00 	vstr	s10, [r2]
 8008ca2:	ed9b 5a01 	vldr	s10, [fp, #4]
 8008ca6:	edda 4a01 	vldr	s9, [sl, #4]
 8008caa:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008cae:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008cb2:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008cb6:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8008cba:	ed82 5a01 	vstr	s10, [r2, #4]
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008cc4:	edd2 1a00 	vldr	s3, [r2]
 8008cc8:	edd2 2a01 	vldr	s5, [r2, #4]
 8008ccc:	9a02      	ldr	r2, [sp, #8]
 8008cce:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008cd2:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008cd6:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008cda:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008cde:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008ce2:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008ce6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008cea:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008cee:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008cf2:	edcb 2a00 	vstr	s5, [fp]
 8008cf6:	ed8b 5a01 	vstr	s10, [fp, #4]
 8008cfa:	ed92 4a01 	vldr	s8, [r2, #4]
 8008cfe:	ed92 5a00 	vldr	s10, [r2]
 8008d02:	9a03      	ldr	r2, [sp, #12]
 8008d04:	ee36 6a63 	vsub.f32	s12, s12, s7
 8008d08:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008d0c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008d10:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008d14:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008d18:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008d1c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008d20:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8008d24:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008d28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d2c:	ed80 6a01 	vstr	s12, [r0, #4]
 8008d30:	edc0 5a00 	vstr	s11, [r0]
 8008d34:	edd2 5a01 	vldr	s11, [r2, #4]
 8008d38:	9807      	ldr	r0, [sp, #28]
 8008d3a:	ee77 7a02 	vadd.f32	s15, s14, s4
 8008d3e:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8008d42:	edd2 6a00 	vldr	s13, [r2]
 8008d46:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8008d4a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008d4e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008d52:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008d56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008d5a:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008d5e:	edca 7a01 	vstr	s15, [sl, #4]
 8008d62:	ed8a 7a00 	vstr	s14, [sl]
 8008d66:	6872      	ldr	r2, [r6, #4]
 8008d68:	4621      	mov	r1, r4
 8008d6a:	2304      	movs	r3, #4
 8008d6c:	f000 f97a 	bl	8009064 <arm_radix8_butterfly_f32>
 8008d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d72:	6872      	ldr	r2, [r6, #4]
 8008d74:	4621      	mov	r1, r4
 8008d76:	2304      	movs	r3, #4
 8008d78:	f000 f974 	bl	8009064 <arm_radix8_butterfly_f32>
 8008d7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d7e:	6872      	ldr	r2, [r6, #4]
 8008d80:	4621      	mov	r1, r4
 8008d82:	2304      	movs	r3, #4
 8008d84:	f000 f96e 	bl	8009064 <arm_radix8_butterfly_f32>
 8008d88:	6872      	ldr	r2, [r6, #4]
 8008d8a:	9801      	ldr	r0, [sp, #4]
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	2304      	movs	r3, #4
 8008d90:	b00f      	add	sp, #60	; 0x3c
 8008d92:	ecbd 8b0a 	vpop	{d8-d12}
 8008d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f000 b963 	b.w	8009064 <arm_radix8_butterfly_f32>
 8008d9e:	bf00      	nop

08008da0 <arm_cfft_f32>:
 8008da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da4:	2a01      	cmp	r2, #1
 8008da6:	4606      	mov	r6, r0
 8008da8:	4617      	mov	r7, r2
 8008daa:	460c      	mov	r4, r1
 8008dac:	4698      	mov	r8, r3
 8008dae:	8805      	ldrh	r5, [r0, #0]
 8008db0:	d054      	beq.n	8008e5c <arm_cfft_f32+0xbc>
 8008db2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008db6:	d04c      	beq.n	8008e52 <arm_cfft_f32+0xb2>
 8008db8:	d916      	bls.n	8008de8 <arm_cfft_f32+0x48>
 8008dba:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008dbe:	d01a      	beq.n	8008df6 <arm_cfft_f32+0x56>
 8008dc0:	d95c      	bls.n	8008e7c <arm_cfft_f32+0xdc>
 8008dc2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008dc6:	d044      	beq.n	8008e52 <arm_cfft_f32+0xb2>
 8008dc8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008dcc:	d105      	bne.n	8008dda <arm_cfft_f32+0x3a>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	6872      	ldr	r2, [r6, #4]
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 f945 	bl	8009064 <arm_radix8_butterfly_f32>
 8008dda:	f1b8 0f00 	cmp.w	r8, #0
 8008dde:	d111      	bne.n	8008e04 <arm_cfft_f32+0x64>
 8008de0:	2f01      	cmp	r7, #1
 8008de2:	d016      	beq.n	8008e12 <arm_cfft_f32+0x72>
 8008de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de8:	2d20      	cmp	r5, #32
 8008dea:	d032      	beq.n	8008e52 <arm_cfft_f32+0xb2>
 8008dec:	d94a      	bls.n	8008e84 <arm_cfft_f32+0xe4>
 8008dee:	2d40      	cmp	r5, #64	; 0x40
 8008df0:	d0ed      	beq.n	8008dce <arm_cfft_f32+0x2e>
 8008df2:	2d80      	cmp	r5, #128	; 0x80
 8008df4:	d1f1      	bne.n	8008dda <arm_cfft_f32+0x3a>
 8008df6:	4621      	mov	r1, r4
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7ff fca3 	bl	8008744 <arm_cfft_radix8by2_f32>
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	d0ed      	beq.n	8008de0 <arm_cfft_f32+0x40>
 8008e04:	68b2      	ldr	r2, [r6, #8]
 8008e06:	89b1      	ldrh	r1, [r6, #12]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7f7 f9f1 	bl	80001f0 <arm_bitreversal_32>
 8008e0e:	2f01      	cmp	r7, #1
 8008e10:	d1e8      	bne.n	8008de4 <arm_cfft_f32+0x44>
 8008e12:	ee07 5a90 	vmov	s15, r5
 8008e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	d0de      	beq.n	8008de4 <arm_cfft_f32+0x44>
 8008e26:	f104 0108 	add.w	r1, r4, #8
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	429d      	cmp	r5, r3
 8008e30:	f101 0108 	add.w	r1, r1, #8
 8008e34:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008e38:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008e3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008e40:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008e44:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008e48:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008e4c:	d1ee      	bne.n	8008e2c <arm_cfft_f32+0x8c>
 8008e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e52:	4621      	mov	r1, r4
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7ff fd45 	bl	80088e4 <arm_cfft_radix8by4_f32>
 8008e5a:	e7be      	b.n	8008dda <arm_cfft_f32+0x3a>
 8008e5c:	b1ad      	cbz	r5, 8008e8a <arm_cfft_f32+0xea>
 8008e5e:	f101 030c 	add.w	r3, r1, #12
 8008e62:	2200      	movs	r2, #0
 8008e64:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008e68:	3201      	adds	r2, #1
 8008e6a:	eef1 7a67 	vneg.f32	s15, s15
 8008e6e:	4295      	cmp	r5, r2
 8008e70:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008e74:	f103 0308 	add.w	r3, r3, #8
 8008e78:	d1f4      	bne.n	8008e64 <arm_cfft_f32+0xc4>
 8008e7a:	e79a      	b.n	8008db2 <arm_cfft_f32+0x12>
 8008e7c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008e80:	d0a5      	beq.n	8008dce <arm_cfft_f32+0x2e>
 8008e82:	e7aa      	b.n	8008dda <arm_cfft_f32+0x3a>
 8008e84:	2d10      	cmp	r5, #16
 8008e86:	d0b6      	beq.n	8008df6 <arm_cfft_f32+0x56>
 8008e88:	e7a7      	b.n	8008dda <arm_cfft_f32+0x3a>
 8008e8a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008e8e:	d894      	bhi.n	8008dba <arm_cfft_f32+0x1a>
 8008e90:	e7aa      	b.n	8008de8 <arm_cfft_f32+0x48>
 8008e92:	bf00      	nop

08008e94 <arm_cmplx_mag_f32>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	d07f      	beq.n	8008fa0 <arm_cmplx_mag_f32+0x10c>
 8008ea0:	2700      	movs	r7, #0
 8008ea2:	f100 0420 	add.w	r4, r0, #32
 8008ea6:	f101 0510 	add.w	r5, r1, #16
 8008eaa:	4646      	mov	r6, r8
 8008eac:	e05a      	b.n	8008f64 <arm_cmplx_mag_f32+0xd0>
 8008eae:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008eb2:	eeb4 0a40 	vcmp.f32	s0, s0
 8008eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eba:	f040 80a4 	bne.w	8009006 <arm_cmplx_mag_f32+0x172>
 8008ebe:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008ec2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008ec6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008eca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ece:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008ed2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ede:	f2c0 808f 	blt.w	8009000 <arm_cmplx_mag_f32+0x16c>
 8008ee2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008ee6:	eeb4 0a40 	vcmp.f32	s0, s0
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eee:	f040 80af 	bne.w	8009050 <arm_cmplx_mag_f32+0x1bc>
 8008ef2:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008ef6:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008efa:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008efe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f02:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f06:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f12:	db72      	blt.n	8008ffa <arm_cmplx_mag_f32+0x166>
 8008f14:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008f18:	eeb4 0a40 	vcmp.f32	s0, s0
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	f040 808c 	bne.w	800903c <arm_cmplx_mag_f32+0x1a8>
 8008f24:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008f28:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008f2c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008f30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f34:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f38:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f44:	db20      	blt.n	8008f88 <arm_cmplx_mag_f32+0xf4>
 8008f46:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008f4a:	eeb4 0a40 	vcmp.f32	s0, s0
 8008f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f52:	d169      	bne.n	8009028 <arm_cmplx_mag_f32+0x194>
 8008f54:	3e01      	subs	r6, #1
 8008f56:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008f5a:	f104 0420 	add.w	r4, r4, #32
 8008f5e:	f105 0510 	add.w	r5, r5, #16
 8008f62:	d019      	beq.n	8008f98 <arm_cmplx_mag_f32+0x104>
 8008f64:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008f68:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008f6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f70:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f74:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f80:	da95      	bge.n	8008eae <arm_cmplx_mag_f32+0x1a>
 8008f82:	f845 7c10 	str.w	r7, [r5, #-16]
 8008f86:	e79c      	b.n	8008ec2 <arm_cmplx_mag_f32+0x2e>
 8008f88:	3e01      	subs	r6, #1
 8008f8a:	f845 7c04 	str.w	r7, [r5, #-4]
 8008f8e:	f104 0420 	add.w	r4, r4, #32
 8008f92:	f105 0510 	add.w	r5, r5, #16
 8008f96:	d1e5      	bne.n	8008f64 <arm_cmplx_mag_f32+0xd0>
 8008f98:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008f9c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008fa0:	f012 0503 	ands.w	r5, r2, #3
 8008fa4:	d026      	beq.n	8008ff4 <arm_cmplx_mag_f32+0x160>
 8008fa6:	2600      	movs	r6, #0
 8008fa8:	f100 0408 	add.w	r4, r0, #8
 8008fac:	e00c      	b.n	8008fc8 <arm_cmplx_mag_f32+0x134>
 8008fae:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008fb2:	eeb4 0a40 	vcmp.f32	s0, s0
 8008fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fba:	d12e      	bne.n	800901a <arm_cmplx_mag_f32+0x186>
 8008fbc:	3d01      	subs	r5, #1
 8008fbe:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008fc2:	f104 0408 	add.w	r4, r4, #8
 8008fc6:	d015      	beq.n	8008ff4 <arm_cmplx_mag_f32+0x160>
 8008fc8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008fcc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008fd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fd4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008fd8:	3104      	adds	r1, #4
 8008fda:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008fde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe6:	dae2      	bge.n	8008fae <arm_cmplx_mag_f32+0x11a>
 8008fe8:	3d01      	subs	r5, #1
 8008fea:	f841 6c04 	str.w	r6, [r1, #-4]
 8008fee:	f104 0408 	add.w	r4, r4, #8
 8008ff2:	d1e9      	bne.n	8008fc8 <arm_cmplx_mag_f32+0x134>
 8008ff4:	b004      	add	sp, #16
 8008ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffa:	f845 7c08 	str.w	r7, [r5, #-8]
 8008ffe:	e793      	b.n	8008f28 <arm_cmplx_mag_f32+0x94>
 8009000:	f845 7c0c 	str.w	r7, [r5, #-12]
 8009004:	e777      	b.n	8008ef6 <arm_cmplx_mag_f32+0x62>
 8009006:	eeb0 0a67 	vmov.f32	s0, s15
 800900a:	9203      	str	r2, [sp, #12]
 800900c:	9102      	str	r1, [sp, #8]
 800900e:	9001      	str	r0, [sp, #4]
 8009010:	f000 ffcc 	bl	8009fac <sqrtf>
 8009014:	a801      	add	r0, sp, #4
 8009016:	c807      	ldmia	r0, {r0, r1, r2}
 8009018:	e751      	b.n	8008ebe <arm_cmplx_mag_f32+0x2a>
 800901a:	eeb0 0a67 	vmov.f32	s0, s15
 800901e:	9101      	str	r1, [sp, #4]
 8009020:	f000 ffc4 	bl	8009fac <sqrtf>
 8009024:	9901      	ldr	r1, [sp, #4]
 8009026:	e7c9      	b.n	8008fbc <arm_cmplx_mag_f32+0x128>
 8009028:	eeb0 0a67 	vmov.f32	s0, s15
 800902c:	9203      	str	r2, [sp, #12]
 800902e:	9102      	str	r1, [sp, #8]
 8009030:	9001      	str	r0, [sp, #4]
 8009032:	f000 ffbb 	bl	8009fac <sqrtf>
 8009036:	a801      	add	r0, sp, #4
 8009038:	c807      	ldmia	r0, {r0, r1, r2}
 800903a:	e78b      	b.n	8008f54 <arm_cmplx_mag_f32+0xc0>
 800903c:	eeb0 0a67 	vmov.f32	s0, s15
 8009040:	9203      	str	r2, [sp, #12]
 8009042:	9102      	str	r1, [sp, #8]
 8009044:	9001      	str	r0, [sp, #4]
 8009046:	f000 ffb1 	bl	8009fac <sqrtf>
 800904a:	a801      	add	r0, sp, #4
 800904c:	c807      	ldmia	r0, {r0, r1, r2}
 800904e:	e769      	b.n	8008f24 <arm_cmplx_mag_f32+0x90>
 8009050:	eeb0 0a67 	vmov.f32	s0, s15
 8009054:	9203      	str	r2, [sp, #12]
 8009056:	9102      	str	r1, [sp, #8]
 8009058:	9001      	str	r0, [sp, #4]
 800905a:	f000 ffa7 	bl	8009fac <sqrtf>
 800905e:	a801      	add	r0, sp, #4
 8009060:	c807      	ldmia	r0, {r0, r1, r2}
 8009062:	e746      	b.n	8008ef2 <arm_cmplx_mag_f32+0x5e>

08009064 <arm_radix8_butterfly_f32>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	ed2d 8b10 	vpush	{d8-d15}
 800906c:	461c      	mov	r4, r3
 800906e:	b09d      	sub	sp, #116	; 0x74
 8009070:	4603      	mov	r3, r0
 8009072:	3304      	adds	r3, #4
 8009074:	ed9f bac4 	vldr	s22, [pc, #784]	; 8009388 <arm_radix8_butterfly_f32+0x324>
 8009078:	9019      	str	r0, [sp, #100]	; 0x64
 800907a:	921a      	str	r2, [sp, #104]	; 0x68
 800907c:	468b      	mov	fp, r1
 800907e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009080:	468a      	mov	sl, r1
 8009082:	46a1      	mov	r9, r4
 8009084:	4607      	mov	r7, r0
 8009086:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800908a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800908e:	eb03 0508 	add.w	r5, r3, r8
 8009092:	195c      	adds	r4, r3, r5
 8009094:	00de      	lsls	r6, r3, #3
 8009096:	191a      	adds	r2, r3, r4
 8009098:	9600      	str	r6, [sp, #0]
 800909a:	1898      	adds	r0, r3, r2
 800909c:	4619      	mov	r1, r3
 800909e:	9e00      	ldr	r6, [sp, #0]
 80090a0:	9311      	str	r3, [sp, #68]	; 0x44
 80090a2:	4401      	add	r1, r0
 80090a4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80090a8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80090ac:	19be      	adds	r6, r7, r6
 80090ae:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80090b2:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80090b6:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80090ba:	9f00      	ldr	r7, [sp, #0]
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	eb06 0e07 	add.w	lr, r6, r7
 80090c2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80090c4:	9302      	str	r3, [sp, #8]
 80090c6:	3204      	adds	r2, #4
 80090c8:	3104      	adds	r1, #4
 80090ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090ce:	f04f 0c00 	mov.w	ip, #0
 80090d2:	edde 7a00 	vldr	s15, [lr]
 80090d6:	edd6 6a00 	vldr	s13, [r6]
 80090da:	ed95 2a00 	vldr	s4, [r5]
 80090de:	ed17 aa01 	vldr	s20, [r7, #-4]
 80090e2:	edd4 4a00 	vldr	s9, [r4]
 80090e6:	ed90 5a00 	vldr	s10, [r0]
 80090ea:	ed12 7a01 	vldr	s14, [r2, #-4]
 80090ee:	ed51 0a01 	vldr	s1, [r1, #-4]
 80090f2:	ee77 8a85 	vadd.f32	s17, s15, s10
 80090f6:	ee76 3a87 	vadd.f32	s7, s13, s14
 80090fa:	ee32 4a20 	vadd.f32	s8, s4, s1
 80090fe:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8009102:	ee33 6a84 	vadd.f32	s12, s7, s8
 8009106:	ee73 5a28 	vadd.f32	s11, s6, s17
 800910a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800910e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8009112:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8009116:	ed47 6a01 	vstr	s13, [r7, #-4]
 800911a:	edc4 5a00 	vstr	s11, [r4]
 800911e:	ed92 9a00 	vldr	s18, [r2]
 8009122:	ed95 1a01 	vldr	s2, [r5, #4]
 8009126:	edd6 5a01 	vldr	s11, [r6, #4]
 800912a:	ed91 6a00 	vldr	s12, [r1]
 800912e:	edd7 2a00 	vldr	s5, [r7]
 8009132:	edd4 1a01 	vldr	s3, [r4, #4]
 8009136:	edde 6a01 	vldr	s13, [lr, #4]
 800913a:	edd0 9a01 	vldr	s19, [r0, #4]
 800913e:	ee72 0a60 	vsub.f32	s1, s4, s1
 8009142:	ee71 aa46 	vsub.f32	s21, s2, s12
 8009146:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800914a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800914e:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8009152:	ee37 7a20 	vadd.f32	s14, s14, s1
 8009156:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800915a:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800915e:	ee75 5a89 	vadd.f32	s11, s11, s18
 8009162:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8009166:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800916a:	ee31 6a06 	vadd.f32	s12, s2, s12
 800916e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8009172:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8009176:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800917a:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800917e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8009182:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8009186:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800918a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800918e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8009192:	ee75 8a86 	vadd.f32	s17, s11, s12
 8009196:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800919a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800919e:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80091a2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80091a6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80091aa:	ee75 4a27 	vadd.f32	s9, s10, s15
 80091ae:	ee71 5a49 	vsub.f32	s11, s2, s18
 80091b2:	ee31 2a09 	vadd.f32	s4, s2, s18
 80091b6:	ee75 7a67 	vsub.f32	s15, s10, s15
 80091ba:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80091be:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80091c2:	ee73 0a06 	vadd.f32	s1, s6, s12
 80091c6:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80091ca:	ee36 5a87 	vadd.f32	s10, s13, s14
 80091ce:	ee32 8a28 	vadd.f32	s16, s4, s17
 80091d2:	ee33 6a46 	vsub.f32	s12, s6, s12
 80091d6:	ee34 4a25 	vadd.f32	s8, s8, s11
 80091da:	ee33 3a80 	vadd.f32	s6, s7, s0
 80091de:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80091e2:	ee71 5a64 	vsub.f32	s11, s2, s9
 80091e6:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80091ea:	ee32 2a68 	vsub.f32	s4, s4, s17
 80091ee:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80091f2:	ee74 4a81 	vadd.f32	s9, s9, s2
 80091f6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80091fa:	44dc      	add	ip, fp
 80091fc:	45e2      	cmp	sl, ip
 80091fe:	ed87 8a00 	vstr	s16, [r7]
 8009202:	ed84 2a01 	vstr	s4, [r4, #4]
 8009206:	441f      	add	r7, r3
 8009208:	edce 0a00 	vstr	s1, [lr]
 800920c:	441c      	add	r4, r3
 800920e:	ed80 6a00 	vstr	s12, [r0]
 8009212:	edce 1a01 	vstr	s3, [lr, #4]
 8009216:	ed80 4a01 	vstr	s8, [r0, #4]
 800921a:	449e      	add	lr, r3
 800921c:	ed86 3a00 	vstr	s6, [r6]
 8009220:	4418      	add	r0, r3
 8009222:	ed41 3a01 	vstr	s7, [r1, #-4]
 8009226:	ed02 5a01 	vstr	s10, [r2, #-4]
 800922a:	ed85 7a00 	vstr	s14, [r5]
 800922e:	edc6 5a01 	vstr	s11, [r6, #4]
 8009232:	edc1 4a00 	vstr	s9, [r1]
 8009236:	441e      	add	r6, r3
 8009238:	edc2 6a00 	vstr	s13, [r2]
 800923c:	4419      	add	r1, r3
 800923e:	edc5 7a01 	vstr	s15, [r5, #4]
 8009242:	441a      	add	r2, r3
 8009244:	441d      	add	r5, r3
 8009246:	f63f af44 	bhi.w	80090d2 <arm_radix8_butterfly_f32+0x6e>
 800924a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800924c:	2a07      	cmp	r2, #7
 800924e:	f240 81f5 	bls.w	800963c <arm_radix8_butterfly_f32+0x5d8>
 8009252:	f108 0101 	add.w	r1, r8, #1
 8009256:	188f      	adds	r7, r1, r2
 8009258:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800925c:	19d6      	adds	r6, r2, r7
 800925e:	eb08 0c09 	add.w	ip, r8, r9
 8009262:	1994      	adds	r4, r2, r6
 8009264:	eb0c 0e09 	add.w	lr, ip, r9
 8009268:	4610      	mov	r0, r2
 800926a:	9701      	str	r7, [sp, #4]
 800926c:	4420      	add	r0, r4
 800926e:	eb0e 0709 	add.w	r7, lr, r9
 8009272:	1815      	adds	r5, r2, r0
 8009274:	eb07 0209 	add.w	r2, r7, r9
 8009278:	9203      	str	r2, [sp, #12]
 800927a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800927c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009280:	9117      	str	r1, [sp, #92]	; 0x5c
 8009282:	440a      	add	r2, r1
 8009284:	9900      	ldr	r1, [sp, #0]
 8009286:	3108      	adds	r1, #8
 8009288:	9100      	str	r1, [sp, #0]
 800928a:	9902      	ldr	r1, [sp, #8]
 800928c:	3108      	adds	r1, #8
 800928e:	9102      	str	r1, [sp, #8]
 8009290:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009292:	00ff      	lsls	r7, r7, #3
 8009294:	9715      	str	r7, [sp, #84]	; 0x54
 8009296:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800929a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800929e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80092a2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80092a4:	9903      	ldr	r1, [sp, #12]
 80092a6:	19d7      	adds	r7, r2, r7
 80092a8:	00c9      	lsls	r1, r1, #3
 80092aa:	9114      	str	r1, [sp, #80]	; 0x50
 80092ac:	9710      	str	r7, [sp, #64]	; 0x40
 80092ae:	9919      	ldr	r1, [sp, #100]	; 0x64
 80092b0:	9f00      	ldr	r7, [sp, #0]
 80092b2:	19cf      	adds	r7, r1, r7
 80092b4:	970d      	str	r7, [sp, #52]	; 0x34
 80092b6:	9f02      	ldr	r7, [sp, #8]
 80092b8:	19cf      	adds	r7, r1, r7
 80092ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80092be:	970c      	str	r7, [sp, #48]	; 0x30
 80092c0:	9f01      	ldr	r7, [sp, #4]
 80092c2:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80092c6:	3504      	adds	r5, #4
 80092c8:	3004      	adds	r0, #4
 80092ca:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80092ce:	9508      	str	r5, [sp, #32]
 80092d0:	9009      	str	r0, [sp, #36]	; 0x24
 80092d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80092d4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80092d6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80092da:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80092de:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80092e2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80092e4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80092e8:	1945      	adds	r5, r0, r5
 80092ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80092ee:	460f      	mov	r7, r1
 80092f0:	3404      	adds	r4, #4
 80092f2:	4641      	mov	r1, r8
 80092f4:	1841      	adds	r1, r0, r1
 80092f6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80092fa:	940a      	str	r4, [sp, #40]	; 0x28
 80092fc:	eb00 0c06 	add.w	ip, r0, r6
 8009300:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009304:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009306:	9506      	str	r5, [sp, #24]
 8009308:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800930a:	9105      	str	r1, [sp, #20]
 800930c:	4639      	mov	r1, r7
 800930e:	1905      	adds	r5, r0, r4
 8009310:	3108      	adds	r1, #8
 8009312:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009314:	9507      	str	r5, [sp, #28]
 8009316:	910f      	str	r1, [sp, #60]	; 0x3c
 8009318:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800931c:	2101      	movs	r1, #1
 800931e:	eb00 0e06 	add.w	lr, r0, r6
 8009322:	9518      	str	r5, [sp, #96]	; 0x60
 8009324:	9404      	str	r4, [sp, #16]
 8009326:	9103      	str	r1, [sp, #12]
 8009328:	4620      	mov	r0, r4
 800932a:	4689      	mov	r9, r1
 800932c:	9e06      	ldr	r6, [sp, #24]
 800932e:	ed90 fa00 	vldr	s30, [r0]
 8009332:	edd6 7a01 	vldr	s15, [r6, #4]
 8009336:	edd0 ba01 	vldr	s23, [r0, #4]
 800933a:	edcd 7a00 	vstr	s15, [sp]
 800933e:	a80d      	add	r0, sp, #52	; 0x34
 8009340:	edde 7a01 	vldr	s15, [lr, #4]
 8009344:	9c05      	ldr	r4, [sp, #20]
 8009346:	9d07      	ldr	r5, [sp, #28]
 8009348:	edd2 fa00 	vldr	s31, [r2]
 800934c:	ed92 ca01 	vldr	s24, [r2, #4]
 8009350:	edcd 7a01 	vstr	s15, [sp, #4]
 8009354:	c807      	ldmia	r0, {r0, r1, r2}
 8009356:	eddc 7a01 	vldr	s15, [ip, #4]
 800935a:	edd4 ea00 	vldr	s29, [r4]
 800935e:	ed95 ea00 	vldr	s28, [r5]
 8009362:	edd6 da00 	vldr	s27, [r6]
 8009366:	edd4 aa01 	vldr	s21, [r4, #4]
 800936a:	ed95 aa01 	vldr	s20, [r5, #4]
 800936e:	ed9e da00 	vldr	s26, [lr]
 8009372:	eddc ca00 	vldr	s25, [ip]
 8009376:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800937a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800937c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800937e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009380:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009382:	edcd 7a02 	vstr	s15, [sp, #8]
 8009386:	e001      	b.n	800938c <arm_radix8_butterfly_f32+0x328>
 8009388:	3f3504f3 	.word	0x3f3504f3
 800938c:	ed16 6a01 	vldr	s12, [r6, #-4]
 8009390:	ed91 5a00 	vldr	s10, [r1]
 8009394:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009398:	edd5 7a00 	vldr	s15, [r5]
 800939c:	ed18 7a01 	vldr	s14, [r8, #-4]
 80093a0:	edd2 3a00 	vldr	s7, [r2]
 80093a4:	ed94 3a00 	vldr	s6, [r4]
 80093a8:	ed90 2a00 	vldr	s4, [r0]
 80093ac:	ed92 0a01 	vldr	s0, [r2, #4]
 80093b0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80093b4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80093b8:	ee33 4a29 	vadd.f32	s8, s6, s19
 80093bc:	ee77 4a87 	vadd.f32	s9, s15, s14
 80093c0:	ee78 1a04 	vadd.f32	s3, s16, s8
 80093c4:	ee71 6a24 	vadd.f32	s13, s2, s9
 80093c8:	ee32 2a46 	vsub.f32	s4, s4, s12
 80093cc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80093d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093d4:	ed82 6a00 	vstr	s12, [r2]
 80093d8:	edd5 8a01 	vldr	s17, [r5, #4]
 80093dc:	ed90 9a01 	vldr	s18, [r0, #4]
 80093e0:	edd6 2a00 	vldr	s5, [r6]
 80093e4:	ed98 7a00 	vldr	s14, [r8]
 80093e8:	edd4 0a01 	vldr	s1, [r4, #4]
 80093ec:	ed91 6a01 	vldr	s12, [r1, #4]
 80093f0:	edd7 5a00 	vldr	s11, [r7]
 80093f4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80093f8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80093fc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009400:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8009404:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009408:	ee38 7a87 	vadd.f32	s14, s17, s14
 800940c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009410:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009414:	ee75 8a69 	vsub.f32	s17, s10, s19
 8009418:	ee32 9a27 	vadd.f32	s18, s4, s15
 800941c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8009420:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009424:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009428:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800942c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009430:	ee32 9a08 	vadd.f32	s18, s4, s16
 8009434:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009438:	ee32 2a48 	vsub.f32	s4, s4, s16
 800943c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009440:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009444:	ee32 1a87 	vadd.f32	s2, s5, s14
 8009448:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800944c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009450:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009454:	ee73 0a29 	vadd.f32	s1, s6, s19
 8009458:	ee36 0a28 	vadd.f32	s0, s12, s17
 800945c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009460:	ee32 7a64 	vsub.f32	s14, s4, s9
 8009464:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8009468:	ee36 6a68 	vsub.f32	s12, s12, s17
 800946c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009470:	ee75 8a85 	vadd.f32	s17, s11, s10
 8009474:	ee74 3a22 	vadd.f32	s7, s8, s5
 8009478:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800947c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009480:	ee79 1a41 	vsub.f32	s3, s18, s2
 8009484:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009488:	ee76 5a43 	vsub.f32	s11, s12, s6
 800948c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009490:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009494:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009498:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800949c:	ee30 0a80 	vadd.f32	s0, s1, s0
 80094a0:	ee77 9a85 	vadd.f32	s19, s15, s10
 80094a4:	ee33 6a06 	vadd.f32	s12, s6, s12
 80094a8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80094ac:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80094b0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80094b4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80094b8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80094bc:	ee39 1a01 	vadd.f32	s2, s18, s2
 80094c0:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80094c4:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80094c8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80094cc:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80094d0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80094d4:	ee35 3a03 	vadd.f32	s6, s10, s6
 80094d8:	ee72 6a66 	vsub.f32	s13, s4, s13
 80094dc:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80094e0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80094e4:	ed9d 4a02 	vldr	s8, [sp, #8]
 80094e8:	ed82 1a01 	vstr	s2, [r2, #4]
 80094ec:	ee77 3a63 	vsub.f32	s7, s14, s7
 80094f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80094f4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80094f8:	ed81 3a00 	vstr	s6, [r1]
 80094fc:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009500:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009504:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009508:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800950c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8009510:	ee64 1a00 	vmul.f32	s3, s8, s0
 8009514:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009518:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800951c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8009520:	ee64 8a28 	vmul.f32	s17, s8, s17
 8009524:	ed9d 4a00 	vldr	s8, [sp]
 8009528:	edc1 6a01 	vstr	s13, [r1, #4]
 800952c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009530:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8009534:	ee64 9a29 	vmul.f32	s19, s8, s19
 8009538:	ee24 4a25 	vmul.f32	s8, s8, s11
 800953c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8009540:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009544:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8009548:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800954c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8009550:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8009554:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009558:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800955c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8009560:	ee30 0a68 	vsub.f32	s0, s0, s17
 8009564:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009568:	ee70 0a84 	vadd.f32	s1, s1, s8
 800956c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009570:	44d9      	add	r9, fp
 8009572:	45ca      	cmp	sl, r9
 8009574:	ed84 9a00 	vstr	s18, [r4]
 8009578:	edc4 3a01 	vstr	s7, [r4, #4]
 800957c:	441a      	add	r2, r3
 800957e:	ed07 7a01 	vstr	s14, [r7, #-4]
 8009582:	edc7 2a00 	vstr	s5, [r7]
 8009586:	4419      	add	r1, r3
 8009588:	ed80 2a00 	vstr	s4, [r0]
 800958c:	ed80 8a01 	vstr	s16, [r0, #4]
 8009590:	441c      	add	r4, r3
 8009592:	ed48 1a01 	vstr	s3, [r8, #-4]
 8009596:	ed88 0a00 	vstr	s0, [r8]
 800959a:	441f      	add	r7, r3
 800959c:	ed46 4a01 	vstr	s9, [r6, #-4]
 80095a0:	4418      	add	r0, r3
 80095a2:	edc6 9a00 	vstr	s19, [r6]
 80095a6:	4498      	add	r8, r3
 80095a8:	edc5 0a00 	vstr	s1, [r5]
 80095ac:	ed85 6a01 	vstr	s12, [r5, #4]
 80095b0:	441e      	add	r6, r3
 80095b2:	441d      	add	r5, r3
 80095b4:	f63f aeea 	bhi.w	800938c <arm_radix8_butterfly_f32+0x328>
 80095b8:	9a03      	ldr	r2, [sp, #12]
 80095ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 80095bc:	3201      	adds	r2, #1
 80095be:	4611      	mov	r1, r2
 80095c0:	9203      	str	r2, [sp, #12]
 80095c2:	9a04      	ldr	r2, [sp, #16]
 80095c4:	4402      	add	r2, r0
 80095c6:	9204      	str	r2, [sp, #16]
 80095c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80095ca:	9a05      	ldr	r2, [sp, #20]
 80095cc:	4402      	add	r2, r0
 80095ce:	9205      	str	r2, [sp, #20]
 80095d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80095d2:	9a07      	ldr	r2, [sp, #28]
 80095d4:	4402      	add	r2, r0
 80095d6:	9207      	str	r2, [sp, #28]
 80095d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80095da:	9a06      	ldr	r2, [sp, #24]
 80095dc:	4402      	add	r2, r0
 80095de:	9206      	str	r2, [sp, #24]
 80095e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095e2:	4496      	add	lr, r2
 80095e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095e6:	4494      	add	ip, r2
 80095e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095ea:	3208      	adds	r2, #8
 80095ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80095ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095f0:	3208      	adds	r2, #8
 80095f2:	920e      	str	r2, [sp, #56]	; 0x38
 80095f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095f6:	3208      	adds	r2, #8
 80095f8:	920d      	str	r2, [sp, #52]	; 0x34
 80095fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095fc:	3208      	adds	r2, #8
 80095fe:	920c      	str	r2, [sp, #48]	; 0x30
 8009600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009602:	3208      	adds	r2, #8
 8009604:	920b      	str	r2, [sp, #44]	; 0x2c
 8009606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009608:	3208      	adds	r2, #8
 800960a:	920a      	str	r2, [sp, #40]	; 0x28
 800960c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960e:	3208      	adds	r2, #8
 8009610:	9209      	str	r2, [sp, #36]	; 0x24
 8009612:	9a08      	ldr	r2, [sp, #32]
 8009614:	3208      	adds	r2, #8
 8009616:	9208      	str	r2, [sp, #32]
 8009618:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800961a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800961c:	4288      	cmp	r0, r1
 800961e:	4622      	mov	r2, r4
 8009620:	d007      	beq.n	8009632 <arm_radix8_butterfly_f32+0x5ce>
 8009622:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009624:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009628:	4621      	mov	r1, r4
 800962a:	4401      	add	r1, r0
 800962c:	9110      	str	r1, [sp, #64]	; 0x40
 800962e:	9804      	ldr	r0, [sp, #16]
 8009630:	e67c      	b.n	800932c <arm_radix8_butterfly_f32+0x2c8>
 8009632:	4683      	mov	fp, r0
 8009634:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8009638:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800963a:	e524      	b.n	8009086 <arm_radix8_butterfly_f32+0x22>
 800963c:	b01d      	add	sp, #116	; 0x74
 800963e:	ecbd 8b10 	vpop	{d8-d15}
 8009642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009646:	bf00      	nop

08009648 <sniprintf>:
 8009648:	b40c      	push	{r2, r3}
 800964a:	b530      	push	{r4, r5, lr}
 800964c:	4b17      	ldr	r3, [pc, #92]	; (80096ac <sniprintf+0x64>)
 800964e:	1e0c      	subs	r4, r1, #0
 8009650:	681d      	ldr	r5, [r3, #0]
 8009652:	b09d      	sub	sp, #116	; 0x74
 8009654:	da08      	bge.n	8009668 <sniprintf+0x20>
 8009656:	238b      	movs	r3, #139	; 0x8b
 8009658:	602b      	str	r3, [r5, #0]
 800965a:	f04f 30ff 	mov.w	r0, #4294967295
 800965e:	b01d      	add	sp, #116	; 0x74
 8009660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009664:	b002      	add	sp, #8
 8009666:	4770      	bx	lr
 8009668:	f44f 7302 	mov.w	r3, #520	; 0x208
 800966c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009670:	bf14      	ite	ne
 8009672:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009676:	4623      	moveq	r3, r4
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	9307      	str	r3, [sp, #28]
 800967c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009680:	9002      	str	r0, [sp, #8]
 8009682:	9006      	str	r0, [sp, #24]
 8009684:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009688:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800968a:	ab21      	add	r3, sp, #132	; 0x84
 800968c:	a902      	add	r1, sp, #8
 800968e:	4628      	mov	r0, r5
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	f000 f98d 	bl	80099b0 <_svfiprintf_r>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	bfbc      	itt	lt
 800969a:	238b      	movlt	r3, #139	; 0x8b
 800969c:	602b      	strlt	r3, [r5, #0]
 800969e:	2c00      	cmp	r4, #0
 80096a0:	d0dd      	beq.n	800965e <sniprintf+0x16>
 80096a2:	9b02      	ldr	r3, [sp, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]
 80096a8:	e7d9      	b.n	800965e <sniprintf+0x16>
 80096aa:	bf00      	nop
 80096ac:	200003c4 	.word	0x200003c4

080096b0 <memset>:
 80096b0:	4402      	add	r2, r0
 80096b2:	4603      	mov	r3, r0
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d100      	bne.n	80096ba <memset+0xa>
 80096b8:	4770      	bx	lr
 80096ba:	f803 1b01 	strb.w	r1, [r3], #1
 80096be:	e7f9      	b.n	80096b4 <memset+0x4>

080096c0 <__libc_init_array>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	4d0d      	ldr	r5, [pc, #52]	; (80096f8 <__libc_init_array+0x38>)
 80096c4:	4c0d      	ldr	r4, [pc, #52]	; (80096fc <__libc_init_array+0x3c>)
 80096c6:	1b64      	subs	r4, r4, r5
 80096c8:	10a4      	asrs	r4, r4, #2
 80096ca:	2600      	movs	r6, #0
 80096cc:	42a6      	cmp	r6, r4
 80096ce:	d109      	bne.n	80096e4 <__libc_init_array+0x24>
 80096d0:	4d0b      	ldr	r5, [pc, #44]	; (8009700 <__libc_init_array+0x40>)
 80096d2:	4c0c      	ldr	r4, [pc, #48]	; (8009704 <__libc_init_array+0x44>)
 80096d4:	f000 fca0 	bl	800a018 <_init>
 80096d8:	1b64      	subs	r4, r4, r5
 80096da:	10a4      	asrs	r4, r4, #2
 80096dc:	2600      	movs	r6, #0
 80096de:	42a6      	cmp	r6, r4
 80096e0:	d105      	bne.n	80096ee <__libc_init_array+0x2e>
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e8:	4798      	blx	r3
 80096ea:	3601      	adds	r6, #1
 80096ec:	e7ee      	b.n	80096cc <__libc_init_array+0xc>
 80096ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f2:	4798      	blx	r3
 80096f4:	3601      	adds	r6, #1
 80096f6:	e7f2      	b.n	80096de <__libc_init_array+0x1e>
 80096f8:	08021100 	.word	0x08021100
 80096fc:	08021100 	.word	0x08021100
 8009700:	08021100 	.word	0x08021100
 8009704:	08021104 	.word	0x08021104

08009708 <__retarget_lock_acquire_recursive>:
 8009708:	4770      	bx	lr

0800970a <__retarget_lock_release_recursive>:
 800970a:	4770      	bx	lr

0800970c <_free_r>:
 800970c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800970e:	2900      	cmp	r1, #0
 8009710:	d044      	beq.n	800979c <_free_r+0x90>
 8009712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009716:	9001      	str	r0, [sp, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	f1a1 0404 	sub.w	r4, r1, #4
 800971e:	bfb8      	it	lt
 8009720:	18e4      	addlt	r4, r4, r3
 8009722:	f000 f8df 	bl	80098e4 <__malloc_lock>
 8009726:	4a1e      	ldr	r2, [pc, #120]	; (80097a0 <_free_r+0x94>)
 8009728:	9801      	ldr	r0, [sp, #4]
 800972a:	6813      	ldr	r3, [r2, #0]
 800972c:	b933      	cbnz	r3, 800973c <_free_r+0x30>
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	6014      	str	r4, [r2, #0]
 8009732:	b003      	add	sp, #12
 8009734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009738:	f000 b8da 	b.w	80098f0 <__malloc_unlock>
 800973c:	42a3      	cmp	r3, r4
 800973e:	d908      	bls.n	8009752 <_free_r+0x46>
 8009740:	6825      	ldr	r5, [r4, #0]
 8009742:	1961      	adds	r1, r4, r5
 8009744:	428b      	cmp	r3, r1
 8009746:	bf01      	itttt	eq
 8009748:	6819      	ldreq	r1, [r3, #0]
 800974a:	685b      	ldreq	r3, [r3, #4]
 800974c:	1949      	addeq	r1, r1, r5
 800974e:	6021      	streq	r1, [r4, #0]
 8009750:	e7ed      	b.n	800972e <_free_r+0x22>
 8009752:	461a      	mov	r2, r3
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	b10b      	cbz	r3, 800975c <_free_r+0x50>
 8009758:	42a3      	cmp	r3, r4
 800975a:	d9fa      	bls.n	8009752 <_free_r+0x46>
 800975c:	6811      	ldr	r1, [r2, #0]
 800975e:	1855      	adds	r5, r2, r1
 8009760:	42a5      	cmp	r5, r4
 8009762:	d10b      	bne.n	800977c <_free_r+0x70>
 8009764:	6824      	ldr	r4, [r4, #0]
 8009766:	4421      	add	r1, r4
 8009768:	1854      	adds	r4, r2, r1
 800976a:	42a3      	cmp	r3, r4
 800976c:	6011      	str	r1, [r2, #0]
 800976e:	d1e0      	bne.n	8009732 <_free_r+0x26>
 8009770:	681c      	ldr	r4, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	6053      	str	r3, [r2, #4]
 8009776:	440c      	add	r4, r1
 8009778:	6014      	str	r4, [r2, #0]
 800977a:	e7da      	b.n	8009732 <_free_r+0x26>
 800977c:	d902      	bls.n	8009784 <_free_r+0x78>
 800977e:	230c      	movs	r3, #12
 8009780:	6003      	str	r3, [r0, #0]
 8009782:	e7d6      	b.n	8009732 <_free_r+0x26>
 8009784:	6825      	ldr	r5, [r4, #0]
 8009786:	1961      	adds	r1, r4, r5
 8009788:	428b      	cmp	r3, r1
 800978a:	bf04      	itt	eq
 800978c:	6819      	ldreq	r1, [r3, #0]
 800978e:	685b      	ldreq	r3, [r3, #4]
 8009790:	6063      	str	r3, [r4, #4]
 8009792:	bf04      	itt	eq
 8009794:	1949      	addeq	r1, r1, r5
 8009796:	6021      	streq	r1, [r4, #0]
 8009798:	6054      	str	r4, [r2, #4]
 800979a:	e7ca      	b.n	8009732 <_free_r+0x26>
 800979c:	b003      	add	sp, #12
 800979e:	bd30      	pop	{r4, r5, pc}
 80097a0:	20000bfc 	.word	0x20000bfc

080097a4 <sbrk_aligned>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	4e0e      	ldr	r6, [pc, #56]	; (80097e0 <sbrk_aligned+0x3c>)
 80097a8:	460c      	mov	r4, r1
 80097aa:	6831      	ldr	r1, [r6, #0]
 80097ac:	4605      	mov	r5, r0
 80097ae:	b911      	cbnz	r1, 80097b6 <sbrk_aligned+0x12>
 80097b0:	f000 fba6 	bl	8009f00 <_sbrk_r>
 80097b4:	6030      	str	r0, [r6, #0]
 80097b6:	4621      	mov	r1, r4
 80097b8:	4628      	mov	r0, r5
 80097ba:	f000 fba1 	bl	8009f00 <_sbrk_r>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d00a      	beq.n	80097d8 <sbrk_aligned+0x34>
 80097c2:	1cc4      	adds	r4, r0, #3
 80097c4:	f024 0403 	bic.w	r4, r4, #3
 80097c8:	42a0      	cmp	r0, r4
 80097ca:	d007      	beq.n	80097dc <sbrk_aligned+0x38>
 80097cc:	1a21      	subs	r1, r4, r0
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 fb96 	bl	8009f00 <_sbrk_r>
 80097d4:	3001      	adds	r0, #1
 80097d6:	d101      	bne.n	80097dc <sbrk_aligned+0x38>
 80097d8:	f04f 34ff 	mov.w	r4, #4294967295
 80097dc:	4620      	mov	r0, r4
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	20000c00 	.word	0x20000c00

080097e4 <_malloc_r>:
 80097e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e8:	1ccd      	adds	r5, r1, #3
 80097ea:	f025 0503 	bic.w	r5, r5, #3
 80097ee:	3508      	adds	r5, #8
 80097f0:	2d0c      	cmp	r5, #12
 80097f2:	bf38      	it	cc
 80097f4:	250c      	movcc	r5, #12
 80097f6:	2d00      	cmp	r5, #0
 80097f8:	4607      	mov	r7, r0
 80097fa:	db01      	blt.n	8009800 <_malloc_r+0x1c>
 80097fc:	42a9      	cmp	r1, r5
 80097fe:	d905      	bls.n	800980c <_malloc_r+0x28>
 8009800:	230c      	movs	r3, #12
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	2600      	movs	r6, #0
 8009806:	4630      	mov	r0, r6
 8009808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80098e0 <_malloc_r+0xfc>
 8009810:	f000 f868 	bl	80098e4 <__malloc_lock>
 8009814:	f8d8 3000 	ldr.w	r3, [r8]
 8009818:	461c      	mov	r4, r3
 800981a:	bb5c      	cbnz	r4, 8009874 <_malloc_r+0x90>
 800981c:	4629      	mov	r1, r5
 800981e:	4638      	mov	r0, r7
 8009820:	f7ff ffc0 	bl	80097a4 <sbrk_aligned>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	4604      	mov	r4, r0
 8009828:	d155      	bne.n	80098d6 <_malloc_r+0xf2>
 800982a:	f8d8 4000 	ldr.w	r4, [r8]
 800982e:	4626      	mov	r6, r4
 8009830:	2e00      	cmp	r6, #0
 8009832:	d145      	bne.n	80098c0 <_malloc_r+0xdc>
 8009834:	2c00      	cmp	r4, #0
 8009836:	d048      	beq.n	80098ca <_malloc_r+0xe6>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	4631      	mov	r1, r6
 800983c:	4638      	mov	r0, r7
 800983e:	eb04 0903 	add.w	r9, r4, r3
 8009842:	f000 fb5d 	bl	8009f00 <_sbrk_r>
 8009846:	4581      	cmp	r9, r0
 8009848:	d13f      	bne.n	80098ca <_malloc_r+0xe6>
 800984a:	6821      	ldr	r1, [r4, #0]
 800984c:	1a6d      	subs	r5, r5, r1
 800984e:	4629      	mov	r1, r5
 8009850:	4638      	mov	r0, r7
 8009852:	f7ff ffa7 	bl	80097a4 <sbrk_aligned>
 8009856:	3001      	adds	r0, #1
 8009858:	d037      	beq.n	80098ca <_malloc_r+0xe6>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	442b      	add	r3, r5
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	f8d8 3000 	ldr.w	r3, [r8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d038      	beq.n	80098da <_malloc_r+0xf6>
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	42a2      	cmp	r2, r4
 800986c:	d12b      	bne.n	80098c6 <_malloc_r+0xe2>
 800986e:	2200      	movs	r2, #0
 8009870:	605a      	str	r2, [r3, #4]
 8009872:	e00f      	b.n	8009894 <_malloc_r+0xb0>
 8009874:	6822      	ldr	r2, [r4, #0]
 8009876:	1b52      	subs	r2, r2, r5
 8009878:	d41f      	bmi.n	80098ba <_malloc_r+0xd6>
 800987a:	2a0b      	cmp	r2, #11
 800987c:	d917      	bls.n	80098ae <_malloc_r+0xca>
 800987e:	1961      	adds	r1, r4, r5
 8009880:	42a3      	cmp	r3, r4
 8009882:	6025      	str	r5, [r4, #0]
 8009884:	bf18      	it	ne
 8009886:	6059      	strne	r1, [r3, #4]
 8009888:	6863      	ldr	r3, [r4, #4]
 800988a:	bf08      	it	eq
 800988c:	f8c8 1000 	streq.w	r1, [r8]
 8009890:	5162      	str	r2, [r4, r5]
 8009892:	604b      	str	r3, [r1, #4]
 8009894:	4638      	mov	r0, r7
 8009896:	f104 060b 	add.w	r6, r4, #11
 800989a:	f000 f829 	bl	80098f0 <__malloc_unlock>
 800989e:	f026 0607 	bic.w	r6, r6, #7
 80098a2:	1d23      	adds	r3, r4, #4
 80098a4:	1af2      	subs	r2, r6, r3
 80098a6:	d0ae      	beq.n	8009806 <_malloc_r+0x22>
 80098a8:	1b9b      	subs	r3, r3, r6
 80098aa:	50a3      	str	r3, [r4, r2]
 80098ac:	e7ab      	b.n	8009806 <_malloc_r+0x22>
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	6862      	ldr	r2, [r4, #4]
 80098b2:	d1dd      	bne.n	8009870 <_malloc_r+0x8c>
 80098b4:	f8c8 2000 	str.w	r2, [r8]
 80098b8:	e7ec      	b.n	8009894 <_malloc_r+0xb0>
 80098ba:	4623      	mov	r3, r4
 80098bc:	6864      	ldr	r4, [r4, #4]
 80098be:	e7ac      	b.n	800981a <_malloc_r+0x36>
 80098c0:	4634      	mov	r4, r6
 80098c2:	6876      	ldr	r6, [r6, #4]
 80098c4:	e7b4      	b.n	8009830 <_malloc_r+0x4c>
 80098c6:	4613      	mov	r3, r2
 80098c8:	e7cc      	b.n	8009864 <_malloc_r+0x80>
 80098ca:	230c      	movs	r3, #12
 80098cc:	603b      	str	r3, [r7, #0]
 80098ce:	4638      	mov	r0, r7
 80098d0:	f000 f80e 	bl	80098f0 <__malloc_unlock>
 80098d4:	e797      	b.n	8009806 <_malloc_r+0x22>
 80098d6:	6025      	str	r5, [r4, #0]
 80098d8:	e7dc      	b.n	8009894 <_malloc_r+0xb0>
 80098da:	605b      	str	r3, [r3, #4]
 80098dc:	deff      	udf	#255	; 0xff
 80098de:	bf00      	nop
 80098e0:	20000bfc 	.word	0x20000bfc

080098e4 <__malloc_lock>:
 80098e4:	4801      	ldr	r0, [pc, #4]	; (80098ec <__malloc_lock+0x8>)
 80098e6:	f7ff bf0f 	b.w	8009708 <__retarget_lock_acquire_recursive>
 80098ea:	bf00      	nop
 80098ec:	20000bf8 	.word	0x20000bf8

080098f0 <__malloc_unlock>:
 80098f0:	4801      	ldr	r0, [pc, #4]	; (80098f8 <__malloc_unlock+0x8>)
 80098f2:	f7ff bf0a 	b.w	800970a <__retarget_lock_release_recursive>
 80098f6:	bf00      	nop
 80098f8:	20000bf8 	.word	0x20000bf8

080098fc <__ssputs_r>:
 80098fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009900:	688e      	ldr	r6, [r1, #8]
 8009902:	461f      	mov	r7, r3
 8009904:	42be      	cmp	r6, r7
 8009906:	680b      	ldr	r3, [r1, #0]
 8009908:	4682      	mov	sl, r0
 800990a:	460c      	mov	r4, r1
 800990c:	4690      	mov	r8, r2
 800990e:	d82c      	bhi.n	800996a <__ssputs_r+0x6e>
 8009910:	898a      	ldrh	r2, [r1, #12]
 8009912:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009916:	d026      	beq.n	8009966 <__ssputs_r+0x6a>
 8009918:	6965      	ldr	r5, [r4, #20]
 800991a:	6909      	ldr	r1, [r1, #16]
 800991c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009920:	eba3 0901 	sub.w	r9, r3, r1
 8009924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009928:	1c7b      	adds	r3, r7, #1
 800992a:	444b      	add	r3, r9
 800992c:	106d      	asrs	r5, r5, #1
 800992e:	429d      	cmp	r5, r3
 8009930:	bf38      	it	cc
 8009932:	461d      	movcc	r5, r3
 8009934:	0553      	lsls	r3, r2, #21
 8009936:	d527      	bpl.n	8009988 <__ssputs_r+0x8c>
 8009938:	4629      	mov	r1, r5
 800993a:	f7ff ff53 	bl	80097e4 <_malloc_r>
 800993e:	4606      	mov	r6, r0
 8009940:	b360      	cbz	r0, 800999c <__ssputs_r+0xa0>
 8009942:	6921      	ldr	r1, [r4, #16]
 8009944:	464a      	mov	r2, r9
 8009946:	f000 faeb 	bl	8009f20 <memcpy>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009954:	81a3      	strh	r3, [r4, #12]
 8009956:	6126      	str	r6, [r4, #16]
 8009958:	6165      	str	r5, [r4, #20]
 800995a:	444e      	add	r6, r9
 800995c:	eba5 0509 	sub.w	r5, r5, r9
 8009960:	6026      	str	r6, [r4, #0]
 8009962:	60a5      	str	r5, [r4, #8]
 8009964:	463e      	mov	r6, r7
 8009966:	42be      	cmp	r6, r7
 8009968:	d900      	bls.n	800996c <__ssputs_r+0x70>
 800996a:	463e      	mov	r6, r7
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	4632      	mov	r2, r6
 8009970:	4641      	mov	r1, r8
 8009972:	f000 faab 	bl	8009ecc <memmove>
 8009976:	68a3      	ldr	r3, [r4, #8]
 8009978:	1b9b      	subs	r3, r3, r6
 800997a:	60a3      	str	r3, [r4, #8]
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	4433      	add	r3, r6
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	2000      	movs	r0, #0
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009988:	462a      	mov	r2, r5
 800998a:	f000 fad7 	bl	8009f3c <_realloc_r>
 800998e:	4606      	mov	r6, r0
 8009990:	2800      	cmp	r0, #0
 8009992:	d1e0      	bne.n	8009956 <__ssputs_r+0x5a>
 8009994:	6921      	ldr	r1, [r4, #16]
 8009996:	4650      	mov	r0, sl
 8009998:	f7ff feb8 	bl	800970c <_free_r>
 800999c:	230c      	movs	r3, #12
 800999e:	f8ca 3000 	str.w	r3, [sl]
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	f04f 30ff 	mov.w	r0, #4294967295
 80099ae:	e7e9      	b.n	8009984 <__ssputs_r+0x88>

080099b0 <_svfiprintf_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	4698      	mov	r8, r3
 80099b6:	898b      	ldrh	r3, [r1, #12]
 80099b8:	061b      	lsls	r3, r3, #24
 80099ba:	b09d      	sub	sp, #116	; 0x74
 80099bc:	4607      	mov	r7, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	4614      	mov	r4, r2
 80099c2:	d50e      	bpl.n	80099e2 <_svfiprintf_r+0x32>
 80099c4:	690b      	ldr	r3, [r1, #16]
 80099c6:	b963      	cbnz	r3, 80099e2 <_svfiprintf_r+0x32>
 80099c8:	2140      	movs	r1, #64	; 0x40
 80099ca:	f7ff ff0b 	bl	80097e4 <_malloc_r>
 80099ce:	6028      	str	r0, [r5, #0]
 80099d0:	6128      	str	r0, [r5, #16]
 80099d2:	b920      	cbnz	r0, 80099de <_svfiprintf_r+0x2e>
 80099d4:	230c      	movs	r3, #12
 80099d6:	603b      	str	r3, [r7, #0]
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	e0d0      	b.n	8009b80 <_svfiprintf_r+0x1d0>
 80099de:	2340      	movs	r3, #64	; 0x40
 80099e0:	616b      	str	r3, [r5, #20]
 80099e2:	2300      	movs	r3, #0
 80099e4:	9309      	str	r3, [sp, #36]	; 0x24
 80099e6:	2320      	movs	r3, #32
 80099e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f0:	2330      	movs	r3, #48	; 0x30
 80099f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b98 <_svfiprintf_r+0x1e8>
 80099f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099fa:	f04f 0901 	mov.w	r9, #1
 80099fe:	4623      	mov	r3, r4
 8009a00:	469a      	mov	sl, r3
 8009a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a06:	b10a      	cbz	r2, 8009a0c <_svfiprintf_r+0x5c>
 8009a08:	2a25      	cmp	r2, #37	; 0x25
 8009a0a:	d1f9      	bne.n	8009a00 <_svfiprintf_r+0x50>
 8009a0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a10:	d00b      	beq.n	8009a2a <_svfiprintf_r+0x7a>
 8009a12:	465b      	mov	r3, fp
 8009a14:	4622      	mov	r2, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ff6f 	bl	80098fc <__ssputs_r>
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f000 80a9 	beq.w	8009b76 <_svfiprintf_r+0x1c6>
 8009a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a26:	445a      	add	r2, fp
 8009a28:	9209      	str	r2, [sp, #36]	; 0x24
 8009a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 80a1 	beq.w	8009b76 <_svfiprintf_r+0x1c6>
 8009a34:	2300      	movs	r3, #0
 8009a36:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a3e:	f10a 0a01 	add.w	sl, sl, #1
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	9307      	str	r3, [sp, #28]
 8009a46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a4a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a4c:	4654      	mov	r4, sl
 8009a4e:	2205      	movs	r2, #5
 8009a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a54:	4850      	ldr	r0, [pc, #320]	; (8009b98 <_svfiprintf_r+0x1e8>)
 8009a56:	f7f6 fc2b 	bl	80002b0 <memchr>
 8009a5a:	9a04      	ldr	r2, [sp, #16]
 8009a5c:	b9d8      	cbnz	r0, 8009a96 <_svfiprintf_r+0xe6>
 8009a5e:	06d0      	lsls	r0, r2, #27
 8009a60:	bf44      	itt	mi
 8009a62:	2320      	movmi	r3, #32
 8009a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a68:	0711      	lsls	r1, r2, #28
 8009a6a:	bf44      	itt	mi
 8009a6c:	232b      	movmi	r3, #43	; 0x2b
 8009a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a72:	f89a 3000 	ldrb.w	r3, [sl]
 8009a76:	2b2a      	cmp	r3, #42	; 0x2a
 8009a78:	d015      	beq.n	8009aa6 <_svfiprintf_r+0xf6>
 8009a7a:	9a07      	ldr	r2, [sp, #28]
 8009a7c:	4654      	mov	r4, sl
 8009a7e:	2000      	movs	r0, #0
 8009a80:	f04f 0c0a 	mov.w	ip, #10
 8009a84:	4621      	mov	r1, r4
 8009a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a8a:	3b30      	subs	r3, #48	; 0x30
 8009a8c:	2b09      	cmp	r3, #9
 8009a8e:	d94d      	bls.n	8009b2c <_svfiprintf_r+0x17c>
 8009a90:	b1b0      	cbz	r0, 8009ac0 <_svfiprintf_r+0x110>
 8009a92:	9207      	str	r2, [sp, #28]
 8009a94:	e014      	b.n	8009ac0 <_svfiprintf_r+0x110>
 8009a96:	eba0 0308 	sub.w	r3, r0, r8
 8009a9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	46a2      	mov	sl, r4
 8009aa4:	e7d2      	b.n	8009a4c <_svfiprintf_r+0x9c>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	1d19      	adds	r1, r3, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	9103      	str	r1, [sp, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfbb      	ittet	lt
 8009ab2:	425b      	neglt	r3, r3
 8009ab4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ab8:	9307      	strge	r3, [sp, #28]
 8009aba:	9307      	strlt	r3, [sp, #28]
 8009abc:	bfb8      	it	lt
 8009abe:	9204      	strlt	r2, [sp, #16]
 8009ac0:	7823      	ldrb	r3, [r4, #0]
 8009ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ac4:	d10c      	bne.n	8009ae0 <_svfiprintf_r+0x130>
 8009ac6:	7863      	ldrb	r3, [r4, #1]
 8009ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aca:	d134      	bne.n	8009b36 <_svfiprintf_r+0x186>
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	1d1a      	adds	r2, r3, #4
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	9203      	str	r2, [sp, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bfb8      	it	lt
 8009ad8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009adc:	3402      	adds	r4, #2
 8009ade:	9305      	str	r3, [sp, #20]
 8009ae0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ba8 <_svfiprintf_r+0x1f8>
 8009ae4:	7821      	ldrb	r1, [r4, #0]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	4650      	mov	r0, sl
 8009aea:	f7f6 fbe1 	bl	80002b0 <memchr>
 8009aee:	b138      	cbz	r0, 8009b00 <_svfiprintf_r+0x150>
 8009af0:	9b04      	ldr	r3, [sp, #16]
 8009af2:	eba0 000a 	sub.w	r0, r0, sl
 8009af6:	2240      	movs	r2, #64	; 0x40
 8009af8:	4082      	lsls	r2, r0
 8009afa:	4313      	orrs	r3, r2
 8009afc:	3401      	adds	r4, #1
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b04:	4825      	ldr	r0, [pc, #148]	; (8009b9c <_svfiprintf_r+0x1ec>)
 8009b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b0a:	2206      	movs	r2, #6
 8009b0c:	f7f6 fbd0 	bl	80002b0 <memchr>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d038      	beq.n	8009b86 <_svfiprintf_r+0x1d6>
 8009b14:	4b22      	ldr	r3, [pc, #136]	; (8009ba0 <_svfiprintf_r+0x1f0>)
 8009b16:	bb1b      	cbnz	r3, 8009b60 <_svfiprintf_r+0x1b0>
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	3307      	adds	r3, #7
 8009b1c:	f023 0307 	bic.w	r3, r3, #7
 8009b20:	3308      	adds	r3, #8
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b26:	4433      	add	r3, r6
 8009b28:	9309      	str	r3, [sp, #36]	; 0x24
 8009b2a:	e768      	b.n	80099fe <_svfiprintf_r+0x4e>
 8009b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b30:	460c      	mov	r4, r1
 8009b32:	2001      	movs	r0, #1
 8009b34:	e7a6      	b.n	8009a84 <_svfiprintf_r+0xd4>
 8009b36:	2300      	movs	r3, #0
 8009b38:	3401      	adds	r4, #1
 8009b3a:	9305      	str	r3, [sp, #20]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	f04f 0c0a 	mov.w	ip, #10
 8009b42:	4620      	mov	r0, r4
 8009b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b48:	3a30      	subs	r2, #48	; 0x30
 8009b4a:	2a09      	cmp	r2, #9
 8009b4c:	d903      	bls.n	8009b56 <_svfiprintf_r+0x1a6>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0c6      	beq.n	8009ae0 <_svfiprintf_r+0x130>
 8009b52:	9105      	str	r1, [sp, #20]
 8009b54:	e7c4      	b.n	8009ae0 <_svfiprintf_r+0x130>
 8009b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e7f0      	b.n	8009b42 <_svfiprintf_r+0x192>
 8009b60:	ab03      	add	r3, sp, #12
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	462a      	mov	r2, r5
 8009b66:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <_svfiprintf_r+0x1f4>)
 8009b68:	a904      	add	r1, sp, #16
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	f3af 8000 	nop.w
 8009b70:	1c42      	adds	r2, r0, #1
 8009b72:	4606      	mov	r6, r0
 8009b74:	d1d6      	bne.n	8009b24 <_svfiprintf_r+0x174>
 8009b76:	89ab      	ldrh	r3, [r5, #12]
 8009b78:	065b      	lsls	r3, r3, #25
 8009b7a:	f53f af2d 	bmi.w	80099d8 <_svfiprintf_r+0x28>
 8009b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b80:	b01d      	add	sp, #116	; 0x74
 8009b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b86:	ab03      	add	r3, sp, #12
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <_svfiprintf_r+0x1f4>)
 8009b8e:	a904      	add	r1, sp, #16
 8009b90:	4638      	mov	r0, r7
 8009b92:	f000 f879 	bl	8009c88 <_printf_i>
 8009b96:	e7eb      	b.n	8009b70 <_svfiprintf_r+0x1c0>
 8009b98:	080210c4 	.word	0x080210c4
 8009b9c:	080210ce 	.word	0x080210ce
 8009ba0:	00000000 	.word	0x00000000
 8009ba4:	080098fd 	.word	0x080098fd
 8009ba8:	080210ca 	.word	0x080210ca

08009bac <_printf_common>:
 8009bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	4699      	mov	r9, r3
 8009bb4:	688a      	ldr	r2, [r1, #8]
 8009bb6:	690b      	ldr	r3, [r1, #16]
 8009bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	bfb8      	it	lt
 8009bc0:	4613      	movlt	r3, r2
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bc8:	4607      	mov	r7, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	b10a      	cbz	r2, 8009bd2 <_printf_common+0x26>
 8009bce:	3301      	adds	r3, #1
 8009bd0:	6033      	str	r3, [r6, #0]
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	0699      	lsls	r1, r3, #26
 8009bd6:	bf42      	ittt	mi
 8009bd8:	6833      	ldrmi	r3, [r6, #0]
 8009bda:	3302      	addmi	r3, #2
 8009bdc:	6033      	strmi	r3, [r6, #0]
 8009bde:	6825      	ldr	r5, [r4, #0]
 8009be0:	f015 0506 	ands.w	r5, r5, #6
 8009be4:	d106      	bne.n	8009bf4 <_printf_common+0x48>
 8009be6:	f104 0a19 	add.w	sl, r4, #25
 8009bea:	68e3      	ldr	r3, [r4, #12]
 8009bec:	6832      	ldr	r2, [r6, #0]
 8009bee:	1a9b      	subs	r3, r3, r2
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dc26      	bgt.n	8009c42 <_printf_common+0x96>
 8009bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bf8:	1e13      	subs	r3, r2, #0
 8009bfa:	6822      	ldr	r2, [r4, #0]
 8009bfc:	bf18      	it	ne
 8009bfe:	2301      	movne	r3, #1
 8009c00:	0692      	lsls	r2, r2, #26
 8009c02:	d42b      	bmi.n	8009c5c <_printf_common+0xb0>
 8009c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	47c0      	blx	r8
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d01e      	beq.n	8009c50 <_printf_common+0xa4>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	6922      	ldr	r2, [r4, #16]
 8009c16:	f003 0306 	and.w	r3, r3, #6
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	bf02      	ittt	eq
 8009c1e:	68e5      	ldreq	r5, [r4, #12]
 8009c20:	6833      	ldreq	r3, [r6, #0]
 8009c22:	1aed      	subeq	r5, r5, r3
 8009c24:	68a3      	ldr	r3, [r4, #8]
 8009c26:	bf0c      	ite	eq
 8009c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c2c:	2500      	movne	r5, #0
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	bfc4      	itt	gt
 8009c32:	1a9b      	subgt	r3, r3, r2
 8009c34:	18ed      	addgt	r5, r5, r3
 8009c36:	2600      	movs	r6, #0
 8009c38:	341a      	adds	r4, #26
 8009c3a:	42b5      	cmp	r5, r6
 8009c3c:	d11a      	bne.n	8009c74 <_printf_common+0xc8>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	e008      	b.n	8009c54 <_printf_common+0xa8>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4652      	mov	r2, sl
 8009c46:	4649      	mov	r1, r9
 8009c48:	4638      	mov	r0, r7
 8009c4a:	47c0      	blx	r8
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d103      	bne.n	8009c58 <_printf_common+0xac>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	3501      	adds	r5, #1
 8009c5a:	e7c6      	b.n	8009bea <_printf_common+0x3e>
 8009c5c:	18e1      	adds	r1, r4, r3
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	2030      	movs	r0, #48	; 0x30
 8009c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c66:	4422      	add	r2, r4
 8009c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c70:	3302      	adds	r3, #2
 8009c72:	e7c7      	b.n	8009c04 <_printf_common+0x58>
 8009c74:	2301      	movs	r3, #1
 8009c76:	4622      	mov	r2, r4
 8009c78:	4649      	mov	r1, r9
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	47c0      	blx	r8
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d0e6      	beq.n	8009c50 <_printf_common+0xa4>
 8009c82:	3601      	adds	r6, #1
 8009c84:	e7d9      	b.n	8009c3a <_printf_common+0x8e>
	...

08009c88 <_printf_i>:
 8009c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8c:	7e0f      	ldrb	r7, [r1, #24]
 8009c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c90:	2f78      	cmp	r7, #120	; 0x78
 8009c92:	4691      	mov	r9, r2
 8009c94:	4680      	mov	r8, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	469a      	mov	sl, r3
 8009c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c9e:	d807      	bhi.n	8009cb0 <_printf_i+0x28>
 8009ca0:	2f62      	cmp	r7, #98	; 0x62
 8009ca2:	d80a      	bhi.n	8009cba <_printf_i+0x32>
 8009ca4:	2f00      	cmp	r7, #0
 8009ca6:	f000 80d4 	beq.w	8009e52 <_printf_i+0x1ca>
 8009caa:	2f58      	cmp	r7, #88	; 0x58
 8009cac:	f000 80c0 	beq.w	8009e30 <_printf_i+0x1a8>
 8009cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cb8:	e03a      	b.n	8009d30 <_printf_i+0xa8>
 8009cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cbe:	2b15      	cmp	r3, #21
 8009cc0:	d8f6      	bhi.n	8009cb0 <_printf_i+0x28>
 8009cc2:	a101      	add	r1, pc, #4	; (adr r1, 8009cc8 <_printf_i+0x40>)
 8009cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cc8:	08009d21 	.word	0x08009d21
 8009ccc:	08009d35 	.word	0x08009d35
 8009cd0:	08009cb1 	.word	0x08009cb1
 8009cd4:	08009cb1 	.word	0x08009cb1
 8009cd8:	08009cb1 	.word	0x08009cb1
 8009cdc:	08009cb1 	.word	0x08009cb1
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009cb1 	.word	0x08009cb1
 8009ce8:	08009cb1 	.word	0x08009cb1
 8009cec:	08009cb1 	.word	0x08009cb1
 8009cf0:	08009cb1 	.word	0x08009cb1
 8009cf4:	08009e39 	.word	0x08009e39
 8009cf8:	08009d61 	.word	0x08009d61
 8009cfc:	08009df3 	.word	0x08009df3
 8009d00:	08009cb1 	.word	0x08009cb1
 8009d04:	08009cb1 	.word	0x08009cb1
 8009d08:	08009e5b 	.word	0x08009e5b
 8009d0c:	08009cb1 	.word	0x08009cb1
 8009d10:	08009d61 	.word	0x08009d61
 8009d14:	08009cb1 	.word	0x08009cb1
 8009d18:	08009cb1 	.word	0x08009cb1
 8009d1c:	08009dfb 	.word	0x08009dfb
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	1d1a      	adds	r2, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	602a      	str	r2, [r5, #0]
 8009d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d30:	2301      	movs	r3, #1
 8009d32:	e09f      	b.n	8009e74 <_printf_i+0x1ec>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	682b      	ldr	r3, [r5, #0]
 8009d38:	0607      	lsls	r7, r0, #24
 8009d3a:	f103 0104 	add.w	r1, r3, #4
 8009d3e:	6029      	str	r1, [r5, #0]
 8009d40:	d501      	bpl.n	8009d46 <_printf_i+0xbe>
 8009d42:	681e      	ldr	r6, [r3, #0]
 8009d44:	e003      	b.n	8009d4e <_printf_i+0xc6>
 8009d46:	0646      	lsls	r6, r0, #25
 8009d48:	d5fb      	bpl.n	8009d42 <_printf_i+0xba>
 8009d4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d4e:	2e00      	cmp	r6, #0
 8009d50:	da03      	bge.n	8009d5a <_printf_i+0xd2>
 8009d52:	232d      	movs	r3, #45	; 0x2d
 8009d54:	4276      	negs	r6, r6
 8009d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d5a:	485a      	ldr	r0, [pc, #360]	; (8009ec4 <_printf_i+0x23c>)
 8009d5c:	230a      	movs	r3, #10
 8009d5e:	e012      	b.n	8009d86 <_printf_i+0xfe>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	6820      	ldr	r0, [r4, #0]
 8009d64:	1d19      	adds	r1, r3, #4
 8009d66:	6029      	str	r1, [r5, #0]
 8009d68:	0605      	lsls	r5, r0, #24
 8009d6a:	d501      	bpl.n	8009d70 <_printf_i+0xe8>
 8009d6c:	681e      	ldr	r6, [r3, #0]
 8009d6e:	e002      	b.n	8009d76 <_printf_i+0xee>
 8009d70:	0641      	lsls	r1, r0, #25
 8009d72:	d5fb      	bpl.n	8009d6c <_printf_i+0xe4>
 8009d74:	881e      	ldrh	r6, [r3, #0]
 8009d76:	4853      	ldr	r0, [pc, #332]	; (8009ec4 <_printf_i+0x23c>)
 8009d78:	2f6f      	cmp	r7, #111	; 0x6f
 8009d7a:	bf0c      	ite	eq
 8009d7c:	2308      	moveq	r3, #8
 8009d7e:	230a      	movne	r3, #10
 8009d80:	2100      	movs	r1, #0
 8009d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d86:	6865      	ldr	r5, [r4, #4]
 8009d88:	60a5      	str	r5, [r4, #8]
 8009d8a:	2d00      	cmp	r5, #0
 8009d8c:	bfa2      	ittt	ge
 8009d8e:	6821      	ldrge	r1, [r4, #0]
 8009d90:	f021 0104 	bicge.w	r1, r1, #4
 8009d94:	6021      	strge	r1, [r4, #0]
 8009d96:	b90e      	cbnz	r6, 8009d9c <_printf_i+0x114>
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	d04b      	beq.n	8009e34 <_printf_i+0x1ac>
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009da2:	fb03 6711 	mls	r7, r3, r1, r6
 8009da6:	5dc7      	ldrb	r7, [r0, r7]
 8009da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dac:	4637      	mov	r7, r6
 8009dae:	42bb      	cmp	r3, r7
 8009db0:	460e      	mov	r6, r1
 8009db2:	d9f4      	bls.n	8009d9e <_printf_i+0x116>
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d10b      	bne.n	8009dd0 <_printf_i+0x148>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	07de      	lsls	r6, r3, #31
 8009dbc:	d508      	bpl.n	8009dd0 <_printf_i+0x148>
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	6861      	ldr	r1, [r4, #4]
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	bfde      	ittt	le
 8009dc6:	2330      	movle	r3, #48	; 0x30
 8009dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dd0:	1b52      	subs	r2, r2, r5
 8009dd2:	6122      	str	r2, [r4, #16]
 8009dd4:	f8cd a000 	str.w	sl, [sp]
 8009dd8:	464b      	mov	r3, r9
 8009dda:	aa03      	add	r2, sp, #12
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4640      	mov	r0, r8
 8009de0:	f7ff fee4 	bl	8009bac <_printf_common>
 8009de4:	3001      	adds	r0, #1
 8009de6:	d14a      	bne.n	8009e7e <_printf_i+0x1f6>
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	b004      	add	sp, #16
 8009dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	f043 0320 	orr.w	r3, r3, #32
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	4833      	ldr	r0, [pc, #204]	; (8009ec8 <_printf_i+0x240>)
 8009dfc:	2778      	movs	r7, #120	; 0x78
 8009dfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	6829      	ldr	r1, [r5, #0]
 8009e06:	061f      	lsls	r7, r3, #24
 8009e08:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e0c:	d402      	bmi.n	8009e14 <_printf_i+0x18c>
 8009e0e:	065f      	lsls	r7, r3, #25
 8009e10:	bf48      	it	mi
 8009e12:	b2b6      	uxthmi	r6, r6
 8009e14:	07df      	lsls	r7, r3, #31
 8009e16:	bf48      	it	mi
 8009e18:	f043 0320 	orrmi.w	r3, r3, #32
 8009e1c:	6029      	str	r1, [r5, #0]
 8009e1e:	bf48      	it	mi
 8009e20:	6023      	strmi	r3, [r4, #0]
 8009e22:	b91e      	cbnz	r6, 8009e2c <_printf_i+0x1a4>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	f023 0320 	bic.w	r3, r3, #32
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	e7a7      	b.n	8009d80 <_printf_i+0xf8>
 8009e30:	4824      	ldr	r0, [pc, #144]	; (8009ec4 <_printf_i+0x23c>)
 8009e32:	e7e4      	b.n	8009dfe <_printf_i+0x176>
 8009e34:	4615      	mov	r5, r2
 8009e36:	e7bd      	b.n	8009db4 <_printf_i+0x12c>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	6826      	ldr	r6, [r4, #0]
 8009e3c:	6961      	ldr	r1, [r4, #20]
 8009e3e:	1d18      	adds	r0, r3, #4
 8009e40:	6028      	str	r0, [r5, #0]
 8009e42:	0635      	lsls	r5, r6, #24
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	d501      	bpl.n	8009e4c <_printf_i+0x1c4>
 8009e48:	6019      	str	r1, [r3, #0]
 8009e4a:	e002      	b.n	8009e52 <_printf_i+0x1ca>
 8009e4c:	0670      	lsls	r0, r6, #25
 8009e4e:	d5fb      	bpl.n	8009e48 <_printf_i+0x1c0>
 8009e50:	8019      	strh	r1, [r3, #0]
 8009e52:	2300      	movs	r3, #0
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	4615      	mov	r5, r2
 8009e58:	e7bc      	b.n	8009dd4 <_printf_i+0x14c>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	1d1a      	adds	r2, r3, #4
 8009e5e:	602a      	str	r2, [r5, #0]
 8009e60:	681d      	ldr	r5, [r3, #0]
 8009e62:	6862      	ldr	r2, [r4, #4]
 8009e64:	2100      	movs	r1, #0
 8009e66:	4628      	mov	r0, r5
 8009e68:	f7f6 fa22 	bl	80002b0 <memchr>
 8009e6c:	b108      	cbz	r0, 8009e72 <_printf_i+0x1ea>
 8009e6e:	1b40      	subs	r0, r0, r5
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	6863      	ldr	r3, [r4, #4]
 8009e74:	6123      	str	r3, [r4, #16]
 8009e76:	2300      	movs	r3, #0
 8009e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7c:	e7aa      	b.n	8009dd4 <_printf_i+0x14c>
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	462a      	mov	r2, r5
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	47d0      	blx	sl
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d0ad      	beq.n	8009de8 <_printf_i+0x160>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	079b      	lsls	r3, r3, #30
 8009e90:	d413      	bmi.n	8009eba <_printf_i+0x232>
 8009e92:	68e0      	ldr	r0, [r4, #12]
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	4298      	cmp	r0, r3
 8009e98:	bfb8      	it	lt
 8009e9a:	4618      	movlt	r0, r3
 8009e9c:	e7a6      	b.n	8009dec <_printf_i+0x164>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	47d0      	blx	sl
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d09d      	beq.n	8009de8 <_printf_i+0x160>
 8009eac:	3501      	adds	r5, #1
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	9903      	ldr	r1, [sp, #12]
 8009eb2:	1a5b      	subs	r3, r3, r1
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	dcf2      	bgt.n	8009e9e <_printf_i+0x216>
 8009eb8:	e7eb      	b.n	8009e92 <_printf_i+0x20a>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	f104 0619 	add.w	r6, r4, #25
 8009ec0:	e7f5      	b.n	8009eae <_printf_i+0x226>
 8009ec2:	bf00      	nop
 8009ec4:	080210d5 	.word	0x080210d5
 8009ec8:	080210e6 	.word	0x080210e6

08009ecc <memmove>:
 8009ecc:	4288      	cmp	r0, r1
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	eb01 0402 	add.w	r4, r1, r2
 8009ed4:	d902      	bls.n	8009edc <memmove+0x10>
 8009ed6:	4284      	cmp	r4, r0
 8009ed8:	4623      	mov	r3, r4
 8009eda:	d807      	bhi.n	8009eec <memmove+0x20>
 8009edc:	1e43      	subs	r3, r0, #1
 8009ede:	42a1      	cmp	r1, r4
 8009ee0:	d008      	beq.n	8009ef4 <memmove+0x28>
 8009ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eea:	e7f8      	b.n	8009ede <memmove+0x12>
 8009eec:	4402      	add	r2, r0
 8009eee:	4601      	mov	r1, r0
 8009ef0:	428a      	cmp	r2, r1
 8009ef2:	d100      	bne.n	8009ef6 <memmove+0x2a>
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009efe:	e7f7      	b.n	8009ef0 <memmove+0x24>

08009f00 <_sbrk_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_sbrk_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f000 f876 	bl	8009ffc <_sbrk>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_sbrk_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_sbrk_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20000bf4 	.word	0x20000bf4

08009f20 <memcpy>:
 8009f20:	440a      	add	r2, r1
 8009f22:	4291      	cmp	r1, r2
 8009f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f28:	d100      	bne.n	8009f2c <memcpy+0xc>
 8009f2a:	4770      	bx	lr
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f36:	4291      	cmp	r1, r2
 8009f38:	d1f9      	bne.n	8009f2e <memcpy+0xe>
 8009f3a:	bd10      	pop	{r4, pc}

08009f3c <_realloc_r>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	4680      	mov	r8, r0
 8009f42:	4614      	mov	r4, r2
 8009f44:	460e      	mov	r6, r1
 8009f46:	b921      	cbnz	r1, 8009f52 <_realloc_r+0x16>
 8009f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	f7ff bc49 	b.w	80097e4 <_malloc_r>
 8009f52:	b92a      	cbnz	r2, 8009f60 <_realloc_r+0x24>
 8009f54:	f7ff fbda 	bl	800970c <_free_r>
 8009f58:	4625      	mov	r5, r4
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	f000 f81b 	bl	8009f9a <_malloc_usable_size_r>
 8009f64:	4284      	cmp	r4, r0
 8009f66:	4607      	mov	r7, r0
 8009f68:	d802      	bhi.n	8009f70 <_realloc_r+0x34>
 8009f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f6e:	d812      	bhi.n	8009f96 <_realloc_r+0x5a>
 8009f70:	4621      	mov	r1, r4
 8009f72:	4640      	mov	r0, r8
 8009f74:	f7ff fc36 	bl	80097e4 <_malloc_r>
 8009f78:	4605      	mov	r5, r0
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d0ed      	beq.n	8009f5a <_realloc_r+0x1e>
 8009f7e:	42bc      	cmp	r4, r7
 8009f80:	4622      	mov	r2, r4
 8009f82:	4631      	mov	r1, r6
 8009f84:	bf28      	it	cs
 8009f86:	463a      	movcs	r2, r7
 8009f88:	f7ff ffca 	bl	8009f20 <memcpy>
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4640      	mov	r0, r8
 8009f90:	f7ff fbbc 	bl	800970c <_free_r>
 8009f94:	e7e1      	b.n	8009f5a <_realloc_r+0x1e>
 8009f96:	4635      	mov	r5, r6
 8009f98:	e7df      	b.n	8009f5a <_realloc_r+0x1e>

08009f9a <_malloc_usable_size_r>:
 8009f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f9e:	1f18      	subs	r0, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	bfbc      	itt	lt
 8009fa4:	580b      	ldrlt	r3, [r1, r0]
 8009fa6:	18c0      	addlt	r0, r0, r3
 8009fa8:	4770      	bx	lr
	...

08009fac <sqrtf>:
 8009fac:	b508      	push	{r3, lr}
 8009fae:	ed2d 8b02 	vpush	{d8}
 8009fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8009fb6:	f000 f817 	bl	8009fe8 <__ieee754_sqrtf>
 8009fba:	eeb4 8a48 	vcmp.f32	s16, s16
 8009fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc2:	d60c      	bvs.n	8009fde <sqrtf+0x32>
 8009fc4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009fe4 <sqrtf+0x38>
 8009fc8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd0:	d505      	bpl.n	8009fde <sqrtf+0x32>
 8009fd2:	f000 f80d 	bl	8009ff0 <__errno>
 8009fd6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009fda:	2321      	movs	r3, #33	; 0x21
 8009fdc:	6003      	str	r3, [r0, #0]
 8009fde:	ecbd 8b02 	vpop	{d8}
 8009fe2:	bd08      	pop	{r3, pc}
 8009fe4:	00000000 	.word	0x00000000

08009fe8 <__ieee754_sqrtf>:
 8009fe8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009fec:	4770      	bx	lr
	...

08009ff0 <__errno>:
 8009ff0:	4b01      	ldr	r3, [pc, #4]	; (8009ff8 <__errno+0x8>)
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	200003c4 	.word	0x200003c4

08009ffc <_sbrk>:
 8009ffc:	4a04      	ldr	r2, [pc, #16]	; (800a010 <_sbrk+0x14>)
 8009ffe:	6811      	ldr	r1, [r2, #0]
 800a000:	4603      	mov	r3, r0
 800a002:	b909      	cbnz	r1, 800a008 <_sbrk+0xc>
 800a004:	4903      	ldr	r1, [pc, #12]	; (800a014 <_sbrk+0x18>)
 800a006:	6011      	str	r1, [r2, #0]
 800a008:	6810      	ldr	r0, [r2, #0]
 800a00a:	4403      	add	r3, r0
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	4770      	bx	lr
 800a010:	20000c04 	.word	0x20000c04
 800a014:	20000c08 	.word	0x20000c08

0800a018 <_init>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	bf00      	nop
 800a01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01e:	bc08      	pop	{r3}
 800a020:	469e      	mov	lr, r3
 800a022:	4770      	bx	lr

0800a024 <_fini>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	bf00      	nop
 800a028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02a:	bc08      	pop	{r3}
 800a02c:	469e      	mov	lr, r3
 800a02e:	4770      	bx	lr
