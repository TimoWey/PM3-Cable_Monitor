
Cable_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000170c8  0800a00c  0800a00c  0001a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080210d4  080210d4  000403c8  2**0
                  CONTENTS
  4 .ARM          00000008  080210d4  080210d4  000310d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080210dc  080210dc  000403c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080210dc  080210dc  000310dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080210e0  080210e0  000310e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  080210e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  200003c8  080214ac  000403c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  080214ac  00040c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  000403f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168af  00000000  00000000  000404a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e99  00000000  00000000  00056d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0005abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8b  00000000  00000000  0005c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ba4  00000000  00000000  0005d0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a28b  00000000  00000000  00083c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfa9f  00000000  00000000  0009df1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf8  00000000  00000000  0017d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  001836b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000330c  00000000  00000000  0018374f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  00186a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003c8 	.word	0x200003c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ff4 	.word	0x08009ff4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003cc 	.word	0x200003cc
 80001ec:	08009ff4 	.word	0x08009ff4

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	; 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b970 	b.w	80009c0 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	460d      	mov	r5, r1
 8000700:	4604      	mov	r4, r0
 8000702:	460f      	mov	r7, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4694      	mov	ip, r2
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0xe2>
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	b143      	cbz	r3, 8000726 <__udivmoddi4+0x2e>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0220 	rsb	r2, r3, #32
 800071c:	409f      	lsls	r7, r3
 800071e:	fa20 f202 	lsr.w	r2, r0, r2
 8000722:	4317      	orrs	r7, r2
 8000724:	409c      	lsls	r4, r3
 8000726:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000732:	0c22      	lsrs	r2, r4, #16
 8000734:	fb0e 7711 	mls	r7, lr, r1, r7
 8000738:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800073c:	fb01 f005 	mul.w	r0, r1, r5
 8000740:	4290      	cmp	r0, r2
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x62>
 8000744:	eb1c 0202 	adds.w	r2, ip, r2
 8000748:	f101 37ff 	add.w	r7, r1, #4294967295
 800074c:	f080 811c 	bcs.w	8000988 <__udivmoddi4+0x290>
 8000750:	4290      	cmp	r0, r2
 8000752:	f240 8119 	bls.w	8000988 <__udivmoddi4+0x290>
 8000756:	3902      	subs	r1, #2
 8000758:	4462      	add	r2, ip
 800075a:	1a12      	subs	r2, r2, r0
 800075c:	b2a4      	uxth	r4, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	fb00 f505 	mul.w	r5, r0, r5
 800076e:	42a5      	cmp	r5, r4
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x90>
 8000772:	eb1c 0404 	adds.w	r4, ip, r4
 8000776:	f100 32ff 	add.w	r2, r0, #4294967295
 800077a:	f080 8107 	bcs.w	800098c <__udivmoddi4+0x294>
 800077e:	42a5      	cmp	r5, r4
 8000780:	f240 8104 	bls.w	800098c <__udivmoddi4+0x294>
 8000784:	4464      	add	r4, ip
 8000786:	3802      	subs	r0, #2
 8000788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	2100      	movs	r1, #0
 8000790:	b11e      	cbz	r6, 800079a <__udivmoddi4+0xa2>
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2300      	movs	r3, #0
 8000796:	e9c6 4300 	strd	r4, r3, [r6]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0xbc>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80ed 	beq.w	8000982 <__udivmoddi4+0x28a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e9c6 0500 	strd	r0, r5, [r6]
 80007ae:	4608      	mov	r0, r1
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	fab3 f183 	clz	r1, r3
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d149      	bne.n	8000850 <__udivmoddi4+0x158>
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d302      	bcc.n	80007c6 <__udivmoddi4+0xce>
 80007c0:	4282      	cmp	r2, r0
 80007c2:	f200 80f8 	bhi.w	80009b6 <__udivmoddi4+0x2be>
 80007c6:	1a84      	subs	r4, r0, r2
 80007c8:	eb65 0203 	sbc.w	r2, r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	4617      	mov	r7, r2
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d0e2      	beq.n	800079a <__udivmoddi4+0xa2>
 80007d4:	e9c6 4700 	strd	r4, r7, [r6]
 80007d8:	e7df      	b.n	800079a <__udivmoddi4+0xa2>
 80007da:	b902      	cbnz	r2, 80007de <__udivmoddi4+0xe6>
 80007dc:	deff      	udf	#255	; 0xff
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8090 	bne.w	8000908 <__udivmoddi4+0x210>
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2101      	movs	r1, #1
 80007f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007f8:	fb07 2015 	mls	r0, r7, r5, r2
 80007fc:	0c22      	lsrs	r2, r4, #16
 80007fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000802:	fb0e f005 	mul.w	r0, lr, r5
 8000806:	4290      	cmp	r0, r2
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x124>
 800080a:	eb1c 0202 	adds.w	r2, ip, r2
 800080e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4290      	cmp	r0, r2
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2b8>
 800081a:	4645      	mov	r5, r8
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb2 f0f7 	udiv	r0, r2, r7
 8000824:	fb07 2210 	mls	r2, r7, r0, r2
 8000828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x14e>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 32ff 	add.w	r2, r0, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x14c>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2c2>
 8000844:	4610      	mov	r0, r2
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800084e:	e79f      	b.n	8000790 <__udivmoddi4+0x98>
 8000850:	f1c1 0720 	rsb	r7, r1, #32
 8000854:	408b      	lsls	r3, r1
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa05 f401 	lsl.w	r4, r5, r1
 8000862:	fa20 f307 	lsr.w	r3, r0, r7
 8000866:	40fd      	lsrs	r5, r7
 8000868:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086c:	4323      	orrs	r3, r4
 800086e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	fb09 5518 	mls	r5, r9, r8, r5
 800087a:	0c1c      	lsrs	r4, r3, #16
 800087c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000880:	fb08 f50e 	mul.w	r5, r8, lr
 8000884:	42a5      	cmp	r5, r4
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	fa00 f001 	lsl.w	r0, r0, r1
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2b4>
 800089c:	42a5      	cmp	r5, r4
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2b4>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4464      	add	r4, ip
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	b29d      	uxth	r5, r3
 80008ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b0:	fb09 4413 	mls	r4, r9, r3, r4
 80008b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008bc:	45a6      	cmp	lr, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2ac>
 80008ca:	45a6      	cmp	lr, r4
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2ac>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4464      	add	r4, ip
 80008d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d6:	fba3 9502 	umull	r9, r5, r3, r2
 80008da:	eba4 040e 	sub.w	r4, r4, lr
 80008de:	42ac      	cmp	r4, r5
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46ae      	mov	lr, r5
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x29c>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x298>
 80008e8:	b156      	cbz	r6, 8000900 <__udivmoddi4+0x208>
 80008ea:	ebb0 0208 	subs.w	r2, r0, r8
 80008ee:	eb64 040e 	sbc.w	r4, r4, lr
 80008f2:	fa04 f707 	lsl.w	r7, r4, r7
 80008f6:	40ca      	lsrs	r2, r1
 80008f8:	40cc      	lsrs	r4, r1
 80008fa:	4317      	orrs	r7, r2
 80008fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000900:	4618      	mov	r0, r3
 8000902:	2100      	movs	r1, #0
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	f1c3 0120 	rsb	r1, r3, #32
 800090c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000910:	fa20 f201 	lsr.w	r2, r0, r1
 8000914:	fa25 f101 	lsr.w	r1, r5, r1
 8000918:	409d      	lsls	r5, r3
 800091a:	432a      	orrs	r2, r5
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb1 f0f7 	udiv	r0, r1, r7
 8000928:	fb07 1510 	mls	r5, r7, r0, r1
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000932:	fb00 f50e 	mul.w	r5, r0, lr
 8000936:	428d      	cmp	r5, r1
 8000938:	fa04 f403 	lsl.w	r4, r4, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x258>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b0>
 8000948:	428d      	cmp	r5, r1
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b0>
 800094c:	3802      	subs	r0, #2
 800094e:	4461      	add	r1, ip
 8000950:	1b49      	subs	r1, r1, r5
 8000952:	b292      	uxth	r2, r2
 8000954:	fbb1 f5f7 	udiv	r5, r1, r7
 8000958:	fb07 1115 	mls	r1, r7, r5, r1
 800095c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000960:	fb05 f10e 	mul.w	r1, r5, lr
 8000964:	4291      	cmp	r1, r2
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x282>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 8000972:	4291      	cmp	r1, r2
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0xfc>
 8000982:	4631      	mov	r1, r6
 8000984:	4630      	mov	r0, r6
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xa2>
 8000988:	4639      	mov	r1, r7
 800098a:	e6e6      	b.n	800075a <__udivmoddi4+0x62>
 800098c:	4610      	mov	r0, r2
 800098e:	e6fb      	b.n	8000788 <__udivmoddi4+0x90>
 8000990:	4548      	cmp	r0, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb65 0e0c 	sbc.w	lr, r5, ip
 800099c:	3b01      	subs	r3, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f0>
 80009a0:	4645      	mov	r5, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x282>
 80009a4:	462b      	mov	r3, r5
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x258>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009b0:	3d02      	subs	r5, #2
 80009b2:	4462      	add	r2, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x124>
 80009b6:	4608      	mov	r0, r1
 80009b8:	e70a      	b.n	80007d0 <__udivmoddi4+0xd8>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x14e>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <GPIO_Init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
	GPIOE-> OSPEEDR |= 0x400;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);*/

	// Initialize the GPIO pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOE_CLK_ENABLE(); // Enable the GPIO E clock
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <GPIO_Init+0x84>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <GPIO_Init+0x84>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <GPIO_Init+0x84>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

	// Configure PE3 in input mode
	GPIO_InitStruct.Pin = PIN_PE3;
 80009e6:	2308      	movs	r3, #8
 80009e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <GPIO_Init+0x88>)
 80009f8:	f004 f956 	bl	8004ca8 <HAL_GPIO_Init>

	// Configure PE5 in output push-pull mode
	GPIO_InitStruct.Pin = PIN_PE5;
 80009fc:	2320      	movs	r3, #32
 80009fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480e      	ldr	r0, [pc, #56]	; (8000a4c <GPIO_Init+0x88>)
 8000a12:	f004 f949 	bl	8004ca8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2120      	movs	r1, #32
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <GPIO_Init+0x88>)
 8000a1c:	f004 fb08 	bl	8005030 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 8000a20:	e002      	b.n	8000a28 <GPIO_Init+0x64>
	{
	  HAL_Delay(100);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f003 fbb6 	bl	8004194 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 8000a28:	2108      	movs	r1, #8
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <GPIO_Init+0x88>)
 8000a2c:	f004 fae8 	bl	8005000 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d0f5      	beq.n	8000a22 <GPIO_Init+0x5e>
	}
	HAL_Delay(3000);
 8000a36:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a3a:	f003 fbab 	bl	8004194 <HAL_Delay>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40021000 	.word	0x40021000

08000a50 <calculate_main_frequency>:
 * @param fft_len The length of the FFT.
 * @param output Pointer to the array to store the FFT output.
 * @return The main frequency for the specific channel.
 */

float calculate_main_frequency(uint8_t Channel, float* samples, uint8_t num_channels, uint32_t buffer_size, uint32_t sampling_freq) {
 8000a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a54:	b097      	sub	sp, #92	; 0x5c
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6139      	str	r1, [r7, #16]
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	75fb      	strb	r3, [r7, #23]
 8000a60:	4613      	mov	r3, r2
 8000a62:	75bb      	strb	r3, [r7, #22]
 8000a64:	466b      	mov	r3, sp
 8000a66:	461e      	mov	r6, r3
    
    // Perform FFT using CMSIS-DSP library
    const uint32_t fft_size = buffer_size;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	653b      	str	r3, [r7, #80]	; 0x50
    float32_t input_samples[fft_size];
 8000a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a74:	2200      	movs	r2, #0
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	014b      	lsls	r3, r1, #5
 8000a86:	6839      	ldr	r1, [r7, #0]
 8000a88:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	014a      	lsls	r2, r1, #5
 8000a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a92:	2200      	movs	r2, #0
 8000a94:	469a      	mov	sl, r3
 8000a96:	4693      	mov	fp, r2
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000aa4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000aa8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	3307      	adds	r3, #7
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	ebad 0d03 	sub.w	sp, sp, r3
 8000aba:	466b      	mov	r3, sp
 8000abc:	3303      	adds	r3, #3
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48

    for (uint32_t i = 0; i < fft_size; i++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8000ac8:	e012      	b.n	8000af0 <calculate_main_frequency+0xa0>
        input_samples[i] = samples[i * num_channels + (Channel - 1)];
 8000aca:	7dbb      	ldrb	r3, [r7, #22]
 8000acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ace:	fb03 f202 	mul.w	r2, r3, r2
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4413      	add	r3, r2
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < fft_size; i++) {
 8000aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aec:	3301      	adds	r3, #1
 8000aee:	657b      	str	r3, [r7, #84]	; 0x54
 8000af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d3e8      	bcc.n	8000aca <calculate_main_frequency+0x7a>
    }

    float output[fft_size];
 8000af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000afa:	3b01      	subs	r3, #1
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
 8000afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b00:	2200      	movs	r2, #0
 8000b02:	4698      	mov	r8, r3
 8000b04:	4691      	mov	r9, r2
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	f04f 0300 	mov.w	r3, #0
 8000b0e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000b12:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000b16:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	461c      	mov	r4, r3
 8000b20:	4615      	mov	r5, r2
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	016b      	lsls	r3, r5, #5
 8000b2c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b30:	0162      	lsls	r2, r4, #5
 8000b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	3307      	adds	r3, #7
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b40:	466b      	mov	r3, sp
 8000b42:	3303      	adds	r3, #3
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	643b      	str	r3, [r7, #64]	; 0x40
    arm_rfft_fast_instance_f32 fft_struct;
    arm_rfft_fast_init_f32(&fft_struct, fft_size);
 8000b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 fc9d 	bl	8008494 <arm_rfft_fast_init_f32>

    // Perform the FFT on the input samples
    arm_rfft_fast_f32(&fft_struct, input_samples, output, 0);
 8000b5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b5e:	2300      	movs	r3, #0
 8000b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b64:	f007 fd18 	bl	8008598 <arm_rfft_fast_f32>

    // Calculate magnitude of complex numbers
    arm_cmplx_mag_f32(output, output, fft_size / 2);
 8000b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000b70:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000b72:	f008 f97d 	bl	8008e70 <arm_cmplx_mag_f32>

    // Find the index of the maximum magnitude in the first half of the array
    uint32_t maxIndex;
    float32_t maxValue;
    arm_max_f32(output, fft_size / 2, &maxValue, &maxIndex);
 8000b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b78:	0859      	lsrs	r1, r3, #1
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	f107 021c 	add.w	r2, r7, #28
 8000b82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000b84:	f007 fc1e 	bl	80083c4 <arm_max_f32>

    // Calculate the main frequency
    float main_frequency = (float)maxIndex * ((float)sampling_freq) / fft_size;
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b9e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    
    return main_frequency;
 8000bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb6:	46b5      	mov	sp, r6
 8000bb8:	ee07 3a90 	vmov	s15, r3
}
 8000bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc0:	375c      	adds	r7, #92	; 0x5c
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000bc8 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000bc8:	b598      	push	{r3, r4, r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    HAL_Init();  // Initialize the system
 8000bcc:	f003 fa68 	bl	80040a0 <HAL_Init>

    SystemClock_Config();  // Configure system clocks
 8000bd0:	f000 f850 	bl	8000c74 <SystemClock_Config>

    GPIO_Init();  // Init PE5 and set it to HIGH
 8000bd4:	f7ff fef6 	bl	80009c4 <GPIO_Init>

#ifdef FLIPPED_LCD
    BSP_LCD_Init_Flipped();  // Initialize the LCD for flipped orientation
#else
    BSP_LCD_Init();  // Initialize the LCD display
 8000bd8:	f002 f9b8 	bl	8002f4c <BSP_LCD_Init>
#endif
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000bdc:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000be0:	2001      	movs	r0, #1
 8000be2:	f002 fa35 	bl	8003050 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f002 fa96 	bl	8003118 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 8000bec:	f002 fd66 	bl	80036bc <BSP_LCD_DisplayOn>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f002 faec 	bl	80031d0 <BSP_LCD_Clear>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());  // Touchscreen
 8000bf8:	f002 fa12 	bl	8003020 <BSP_LCD_GetXSize>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b29c      	uxth	r4, r3
 8000c00:	f002 fa1a 	bl	8003038 <BSP_LCD_GetYSize>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f003 f944 	bl	8003e98 <BSP_TS_Init>
    /* Uncomment next line to enable touchscreen interrupt */
    // BSP_TS_ITConfig();					// Enable
    // Touchscreen interrupt

    PB_init();       // Initialize the user pushbutton
 8000c10:	f001 f898 	bl	8001d44 <PB_init>
    PB_enableIRQ();  // Enable interrupt on user pushbutton
 8000c14:	f001 f8b6 	bl	8001d84 <PB_enableIRQ>

    BSP_LED_Init(LED3);  // Toggles in while loop
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f001 fdb3 	bl	8002784 <BSP_LED_Init>
    BSP_LED_Init(LED4);  // Is toggled by user button
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fdb0 	bl	8002784 <BSP_LED_Init>

    // MENU_hint();						// Show hint at
    // startup MENU_draw(0,3);						// Draw
    // the menu
    DISP_info_screen(MENU_HOME);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 fe17 	bl	8001858 <DISP_info_screen>

    gyro_disable();  // Disable gyro, use those analog inputs
 8000c2a:	f000 f8a1 	bl	8000d70 <gyro_disable>

    MEAS_GPIO_analog_init();         // Configure GPIOs in analog mode
 8000c2e:	f000 f989 	bl	8000f44 <MEAS_GPIO_analog_init>
    MEAS_timer_init();               // Configure the timer
 8000c32:	f000 fa09 	bl	8001048 <MEAS_timer_init>
    OUTPUT_MEAS_timer_init();        // Configure the timer for output
 8000c36:	f000 fb5b 	bl	80012f0 <OUTPUT_MEAS_timer_init>
                                     /* Clear the display */
    BSP_LCD_Clear(LCD_COLOR_BLACK);  // Clear display
 8000c3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c3e:	f002 fac7 	bl	80031d0 <BSP_LCD_Clear>

    /* Infinite while loop */
    while (1) {                // Infinitely loop in main function
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 8000c42:	2000      	movs	r0, #0
 8000c44:	f001 fdf2 	bl	800282c <BSP_LED_Toggle>
                        BSP_LED_Off(LED4);
                }
        }*/

        // Check if Device should power off (PE3)
        if (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET) {
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4809      	ldr	r0, [pc, #36]	; (8000c70 <main+0xa8>)
 8000c4c:	f004 f9d8 	bl	8005000 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d108      	bne.n	8000c68 <main+0xa0>
            // Set PE5 low
            HAL_GPIO_WritePin(GPIOE, PIN_PE5, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <main+0xa8>)
 8000c5c:	f004 f9e8 	bl	8005030 <HAL_GPIO_WritePin>
            // Delay for 3 seconds
            HAL_Delay(3000);
 8000c60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c64:	f003 fa96 	bl	8004194 <HAL_Delay>

        // DISP_info_screen();

        // MENU_main();					// Check for user input

        HAL_Delay(100);  // Wait or sleep
 8000c68:	2064      	movs	r0, #100	; 0x64
 8000c6a:	f003 fa93 	bl	8004194 <HAL_Delay>
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 8000c6e:	e7e8      	b.n	8000c42 <main+0x7a>
 8000c70:	40021000 	.word	0x40021000

08000c74 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0a0      	sub	sp, #128	; 0x80
 8000c78:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f008 fd02 	bl	800968c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2230      	movs	r2, #48	; 0x30
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f008 fcf3 	bl	800968c <memset>
    /* Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <SystemClock_Config+0xf0>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <SystemClock_Config+0xf0>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <SystemClock_Config+0xf0>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <SystemClock_Config+0xf4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <SystemClock_Config+0xf4>)
 8000ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <SystemClock_Config+0xf4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
    /* Initialize High Speed External Oscillator and PLL circuits */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce6:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cfa:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d00:	2307      	movs	r3, #7
 8000d02:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 fcad 	bl	8006668 <HAL_RCC_OscConfig>
    /* Initialize gates and clock dividers for CPU, AHB and APB busses */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000d0e:	230f      	movs	r3, #15
 8000d10:	63fb      	str	r3, [r7, #60]	; 0x3c
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2302      	movs	r3, #2
 8000d14:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d24:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000d26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 ff09 	bl	8006b44 <HAL_RCC_ClockConfig>
    /* Initialize PLL and clock divider for the LCD */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d32:	2308      	movs	r3, #8
 8000d34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d36:	23c0      	movs	r3, #192	; 0xc0
 8000d38:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f006 f907 	bl	8006f5c <HAL_RCCEx_PeriphCLKConfig>
    /* Set clock prescaler for ADCs */
    ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <SystemClock_Config+0xf8>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <SystemClock_Config+0xf8>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	6053      	str	r3, [r2, #4]
}
 8000d5a:	bf00      	nop
 8000d5c:	3780      	adds	r7, #128	; 0x80
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000
 8000d6c:	40012300 	.word	0x40012300

08000d70 <gyro_disable>:
 * which is done with the code below.
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <gyro_disable+0xb4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <gyro_disable+0xb4>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <gyro_disable+0xb4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
    /* Disable PC1 and PF8 first */
    GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;        // Reset mode for PC1
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <gyro_disable+0xb8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <gyro_disable+0xb8>)
 8000d98:	f023 030c 	bic.w	r3, r3, #12
 8000d9c:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;  // Set PC1 as output
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <gyro_disable+0xb8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <gyro_disable+0xb8>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6013      	str	r3, [r2, #0]
    GPIOC->BSRR |= GPIO_BSRR_BR1;  // Set GYRO (CS) to 0 for a short time
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <gyro_disable+0xb8>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <gyro_disable+0xb8>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	6193      	str	r3, [r2, #24]
    HAL_Delay(10);                 // Wait some time
 8000db6:	200a      	movs	r0, #10
 8000db8:	f003 f9ec 	bl	8004194 <HAL_Delay>
    GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;  // Analog PC1 = ADC123_IN11
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <gyro_disable+0xb8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <gyro_disable+0xb8>)
 8000dc2:	f043 030c 	orr.w	r3, r3, #12
 8000dc6:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <gyro_disable+0xb4>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <gyro_disable+0xb4>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <gyro_disable+0xb4>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
    GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;  // Reset speed of PF8
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <gyro_disable+0xbc>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <gyro_disable+0xbc>)
 8000dea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000dee:	6093      	str	r3, [r2, #8]
    GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;  // Reset alternate function of PF8
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <gyro_disable+0xbc>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <gyro_disable+0xbc>)
 8000df6:	f023 030f 	bic.w	r3, r3, #15
 8000dfa:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;   // Reset pulup/down of PF8
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <gyro_disable+0xbc>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <gyro_disable+0xbc>)
 8000e02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e06:	60d3      	str	r3, [r2, #12]
    HAL_Delay(10);                           // Wait some time
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f003 f9c3 	bl	8004194 <HAL_Delay>
    GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos;  // Analog mode PF8 = ADC3_IN4
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <gyro_disable+0xbc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <gyro_disable+0xbc>)
 8000e14:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000e18:	6013      	str	r3, [r2, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40021400 	.word	0x40021400

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db12      	blt.n	8000ea4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	490a      	ldr	r1, [pc, #40]	; (8000eb0 <__NVIC_DisableIRQ+0x44>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	3320      	adds	r3, #32
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e98:	f3bf 8f4f 	dsb	sy
}
 8000e9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9e:	f3bf 8f6f 	isb	sy
}
 8000ea2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0c      	blt.n	8000ee0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_ClearPendingIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	3360      	adds	r3, #96	; 0x60
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <MEAS_GPIO_analog_init>:
 * - ADC3_IN4 = GPIO PF6 (Pad left)
 * - ADC123_IN13 = GPIO PC3 (Pad right)
 * - ADC3_IN6 = GPIO PF8 (Hall sensor Left)
 * - ADC123_IN11 = GPIO PC1 (Hall sensor Right)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MEAS_GPIO_analog_init+0x7c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <MEAS_GPIO_analog_init+0x7c>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MEAS_GPIO_analog_init+0x7c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);  // Analog PF6 = ADC3_IN4
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MEAS_GPIO_analog_init+0x80>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <MEAS_GPIO_analog_init+0x80>)
 8000f6c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f70:	6013      	str	r3, [r2, #0]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER8_Pos);  // Analog PF8 = ADC3_IN6
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MEAS_GPIO_analog_init+0x80>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <MEAS_GPIO_analog_init+0x80>)
 8000f78:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000f7c:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MEAS_GPIO_analog_init+0x7c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <MEAS_GPIO_analog_init+0x7c>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MEAS_GPIO_analog_init+0x7c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);  // Analog PC3 = ADC3_IN13
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MEAS_GPIO_analog_init+0x84>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <MEAS_GPIO_analog_init+0x84>)
 8000fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fa4:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER1_Pos);  // Analog PC1 = ADC3_IN11
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MEAS_GPIO_analog_init+0x84>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <MEAS_GPIO_analog_init+0x84>)
 8000fac:	f043 030c 	orr.w	r3, r3, #12
 8000fb0:	6013      	str	r3, [r2, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40021400 	.word	0x40021400
 8000fc8:	40020800 	.word	0x40020800

08000fcc <MEAS_ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void MEAS_ADC_reset(void) {
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;   // Reset ADCs
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MEAS_ADC_reset+0x38>)
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <MEAS_ADC_reset+0x38>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6253      	str	r3, [r2, #36]	; 0x24
    RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;  // Release reset of ADCs
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MEAS_ADC_reset+0x38>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	4a08      	ldr	r2, [pc, #32]	; (8001004 <MEAS_ADC_reset+0x38>)
 8000fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe6:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->CR1 &= ~TIM_CR1_CEN;              // Disable timer
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff2:	f023 0301 	bic.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <MEAS_Buffer_reset>:
/** ***************************************************************************
 * @brief Resets the buffer and the flag (data ready for new measurement)
 * @param[in] channels	input channels
 * @param[in] buffer	buffer pointer
 *****************************************************************************/
static void MEAS_Buffer_reset(uint8_t channels, uint32_t* buffer) {
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
    /* Clear buffer and flag */
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e008      	b.n	800102c <MEAS_Buffer_reset+0x24>
        buffer[i] = 0;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	019b      	lsls	r3, r3, #6
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4293      	cmp	r3, r2
 8001036:	d3f0      	bcc.n	800101a <MEAS_Buffer_reset+0x12>
    }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <MEAS_timer_init>:
/** ***************************************************************************
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();  // Enable Clock for TIM2
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MEAS_timer_init+0x50>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <MEAS_timer_init+0x50>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MEAS_timer_init+0x50>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
    TIM2->PSC = TIM_PRESCALE;     // Prescaler for clock freq. = 1MHz
 800106a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106e:	f243 3244 	movw	r2, #13124	; 0x3344
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = TIM_TOP;          // Auto reload = counter top value
 8001074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001078:	2209      	movs	r2, #9
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR2 |= TIM_CR2_MMS_1;   // TRGO on update
 800107c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001086:	f043 0320 	orr.w	r3, r3, #32
 800108a:	6053      	str	r3, [r2, #4]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40023800 	.word	0x40023800

0800109c <MEAS_ADC3_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC3_IN4 = GPIO PF6 (Pad Left), ADC3_IN13 = GPIO PC3
 *(Pad Right), ADC_IN6 = GPIO PF8 (HS-Left), ADC3_IN11 = GPIO PC1 (HS-Right)
 *****************************************************************************/
void MEAS_ADC3_scan_init(void) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
    __HAL_RCC_ADC3_CLK_ENABLE();               // Enable Clock for ADC3
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <MEAS_ADC3_scan_init+0x138>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a4a      	ldr	r2, [pc, #296]	; (80011d4 <MEAS_ADC3_scan_init+0x138>)
 80010ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <MEAS_ADC3_scan_init+0x138>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
    ADC3->SQR1 |= (3UL << ADC_SQR1_L_Pos);     // Convert 4 inputs (4-1)
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80010c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);   // Input 4 = first conversion
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ce:	4a42      	ldr	r2, [pc, #264]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (13UL << ADC_SQR3_SQ2_Pos);  // Input 13 = second conversion
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	4a3f      	ldr	r2, [pc, #252]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010dc:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 80010e0:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (6UL << ADC_SQR3_SQ3_Pos);   // Input 6 = third conversion
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	4a3c      	ldr	r2, [pc, #240]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010e8:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80010ec:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (11UL << ADC_SQR3_SQ4_Pos);  // Input 11 = fourth conversion
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f2:	4a39      	ldr	r2, [pc, #228]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010f4:	f443 23b0 	orr.w	r3, r3, #360448	; 0x58000
 80010f8:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->CR1 |= ADC_CR1_SCAN;                 // Enable scan mode
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a36      	ldr	r2, [pc, #216]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6053      	str	r3, [r2, #4]
    ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);   // En. ext. trigger on rising e.
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4a33      	ldr	r2, [pc, #204]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);  // Timer 2 TRGO event
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	4a30      	ldr	r2, [pc, #192]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 8001118:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 800111c:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= ADC_CR2_DMA;                  // Enable DMA mode
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <MEAS_ADC3_scan_init+0x13c>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6093      	str	r3, [r2, #8]
    __HAL_RCC_DMA2_CLK_ENABLE();               // Enable Clock for DMA2
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <MEAS_ADC3_scan_init+0x138>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <MEAS_ADC3_scan_init+0x138>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MEAS_ADC3_scan_init+0x138>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
    DMA2_Stream1->CR &= ~DMA_SxCR_EN;          // Disable the DMA stream 1
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 8001152:	bf00      	nop
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f9      	bne.n	8001154 <MEAS_ADC3_scan_init+0xb8>
        ;
    }                                 // Wait for DMA to finish
    DMA2->LIFCR |= DMA_LIFCR_CTCIF1;  // Clear transfer complete interrupt fl.
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MEAS_ADC3_scan_init+0x144>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <MEAS_ADC3_scan_init+0x144>)
 8001166:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800116a:	6093      	str	r3, [r2, #8]
    DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);  // Select channel 2
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 8001172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001176:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PL_1;                // Priority high
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 800117e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001182:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;  // Memory data size = 32 bit
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118e:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;  // Peripheral data size = 32 bit
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 8001196:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119a:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MINC;     // Increment memory address pointer
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a6:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_TCIE;     // Transfer complete interrupt enable
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->NDTR =
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 80011b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ba:	605a      	str	r2, [r3, #4]
        INPUT_COUNT * ADC_NUMS;  // Number of data items to transfer
    DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;     // Peripheral register address
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <MEAS_ADC3_scan_init+0x148>)
 80011c0:	609a      	str	r2, [r3, #8]
    DMA2_Stream1->M0AR = (uint32_t)ADC_samples;  // Buffer memory loc. address
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MEAS_ADC3_scan_init+0x140>)
 80011c4:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <MEAS_ADC3_scan_init+0x14c>)
 80011c6:	60da      	str	r2, [r3, #12]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40012200 	.word	0x40012200
 80011dc:	40026428 	.word	0x40026428
 80011e0:	40026400 	.word	0x40026400
 80011e4:	4001224c 	.word	0x4001224c
 80011e8:	200003e8 	.word	0x200003e8

080011ec <MEAS_ADC3_scan_start>:

/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void MEAS_ADC3_scan_start(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    DMA2_Stream1->CR |= DMA_SxCR_EN;          // Enable DMA
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MEAS_ADC3_scan_start+0x3c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <MEAS_ADC3_scan_start+0x3c>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 80011fc:	2039      	movs	r0, #57	; 0x39
 80011fe:	f7ff fe59 	bl	8000eb4 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream1_IRQn);  // Enable DMA interrupt in the NVIC
 8001202:	2039      	movs	r0, #57	; 0x39
 8001204:	f7ff fe14 	bl	8000e30 <__NVIC_EnableIRQ>
    ADC3->CR2 |= ADC_CR2_ADON;          // Enable ADC3
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <MEAS_ADC3_scan_start+0x40>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <MEAS_ADC3_scan_start+0x40>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6093      	str	r3, [r2, #8]
    TIM2->CR1 |= TIM_CR1_CEN;           // Enable timer
 8001214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40026428 	.word	0x40026428
 800122c:	40012200 	.word	0x40012200

08001230 <DMA2_Stream1_IRQHandler>:
 * @brief Interrupt handler for DMA2 Stream1
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF1) {  // Stream1 transfer compl. interrupt f.
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <DMA2_Stream1_IRQHandler+0x78>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800123c:	2b00      	cmp	r3, #0
 800123e:	d031      	beq.n	80012a4 <DMA2_Stream1_IRQHandler+0x74>
        NVIC_DisableIRQ(
 8001240:	2039      	movs	r0, #57	; 0x39
 8001242:	f7ff fe13 	bl	8000e6c <__NVIC_DisableIRQ>
            DMA2_Stream1_IRQn);  // Disable DMA interrupt in the NVIC
        NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 8001246:	2039      	movs	r0, #57	; 0x39
 8001248:	f7ff fe34 	bl	8000eb4 <__NVIC_ClearPendingIRQ>
        DMA2_Stream1->CR &= ~DMA_SxCR_EN;         // Disable the DMA
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <DMA2_Stream1_IRQHandler+0x7c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <DMA2_Stream1_IRQHandler+0x7c>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]
        while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 8001258:	bf00      	nop
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <DMA2_Stream1_IRQHandler+0x7c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f9      	bne.n	800125a <DMA2_Stream1_IRQHandler+0x2a>
            ;
        }  // Wait for DMA to finish
        DMA2->LIFCR |=
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <DMA2_Stream1_IRQHandler+0x78>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <DMA2_Stream1_IRQHandler+0x78>)
 800126c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001270:	6093      	str	r3, [r2, #8]
            DMA_LIFCR_CTCIF1;        // Clear transfer complete interrupt fl.
        TIM2->CR1 &= ~TIM_CR1_CEN;   // Disable timer
 8001272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6013      	str	r3, [r2, #0]
        ADC3->CR2 &= ~ADC_CR2_ADON;  // Disable ADC3
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <DMA2_Stream1_IRQHandler+0x80>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <DMA2_Stream1_IRQHandler+0x80>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6093      	str	r3, [r2, #8]
        ADC3->CR2 &= ~ADC_CR2_DMA;   // Disable DMA mode
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <DMA2_Stream1_IRQHandler+0x80>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <DMA2_Stream1_IRQHandler+0x80>)
 8001294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001298:	6093      	str	r3, [r2, #8]
        // copy data from DMA buffer to ADC_samples
        MEAS_ADC_reset();
 800129a:	f7ff fe97 	bl	8000fcc <MEAS_ADC_reset>
        MEAS_data_ready = true;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <DMA2_Stream1_IRQHandler+0x84>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
    }
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40026400 	.word	0x40026400
 80012ac:	40026428 	.word	0x40026428
 80012b0:	40012200 	.word	0x40012200
 80012b4:	200003e4 	.word	0x200003e4

080012b8 <MEAS_start_measure>:
 * @return ADC samples pointer
 *
 * @note The result is stored alternated e.g. every 4th is together.
 *****************************************************************************/
// Start the measurement procedure
uint32_t* MEAS_start_measure(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    MEAS_Buffer_reset(INPUT_COUNT, ADC_samples);
 80012bc:	490a      	ldr	r1, [pc, #40]	; (80012e8 <MEAS_start_measure+0x30>)
 80012be:	2004      	movs	r0, #4
 80012c0:	f7ff fea2 	bl	8001008 <MEAS_Buffer_reset>
    MEAS_ADC3_scan_init();
 80012c4:	f7ff feea 	bl	800109c <MEAS_ADC3_scan_init>
    MEAS_ADC3_scan_start();
 80012c8:	f7ff ff90 	bl	80011ec <MEAS_ADC3_scan_start>
    while (!MEAS_data_ready)
 80012cc:	bf00      	nop
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MEAS_start_measure+0x34>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f083 0301 	eor.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f8      	bne.n	80012ce <MEAS_start_measure+0x16>
        ;  // Wait for data
    MEAS_data_ready = false;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <MEAS_start_measure+0x34>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]

    return ADC_samples;
 80012e2:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <MEAS_start_measure+0x30>)
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200003e8 	.word	0x200003e8
 80012ec:	200003e4 	.word	0x200003e4

080012f0 <OUTPUT_MEAS_timer_init>:
 * This function enables the clock for timer 3, sets the prescaler to 16000,
 * sets the auto reload register to 100, enables the update interrupt,
 * enables timer 3, and enables the timer 3 interrupt.
 * This timer is used to trigger the data output to the display every 800ms.
 */
void OUTPUT_MEAS_timer_init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // enable clock for timer 3
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <OUTPUT_MEAS_timer_init+0x4c>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a10      	ldr	r2, [pc, #64]	; (800133c <OUTPUT_MEAS_timer_init+0x4c>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
    TIM3->PSC = 16000 - 1;               // set prescaler to 16000
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <OUTPUT_MEAS_timer_init+0x50>)
 8001302:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 800 - 1;                 // set auto reload register to 800
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <OUTPUT_MEAS_timer_init+0x50>)
 800130a:	f240 321f 	movw	r2, #799	; 0x31f
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->DIER |= TIM_DIER_UIE;          // enable update interrupt
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <OUTPUT_MEAS_timer_init+0x50>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <OUTPUT_MEAS_timer_init+0x50>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN;            // enable timer 3
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <OUTPUT_MEAS_timer_init+0x50>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <OUTPUT_MEAS_timer_init+0x50>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM3_IRQn, 3);
 8001328:	2103      	movs	r1, #3
 800132a:	201d      	movs	r0, #29
 800132c:	f7ff fde0 	bl	8000ef0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);  // enable timer 3 interrupt
 8001330:	201d      	movs	r0, #29
 8001332:	f7ff fd7d 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40000400 	.word	0x40000400

08001344 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/

void MEAS_show_data(void) {
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b09d      	sub	sp, #116	; 0x74
 8001348:	af02      	add	r7, sp, #8
    const uint8_t ADC_RES = 12;
 800134a:	230c      	movs	r3, #12
 800134c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    // Define Samples variable and start measurement
    uint32_t* Samples = MEAS_start_measure();
 8001350:	f7ff ffb2 	bl	80012b8 <MEAS_start_measure>
 8001354:	63b8      	str	r0, [r7, #56]	; 0x38
    /* Calculate the factor to scale the values to the display */
    const uint32_t Y_OFFSET = 100;
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    const uint32_t X_SIZE = 240;
 800135a:	23f0      	movs	r3, #240	; 0xf0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    const uint32_t f = (1 << ADC_RES) / Y_OFFSET + 1;  // Scaling factor
 800135e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001362:	2201      	movs	r2, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	461a      	mov	r2, r3
 800136a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	3301      	adds	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t data;
    uint32_t data_last;
    /* Clear the display */

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001374:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001378:	f001 fede 	bl	8003138 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	b29a      	uxth	r2, r3
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	b29b      	uxth	r3, r3
 8001384:	3301      	adds	r3, #1
 8001386:	b29b      	uxth	r3, r3
 8001388:	2100      	movs	r1, #0
 800138a:	2000      	movs	r0, #0
 800138c:	f002 f914 	bl	80035b8 <BSP_LCD_FillRect>
    /* Write first 4 samples as numbers */

    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001390:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001394:	f001 fee8 	bl	8003168 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f001 fecc 	bl	8003138 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font12);
 80013a0:	48a0      	ldr	r0, [pc, #640]	; (8001624 <MEAS_show_data+0x2e0>)
 80013a2:	f001 fefb 	bl	800319c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"ADC Resolution: 12 bit",
 80013a6:	2301      	movs	r3, #1
 80013a8:	4a9f      	ldr	r2, [pc, #636]	; (8001628 <MEAS_show_data+0x2e4>)
 80013aa:	2150      	movs	r1, #80	; 0x50
 80013ac:	2000      	movs	r0, #0
 80013ae:	f001 ff7b 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Peak Values and frequency", CENTER_MODE);
 80013b2:	2301      	movs	r3, #1
 80013b4:	4a9d      	ldr	r2, [pc, #628]	; (800162c <MEAS_show_data+0x2e8>)
 80013b6:	2164      	movs	r1, #100	; 0x64
 80013b8:	2000      	movs	r0, #0
 80013ba:	f001 ff75 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 120, (uint8_t*)"of Channels 1 to 4:", CENTER_MODE);
 80013be:	2301      	movs	r3, #1
 80013c0:	4a9b      	ldr	r2, [pc, #620]	; (8001630 <MEAS_show_data+0x2ec>)
 80013c2:	2178      	movs	r1, #120	; 0x78
 80013c4:	2000      	movs	r0, #0
 80013c6:	f001 ff6f 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 260, (uint8_t*)"(without VGND -> peak - 2048)",
 80013ca:	2301      	movs	r3, #1
 80013cc:	4a99      	ldr	r2, [pc, #612]	; (8001634 <MEAS_show_data+0x2f0>)
 80013ce:	f44f 7182 	mov.w	r1, #260	; 0x104
 80013d2:	2000      	movs	r0, #0
 80013d4:	f001 ff68 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font20);
 80013d8:	4897      	ldr	r0, [pc, #604]	; (8001638 <MEAS_show_data+0x2f4>)
 80013da:	f001 fedf 	bl	800319c <BSP_LCD_SetFont>
    char text[32];
	// Calculate the frequency of channel 1
	float frequency = calculate_main_frequency(1, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 80013de:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2340      	movs	r3, #64	; 0x40
 80013e6:	2204      	movs	r2, #4
 80013e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fb30 	bl	8000a50 <calculate_main_frequency>
 80013f0:	ee07 0a90 	vmov	s15, r0
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    //uint32_t frequency = frequency_calculation(0, Samples);
    // Calculate the peak value of channel 1
    uint32_t peak = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001404:	e010      	b.n	8001428 <MEAS_show_data+0xe4>
        if (Samples[4 * i] > peak) {
 8001406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800140c:	4413      	add	r3, r2
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001412:	429a      	cmp	r2, r3
 8001414:	d205      	bcs.n	8001422 <MEAS_show_data+0xde>
            peak = Samples[4 * i];
 8001416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001424:	3301      	adds	r3, #1
 8001426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142a:	2b3f      	cmp	r3, #63	; 0x3f
 800142c:	d9eb      	bls.n	8001406 <MEAS_show_data+0xc2>
        }
    }
    peak -= 2048;
 800142e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001430:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8001436:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800143a:	f001 fe7d 	bl	8003138 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C1:%4d f:%3d HZ", (int)(peak), (float)(frequency));
 800143e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8001440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001442:	f7ff f8e9 	bl	8000618 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	1d38      	adds	r0, r7, #4
 800144c:	e9cd 2300 	strd	r2, r3, [sp]
 8001450:	4623      	mov	r3, r4
 8001452:	4a7a      	ldr	r2, [pc, #488]	; (800163c <MEAS_show_data+0x2f8>)
 8001454:	2128      	movs	r1, #40	; 0x28
 8001456:	f008 f8e5 	bl	8009624 <sniprintf>
    // snprintf(text, 15, "C1 %4d", (int)(Samples[0]));
    BSP_LCD_DisplayStringAt(0, 140, (uint8_t*)text, LEFT_MODE);
 800145a:	1d3a      	adds	r2, r7, #4
 800145c:	2303      	movs	r3, #3
 800145e:	218c      	movs	r1, #140	; 0x8c
 8001460:	2000      	movs	r0, #0
 8001462:	f001 ff21 	bl	80032a8 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 2
	frequency = calculate_main_frequency(2, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 8001466:	f44f 7320 	mov.w	r3, #640	; 0x280
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	2204      	movs	r2, #4
 8001470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001472:	2002      	movs	r0, #2
 8001474:	f7ff faec 	bl	8000a50 <calculate_main_frequency>
 8001478:	ee07 0a90 	vmov	s15, r0
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001480:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    //frequency = frequency_calculation(1, Samples);
    // Calculate the peak value of channel 2
    peak = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	65bb      	str	r3, [r7, #88]	; 0x58
 800148c:	e012      	b.n	80014b4 <MEAS_show_data+0x170>
        if (Samples[4 * i + 1] > peak) {
 800148e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	3304      	adds	r3, #4
 8001494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001496:	4413      	add	r3, r2
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800149c:	429a      	cmp	r2, r3
 800149e:	d206      	bcs.n	80014ae <MEAS_show_data+0x16a>
            peak = Samples[4 * i + 1];
 80014a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	3304      	adds	r3, #4
 80014a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014a8:	4413      	add	r3, r2
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80014ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b0:	3301      	adds	r3, #1
 80014b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80014b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b6:	2b3f      	cmp	r3, #63	; 0x3f
 80014b8:	d9e9      	bls.n	800148e <MEAS_show_data+0x14a>
        }
    }
    peak -= 2048;
 80014ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014bc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014c0:	663b      	str	r3, [r7, #96]	; 0x60
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80014c2:	485f      	ldr	r0, [pc, #380]	; (8001640 <MEAS_show_data+0x2fc>)
 80014c4:	f001 fe38 	bl	8003138 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C2:%4d f:%3d HZ", (int)(peak), (float)(frequency));
 80014c8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80014ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014cc:	f7ff f8a4 	bl	8000618 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	1d38      	adds	r0, r7, #4
 80014d6:	e9cd 2300 	strd	r2, r3, [sp]
 80014da:	4623      	mov	r3, r4
 80014dc:	4a59      	ldr	r2, [pc, #356]	; (8001644 <MEAS_show_data+0x300>)
 80014de:	2128      	movs	r1, #40	; 0x28
 80014e0:	f008 f8a0 	bl	8009624 <sniprintf>
    // snprintf(text, 15, "C2 %4d", (int)(Samples[1]));
    BSP_LCD_DisplayStringAt(0, 170, (uint8_t*)text, LEFT_MODE);
 80014e4:	1d3a      	adds	r2, r7, #4
 80014e6:	2303      	movs	r3, #3
 80014e8:	21aa      	movs	r1, #170	; 0xaa
 80014ea:	2000      	movs	r0, #0
 80014ec:	f001 fedc 	bl	80032a8 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 3
	frequency = calculate_main_frequency(3, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 80014f0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	2204      	movs	r2, #4
 80014fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014fc:	2003      	movs	r0, #3
 80014fe:	f7ff faa7 	bl	8000a50 <calculate_main_frequency>
 8001502:	ee07 0a90 	vmov	s15, r0
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    //frequency = frequency_calculation(2, Samples);
    // Calculate the peak value of channel 3
    peak = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001512:	2300      	movs	r3, #0
 8001514:	657b      	str	r3, [r7, #84]	; 0x54
 8001516:	e012      	b.n	800153e <MEAS_show_data+0x1fa>
        if (Samples[4 * i + 2] > peak) {
 8001518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	3308      	adds	r3, #8
 800151e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001520:	4413      	add	r3, r2
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001526:	429a      	cmp	r2, r3
 8001528:	d206      	bcs.n	8001538 <MEAS_show_data+0x1f4>
            peak = Samples[4 * i + 2];
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	3308      	adds	r3, #8
 8001530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001532:	4413      	add	r3, r2
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153a:	3301      	adds	r3, #1
 800153c:	657b      	str	r3, [r7, #84]	; 0x54
 800153e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001540:	2b3f      	cmp	r3, #63	; 0x3f
 8001542:	d9e9      	bls.n	8001518 <MEAS_show_data+0x1d4>
        }
    }
    peak -= 2048;
 8001544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001546:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800154a:	663b      	str	r3, [r7, #96]	; 0x60
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800154c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001550:	f001 fdf2 	bl	8003138 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C3:%4d f:%3d HZ ", (int)(peak), (float)(frequency));
 8001554:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8001556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001558:	f7ff f85e 	bl	8000618 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	1d38      	adds	r0, r7, #4
 8001562:	e9cd 2300 	strd	r2, r3, [sp]
 8001566:	4623      	mov	r3, r4
 8001568:	4a37      	ldr	r2, [pc, #220]	; (8001648 <MEAS_show_data+0x304>)
 800156a:	2128      	movs	r1, #40	; 0x28
 800156c:	f008 f85a 	bl	8009624 <sniprintf>
    // snprintf(text, 15, "C3 %4d", (int)(Samples[2]));
    BSP_LCD_DisplayStringAt(0, 200, (uint8_t*)text, LEFT_MODE);
 8001570:	1d3a      	adds	r2, r7, #4
 8001572:	2303      	movs	r3, #3
 8001574:	21c8      	movs	r1, #200	; 0xc8
 8001576:	2000      	movs	r0, #0
 8001578:	f001 fe96 	bl	80032a8 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 4
	frequency = calculate_main_frequency(4, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 800157c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	2204      	movs	r2, #4
 8001586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001588:	2004      	movs	r0, #4
 800158a:	f7ff fa61 	bl	8000a50 <calculate_main_frequency>
 800158e:	ee07 0a90 	vmov	s15, r0
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    //frequency = frequency_calculation(3, Samples);
    // Calculate the peak value of channel 4
    peak = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	653b      	str	r3, [r7, #80]	; 0x50
 80015a2:	e012      	b.n	80015ca <MEAS_show_data+0x286>
        if (Samples[4 * i + 3] > peak) {
 80015a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	330c      	adds	r3, #12
 80015aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ac:	4413      	add	r3, r2
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d206      	bcs.n	80015c4 <MEAS_show_data+0x280>
            peak = Samples[4 * i + 3];
 80015b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	330c      	adds	r3, #12
 80015bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015be:	4413      	add	r3, r2
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80015c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c6:	3301      	adds	r3, #1
 80015c8:	653b      	str	r3, [r7, #80]	; 0x50
 80015ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015cc:	2b3f      	cmp	r3, #63	; 0x3f
 80015ce:	d9e9      	bls.n	80015a4 <MEAS_show_data+0x260>
        }
    }
    peak -= 2048;
 80015d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015d2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80015d6:	663b      	str	r3, [r7, #96]	; 0x60
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80015d8:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80015dc:	f001 fdac 	bl	8003138 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C4:%4d f:%3d HZ", (int)(peak), (float)(frequency));
 80015e0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80015e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015e4:	f7ff f818 	bl	8000618 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	1d38      	adds	r0, r7, #4
 80015ee:	e9cd 2300 	strd	r2, r3, [sp]
 80015f2:	4623      	mov	r3, r4
 80015f4:	4a15      	ldr	r2, [pc, #84]	; (800164c <MEAS_show_data+0x308>)
 80015f6:	2128      	movs	r1, #40	; 0x28
 80015f8:	f008 f814 	bl	8009624 <sniprintf>
    // snprintf(text, 15, "C4 %4d", (int)(Samples[3]));
    BSP_LCD_DisplayStringAt(0, 230, (uint8_t*)text, LEFT_MODE);
 80015fc:	1d3a      	adds	r2, r7, #4
 80015fe:	2303      	movs	r3, #3
 8001600:	21e6      	movs	r1, #230	; 0xe6
 8001602:	2000      	movs	r0, #0
 8001604:	f001 fe50 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    /* Draw the  values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8001608:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800160c:	f001 fd94 	bl	8003138 <BSP_LCD_SetTextColor>
    data = Samples[0] / f;
 8001610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	667b      	str	r3, [r7, #100]	; 0x64
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001620:	e042      	b.n	80016a8 <MEAS_show_data+0x364>
 8001622:	bf00      	nop
 8001624:	20000364 	.word	0x20000364
 8001628:	0800a00c 	.word	0x0800a00c
 800162c:	0800a024 	.word	0x0800a024
 8001630:	0800a040 	.word	0x0800a040
 8001634:	0800a054 	.word	0x0800a054
 8001638:	20000354 	.word	0x20000354
 800163c:	0800a074 	.word	0x0800a074
 8001640:	ffff0000 	.word	0xffff0000
 8001644:	0800a084 	.word	0x0800a084
 8001648:	0800a094 	.word	0x0800a094
 800164c:	0800a0a8 	.word	0x0800a0a8
        data_last = data;
 8001650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
        data = (Samples[4 * i]) / f;
 8001654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800165a:	4413      	add	r3, r2
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	667b      	str	r3, [r7, #100]	; 0x64
        if (data > Y_OFFSET) {
 8001666:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	429a      	cmp	r2, r3
 800166c:	d901      	bls.n	8001672 <MEAS_show_data+0x32e>
            data = Y_OFFSET;
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	667b      	str	r3, [r7, #100]	; 0x64
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001674:	3b01      	subs	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	b298      	uxth	r0, r3
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	b29a      	uxth	r2, r3
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	b29b      	uxth	r3, r3
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	b299      	uxth	r1, r3
 8001688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168a:	b29b      	uxth	r3, r3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	b29c      	uxth	r4, r3
 8001690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001692:	b29a      	uxth	r2, r3
 8001694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001696:	b29b      	uxth	r3, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b29b      	uxth	r3, r3
 800169c:	4622      	mov	r2, r4
 800169e:	f001 fec1 	bl	8003424 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80016a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a4:	3301      	adds	r3, #1
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016aa:	2b3f      	cmp	r3, #63	; 0x3f
 80016ac:	d9d0      	bls.n	8001650 <MEAS_show_data+0x30c>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 2 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80016ae:	485f      	ldr	r0, [pc, #380]	; (800182c <MEAS_show_data+0x4e8>)
 80016b0:	f001 fd42 	bl	8003138 <BSP_LCD_SetTextColor>
    data = Samples[1] / f;
 80016b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b6:	3304      	adds	r3, #4
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	667b      	str	r3, [r7, #100]	; 0x64
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c6:	e02c      	b.n	8001722 <MEAS_show_data+0x3de>
        data_last = data;
 80016c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
        data = (Samples[4 * i + 1]) / f;
 80016cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	3304      	adds	r3, #4
 80016d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016d4:	4413      	add	r3, r2
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	667b      	str	r3, [r7, #100]	; 0x64
        if (data > Y_OFFSET) {
 80016e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d901      	bls.n	80016ec <MEAS_show_data+0x3a8>
            data = Y_OFFSET;
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ea:	667b      	str	r3, [r7, #100]	; 0x64
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 80016ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	b298      	uxth	r0, r3
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b299      	uxth	r1, r3
 8001702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001704:	b29b      	uxth	r3, r3
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	b29c      	uxth	r4, r3
 800170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170c:	b29a      	uxth	r2, r3
 800170e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001710:	b29b      	uxth	r3, r3
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	b29b      	uxth	r3, r3
 8001716:	4622      	mov	r2, r4
 8001718:	f001 fe84 	bl	8003424 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800171c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800171e:	3301      	adds	r3, #1
 8001720:	64bb      	str	r3, [r7, #72]	; 0x48
 8001722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001724:	2b3f      	cmp	r3, #63	; 0x3f
 8001726:	d9cf      	bls.n	80016c8 <MEAS_show_data+0x384>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 3 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001728:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800172c:	f001 fd04 	bl	8003138 <BSP_LCD_SetTextColor>
    data = Samples[2] / f;
 8001730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001732:	3308      	adds	r3, #8
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	fbb2 f3f3 	udiv	r3, r2, r3
 800173c:	667b      	str	r3, [r7, #100]	; 0x64
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800173e:	2300      	movs	r3, #0
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
 8001742:	e02c      	b.n	800179e <MEAS_show_data+0x45a>
        data_last = data;
 8001744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
        data = (Samples[4 * i + 2]) / f;
 8001748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	3308      	adds	r3, #8
 800174e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001750:	4413      	add	r3, r2
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	667b      	str	r3, [r7, #100]	; 0x64
        if (data > Y_OFFSET) {
 800175c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	429a      	cmp	r2, r3
 8001762:	d901      	bls.n	8001768 <MEAS_show_data+0x424>
            data = Y_OFFSET;
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	667b      	str	r3, [r7, #100]	; 0x64
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800176a:	3b01      	subs	r3, #1
 800176c:	b29b      	uxth	r3, r3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	b298      	uxth	r0, r3
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	b29a      	uxth	r2, r3
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	b29b      	uxth	r3, r3
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	b299      	uxth	r1, r3
 800177e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001780:	b29b      	uxth	r3, r3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	b29c      	uxth	r4, r3
 8001786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001788:	b29a      	uxth	r2, r3
 800178a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800178c:	b29b      	uxth	r3, r3
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	b29b      	uxth	r3, r3
 8001792:	4622      	mov	r2, r4
 8001794:	f001 fe46 	bl	8003424 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800179a:	3301      	adds	r3, #1
 800179c:	647b      	str	r3, [r7, #68]	; 0x44
 800179e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a0:	2b3f      	cmp	r3, #63	; 0x3f
 80017a2:	d9cf      	bls.n	8001744 <MEAS_show_data+0x400>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 4 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80017a4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80017a8:	f001 fcc6 	bl	8003138 <BSP_LCD_SetTextColor>
    data = Samples[3] / f;
 80017ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ae:	330c      	adds	r3, #12
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	667b      	str	r3, [r7, #100]	; 0x64
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	643b      	str	r3, [r7, #64]	; 0x40
 80017be:	e02c      	b.n	800181a <MEAS_show_data+0x4d6>
        data_last = data;
 80017c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
        data = (Samples[4 * i + 3]) / f;
 80017c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	330c      	adds	r3, #12
 80017ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017cc:	4413      	add	r3, r2
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	667b      	str	r3, [r7, #100]	; 0x64
        if (data > Y_OFFSET) {
 80017d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017dc:	429a      	cmp	r2, r3
 80017de:	d901      	bls.n	80017e4 <MEAS_show_data+0x4a0>
            data = Y_OFFSET;
 80017e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e2:	667b      	str	r3, [r7, #100]	; 0x64
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 80017e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	b298      	uxth	r0, r3
 80017ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	b299      	uxth	r1, r3
 80017fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	b29c      	uxth	r4, r3
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	b29a      	uxth	r2, r3
 8001806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001808:	b29b      	uxth	r3, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b29b      	uxth	r3, r3
 800180e:	4622      	mov	r2, r4
 8001810:	f001 fe08 	bl	8003424 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001816:	3301      	adds	r3, #1
 8001818:	643b      	str	r3, [r7, #64]	; 0x40
 800181a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800181c:	2b3f      	cmp	r3, #63	; 0x3f
 800181e:	d9cf      	bls.n	80017c0 <MEAS_show_data+0x47c>
                         Y_OFFSET - data);
    }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	376c      	adds	r7, #108	; 0x6c
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	bf00      	nop
 800182c:	ffff0000 	.word	0xffff0000

08001830 <TIM3_IRQHandler>:
 *
 * This function is called when the update interrupt flag of TIM3 is set.
 * It clears the update interrupt flag and calls the MEAS_show_data() function
 * to output data to the display.
 */
void TIM3_IRQHandler(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {  // check if update interrupt flag is set
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <TIM3_IRQHandler+0x24>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <TIM3_IRQHandler+0x20>
        TIM3->SR &= ~TIM_SR_UIF;  // clear update interrupt flag
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <TIM3_IRQHandler+0x24>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <TIM3_IRQHandler+0x24>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6113      	str	r3, [r2, #16]
        MEAS_show_data();         // output data to display
 800184c:	f7ff fd7a 	bl	8001344 <MEAS_show_data>
    }
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40000400 	.word	0x40000400

08001858 <DISP_info_screen>:
 * @brief Displays the info screen
 * @param[in] type	Actual menu type
 *
 * Displays the title and information on each screen.
 *****************************************************************************/
void DISP_info_screen(MENU_type_t type) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_Clear(LCD_COLOR_WHITE);  // Clear display
 8001862:	f04f 30ff 	mov.w	r0, #4294967295
 8001866:	f001 fcb3 	bl	80031d0 <BSP_LCD_Clear>
    MENU_draw(type);                 // Draw the home menu
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f85f 	bl	8001930 <MENU_draw>

    switch (type) {
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d847      	bhi.n	8001908 <DISP_info_screen+0xb0>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <DISP_info_screen+0x28>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	080018a1 	.word	0x080018a1
 8001884:	080018b5 	.word	0x080018b5
 8001888:	080018c3 	.word	0x080018c3
 800188c:	080018d1 	.word	0x080018d1
 8001890:	080018df 	.word	0x080018df
 8001894:	080018ed 	.word	0x080018ed
 8001898:	080018fb 	.word	0x080018fb
 800189c:	080018af 	.word	0x080018af
        case MENU_HOME:
            /* Show info home */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: HOME", LEFT_MODE);
 80018a0:	2303      	movs	r3, #3
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <DISP_info_screen+0xbc>)
 80018a4:	213c      	movs	r1, #60	; 0x3c
 80018a6:	2005      	movs	r0, #5
 80018a8:	f001 fcfe 	bl	80032a8 <BSP_LCD_DisplayStringAt>
            break;
 80018ac:	e02d      	b.n	800190a <DISP_info_screen+0xb2>

        case MENU_INFO:
            /* Show info info */
            MENU_Info();
 80018ae:	f000 f903 	bl	8001ab8 <MENU_Info>
            break;
 80018b2:	e02a      	b.n	800190a <DISP_info_screen+0xb2>

        case MENU_M:
            /* Show measurement menu */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Measurement",
 80018b4:	2303      	movs	r3, #3
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <DISP_info_screen+0xc0>)
 80018b8:	213c      	movs	r1, #60	; 0x3c
 80018ba:	2005      	movs	r0, #5
 80018bc:	f001 fcf4 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);

            
            // MENU_Measurements();
            break;
 80018c0:	e023      	b.n	800190a <DISP_info_screen+0xb2>

        case MENU_M_SI:
            /* Show info single meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. Single",
 80018c2:	2303      	movs	r3, #3
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <DISP_info_screen+0xc4>)
 80018c6:	213c      	movs	r1, #60	; 0x3c
 80018c8:	2005      	movs	r0, #5
 80018ca:	f001 fced 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Single Meas.");
            break;
 80018ce:	e01c      	b.n	800190a <DISP_info_screen+0xb2>
        case MENU_M_AC:
            /* Show info accurate meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. acc",
 80018d0:	2303      	movs	r3, #3
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <DISP_info_screen+0xc8>)
 80018d4:	213c      	movs	r1, #60	; 0x3c
 80018d6:	2005      	movs	r0, #5
 80018d8:	f001 fce6 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Accurate Meas.");
            break;
 80018dc:	e015      	b.n	800190a <DISP_info_screen+0xb2>
        case MENU_CALI:
            /* Show info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: calibration",
 80018de:	2303      	movs	r3, #3
 80018e0:	4a10      	ldr	r2, [pc, #64]	; (8001924 <DISP_info_screen+0xcc>)
 80018e2:	213c      	movs	r1, #60	; 0x3c
 80018e4:	2005      	movs	r0, #5
 80018e6:	f001 fcdf 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // MENU_Calibrations();
            // DISP_info_calibration();
            break;
 80018ea:	e00e      	b.n	800190a <DISP_info_screen+0xb2>
        case MENU_C_CO:
            /* Show coil info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali coil",
 80018ec:	2303      	movs	r3, #3
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <DISP_info_screen+0xd0>)
 80018f0:	213c      	movs	r1, #60	; 0x3c
 80018f2:	2005      	movs	r0, #5
 80018f4:	f001 fcd8 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_coil();
            break;
 80018f8:	e007      	b.n	800190a <DISP_info_screen+0xb2>
        case MENU_C_PA:
            /* Show pad info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali pad",
 80018fa:	2303      	movs	r3, #3
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <DISP_info_screen+0xd4>)
 80018fe:	213c      	movs	r1, #60	; 0x3c
 8001900:	2005      	movs	r0, #5
 8001902:	f001 fcd1 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_pad();
            break;
 8001906:	e000      	b.n	800190a <DISP_info_screen+0xb2>
        default:
            /* Should never occur */
            break;
 8001908:	bf00      	nop
    }
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	0800a0b8 	.word	0x0800a0b8
 8001918:	0800a0c4 	.word	0x0800a0c4
 800191c:	0800a0d8 	.word	0x0800a0d8
 8001920:	0800a0ec 	.word	0x0800a0ec
 8001924:	0800a0fc 	.word	0x0800a0fc
 8001928:	0800a110 	.word	0x0800a110
 800192c:	0800a120 	.word	0x0800a120

08001930 <MENU_draw>:
 *
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(MENU_type_t type) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_SetFont(MENU_FONT);
 800193a:	485c      	ldr	r0, [pc, #368]	; (8001aac <MENU_draw+0x17c>)
 800193c:	f001 fc2e 	bl	800319c <BSP_LCD_SetFont>
    uint32_t x, y, m, w, h, offset;
    y = MENU_Y;
 8001940:	f001 fb7a 	bl	8003038 <BSP_LCD_GetYSize>
 8001944:	4603      	mov	r3, r0
 8001946:	3b28      	subs	r3, #40	; 0x28
 8001948:	61fb      	str	r3, [r7, #28]
    m = MENU_MARGIN;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    w = BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM;
 800194e:	f001 fb67 	bl	8003020 <BSP_LCD_GetXSize>
 8001952:	4603      	mov	r3, r0
 8001954:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <MENU_draw+0x180>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	617b      	str	r3, [r7, #20]
    h = MENU_HEIGHT;
 800195e:	2328      	movs	r3, #40	; 0x28
 8001960:	613b      	str	r3, [r7, #16]
    offset = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    if (type < MENU_NUM_OF_DIFF_MENU) {
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d804      	bhi.n	8001976 <MENU_draw+0x46>
        offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the menu
 800196c:	79fa      	ldrb	r2, [r7, #7]
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
 800197a:	e08e      	b.n	8001a9a <MENU_draw+0x16a>
        x = i * w;
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	60fb      	str	r3, [r7, #12]
        BSP_LCD_SetTextColor(MENU_entry[i + offset].back_color);
 8001986:	6a3a      	ldr	r2, [r7, #32]
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	441a      	add	r2, r3
 800198c:	4949      	ldr	r1, [pc, #292]	; (8001ab4 <MENU_draw+0x184>)
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3324      	adds	r3, #36	; 0x24
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fbcb 	bl	8003138 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(x + m, y + m, w - 2 * m, h - 2 * m);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b298      	uxth	r0, r3
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	b299      	uxth	r1, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29c      	uxth	r4, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4622      	mov	r2, r4
 80019dc:	f001 fdec 	bl	80035b8 <BSP_LCD_FillRect>
        BSP_LCD_SetBackColor(MENU_entry[i + offset].back_color);
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	441a      	add	r2, r3
 80019e6:	4933      	ldr	r1, [pc, #204]	; (8001ab4 <MENU_draw+0x184>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	3324      	adds	r3, #36	; 0x24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fbb6 	bl	8003168 <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(MENU_entry[i + offset].text_color);
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	441a      	add	r2, r3
 8001a02:	492c      	ldr	r1, [pc, #176]	; (8001ab4 <MENU_draw+0x184>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3320      	adds	r3, #32
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fb90 	bl	8003138 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b298      	uxth	r0, r3
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	0052      	lsls	r2, r2, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line1,
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	441a      	add	r2, r3
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <MENU_draw+0x184>)
 8001a50:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 8001a52:	2303      	movs	r3, #3
 8001a54:	f001 fc28 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                                LEFT_MODE);
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	0052      	lsls	r2, r2, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b298      	uxth	r0, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line2,
 8001a7a:	6a3a      	ldr	r2, [r7, #32]
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	441a      	add	r2, r3
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	3310      	adds	r3, #16
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <MENU_draw+0x184>)
 8001a8c:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f001 fc0a 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	3301      	adds	r3, #1
 8001a98:	623b      	str	r3, [r7, #32]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	f67f af6d 	bls.w	800197c <MENU_draw+0x4c>
                                LEFT_MODE);
    }
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	372c      	adds	r7, #44	; 0x2c
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	20000364 	.word	0x20000364
 8001ab0:	aaaaaaab 	.word	0xaaaaaaab
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <MENU_Info>:

/** ***************************************************************************
 * @brief Show some information about the Cable-Monitor.
 *
 *****************************************************************************/
void MENU_Info(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f001 fb52 	bl	8003168 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ac4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ac8:	f001 fb36 	bl	8003138 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001acc:	4829      	ldr	r0, [pc, #164]	; (8001b74 <MENU_Info+0xbc>)
 8001ace:	f001 fb65 	bl	800319c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Cable-Monitor", CENTER_MODE);
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <MENU_Info+0xc0>)
 8001ad6:	210a      	movs	r1, #10
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f001 fbe5 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font12);
 8001ade:	4827      	ldr	r0, [pc, #156]	; (8001b7c <MENU_Info+0xc4>)
 8001ae0:	f001 fb5c 	bl	800319c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"by Alejandro & Timo",
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <MENU_Info+0xc8>)
 8001ae8:	211e      	movs	r1, #30
 8001aea:	2000      	movs	r0, #0
 8001aec:	f001 fbdc 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
 8001af0:	4824      	ldr	r0, [pc, #144]	; (8001b84 <MENU_Info+0xcc>)
 8001af2:	f001 fb53 	bl	800319c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"1. Touch a menu item", LEFT_MODE);
 8001af6:	2303      	movs	r3, #3
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <MENU_Info+0xd0>)
 8001afa:	213c      	movs	r1, #60	; 0x3c
 8001afc:	2005      	movs	r0, #5
 8001afe:	f001 fbd3 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 80, (uint8_t*)"to start a cable", LEFT_MODE);
 8001b02:	2303      	movs	r3, #3
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <MENU_Info+0xd4>)
 8001b06:	2150      	movs	r1, #80	; 0x50
 8001b08:	2005      	movs	r0, #5
 8001b0a:	f001 fbcd 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 100, (uint8_t*)"measurement:", LEFT_MODE);
 8001b0e:	2303      	movs	r3, #3
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <MENU_Info+0xd8>)
 8001b12:	2164      	movs	r1, #100	; 0x64
 8001b14:	2005      	movs	r0, #5
 8001b16:	f001 fbc7 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 120, (uint8_t*)"Single or Accurate.", LEFT_MODE);
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <MENU_Info+0xdc>)
 8001b1e:	2178      	movs	r1, #120	; 0x78
 8001b20:	2005      	movs	r0, #5
 8001b22:	f001 fbc1 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 150, (uint8_t*)"Version: 01.00", LEFT_MODE);
 8001b26:	2303      	movs	r3, #3
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <MENU_Info+0xe0>)
 8001b2a:	2196      	movs	r1, #150	; 0x96
 8001b2c:	2005      	movs	r0, #5
 8001b2e:	f001 fbbb 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 170, (uint8_t*)"Data: 17.12.2023", LEFT_MODE);
 8001b32:	2303      	movs	r3, #3
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <MENU_Info+0xe4>)
 8001b36:	21aa      	movs	r1, #170	; 0xaa
 8001b38:	2005      	movs	r0, #5
 8001b3a:	f001 fbb5 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 190, (uint8_t*)"Authors: Horvat, Wey",
 8001b3e:	2303      	movs	r3, #3
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <MENU_Info+0xe8>)
 8001b42:	21be      	movs	r1, #190	; 0xbe
 8001b44:	2005      	movs	r0, #5
 8001b46:	f001 fbaf 	bl	80032a8 <BSP_LCD_DisplayStringAt>
                            LEFT_MODE);
    BSP_LCD_DisplayStringAt(5, 210, (uint8_t*)"Modul: ET.PM3 ZHAW", LEFT_MODE);
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MENU_Info+0xec>)
 8001b4e:	21d2      	movs	r1, #210	; 0xd2
 8001b50:	2005      	movs	r0, #5
 8001b52:	f001 fba9 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 230, (uint8_t*)"Lecturers: Matic &", LEFT_MODE);
 8001b56:	2303      	movs	r3, #3
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <MENU_Info+0xf0>)
 8001b5a:	21e6      	movs	r1, #230	; 0xe6
 8001b5c:	2005      	movs	r0, #5
 8001b5e:	f001 fba3 	bl	80032a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 250, (uint8_t*)"Ehrensperger", LEFT_MODE);
 8001b62:	2303      	movs	r3, #3
 8001b64:	4a11      	ldr	r2, [pc, #68]	; (8001bac <MENU_Info+0xf4>)
 8001b66:	21fa      	movs	r1, #250	; 0xfa
 8001b68:	2005      	movs	r0, #5
 8001b6a:	f001 fb9d 	bl	80032a8 <BSP_LCD_DisplayStringAt>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000034c 	.word	0x2000034c
 8001b78:	0800a130 	.word	0x0800a130
 8001b7c:	20000364 	.word	0x20000364
 8001b80:	0800a140 	.word	0x0800a140
 8001b84:	2000035c 	.word	0x2000035c
 8001b88:	0800a154 	.word	0x0800a154
 8001b8c:	0800a16c 	.word	0x0800a16c
 8001b90:	0800a180 	.word	0x0800a180
 8001b94:	0800a190 	.word	0x0800a190
 8001b98:	0800a1a4 	.word	0x0800a1a4
 8001b9c:	0800a1b4 	.word	0x0800a1b4
 8001ba0:	0800a1c8 	.word	0x0800a1c8
 8001ba4:	0800a1e0 	.word	0x0800a1e0
 8001ba8:	0800a1f4 	.word	0x0800a1f4
 8001bac:	0800a208 	.word	0x0800a208

08001bb0 <MENU_check_transition>:
 * the variable MENU_transition is set to the touched item.
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
static void MENU_check_transition(MENU_type_t type) {
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    static MENU_item_t item_old = MENU_NONE;
    static MENU_item_t item_new = MENU_NONE;
    static TS_StateTypeDef TS_State;  // State of the touch controller
    uint32_t offset = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
    BSP_TS_GetState(&TS_State);  // Get the state
 8001bbe:	482d      	ldr	r0, [pc, #180]	; (8001c74 <MENU_check_transition+0xc4>)
 8001bc0:	f002 f9b0 	bl	8003f24 <BSP_TS_GetState>
#ifdef EVAL_REV_E
    /* Evalboard revision E (blue) has an inverted y-axis in the touch
     * controller */
    TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;  // Invert the y-axis
 8001bc4:	f001 fa38 	bl	8003038 <BSP_LCD_GetYSize>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <MENU_check_transition+0xc4>)
 8001bce:	889b      	ldrh	r3, [r3, #4]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <MENU_check_transition+0xc4>)
 8001bd6:	809a      	strh	r2, [r3, #4]
#endif
    if (TS_State.TouchDetected) {  // If a touch was detected
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <MENU_check_transition+0xc4>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d045      	beq.n	8001c6c <MENU_check_transition+0xbc>
        /* Do only if last transition not pending anymore */
        if (MENU_NONE == MENU_transition) {
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <MENU_check_transition+0xc8>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b15      	cmp	r3, #21
 8001be6:	d141      	bne.n	8001c6c <MENU_check_transition+0xbc>
            item_old = item_new;  // Store old item
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <MENU_check_transition+0xcc>)
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <MENU_check_transition+0xd0>)
 8001bee:	701a      	strb	r2, [r3, #0]
            /* If touched within the menu bar? */
            if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8001bf0:	f001 fa22 	bl	8003038 <BSP_LCD_GetYSize>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	3b28      	subs	r3, #40	; 0x28
 8001bf8:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <MENU_check_transition+0xc4>)
 8001bfa:	8892      	ldrh	r2, [r2, #4]
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d235      	bcs.n	8001c6c <MENU_check_transition+0xbc>
 8001c00:	f001 fa1a 	bl	8003038 <BSP_LCD_GetYSize>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <MENU_check_transition+0xc4>)
 8001c08:	8892      	ldrh	r2, [r2, #4]
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d92e      	bls.n	8001c6c <MENU_check_transition+0xbc>
                if (type < MENU_NUM_OF_DIFF_MENU) {
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d804      	bhi.n	8001c1e <MENU_check_transition+0x6e>
                    offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
                                                            // menu
                }
                item_new = (TS_State.X  // Calculate new item
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MENU_check_transition+0xc4>)
 8001c20:	885b      	ldrh	r3, [r3, #2]
 8001c22:	461c      	mov	r4, r3
                            / (BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM)) +
 8001c24:	f001 f9fc 	bl	8003020 <BSP_LCD_GetXSize>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <MENU_check_transition+0xd4>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b2da      	uxtb	r2, r3
                item_new = (TS_State.X  // Calculate new item
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MENU_check_transition+0xcc>)
 8001c42:	701a      	strb	r2, [r3, #0]
                           offset;
                if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <MENU_check_transition+0xcc>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b11      	cmp	r3, #17
 8001c4a:	d902      	bls.n	8001c52 <MENU_check_transition+0xa2>
                    item_new = MENU_NONE;  // Out of bounds
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MENU_check_transition+0xcc>)
 8001c4e:	2215      	movs	r2, #21
 8001c50:	701a      	strb	r2, [r3, #0]
                }
                if (item_new == item_old) {  // 2 times the same menu item
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MENU_check_transition+0xcc>)
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <MENU_check_transition+0xd0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d106      	bne.n	8001c6c <MENU_check_transition+0xbc>
                    item_new = MENU_NONE;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MENU_check_transition+0xcc>)
 8001c60:	2215      	movs	r2, #21
 8001c62:	701a      	strb	r2, [r3, #0]
                    MENU_transition = item_old;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MENU_check_transition+0xd0>)
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <MENU_check_transition+0xc8>)
 8001c6a:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	200007e8 	.word	0x200007e8
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	200002d4 	.word	0x200002d4
 8001c80:	200002d5 	.word	0x200002d5
 8001c84:	aaaaaaab 	.word	0xaaaaaaab

08001c88 <EXTI15_10_IRQHandler>:
 * @n Call MENU_check_transition() from the while loop in main for polling.
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR15) {   // Check if interrupt on touchscreen
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <EXTI15_10_IRQHandler+0x40>)
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <EXTI15_10_IRQHandler+0x3c>
        EXTI->PR |= EXTI_PR_PR15;    // Clear pending interrupt on line 15
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <EXTI15_10_IRQHandler+0x40>)
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <EXTI15_10_IRQHandler+0x40>)
 8001c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca2:	6153      	str	r3, [r2, #20]
        if (BSP_TS_ITGetStatus()) {  // Get interrupt status
 8001ca4:	f002 f932 	bl	8003f0c <BSP_TS_ITGetStatus>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <EXTI15_10_IRQHandler+0x30>
            BSP_TS_ITClear();        // Clear touchscreen controller int.
 8001cae:	f002 f9eb 	bl	8004088 <BSP_TS_ITClear>
            MENU_check_transition(MENU_NONE);
 8001cb2:	2015      	movs	r0, #21
 8001cb4:	f7ff ff7c 	bl	8001bb0 <MENU_check_transition>
        }
        EXTI->PR |= EXTI_PR_PR15;  // Clear pending interrupt on line 15
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <EXTI15_10_IRQHandler+0x40>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	4a02      	ldr	r2, [pc, #8]	; (8001cc8 <EXTI15_10_IRQHandler+0x40>)
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc2:	6153      	str	r3, [r2, #20]
    }
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <__NVIC_EnableIRQ>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_ClearPendingIRQ>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0c      	blt.n	8001d34 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_ClearPendingIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	3360      	adds	r3, #96	; 0x60
 8001d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <PB_init+0x38>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <PB_init+0x38>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <PB_init+0x38>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <PB_init+0x3c>)
 8001d68:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <PB_init+0x3c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6013      	str	r3, [r2, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000

08001d84 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <PB_enableIRQ+0x58>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <PB_enableIRQ+0x58>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <PB_enableIRQ+0x58>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <PB_enableIRQ+0x5c>)
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <PB_enableIRQ+0x5c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <PB_enableIRQ+0x60>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <PB_enableIRQ+0x60>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <PB_enableIRQ+0x60>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <PB_enableIRQ+0x60>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001dc6:	2006      	movs	r0, #6
 8001dc8:	f7ff ff9e 	bl	8001d08 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001dcc:	2006      	movs	r0, #6
 8001dce:	f7ff ff7d 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <EXTI0_IRQHandler+0x2c>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <EXTI0_IRQHandler+0x2c>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <EXTI0_IRQHandler+0x2c>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <EXTI0_IRQHandler+0x30>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
	}
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40013c00 	.word	0x40013c00
 8001e18:	200007f0 	.word	0x200007f0

08001e1c <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001e70:	f002 f970 	bl	8004154 <HAL_IncTick>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <SystemInit+0x60>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <SystemInit+0x60>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <SystemInit+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <SystemInit+0x64>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <SystemInit+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <SystemInit+0x64>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <SystemInit+0x64>)
 8001ea4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <SystemInit+0x64>)
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <SystemInit+0x68>)
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <SystemInit+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <SystemInit+0x64>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <SystemInit+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <SystemInit+0x60>)
 8001ec8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ecc:	609a      	str	r2, [r3, #8]
#endif
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	24003010 	.word	0x24003010

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
  ldr  r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ffb3 	bl	8001e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f007 fbc3 	bl	800969c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7fe fe57 	bl	8000bc8 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f1c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f20:	080210e4 	.word	0x080210e4
  ldr  r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f28:	200003c8 	.word	0x200003c8
  ldr  r2, =_sbss
 8001f2c:	200003c8 	.word	0x200003c8
  ldr  r3, = _ebss
 8001f30:	20000c04 	.word	0x20000c04

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>

08001f36 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f3a:	f000 feb9 	bl	8002cb0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001f3e:	20ca      	movs	r0, #202	; 0xca
 8001f40:	f000 f95d 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001f44:	20c3      	movs	r0, #195	; 0xc3
 8001f46:	f000 f967 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001f4a:	2008      	movs	r0, #8
 8001f4c:	f000 f964 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001f50:	2050      	movs	r0, #80	; 0x50
 8001f52:	f000 f961 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001f56:	20cf      	movs	r0, #207	; 0xcf
 8001f58:	f000 f951 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 f95b 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001f62:	20c1      	movs	r0, #193	; 0xc1
 8001f64:	f000 f958 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001f68:	2030      	movs	r0, #48	; 0x30
 8001f6a:	f000 f955 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001f6e:	20ed      	movs	r0, #237	; 0xed
 8001f70:	f000 f945 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f000 f94f 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f000 f94c 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001f80:	2012      	movs	r0, #18
 8001f82:	f000 f949 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001f86:	2081      	movs	r0, #129	; 0x81
 8001f88:	f000 f946 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001f8c:	20e8      	movs	r0, #232	; 0xe8
 8001f8e:	f000 f936 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001f92:	2085      	movs	r0, #133	; 0x85
 8001f94:	f000 f940 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 f93d 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 f93a 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001fa4:	20cb      	movs	r0, #203	; 0xcb
 8001fa6:	f000 f92a 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001faa:	2039      	movs	r0, #57	; 0x39
 8001fac:	f000 f934 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001fb0:	202c      	movs	r0, #44	; 0x2c
 8001fb2:	f000 f931 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f92e 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001fbc:	2034      	movs	r0, #52	; 0x34
 8001fbe:	f000 f92b 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	f000 f928 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001fc8:	20f7      	movs	r0, #247	; 0xf7
 8001fca:	f000 f918 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001fce:	2020      	movs	r0, #32
 8001fd0:	f000 f922 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001fd4:	20ea      	movs	r0, #234	; 0xea
 8001fd6:	f000 f912 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f91c 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 f919 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001fe6:	20b1      	movs	r0, #177	; 0xb1
 8001fe8:	f000 f909 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f913 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ff2:	201b      	movs	r0, #27
 8001ff4:	f000 f910 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ff8:	20b6      	movs	r0, #182	; 0xb6
 8001ffa:	f000 f900 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001ffe:	200a      	movs	r0, #10
 8002000:	f000 f90a 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002004:	20a2      	movs	r0, #162	; 0xa2
 8002006:	f000 f907 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800200a:	20c0      	movs	r0, #192	; 0xc0
 800200c:	f000 f8f7 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002010:	2010      	movs	r0, #16
 8002012:	f000 f901 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002016:	20c1      	movs	r0, #193	; 0xc1
 8002018:	f000 f8f1 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800201c:	2010      	movs	r0, #16
 800201e:	f000 f8fb 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002022:	20c5      	movs	r0, #197	; 0xc5
 8002024:	f000 f8eb 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002028:	2045      	movs	r0, #69	; 0x45
 800202a:	f000 f8f5 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800202e:	2015      	movs	r0, #21
 8002030:	f000 f8f2 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002034:	20c7      	movs	r0, #199	; 0xc7
 8002036:	f000 f8e2 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800203a:	2090      	movs	r0, #144	; 0x90
 800203c:	f000 f8ec 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002040:	2036      	movs	r0, #54	; 0x36
 8002042:	f000 f8dc 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002046:	20c8      	movs	r0, #200	; 0xc8
 8002048:	f000 f8e6 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800204c:	20f2      	movs	r0, #242	; 0xf2
 800204e:	f000 f8d6 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f8e0 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002058:	20b0      	movs	r0, #176	; 0xb0
 800205a:	f000 f8d0 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800205e:	20c2      	movs	r0, #194	; 0xc2
 8002060:	f000 f8da 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002064:	20b6      	movs	r0, #182	; 0xb6
 8002066:	f000 f8ca 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800206a:	200a      	movs	r0, #10
 800206c:	f000 f8d4 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002070:	20a7      	movs	r0, #167	; 0xa7
 8002072:	f000 f8d1 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002076:	2027      	movs	r0, #39	; 0x27
 8002078:	f000 f8ce 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800207c:	2004      	movs	r0, #4
 800207e:	f000 f8cb 	bl	8002218 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002082:	202a      	movs	r0, #42	; 0x2a
 8002084:	f000 f8bb 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002088:	2000      	movs	r0, #0
 800208a:	f000 f8c5 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f8c2 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002094:	2000      	movs	r0, #0
 8002096:	f000 f8bf 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800209a:	20ef      	movs	r0, #239	; 0xef
 800209c:	f000 f8bc 	bl	8002218 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80020a0:	202b      	movs	r0, #43	; 0x2b
 80020a2:	f000 f8ac 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f000 f8b6 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f8b3 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f000 f8b0 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80020b8:	203f      	movs	r0, #63	; 0x3f
 80020ba:	f000 f8ad 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80020be:	20f6      	movs	r0, #246	; 0xf6
 80020c0:	f000 f89d 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f000 f8a7 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 f8a4 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80020d0:	2006      	movs	r0, #6
 80020d2:	f000 f8a1 	bl	8002218 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80020d6:	202c      	movs	r0, #44	; 0x2c
 80020d8:	f000 f891 	bl	80021fe <ili9341_WriteReg>
  LCD_Delay(200);
 80020dc:	20c8      	movs	r0, #200	; 0xc8
 80020de:	f000 fed5 	bl	8002e8c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80020e2:	2026      	movs	r0, #38	; 0x26
 80020e4:	f000 f88b 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f000 f895 	bl	8002218 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80020ee:	20e0      	movs	r0, #224	; 0xe0
 80020f0:	f000 f885 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80020f4:	200f      	movs	r0, #15
 80020f6:	f000 f88f 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80020fa:	2029      	movs	r0, #41	; 0x29
 80020fc:	f000 f88c 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002100:	2024      	movs	r0, #36	; 0x24
 8002102:	f000 f889 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002106:	200c      	movs	r0, #12
 8002108:	f000 f886 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800210c:	200e      	movs	r0, #14
 800210e:	f000 f883 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002112:	2009      	movs	r0, #9
 8002114:	f000 f880 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002118:	204e      	movs	r0, #78	; 0x4e
 800211a:	f000 f87d 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800211e:	2078      	movs	r0, #120	; 0x78
 8002120:	f000 f87a 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002124:	203c      	movs	r0, #60	; 0x3c
 8002126:	f000 f877 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800212a:	2009      	movs	r0, #9
 800212c:	f000 f874 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002130:	2013      	movs	r0, #19
 8002132:	f000 f871 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002136:	2005      	movs	r0, #5
 8002138:	f000 f86e 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800213c:	2017      	movs	r0, #23
 800213e:	f000 f86b 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002142:	2011      	movs	r0, #17
 8002144:	f000 f868 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002148:	2000      	movs	r0, #0
 800214a:	f000 f865 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800214e:	20e1      	movs	r0, #225	; 0xe1
 8002150:	f000 f855 	bl	80021fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002154:	2000      	movs	r0, #0
 8002156:	f000 f85f 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800215a:	2016      	movs	r0, #22
 800215c:	f000 f85c 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002160:	201b      	movs	r0, #27
 8002162:	f000 f859 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002166:	2004      	movs	r0, #4
 8002168:	f000 f856 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800216c:	2011      	movs	r0, #17
 800216e:	f000 f853 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002172:	2007      	movs	r0, #7
 8002174:	f000 f850 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002178:	2031      	movs	r0, #49	; 0x31
 800217a:	f000 f84d 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800217e:	2033      	movs	r0, #51	; 0x33
 8002180:	f000 f84a 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002184:	2042      	movs	r0, #66	; 0x42
 8002186:	f000 f847 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800218a:	2005      	movs	r0, #5
 800218c:	f000 f844 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002190:	200c      	movs	r0, #12
 8002192:	f000 f841 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002196:	200a      	movs	r0, #10
 8002198:	f000 f83e 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800219c:	2028      	movs	r0, #40	; 0x28
 800219e:	f000 f83b 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80021a2:	202f      	movs	r0, #47	; 0x2f
 80021a4:	f000 f838 	bl	8002218 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80021a8:	200f      	movs	r0, #15
 80021aa:	f000 f835 	bl	8002218 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80021ae:	2011      	movs	r0, #17
 80021b0:	f000 f825 	bl	80021fe <ili9341_WriteReg>
  LCD_Delay(200);
 80021b4:	20c8      	movs	r0, #200	; 0xc8
 80021b6:	f000 fe69 	bl	8002e8c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80021ba:	2029      	movs	r0, #41	; 0x29
 80021bc:	f000 f81f 	bl	80021fe <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80021c0:	202c      	movs	r0, #44	; 0x2c
 80021c2:	f000 f81c 	bl	80021fe <ili9341_WriteReg>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}

080021ca <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80021ce:	f000 fd6f 	bl	8002cb0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80021d2:	2103      	movs	r1, #3
 80021d4:	20d3      	movs	r0, #211	; 0xd3
 80021d6:	f000 f82c 	bl	8002232 <ili9341_ReadData>
 80021da:	4603      	mov	r3, r0
 80021dc:	b29b      	uxth	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80021e6:	2029      	movs	r0, #41	; 0x29
 80021e8:	f000 f809 	bl	80021fe <ili9341_WriteReg>
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80021f4:	2028      	movs	r0, #40	; 0x28
 80021f6:	f000 f802 	bl	80021fe <ili9341_WriteReg>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}

080021fe <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fdea 	bl	8002de4 <LCD_IO_WriteReg>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fdbb 	bl	8002da0 <LCD_IO_WriteData>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	460a      	mov	r2, r1
 800223c:	80fb      	strh	r3, [r7, #6]
 800223e:	4613      	mov	r3, r2
 8002240:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002242:	797a      	ldrb	r2, [r7, #5]
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fded 	bl	8002e28 <LCD_IO_ReadData>
 800224e:	4603      	mov	r3, r0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800225c:	23f0      	movs	r3, #240	; 0xf0
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800226c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa59 	bl	8002740 <stmpe811_GetInstance>
 800228e:	4603      	mov	r3, r0
 8002290:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2bff      	cmp	r3, #255	; 0xff
 8002296:	d112      	bne.n	80022be <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002298:	2000      	movs	r0, #0
 800229a:	f000 fa51 	bl	8002740 <stmpe811_GetInstance>
 800229e:	4603      	mov	r3, r0
 80022a0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d80a      	bhi.n	80022be <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	b2d1      	uxtb	r1, r2
 80022ae:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <stmpe811_Init+0x4c>)
 80022b0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80022b2:	f000 fdf6 	bl	8002ea2 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 f807 	bl	80022cc <stmpe811_Reset>
    }
  }
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200007f4 	.word	0x200007f4

080022cc <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2202      	movs	r2, #2
 80022dc:	2103      	movs	r1, #3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fdeb 	bl	8002eba <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80022e4:	200a      	movs	r0, #10
 80022e6:	f000 fe25 	bl	8002f34 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2200      	movs	r2, #0
 80022f0:	2103      	movs	r1, #3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fde1 	bl	8002eba <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80022f8:	2002      	movs	r0, #2
 80022fa:	f000 fe1b 	bl	8002f34 <IOE_Delay>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002306:	b590      	push	{r4, r7, lr}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002310:	f000 fdc7 	bl	8002ea2 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fde0 	bl	8002ee0 <IOE_Read>
 8002320:	4603      	mov	r3, r0
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fdd7 	bl	8002ee0 <IOE_Read>
 8002332:	4603      	mov	r3, r0
 8002334:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002336:	4323      	orrs	r3, r4
 8002338:	b21b      	sxth	r3, r3
 800233a:	b29b      	uxth	r3, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}

08002344 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2109      	movs	r1, #9
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fdc1 	bl	8002ee0 <IOE_Read>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	2109      	movs	r1, #9
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fda1 	bl	8002eba <IOE_Write>
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2109      	movs	r1, #9
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fda3 	bl	8002ee0 <IOE_Read>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	2109      	movs	r1, #9
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fd83 	bl	8002eba <IOE_Write>
    
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	460a      	mov	r2, r1
 80023c6:	80fb      	strh	r3, [r7, #6]
 80023c8:	4613      	mov	r3, r2
 80023ca:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	210a      	movs	r1, #10
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fd82 	bl	8002ee0 <IOE_Read>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	797b      	ldrb	r3, [r7, #5]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	210a      	movs	r1, #10
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fd62 	bl	8002eba <IOE_Write>
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	460a      	mov	r2, r1
 8002408:	80fb      	strh	r3, [r7, #6]
 800240a:	4613      	mov	r3, r2
 800240c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	210a      	movs	r1, #10
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fd61 	bl	8002ee0 <IOE_Read>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002422:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002426:	43db      	mvns	r3, r3
 8002428:	b25a      	sxtb	r2, r3
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4013      	ands	r3, r2
 8002430:	b25b      	sxtb	r3, r3
 8002432:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	210a      	movs	r1, #10
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fd3c 	bl	8002eba <IOE_Write>
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	460a      	mov	r2, r1
 8002454:	80fb      	strh	r3, [r7, #6]
 8002456:	4613      	mov	r3, r2
 8002458:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	210b      	movs	r1, #11
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fd3d 	bl	8002ee0 <IOE_Read>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	797b      	ldrb	r3, [r7, #5]
 800246c:	4013      	ands	r3, r2
 800246e:	b2db      	uxtb	r3, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	460a      	mov	r2, r1
 8002482:	80fb      	strh	r3, [r7, #6]
 8002484:	4613      	mov	r3, r2
 8002486:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	797a      	ldrb	r2, [r7, #5]
 800248e:	210b      	movs	r1, #11
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fd12 	bl	8002eba <IOE_Write>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	6039      	str	r1, [r7, #0]
 80024a8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2117      	movs	r1, #23
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fd13 	bl	8002ee0 <IOE_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	b25a      	sxtb	r2, r3
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4013      	ands	r3, r2
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	2117      	movs	r1, #23
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fcee 	bl	8002eba <IOE_Write>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2104      	movs	r1, #4
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fcf2 	bl	8002ee0 <IOE_Read>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	2104      	movs	r1, #4
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fcd2 	bl	8002eba <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	21f0      	movs	r1, #240	; 0xf0
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ffbf 	bl	800249e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	2104      	movs	r1, #4
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fcc2 	bl	8002eba <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2249      	movs	r2, #73	; 0x49
 800253c:	2120      	movs	r1, #32
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fcbb 	bl	8002eba <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002544:	2002      	movs	r0, #2
 8002546:	f000 fcf5 	bl	8002f34 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2201      	movs	r2, #1
 8002550:	2121      	movs	r1, #33	; 0x21
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fcb1 	bl	8002eba <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	229a      	movs	r2, #154	; 0x9a
 800255e:	2141      	movs	r1, #65	; 0x41
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fcaa 	bl	8002eba <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2201      	movs	r2, #1
 800256c:	214a      	movs	r1, #74	; 0x4a
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fca3 	bl	8002eba <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2201      	movs	r2, #1
 800257a:	214b      	movs	r1, #75	; 0x4b
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fc9c 	bl	8002eba <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2200      	movs	r2, #0
 8002588:	214b      	movs	r1, #75	; 0x4b
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fc95 	bl	8002eba <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2201      	movs	r2, #1
 8002596:	2156      	movs	r1, #86	; 0x56
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fc8e 	bl	8002eba <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	2158      	movs	r1, #88	; 0x58
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fc87 	bl	8002eba <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2201      	movs	r2, #1
 80025b2:	2140      	movs	r1, #64	; 0x40
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fc80 	bl	8002eba <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	22ff      	movs	r2, #255	; 0xff
 80025c0:	210b      	movs	r1, #11
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fc79 	bl	8002eba <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80025c8:	2002      	movs	r0, #2
 80025ca:	f000 fcb3 	bl	8002f34 <IOE_Delay>
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2140      	movs	r1, #64	; 0x40
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fc78 	bl	8002ee0 <IOE_Read>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	214c      	movs	r1, #76	; 0x4c
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fc66 	bl	8002ee0 <IOE_Read>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e00d      	b.n	800263c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2201      	movs	r2, #1
 8002626:	214b      	movs	r1, #75	; 0x4b
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fc46 	bl	8002eba <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2200      	movs	r2, #0
 8002634:	214b      	movs	r1, #75	; 0x4b
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fc3f 	bl	8002eba <IOE_Write>
  }
  
  return ret;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002654:	89fb      	ldrh	r3, [r7, #14]
 8002656:	b2d8      	uxtb	r0, r3
 8002658:	f107 0210 	add.w	r2, r7, #16
 800265c:	2304      	movs	r3, #4
 800265e:	21d7      	movs	r1, #215	; 0xd7
 8002660:	f000 fc51 	bl	8002f06 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002664:	7c3b      	ldrb	r3, [r7, #16]
 8002666:	061a      	lsls	r2, r3, #24
 8002668:	7c7b      	ldrb	r3, [r7, #17]
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	431a      	orrs	r2, r3
 800266e:	7cbb      	ldrb	r3, [r7, #18]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	4313      	orrs	r3, r2
 8002674:	7cfa      	ldrb	r2, [r7, #19]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	0d1b      	lsrs	r3, r3, #20
 800267e:	b29a      	uxth	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	b29b      	uxth	r3, r3
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2201      	movs	r2, #1
 800269a:	214b      	movs	r1, #75	; 0x4b
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fc0c 	bl	8002eba <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80026a2:	89fb      	ldrh	r3, [r7, #14]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2200      	movs	r2, #0
 80026a8:	214b      	movs	r1, #75	; 0x4b
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fc05 	bl	8002eba <IOE_Write>
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80026c2:	f000 fbf4 	bl	8002eae <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	211f      	movs	r1, #31
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fe76 	bl	80023bc <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fe36 	bl	8002344 <stmpe811_EnableGlobalIT>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fe47 	bl	8002380 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	211f      	movs	r1, #31
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fe81 	bl	80023fe <stmpe811_DisableITSource>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	211f      	movs	r1, #31
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fe99 	bl	800244a <stmpe811_ReadGITStatus>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	211f      	movs	r1, #31
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fea1 	bl	8002478 <stmpe811_ClearGlobalIT>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e00b      	b.n	800276c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <stmpe811_GetInstance+0x40>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	b29b      	uxth	r3, r3
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	429a      	cmp	r2, r3
 8002760:	d101      	bne.n	8002766 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	e006      	b.n	8002774 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3301      	adds	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d9f0      	bls.n	8002754 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002772:	23ff      	movs	r3, #255	; 0xff
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200007f4 	.word	0x200007f4

08002784 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10e      	bne.n	80027b2 <BSP_LED_Init+0x2e>
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <BSP_LED_Init+0x9c>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a20      	ldr	r2, [pc, #128]	; (8002820 <BSP_LED_Init+0x9c>)
 800279e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <BSP_LED_Init+0x9c>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	e010      	b.n	80027d4 <BSP_LED_Init+0x50>
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10d      	bne.n	80027d4 <BSP_LED_Init+0x50>
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <BSP_LED_Init+0x9c>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4a17      	ldr	r2, [pc, #92]	; (8002820 <BSP_LED_Init+0x9c>)
 80027c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c6:	6313      	str	r3, [r2, #48]	; 0x30
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <BSP_LED_Init+0x9c>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <BSP_LED_Init+0xa0>)
 80027d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80027e6:	2302      	movs	r3, #2
 80027e8:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <BSP_LED_Init+0xa4>)
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	f107 0214 	add.w	r2, r7, #20
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 fa55 	bl	8004ca8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4a09      	ldr	r2, [pc, #36]	; (8002828 <BSP_LED_Init+0xa4>)
 8002802:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <BSP_LED_Init+0xa0>)
 800280a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800280e:	2200      	movs	r2, #0
 8002810:	4619      	mov	r1, r3
 8002812:	f002 fc0d 	bl	8005030 <HAL_GPIO_WritePin>
}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	0800a258 	.word	0x0800a258
 8002828:	2000033c 	.word	0x2000033c

0800282c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <BSP_LED_Toggle+0x2c>)
 800283a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4906      	ldr	r1, [pc, #24]	; (800285c <BSP_LED_Toggle+0x30>)
 8002842:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f002 fc0a 	bl	8005062 <HAL_GPIO_TogglePin>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000033c 	.word	0x2000033c
 800285c:	0800a258 	.word	0x0800a258

08002860 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a33      	ldr	r2, [pc, #204]	; (800293c <I2Cx_MspInit+0xdc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d15f      	bne.n	8002932 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	4b32      	ldr	r3, [pc, #200]	; (8002940 <I2Cx_MspInit+0xe0>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a31      	ldr	r2, [pc, #196]	; (8002940 <I2Cx_MspInit+0xe0>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <I2Cx_MspInit+0xe0>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <I2Cx_MspInit+0xe0>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <I2Cx_MspInit+0xe0>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <I2Cx_MspInit+0xe0>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80028aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80028b0:	2312      	movs	r3, #18
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80028b8:	2302      	movs	r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80028bc:	2304      	movs	r3, #4
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	481f      	ldr	r0, [pc, #124]	; (8002944 <I2Cx_MspInit+0xe4>)
 80028c8:	f002 f9ee 	bl	8004ca8 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80028cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	481b      	ldr	r0, [pc, #108]	; (8002948 <I2Cx_MspInit+0xe8>)
 80028da:	f002 f9e5 	bl	8004ca8 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <I2Cx_MspInit+0xe0>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a16      	ldr	r2, [pc, #88]	; (8002940 <I2Cx_MspInit+0xe0>)
 80028e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b14      	ldr	r3, [pc, #80]	; (8002940 <I2Cx_MspInit+0xe0>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <I2Cx_MspInit+0xe0>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <I2Cx_MspInit+0xe0>)
 8002900:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002904:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <I2Cx_MspInit+0xe0>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <I2Cx_MspInit+0xe0>)
 800290c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002910:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	210f      	movs	r1, #15
 8002916:	2048      	movs	r0, #72	; 0x48
 8002918:	f001 fd3b 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800291c:	2048      	movs	r0, #72	; 0x48
 800291e:	f001 fd54 	bl	80043ca <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	210f      	movs	r1, #15
 8002926:	2049      	movs	r0, #73	; 0x49
 8002928:	f001 fd33 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800292c:	2049      	movs	r0, #73	; 0x49
 800292e:	f001 fd4c 	bl	80043ca <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40005c00 	.word	0x40005c00
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020800 	.word	0x40020800

0800294c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002950:	4814      	ldr	r0, [pc, #80]	; (80029a4 <I2Cx_Init+0x58>)
 8002952:	f003 f849 	bl	80059e8 <HAL_I2C_GetState>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d121      	bne.n	80029a0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <I2Cx_Init+0x58>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <I2Cx_Init+0x5c>)
 8002960:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <I2Cx_Init+0x58>)
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <I2Cx_Init+0x60>)
 8002966:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <I2Cx_Init+0x58>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <I2Cx_Init+0x58>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <I2Cx_Init+0x58>)
 8002976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800297a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <I2Cx_Init+0x58>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <I2Cx_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <I2Cx_Init+0x58>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <I2Cx_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <I2Cx_Init+0x58>)
 8002996:	f7ff ff63 	bl	8002860 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800299a:	4802      	ldr	r0, [pc, #8]	; (80029a4 <I2Cx_Init+0x58>)
 800299c:	f002 fb7c 	bl	8005098 <HAL_I2C_Init>
  }
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200007f8 	.word	0x200007f8
 80029a8:	40005c00 	.word	0x40005c00
 80029ac:	000186a0 	.word	0x000186a0

080029b0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <I2Cx_ITConfig+0x58>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <I2Cx_ITConfig+0x58>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <I2Cx_ITConfig+0x58>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80029d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80029d8:	2301      	movs	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <I2Cx_ITConfig+0x5c>)
 80029e2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4809      	ldr	r0, [pc, #36]	; (8002a10 <I2Cx_ITConfig+0x60>)
 80029ea:	f002 f95d 	bl	8004ca8 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80029ee:	2200      	movs	r2, #0
 80029f0:	210f      	movs	r1, #15
 80029f2:	2028      	movs	r0, #40	; 0x28
 80029f4:	f001 fccd 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80029f8:	2028      	movs	r0, #40	; 0x28
 80029fa:	f001 fce6 	bl	80043ca <HAL_NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	10210000 	.word	0x10210000
 8002a10:	40020000 	.word	0x40020000

08002a14 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af04      	add	r7, sp, #16
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	71bb      	strb	r3, [r7, #6]
 8002a22:	4613      	mov	r3, r2
 8002a24:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	b299      	uxth	r1, r3
 8002a2e:	79bb      	ldrb	r3, [r7, #6]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <I2Cx_WriteData+0x4c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	9302      	str	r3, [sp, #8]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	1d7b      	adds	r3, r7, #5
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2301      	movs	r3, #1
 8002a42:	4808      	ldr	r0, [pc, #32]	; (8002a64 <I2Cx_WriteData+0x50>)
 8002a44:	f002 fcb0 	bl	80053a8 <HAL_I2C_Mem_Write>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a52:	f000 f863 	bl	8002b1c <I2Cx_Error>
  }        
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000344 	.word	0x20000344
 8002a64:	200007f8 	.word	0x200007f8

08002a68 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af04      	add	r7, sp, #16
 8002a6e:	4603      	mov	r3, r0
 8002a70:	460a      	mov	r2, r1
 8002a72:	71fb      	strb	r3, [r7, #7]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	b299      	uxth	r1, r3
 8002a84:	79bb      	ldrb	r3, [r7, #6]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <I2Cx_ReadData+0x50>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	f107 030e 	add.w	r3, r7, #14
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <I2Cx_ReadData+0x54>)
 8002a9c:	f002 fd7e 	bl	800559c <HAL_I2C_Mem_Read>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002aaa:	f000 f837 	bl	8002b1c <I2Cx_Error>
  
  }
  return value;
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000344 	.word	0x20000344
 8002abc:	200007f8 	.word	0x200007f8

08002ac0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af04      	add	r7, sp, #16
 8002ac6:	603a      	str	r2, [r7, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	71bb      	strb	r3, [r7, #6]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	b299      	uxth	r1, r3
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <I2Cx_ReadBuffer+0x54>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	88bb      	ldrh	r3, [r7, #4]
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2301      	movs	r3, #1
 8002af2:	4809      	ldr	r0, [pc, #36]	; (8002b18 <I2Cx_ReadBuffer+0x58>)
 8002af4:	f002 fd52 	bl	800559c <HAL_I2C_Mem_Read>
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e002      	b.n	8002b0c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002b06:	f000 f809 	bl	8002b1c <I2Cx_Error>

    return 1;
 8002b0a:	2301      	movs	r3, #1
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000344 	.word	0x20000344
 8002b18:	200007f8 	.word	0x200007f8

08002b1c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002b20:	4803      	ldr	r0, [pc, #12]	; (8002b30 <I2Cx_Error+0x14>)
 8002b22:	f002 fbfd 	bl	8005320 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002b26:	f7ff ff11 	bl	800294c <I2Cx_Init>
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200007f8 	.word	0x200007f8

08002b34 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002b38:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b3a:	f005 f9e2 	bl	8007f02 <HAL_SPI_GetState>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d12b      	bne.n	8002b9c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <SPIx_Init+0x70>)
 8002b48:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b4c:	2218      	movs	r2, #24
 8002b4e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b80:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b8a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b8e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002b90:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b92:	f000 f853 	bl	8002c3c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002b96:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <SPIx_Init+0x6c>)
 8002b98:	f004 fc29 	bl	80073ee <HAL_SPI_Init>
  } 
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	2000084c 	.word	0x2000084c
 8002ba4:	40015000 	.word	0x40015000

08002ba8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <SPIx_Read+0x38>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f107 0108 	add.w	r1, r7, #8
 8002bc2:	4808      	ldr	r0, [pc, #32]	; (8002be4 <SPIx_Read+0x3c>)
 8002bc4:	f004 fe10 	bl	80077e8 <HAL_SPI_Receive>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002bd2:	f000 f827 	bl	8002c24 <SPIx_Error>
  }
  
  return readvalue;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000348 	.word	0x20000348
 8002be4:	2000084c 	.word	0x2000084c

08002be8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <SPIx_Write+0x34>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	1db9      	adds	r1, r7, #6
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4808      	ldr	r0, [pc, #32]	; (8002c20 <SPIx_Write+0x38>)
 8002c00:	f004 fc9c 	bl	800753c <HAL_SPI_Transmit>
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002c0e:	f000 f809 	bl	8002c24 <SPIx_Error>
  }
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000348 	.word	0x20000348
 8002c20:	2000084c 	.word	0x2000084c

08002c24 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <SPIx_Error+0x14>)
 8002c2a:	f004 fc4b 	bl	80074c4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002c2e:	f7ff ff81 	bl	8002b34 <SPIx_Init>
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000084c 	.word	0x2000084c

08002c3c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <SPIx_MspInit+0x6c>)
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <SPIx_MspInit+0x6c>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	6453      	str	r3, [r2, #68]	; 0x44
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <SPIx_MspInit+0x6c>)
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <SPIx_MspInit+0x6c>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <SPIx_MspInit+0x6c>)
 8002c6a:	f043 0320 	orr.w	r3, r3, #32
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <SPIx_MspInit+0x6c>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002c7c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002c86:	2302      	movs	r3, #2
 8002c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002c8e:	2305      	movs	r3, #5
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <SPIx_MspInit+0x70>)
 8002c9a:	f002 f805 	bl	8004ca8 <HAL_GPIO_Init>
}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40021400 	.word	0x40021400

08002cb0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002cb6:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <LCD_IO_Init+0xe0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d164      	bne.n	8002d88 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002cbe:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <LCD_IO_Init+0xe0>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a31      	ldr	r2, [pc, #196]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4827      	ldr	r0, [pc, #156]	; (8002d98 <LCD_IO_Init+0xe8>)
 8002cfa:	f001 ffd5 	bl	8004ca8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a23      	ldr	r2, [pc, #140]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d20:	2301      	movs	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	4619      	mov	r1, r3
 8002d32:	4819      	ldr	r0, [pc, #100]	; (8002d98 <LCD_IO_Init+0xe8>)
 8002d34:	f001 ffb8 	bl	8004ca8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <LCD_IO_Init+0xe4>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002d54:	2304      	movs	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	4619      	mov	r1, r3
 8002d6a:	480c      	ldr	r0, [pc, #48]	; (8002d9c <LCD_IO_Init+0xec>)
 8002d6c:	f001 ff9c 	bl	8004ca8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002d70:	2200      	movs	r2, #0
 8002d72:	2104      	movs	r1, #4
 8002d74:	4809      	ldr	r0, [pc, #36]	; (8002d9c <LCD_IO_Init+0xec>)
 8002d76:	f002 f95b 	bl	8005030 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	4807      	ldr	r0, [pc, #28]	; (8002d9c <LCD_IO_Init+0xec>)
 8002d80:	f002 f956 	bl	8005030 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002d84:	f7ff fed6 	bl	8002b34 <SPIx_Init>
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200008a4 	.word	0x200008a4
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	40020800 	.word	0x40020800

08002da0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002daa:	2201      	movs	r2, #1
 8002dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002db0:	480a      	ldr	r0, [pc, #40]	; (8002ddc <LCD_IO_WriteData+0x3c>)
 8002db2:	f002 f93d 	bl	8005030 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002db6:	2200      	movs	r2, #0
 8002db8:	2104      	movs	r1, #4
 8002dba:	4809      	ldr	r0, [pc, #36]	; (8002de0 <LCD_IO_WriteData+0x40>)
 8002dbc:	f002 f938 	bl	8005030 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff10 	bl	8002be8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2104      	movs	r1, #4
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <LCD_IO_WriteData+0x40>)
 8002dce:	f002 f92f 	bl	8005030 <HAL_GPIO_WritePin>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40020800 	.word	0x40020800

08002de4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df4:	480a      	ldr	r0, [pc, #40]	; (8002e20 <LCD_IO_WriteReg+0x3c>)
 8002df6:	f002 f91b 	bl	8005030 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2104      	movs	r1, #4
 8002dfe:	4809      	ldr	r0, [pc, #36]	; (8002e24 <LCD_IO_WriteReg+0x40>)
 8002e00:	f002 f916 	bl	8005030 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff feed 	bl	8002be8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2104      	movs	r1, #4
 8002e12:	4804      	ldr	r0, [pc, #16]	; (8002e24 <LCD_IO_WriteReg+0x40>)
 8002e14:	f002 f90c 	bl	8005030 <HAL_GPIO_WritePin>
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40020800 	.word	0x40020800

08002e28 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	460a      	mov	r2, r1
 8002e32:	80fb      	strh	r3, [r7, #6]
 8002e34:	4613      	mov	r3, r2
 8002e36:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2104      	movs	r1, #4
 8002e40:	4810      	ldr	r0, [pc, #64]	; (8002e84 <LCD_IO_ReadData+0x5c>)
 8002e42:	f002 f8f5 	bl	8005030 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002e46:	2200      	movs	r2, #0
 8002e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e4c:	480e      	ldr	r0, [pc, #56]	; (8002e88 <LCD_IO_ReadData+0x60>)
 8002e4e:	f002 f8ef 	bl	8005030 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fec7 	bl	8002be8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002e5a:	797b      	ldrb	r3, [r7, #5]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fea3 	bl	8002ba8 <SPIx_Read>
 8002e62:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002e64:	2201      	movs	r2, #1
 8002e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e6a:	4807      	ldr	r0, [pc, #28]	; (8002e88 <LCD_IO_ReadData+0x60>)
 8002e6c:	f002 f8e0 	bl	8005030 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e70:	2201      	movs	r2, #1
 8002e72:	2104      	movs	r1, #4
 8002e74:	4803      	ldr	r0, [pc, #12]	; (8002e84 <LCD_IO_ReadData+0x5c>)
 8002e76:	f002 f8db 	bl	8005030 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00

08002e8c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f001 f97d 	bl	8004194 <HAL_Delay>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002ea6:	f7ff fd51 	bl	800294c <I2Cx_Init>
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}

08002eae <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002eb2:	f7ff fd7d 	bl	80029b0 <I2Cx_ITConfig>
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	71bb      	strb	r3, [r7, #6]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002ecc:	797a      	ldrb	r2, [r7, #5]
 8002ece:	79b9      	ldrb	r1, [r7, #6]
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fd9e 	bl	8002a14 <I2Cx_WriteData>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002ef0:	79ba      	ldrb	r2, [r7, #6]
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fdb6 	bl	8002a68 <I2Cx_ReadData>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	603a      	str	r2, [r7, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	460b      	mov	r3, r1
 8002f16:	71bb      	strb	r3, [r7, #6]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002f1c:	88bb      	ldrh	r3, [r7, #4]
 8002f1e:	79b9      	ldrb	r1, [r7, #6]
 8002f20:	79f8      	ldrb	r0, [r7, #7]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	f7ff fdcc 	bl	8002ac0 <I2Cx_ReadBuffer>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	b29b      	uxth	r3, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f001 f929 	bl	8004194 <HAL_Delay>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f52:	4a2e      	ldr	r2, [pc, #184]	; (800300c <BSP_LCD_Init+0xc0>)
 8002f54:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f58:	2209      	movs	r2, #9
 8002f5a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f64:	221d      	movs	r2, #29
 8002f66:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f70:	f240 120d 	movw	r2, #269	; 0x10d
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f78:	f240 1243 	movw	r2, #323	; 0x143
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f80:	f240 1217 	movw	r2, #279	; 0x117
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f88:	f240 1247 	movw	r2, #327	; 0x147
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <BSP_LCD_Init+0xc4>)
 8002fa8:	2208      	movs	r2, #8
 8002faa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <BSP_LCD_Init+0xc4>)
 8002fae:	22c0      	movs	r2, #192	; 0xc0
 8002fb0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <BSP_LCD_Init+0xc4>)
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <BSP_LCD_Init+0xc4>)
 8002fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002fc0:	4813      	ldr	r0, [pc, #76]	; (8003010 <BSP_LCD_Init+0xc4>)
 8002fc2:	f003 ffcb 	bl	8006f5c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002fde:	f000 fb7d 	bl	80036dc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002fe2:	4809      	ldr	r0, [pc, #36]	; (8003008 <BSP_LCD_Init+0xbc>)
 8002fe4:	f003 f866 	bl	80060b4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <BSP_LCD_Init+0xc8>)
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <BSP_LCD_Init+0xcc>)
 8002fec:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <BSP_LCD_Init+0xc8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002ff6:	f000 fd85 	bl	8003b04 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ffa:	4808      	ldr	r0, [pc, #32]	; (800301c <BSP_LCD_Init+0xd0>)
 8002ffc:	f000 f8ce 	bl	800319c <BSP_LCD_SetFont>

  return LCD_OK;
 8003000:	2300      	movs	r3, #0
}  
 8003002:	4618      	mov	r0, r3
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200008a8 	.word	0x200008a8
 800300c:	40016800 	.word	0x40016800
 8003010:	20000990 	.word	0x20000990
 8003014:	200009dc 	.word	0x200009dc
 8003018:	200002dc 	.word	0x200002dc
 800301c:	2000034c 	.word	0x2000034c

08003020 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <BSP_LCD_GetXSize+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	4798      	blx	r3
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200009dc 	.word	0x200009dc

08003038 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <BSP_LCD_GetYSize+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	4798      	blx	r3
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200009dc 	.word	0x200009dc

08003050 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003050:	b580      	push	{r7, lr}
 8003052:	b090      	sub	sp, #64	; 0x40
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003060:	f7ff ffde 	bl	8003020 <BSP_LCD_GetXSize>
 8003064:	4603      	mov	r3, r0
 8003066:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800306c:	f7ff ffe4 	bl	8003038 <BSP_LCD_GetYSize>
 8003070:	4603      	mov	r3, r0
 8003072:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800307c:	23ff      	movs	r3, #255	; 0xff
 800307e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003096:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800309c:	2307      	movs	r3, #7
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80030a0:	f7ff ffbe 	bl	8003020 <BSP_LCD_GetXSize>
 80030a4:	4603      	mov	r3, r0
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80030a8:	f7ff ffc6 	bl	8003038 <BSP_LCD_GetYSize>
 80030ac:	4603      	mov	r3, r0
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	4619      	mov	r1, r3
 80030b8:	4814      	ldr	r0, [pc, #80]	; (800310c <BSP_LCD_LayerDefaultInit+0xbc>)
 80030ba:	f003 f8d5 	bl	8006268 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	4913      	ldr	r1, [pc, #76]	; (8003110 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3304      	adds	r3, #4
 80030ce:	f04f 32ff 	mov.w	r2, #4294967295
 80030d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	490e      	ldr	r1, [pc, #56]	; (8003110 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3308      	adds	r3, #8
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <BSP_LCD_LayerDefaultInit+0xc4>)
 80030e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	4909      	ldr	r1, [pc, #36]	; (8003110 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80030fa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80030fc:	4803      	ldr	r0, [pc, #12]	; (800310c <BSP_LCD_LayerDefaultInit+0xbc>)
 80030fe:	f003 f8f1 	bl	80062e4 <HAL_LTDC_EnableDither>
}
 8003102:	bf00      	nop
 8003104:	3740      	adds	r7, #64	; 0x40
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200008a8 	.word	0x200008a8
 8003110:	200009c4 	.word	0x200009c4
 8003114:	2000034c 	.word	0x2000034c

08003118 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <BSP_LCD_SelectLayer+0x1c>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6013      	str	r3, [r2, #0]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	200009c0 	.word	0x200009c0

08003138 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <BSP_LCD_SetTextColor+0x28>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <BSP_LCD_SetTextColor+0x2c>)
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	200009c0 	.word	0x200009c0
 8003164:	200009c4 	.word	0x200009c4

08003168 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <BSP_LCD_SetBackColor+0x2c>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4908      	ldr	r1, [pc, #32]	; (8003198 <BSP_LCD_SetBackColor+0x30>)
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3304      	adds	r3, #4
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	200009c0 	.word	0x200009c0
 8003198:	200009c4 	.word	0x200009c4

0800319c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <BSP_LCD_SetFont+0x2c>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4908      	ldr	r1, [pc, #32]	; (80031cc <BSP_LCD_SetFont+0x30>)
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3308      	adds	r3, #8
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	200009c0 	.word	0x200009c0
 80031cc:	200009c4 	.word	0x200009c4

080031d0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <BSP_LCD_Clear+0x48>)
 80031da:	681c      	ldr	r4, [r3, #0]
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <BSP_LCD_Clear+0x48>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0e      	ldr	r2, [pc, #56]	; (800321c <BSP_LCD_Clear+0x4c>)
 80031e2:	2134      	movs	r1, #52	; 0x34
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	335c      	adds	r3, #92	; 0x5c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461e      	mov	r6, r3
 80031f0:	f7ff ff16 	bl	8003020 <BSP_LCD_GetXSize>
 80031f4:	4605      	mov	r5, r0
 80031f6:	f7ff ff1f 	bl	8003038 <BSP_LCD_GetYSize>
 80031fa:	4602      	mov	r2, r0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2300      	movs	r3, #0
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	462a      	mov	r2, r5
 8003208:	4631      	mov	r1, r6
 800320a:	4620      	mov	r0, r4
 800320c:	f000 fc42 	bl	8003a94 <FillBuffer>
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003218:	200009c0 	.word	0x200009c0
 800321c:	200008a8 	.word	0x200008a8

08003220 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
 800322a:	460b      	mov	r3, r1
 800322c:	80bb      	strh	r3, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <BSP_LCD_DisplayChar+0x80>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	491b      	ldr	r1, [pc, #108]	; (80032a4 <BSP_LCD_DisplayChar+0x84>)
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3308      	adds	r3, #8
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <BSP_LCD_DisplayChar+0x80>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4c14      	ldr	r4, [pc, #80]	; (80032a4 <BSP_LCD_DisplayChar+0x84>)
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4423      	add	r3, r4
 800325e:	3308      	adds	r3, #8
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003264:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <BSP_LCD_DisplayChar+0x80>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4c0d      	ldr	r4, [pc, #52]	; (80032a4 <BSP_LCD_DisplayChar+0x84>)
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4423      	add	r3, r4
 8003278:	3308      	adds	r3, #8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	889b      	ldrh	r3, [r3, #4]
 800327e:	3307      	adds	r3, #7
 8003280:	2b00      	cmp	r3, #0
 8003282:	da00      	bge.n	8003286 <BSP_LCD_DisplayChar+0x66>
 8003284:	3307      	adds	r3, #7
 8003286:	10db      	asrs	r3, r3, #3
 8003288:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800328c:	18ca      	adds	r2, r1, r3
 800328e:	88b9      	ldrh	r1, [r7, #4]
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fb44 	bl	8003920 <DrawChar>
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}
 80032a0:	200009c0 	.word	0x200009c0
 80032a4:	200009c4 	.word	0x200009c4

080032a8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60ba      	str	r2, [r7, #8]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	81fb      	strh	r3, [r7, #14]
 80032b6:	460b      	mov	r3, r1
 80032b8:	81bb      	strh	r3, [r7, #12]
 80032ba:	4613      	mov	r3, r2
 80032bc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80032be:	2301      	movs	r3, #1
 80032c0:	83fb      	strh	r3, [r7, #30]
 80032c2:	2300      	movs	r3, #0
 80032c4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80032d2:	e002      	b.n	80032da <BSP_LCD_DisplayStringAt+0x32>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	617a      	str	r2, [r7, #20]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f6      	bne.n	80032d4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80032e6:	f7ff fe9b 	bl	8003020 <BSP_LCD_GetXSize>
 80032ea:	4601      	mov	r1, r0
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <BSP_LCD_DisplayStringAt+0x174>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	484b      	ldr	r0, [pc, #300]	; (8003420 <BSP_LCD_DisplayStringAt+0x178>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4403      	add	r3, r0
 80032fc:	3308      	adds	r3, #8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	889b      	ldrh	r3, [r3, #4]
 8003302:	fbb1 f3f3 	udiv	r3, r1, r3
 8003306:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d01c      	beq.n	8003348 <BSP_LCD_DisplayStringAt+0xa0>
 800330e:	2b03      	cmp	r3, #3
 8003310:	dc33      	bgt.n	800337a <BSP_LCD_DisplayStringAt+0xd2>
 8003312:	2b01      	cmp	r3, #1
 8003314:	d002      	beq.n	800331c <BSP_LCD_DisplayStringAt+0x74>
 8003316:	2b02      	cmp	r3, #2
 8003318:	d019      	beq.n	800334e <BSP_LCD_DisplayStringAt+0xa6>
 800331a:	e02e      	b.n	800337a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	1ad1      	subs	r1, r2, r3
 8003322:	4b3e      	ldr	r3, [pc, #248]	; (800341c <BSP_LCD_DisplayStringAt+0x174>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	483e      	ldr	r0, [pc, #248]	; (8003420 <BSP_LCD_DisplayStringAt+0x178>)
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	3308      	adds	r3, #8
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	889b      	ldrh	r3, [r3, #4]
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	89fb      	ldrh	r3, [r7, #14]
 8003342:	4413      	add	r3, r2
 8003344:	83fb      	strh	r3, [r7, #30]
      break;
 8003346:	e01b      	b.n	8003380 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	83fb      	strh	r3, [r7, #30]
      break;
 800334c:	e018      	b.n	8003380 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	b299      	uxth	r1, r3
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <BSP_LCD_DisplayStringAt+0x174>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4831      	ldr	r0, [pc, #196]	; (8003420 <BSP_LCD_DisplayStringAt+0x178>)
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	3308      	adds	r3, #8
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	889b      	ldrh	r3, [r3, #4]
 800336c:	fb11 f303 	smulbb	r3, r1, r3
 8003370:	b29a      	uxth	r2, r3
 8003372:	89fb      	ldrh	r3, [r7, #14]
 8003374:	4413      	add	r3, r2
 8003376:	83fb      	strh	r3, [r7, #30]
      break;
 8003378:	e002      	b.n	8003380 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800337a:	89fb      	ldrh	r3, [r7, #14]
 800337c:	83fb      	strh	r3, [r7, #30]
      break;
 800337e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003380:	e01a      	b.n	80033b8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	89b9      	ldrh	r1, [r7, #12]
 8003388:	8bfb      	ldrh	r3, [r7, #30]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff ff48 	bl	8003220 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <BSP_LCD_DisplayStringAt+0x174>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4922      	ldr	r1, [pc, #136]	; (8003420 <BSP_LCD_DisplayStringAt+0x178>)
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3308      	adds	r3, #8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	889a      	ldrh	r2, [r3, #4]
 80033a6:	8bfb      	ldrh	r3, [r7, #30]
 80033a8:	4413      	add	r3, r2
 80033aa:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3301      	adds	r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
    i++;
 80033b2:	8bbb      	ldrh	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2dc      	uxtb	r4, r3
 80033c6:	f7ff fe2b 	bl	8003020 <BSP_LCD_GetXSize>
 80033ca:	8bb9      	ldrh	r1, [r7, #28]
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <BSP_LCD_DisplayStringAt+0x174>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4d13      	ldr	r5, [pc, #76]	; (8003420 <BSP_LCD_DisplayStringAt+0x178>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	442b      	add	r3, r5
 80033dc:	3308      	adds	r3, #8
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	889b      	ldrh	r3, [r3, #4]
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	1ac3      	subs	r3, r0, r3
 80033e8:	b299      	uxth	r1, r3
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <BSP_LCD_DisplayStringAt+0x174>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	480c      	ldr	r0, [pc, #48]	; (8003420 <BSP_LCD_DisplayStringAt+0x178>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4403      	add	r3, r0
 80033fa:	3308      	adds	r3, #8
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	889b      	ldrh	r3, [r3, #4]
 8003400:	4299      	cmp	r1, r3
 8003402:	bf2c      	ite	cs
 8003404:	2301      	movcs	r3, #1
 8003406:	2300      	movcc	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	4023      	ands	r3, r4
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1b7      	bne.n	8003382 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bdb0      	pop	{r4, r5, r7, pc}
 800341c:	200009c0 	.word	0x200009c0
 8003420:	200009c4 	.word	0x200009c4

08003424 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b08b      	sub	sp, #44	; 0x2c
 8003428:	af00      	add	r7, sp, #0
 800342a:	4604      	mov	r4, r0
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	461a      	mov	r2, r3
 8003432:	4623      	mov	r3, r4
 8003434:	80fb      	strh	r3, [r7, #6]
 8003436:	4603      	mov	r3, r0
 8003438:	80bb      	strh	r3, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	807b      	strh	r3, [r7, #2]
 800343e:	4613      	mov	r3, r2
 8003440:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003442:	2300      	movs	r3, #0
 8003444:	823b      	strh	r3, [r7, #16]
 8003446:	2300      	movs	r3, #0
 8003448:	81fb      	strh	r3, [r7, #14]
 800344a:	2300      	movs	r3, #0
 800344c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800344e:	2300      	movs	r3, #0
 8003450:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003452:	2300      	movs	r3, #0
 8003454:	847b      	strh	r3, [r7, #34]	; 0x22
 8003456:	2300      	movs	r3, #0
 8003458:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800345a:	2300      	movs	r3, #0
 800345c:	83fb      	strh	r3, [r7, #30]
 800345e:	2300      	movs	r3, #0
 8003460:	83bb      	strh	r3, [r7, #28]
 8003462:	2300      	movs	r3, #0
 8003464:	837b      	strh	r3, [r7, #26]
 8003466:	2300      	movs	r3, #0
 8003468:	833b      	strh	r3, [r7, #24]
 800346a:	2300      	movs	r3, #0
 800346c:	82fb      	strh	r3, [r7, #22]
 800346e:	2300      	movs	r3, #0
 8003470:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bfb8      	it	lt
 8003480:	425b      	neglt	r3, r3
 8003482:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003484:	883a      	ldrh	r2, [r7, #0]
 8003486:	88bb      	ldrh	r3, [r7, #4]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	bfb8      	it	lt
 800348e:	425b      	neglt	r3, r3
 8003490:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003496:	88bb      	ldrh	r3, [r7, #4]
 8003498:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d304      	bcc.n	80034ac <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80034a2:	2301      	movs	r3, #1
 80034a4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	843b      	strh	r3, [r7, #32]
 80034aa:	e005      	b.n	80034b8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80034ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80034b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b6:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80034b8:	883a      	ldrh	r2, [r7, #0]
 80034ba:	88bb      	ldrh	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d304      	bcc.n	80034ca <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80034c4:	2301      	movs	r3, #1
 80034c6:	83bb      	strh	r3, [r7, #28]
 80034c8:	e005      	b.n	80034d6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80034ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ce:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80034d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034d4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80034d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80034da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034de:	429a      	cmp	r2, r3
 80034e0:	db10      	blt.n	8003504 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80034e2:	2300      	movs	r3, #0
 80034e4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80034e6:	2300      	movs	r3, #0
 80034e8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80034ea:	8a3b      	ldrh	r3, [r7, #16]
 80034ec:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80034ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034f2:	0fda      	lsrs	r2, r3, #31
 80034f4:	4413      	add	r3, r2
 80034f6:	105b      	asrs	r3, r3, #1
 80034f8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80034fa:	89fb      	ldrh	r3, [r7, #14]
 80034fc:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80034fe:	8a3b      	ldrh	r3, [r7, #16]
 8003500:	82bb      	strh	r3, [r7, #20]
 8003502:	e00f      	b.n	8003524 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003504:	2300      	movs	r3, #0
 8003506:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003508:	2300      	movs	r3, #0
 800350a:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003510:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003514:	0fda      	lsrs	r2, r3, #31
 8003516:	4413      	add	r3, r2
 8003518:	105b      	asrs	r3, r3, #1
 800351a:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 800351c:	8a3b      	ldrh	r3, [r7, #16]
 800351e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003524:	2300      	movs	r3, #0
 8003526:	827b      	strh	r3, [r7, #18]
 8003528:	e037      	b.n	800359a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800352a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800352c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <BSP_LCD_DrawLine+0x18c>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4c20      	ldr	r4, [pc, #128]	; (80035b4 <BSP_LCD_DrawLine+0x190>)
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4423      	add	r3, r4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	f000 f9a1 	bl	8003888 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003546:	8b3a      	ldrh	r2, [r7, #24]
 8003548:	8afb      	ldrh	r3, [r7, #22]
 800354a:	4413      	add	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003550:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003554:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003558:	429a      	cmp	r2, r3
 800355a:	db0e      	blt.n	800357a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 800355c:	8b3a      	ldrh	r2, [r7, #24]
 800355e:	8b7b      	ldrh	r3, [r7, #26]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003566:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003568:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800356a:	4413      	add	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003570:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003572:	8bfb      	ldrh	r3, [r7, #30]
 8003574:	4413      	add	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800357a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800357c:	8c3b      	ldrh	r3, [r7, #32]
 800357e:	4413      	add	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003584:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003586:	8bbb      	ldrh	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800358e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003592:	b29b      	uxth	r3, r3
 8003594:	3301      	adds	r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	827b      	strh	r3, [r7, #18]
 800359a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800359e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	ddc1      	ble.n	800352a <BSP_LCD_DrawLine+0x106>
  }
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	372c      	adds	r7, #44	; 0x2c
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	200009c0 	.word	0x200009c0
 80035b4:	200009c4 	.word	0x200009c4

080035b8 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80035b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af02      	add	r7, sp, #8
 80035c0:	4604      	mov	r4, r0
 80035c2:	4608      	mov	r0, r1
 80035c4:	4611      	mov	r1, r2
 80035c6:	461a      	mov	r2, r3
 80035c8:	4623      	mov	r3, r4
 80035ca:	80fb      	strh	r3, [r7, #6]
 80035cc:	4603      	mov	r3, r0
 80035ce:	80bb      	strh	r3, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80035dc:	4b33      	ldr	r3, [pc, #204]	; (80036ac <BSP_LCD_FillRect+0xf4>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4933      	ldr	r1, [pc, #204]	; (80036b0 <BSP_LCD_FillRect+0xf8>)
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fda2 	bl	8003138 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <BSP_LCD_FillRect+0xfc>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d022      	beq.n	8003642 <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 80035fc:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <BSP_LCD_FillRect+0xf4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <BSP_LCD_FillRect+0x100>)
 8003602:	2134      	movs	r1, #52	; 0x34
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	681c      	ldr	r4, [r3, #0]
 800360e:	f7ff fd07 	bl	8003020 <BSP_LCD_GetXSize>
 8003612:	4603      	mov	r3, r0
 8003614:	425b      	negs	r3, r3
 8003616:	88b9      	ldrh	r1, [r7, #4]
 8003618:	883a      	ldrh	r2, [r7, #0]
 800361a:	440a      	add	r2, r1
 800361c:	fb02 f503 	mul.w	r5, r2, r3
 8003620:	f7ff fcfe 	bl	8003020 <BSP_LCD_GetXSize>
 8003624:	4606      	mov	r6, r0
 8003626:	f7ff fd07 	bl	8003038 <BSP_LCD_GetYSize>
 800362a:	4603      	mov	r3, r0
 800362c:	fb06 f303 	mul.w	r3, r6, r3
 8003630:	442b      	add	r3, r5
 8003632:	88f9      	ldrh	r1, [r7, #6]
 8003634:	887a      	ldrh	r2, [r7, #2]
 8003636:	440a      	add	r2, r1
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4423      	add	r3, r4
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	e013      	b.n	800366a <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003642:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <BSP_LCD_FillRect+0xf4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <BSP_LCD_FillRect+0x100>)
 8003648:	2134      	movs	r1, #52	; 0x34
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	335c      	adds	r3, #92	; 0x5c
 8003652:	681c      	ldr	r4, [r3, #0]
 8003654:	f7ff fce4 	bl	8003020 <BSP_LCD_GetXSize>
 8003658:	4602      	mov	r2, r0
 800365a:	88bb      	ldrh	r3, [r7, #4]
 800365c:	fb03 f202 	mul.w	r2, r3, r2
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4423      	add	r3, r4
 8003668:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <BSP_LCD_FillRect+0xf4>)
 800366c:	681c      	ldr	r4, [r3, #0]
 800366e:	68fd      	ldr	r5, [r7, #12]
 8003670:	887e      	ldrh	r6, [r7, #2]
 8003672:	f8b7 8000 	ldrh.w	r8, [r7]
 8003676:	f7ff fcd3 	bl	8003020 <BSP_LCD_GetXSize>
 800367a:	4602      	mov	r2, r0
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	1ad1      	subs	r1, r2, r3
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <BSP_LCD_FillRect+0xf4>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	480a      	ldr	r0, [pc, #40]	; (80036b0 <BSP_LCD_FillRect+0xf8>)
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4403      	add	r3, r0
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	9100      	str	r1, [sp, #0]
 8003696:	4643      	mov	r3, r8
 8003698:	4632      	mov	r2, r6
 800369a:	4629      	mov	r1, r5
 800369c:	4620      	mov	r0, r4
 800369e:	f000 f9f9 	bl	8003a94 <FillBuffer>
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ac:	200009c0 	.word	0x200009c0
 80036b0:	200009c4 	.word	0x200009c4
 80036b4:	200009e0 	.word	0x200009e0
 80036b8:	200008a8 	.word	0x200008a8

080036bc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <BSP_LCD_DisplayOn+0x1c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80036ca:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <BSP_LCD_DisplayOn+0x1c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4798      	blx	r3
  }
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200009dc 	.word	0x200009dc

080036dc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	4b61      	ldr	r3, [pc, #388]	; (800386c <BSP_LCD_MspInit+0x190>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	4a60      	ldr	r2, [pc, #384]	; (800386c <BSP_LCD_MspInit+0x190>)
 80036ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036f0:	6453      	str	r3, [r2, #68]	; 0x44
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <BSP_LCD_MspInit+0x190>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	4b5a      	ldr	r3, [pc, #360]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a59      	ldr	r2, [pc, #356]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	4b57      	ldr	r3, [pc, #348]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a52      	ldr	r2, [pc, #328]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b50      	ldr	r3, [pc, #320]	; (800386c <BSP_LCD_MspInit+0x190>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	4b4c      	ldr	r3, [pc, #304]	; (800386c <BSP_LCD_MspInit+0x190>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a4b      	ldr	r2, [pc, #300]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	4b45      	ldr	r3, [pc, #276]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a44      	ldr	r2, [pc, #272]	; (800386c <BSP_LCD_MspInit+0x190>)
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b42      	ldr	r3, [pc, #264]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b3e      	ldr	r3, [pc, #248]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a3d      	ldr	r2, [pc, #244]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a36      	ldr	r2, [pc, #216]	; (800386c <BSP_LCD_MspInit+0x190>)
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b34      	ldr	r3, [pc, #208]	; (800386c <BSP_LCD_MspInit+0x190>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <BSP_LCD_MspInit+0x190>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a2f      	ldr	r2, [pc, #188]	; (800386c <BSP_LCD_MspInit+0x190>)
 80037b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b2d      	ldr	r3, [pc, #180]	; (800386c <BSP_LCD_MspInit+0x190>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80037c2:	f641 0358 	movw	r3, #6232	; 0x1858
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80037d0:	2302      	movs	r3, #2
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80037d4:	230e      	movs	r3, #14
 80037d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80037d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037dc:	4619      	mov	r1, r3
 80037de:	4824      	ldr	r0, [pc, #144]	; (8003870 <BSP_LCD_MspInit+0x194>)
 80037e0:	f001 fa62 	bl	8004ca8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80037e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80037ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ee:	4619      	mov	r1, r3
 80037f0:	4820      	ldr	r0, [pc, #128]	; (8003874 <BSP_LCD_MspInit+0x198>)
 80037f2:	f001 fa59 	bl	8004ca8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80037f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80037fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003800:	4619      	mov	r1, r3
 8003802:	481d      	ldr	r0, [pc, #116]	; (8003878 <BSP_LCD_MspInit+0x19c>)
 8003804:	f001 fa50 	bl	8004ca8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003808:	2348      	movs	r3, #72	; 0x48
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800380c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003810:	4619      	mov	r1, r3
 8003812:	481a      	ldr	r0, [pc, #104]	; (800387c <BSP_LCD_MspInit+0x1a0>)
 8003814:	f001 fa48 	bl	8004ca8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800381e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003822:	4619      	mov	r1, r3
 8003824:	4816      	ldr	r0, [pc, #88]	; (8003880 <BSP_LCD_MspInit+0x1a4>)
 8003826:	f001 fa3f 	bl	8004ca8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800382a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003834:	4619      	mov	r1, r3
 8003836:	4813      	ldr	r0, [pc, #76]	; (8003884 <BSP_LCD_MspInit+0x1a8>)
 8003838:	f001 fa36 	bl	8004ca8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800383c:	2303      	movs	r3, #3
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003840:	2309      	movs	r3, #9
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003848:	4619      	mov	r1, r3
 800384a:	480a      	ldr	r0, [pc, #40]	; (8003874 <BSP_LCD_MspInit+0x198>)
 800384c:	f001 fa2c 	bl	8004ca8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385a:	4619      	mov	r1, r3
 800385c:	4809      	ldr	r0, [pc, #36]	; (8003884 <BSP_LCD_MspInit+0x1a8>)
 800385e:	f001 fa23 	bl	8004ca8 <HAL_GPIO_Init>
}
 8003862:	bf00      	nop
 8003864:	3738      	adds	r7, #56	; 0x38
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40020000 	.word	0x40020000
 8003874:	40020400 	.word	0x40020400
 8003878:	40020800 	.word	0x40020800
 800387c:	40020c00 	.word	0x40020c00
 8003880:	40021400 	.word	0x40021400
 8003884:	40021800 	.word	0x40021800

08003888 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003888:	b5b0      	push	{r4, r5, r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	603a      	str	r2, [r7, #0]
 8003892:	80fb      	strh	r3, [r7, #6]
 8003894:	460b      	mov	r3, r1
 8003896:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8003898:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <BSP_LCD_DrawPixel+0x8c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01f      	beq.n	80038e0 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <BSP_LCD_DrawPixel+0x90>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <BSP_LCD_DrawPixel+0x94>)
 80038a6:	2134      	movs	r1, #52	; 0x34
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	335c      	adds	r3, #92	; 0x5c
 80038b0:	681c      	ldr	r4, [r3, #0]
 80038b2:	f7ff fbb5 	bl	8003020 <BSP_LCD_GetXSize>
 80038b6:	4605      	mov	r5, r0
 80038b8:	f7ff fbbe 	bl	8003038 <BSP_LCD_GetYSize>
 80038bc:	4603      	mov	r3, r0
 80038be:	fb03 f205 	mul.w	r2, r3, r5
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	1ad5      	subs	r5, r2, r3
 80038c6:	f7ff fbab 	bl	8003020 <BSP_LCD_GetXSize>
 80038ca:	4602      	mov	r2, r0
 80038cc:	88bb      	ldrh	r3, [r7, #4]
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	1aeb      	subs	r3, r5, r3
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4423      	add	r3, r4
 80038d8:	461a      	mov	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80038de:	e015      	b.n	800390c <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <BSP_LCD_DrawPixel+0x90>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0d      	ldr	r2, [pc, #52]	; (800391c <BSP_LCD_DrawPixel+0x94>)
 80038e6:	2134      	movs	r1, #52	; 0x34
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	335c      	adds	r3, #92	; 0x5c
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	88bd      	ldrh	r5, [r7, #4]
 80038f4:	f7ff fb94 	bl	8003020 <BSP_LCD_GetXSize>
 80038f8:	4603      	mov	r3, r0
 80038fa:	fb03 f205 	mul.w	r2, r3, r5
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4423      	add	r3, r4
 8003906:	461a      	mov	r2, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6013      	str	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bdb0      	pop	{r4, r5, r7, pc}
 8003914:	200009e0 	.word	0x200009e0
 8003918:	200009c0 	.word	0x200009c0
 800391c:	200008a8 	.word	0x200008a8

08003920 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	603a      	str	r2, [r7, #0]
 800392a:	80fb      	strh	r3, [r7, #6]
 800392c:	460b      	mov	r3, r1
 800392e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <DrawChar+0x16c>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4953      	ldr	r1, [pc, #332]	; (8003a90 <DrawChar+0x170>)
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	3308      	adds	r3, #8
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	88db      	ldrh	r3, [r3, #6]
 8003952:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003954:	4b4d      	ldr	r3, [pc, #308]	; (8003a8c <DrawChar+0x16c>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <DrawChar+0x170>)
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3308      	adds	r3, #8
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	889b      	ldrh	r3, [r3, #4]
 800396a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800396c:	8a3b      	ldrh	r3, [r7, #16]
 800396e:	3307      	adds	r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	da00      	bge.n	8003976 <DrawChar+0x56>
 8003974:	3307      	adds	r3, #7
 8003976:	10db      	asrs	r3, r3, #3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	b2da      	uxtb	r2, r3
 800397e:	8a3b      	ldrh	r3, [r7, #16]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e076      	b.n	8003a7a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800398c:	8a3b      	ldrh	r3, [r7, #16]
 800398e:	3307      	adds	r3, #7
 8003990:	2b00      	cmp	r3, #0
 8003992:	da00      	bge.n	8003996 <DrawChar+0x76>
 8003994:	3307      	adds	r3, #7
 8003996:	10db      	asrs	r3, r3, #3
 8003998:	461a      	mov	r2, r3
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80039a6:	8a3b      	ldrh	r3, [r7, #16]
 80039a8:	3307      	adds	r3, #7
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da00      	bge.n	80039b0 <DrawChar+0x90>
 80039ae:	3307      	adds	r3, #7
 80039b0:	10db      	asrs	r3, r3, #3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d002      	beq.n	80039bc <DrawChar+0x9c>
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d004      	beq.n	80039c4 <DrawChar+0xa4>
 80039ba:	e00c      	b.n	80039d6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	617b      	str	r3, [r7, #20]
      break;
 80039c2:	e016      	b.n	80039f2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	3201      	adds	r2, #1
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
      break;
 80039d4:	e00d      	b.n	80039f2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	041a      	lsls	r2, r3, #16
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3301      	adds	r3, #1
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	4313      	orrs	r3, r2
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	3202      	adds	r2, #2
 80039ea:	7812      	ldrb	r2, [r2, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
      break;
 80039f0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e036      	b.n	8003a66 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80039f8:	8a3a      	ldrh	r2, [r7, #16]
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad2      	subs	r2, r2, r3
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	4413      	add	r3, r2
 8003a02:	3b01      	subs	r3, #1
 8003a04:	2201      	movs	r2, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d012      	beq.n	8003a3a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b298      	uxth	r0, r3
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <DrawChar+0x16c>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	491b      	ldr	r1, [pc, #108]	; (8003a90 <DrawChar+0x170>)
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	88bb      	ldrh	r3, [r7, #4]
 8003a32:	4619      	mov	r1, r3
 8003a34:	f7ff ff28 	bl	8003888 <BSP_LCD_DrawPixel>
 8003a38:	e012      	b.n	8003a60 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	4413      	add	r3, r2
 8003a42:	b298      	uxth	r0, r3
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <DrawChar+0x16c>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4911      	ldr	r1, [pc, #68]	; (8003a90 <DrawChar+0x170>)
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3304      	adds	r3, #4
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	88bb      	ldrh	r3, [r7, #4]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7ff ff14 	bl	8003888 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	3301      	adds	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	8a3b      	ldrh	r3, [r7, #16]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3c4      	bcc.n	80039f8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003a6e:	88bb      	ldrh	r3, [r7, #4]
 8003a70:	3301      	adds	r3, #1
 8003a72:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3301      	adds	r3, #1
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	8a7b      	ldrh	r3, [r7, #18]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d384      	bcc.n	800398c <DrawChar+0x6c>
  }
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200009c0 	.word	0x200009c0
 8003a90:	200009c4 	.word	0x200009c4

08003a94 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <FillBuffer+0x68>)
 8003aa4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003aa8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <FillBuffer+0x68>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003ab0:	4a12      	ldr	r2, [pc, #72]	; (8003afc <FillBuffer+0x68>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <FillBuffer+0x68>)
 8003ab8:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <FillBuffer+0x6c>)
 8003aba:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003abc:	480f      	ldr	r0, [pc, #60]	; (8003afc <FillBuffer+0x68>)
 8003abe:	f000 fe5d 	bl	800477c <HAL_DMA2D_Init>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d115      	bne.n	8003af4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	480c      	ldr	r0, [pc, #48]	; (8003afc <FillBuffer+0x68>)
 8003acc:	f000 ffbe 	bl	8004a4c <HAL_DMA2D_ConfigLayer>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10e      	bne.n	8003af4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69f9      	ldr	r1, [r7, #28]
 8003ae0:	4806      	ldr	r0, [pc, #24]	; (8003afc <FillBuffer+0x68>)
 8003ae2:	f000 fe9e 	bl	8004822 <HAL_DMA2D_Start>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d103      	bne.n	8003af4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003aec:	210a      	movs	r1, #10
 8003aee:	4803      	ldr	r0, [pc, #12]	; (8003afc <FillBuffer+0x68>)
 8003af0:	f000 fec2 	bl	8004878 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000950 	.word	0x20000950
 8003b00:	4002b000 	.word	0x4002b000

08003b04 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b0a:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <BSP_SDRAM_Init+0xb0>)
 8003b0c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003b0e:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b10:	2202      	movs	r2, #2
 8003b12:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b16:	2207      	movs	r2, #7
 8003b18:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b22:	2207      	movs	r2, #7
 8003b24:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b28:	2202      	movs	r2, #2
 8003b2a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b2e:	2202      	movs	r2, #2
 8003b30:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003b32:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b34:	2202      	movs	r2, #2
 8003b36:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b46:	2204      	movs	r2, #4
 8003b48:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b58:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003b5c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b6a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b7e:	f000 f87f 	bl	8003c80 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003b82:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <BSP_SDRAM_Init+0xb4>)
 8003b84:	480a      	ldr	r0, [pc, #40]	; (8003bb0 <BSP_SDRAM_Init+0xac>)
 8003b86:	f003 fba9 	bl	80072dc <HAL_SDRAM_Init>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <BSP_SDRAM_Init+0xb8>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e002      	b.n	8003b9e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <BSP_SDRAM_Init+0xb8>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003b9e:	f240 506a 	movw	r0, #1386	; 0x56a
 8003ba2:	f000 f80d 	bl	8003bc0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <BSP_SDRAM_Init+0xb8>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200009e4 	.word	0x200009e4
 8003bb4:	a0000140 	.word	0xa0000140
 8003bb8:	20000a18 	.word	0x20000a18
 8003bbc:	2000036c 	.word	0x2000036c

08003bc0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003bd2:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be8:	4923      	ldr	r1, [pc, #140]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bea:	4824      	ldr	r0, [pc, #144]	; (8003c7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bec:	f003 fbb4 	bl	8007358 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f000 facf 	bl	8004194 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bfe:	2208      	movs	r2, #8
 8003c00:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c12:	4919      	ldr	r1, [pc, #100]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c14:	4819      	ldr	r0, [pc, #100]	; (8003c7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c16:	f003 fb9f 	bl	8007358 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c22:	2208      	movs	r2, #8
 8003c24:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c28:	2204      	movs	r2, #4
 8003c2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c36:	4910      	ldr	r1, [pc, #64]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c38:	4810      	ldr	r0, [pc, #64]	; (8003c7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c3a:	f003 fb8d 	bl	8007358 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003c3e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003c42:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c46:	2204      	movs	r2, #4
 8003c48:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c60:	4905      	ldr	r1, [pc, #20]	; (8003c78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c62:	4806      	ldr	r0, [pc, #24]	; (8003c7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c64:	f003 fb78 	bl	8007358 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4804      	ldr	r0, [pc, #16]	; (8003c7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c6c:	f003 fb9f 	bl	80073ae <HAL_SDRAM_ProgramRefreshRate>
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000a34 	.word	0x20000a34
 8003c7c:	200009e4 	.word	0x200009e4

08003c80 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b090      	sub	sp, #64	; 0x40
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80ec 	beq.w	8003e6a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c96:	4b77      	ldr	r3, [pc, #476]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	4a76      	ldr	r2, [pc, #472]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6393      	str	r3, [r2, #56]	; 0x38
 8003ca2:	4b74      	ldr	r3, [pc, #464]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	4b70      	ldr	r3, [pc, #448]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a6f      	ldr	r2, [pc, #444]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	4b69      	ldr	r3, [pc, #420]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a68      	ldr	r2, [pc, #416]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cd4:	f043 0302 	orr.w	r3, r3, #2
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b66      	ldr	r3, [pc, #408]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	4b62      	ldr	r3, [pc, #392]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a61      	ldr	r2, [pc, #388]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b5f      	ldr	r3, [pc, #380]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	4b5b      	ldr	r3, [pc, #364]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a5a      	ldr	r2, [pc, #360]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d0c:	f043 0308 	orr.w	r3, r3, #8
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
 8003d12:	4b58      	ldr	r3, [pc, #352]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	4a53      	ldr	r2, [pc, #332]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d28:	f043 0310 	orr.w	r3, r3, #16
 8003d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2e:	4b51      	ldr	r3, [pc, #324]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	4b4d      	ldr	r3, [pc, #308]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a4c      	ldr	r2, [pc, #304]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d44:	f043 0320 	orr.w	r3, r3, #32
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	4a45      	ldr	r2, [pc, #276]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d64:	6313      	str	r3, [r2, #48]	; 0x30
 8003d66:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <BSP_SDRAM_MspInit+0x1f4>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003d76:	2302      	movs	r3, #2
 8003d78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003d7e:	230c      	movs	r3, #12
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003d82:	2360      	movs	r3, #96	; 0x60
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	483a      	ldr	r0, [pc, #232]	; (8003e78 <BSP_SDRAM_MspInit+0x1f8>)
 8003d8e:	f000 ff8b 	bl	8004ca8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003d92:	2301      	movs	r3, #1
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4837      	ldr	r0, [pc, #220]	; (8003e7c <BSP_SDRAM_MspInit+0x1fc>)
 8003d9e:	f000 ff83 	bl	8004ca8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003da2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dac:	4619      	mov	r1, r3
 8003dae:	4834      	ldr	r0, [pc, #208]	; (8003e80 <BSP_SDRAM_MspInit+0x200>)
 8003db0:	f000 ff7a 	bl	8004ca8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003db4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4830      	ldr	r0, [pc, #192]	; (8003e84 <BSP_SDRAM_MspInit+0x204>)
 8003dc2:	f000 ff71 	bl	8004ca8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003dc6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	482d      	ldr	r0, [pc, #180]	; (8003e88 <BSP_SDRAM_MspInit+0x208>)
 8003dd4:	f000 ff68 	bl	8004ca8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003dd8:	f248 1333 	movw	r3, #33075	; 0x8133
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de2:	4619      	mov	r1, r3
 8003de4:	4829      	ldr	r0, [pc, #164]	; (8003e8c <BSP_SDRAM_MspInit+0x20c>)
 8003de6:	f000 ff5f 	bl	8004ca8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003dea:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfc:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e04:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e0c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e14:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e1c:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e22:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <BSP_SDRAM_MspInit+0x214>)
 8003e40:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
 8003e48:	4a11      	ldr	r2, [pc, #68]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003e4e:	4810      	ldr	r0, [pc, #64]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e50:	f000 fb84 	bl	800455c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003e54:	480e      	ldr	r0, [pc, #56]	; (8003e90 <BSP_SDRAM_MspInit+0x210>)
 8003e56:	f000 fad3 	bl	8004400 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	210f      	movs	r1, #15
 8003e5e:	2038      	movs	r0, #56	; 0x38
 8003e60:	f000 fa97 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003e64:	2038      	movs	r0, #56	; 0x38
 8003e66:	f000 fab0 	bl	80043ca <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003e6a:	bf00      	nop
 8003e6c:	3740      	adds	r7, #64	; 0x40
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40020400 	.word	0x40020400
 8003e7c:	40020800 	.word	0x40020800
 8003e80:	40020c00 	.word	0x40020c00
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40021400 	.word	0x40021400
 8003e8c:	40021800 	.word	0x40021800
 8003e90:	20000a44 	.word	0x20000a44
 8003e94:	40026410 	.word	0x40026410

08003e98 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	80fb      	strh	r3, [r7, #6]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <BSP_TS_Init+0x64>)
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <BSP_TS_Init+0x68>)
 8003eb4:	88bb      	ldrh	r3, [r7, #4]
 8003eb6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <BSP_TS_Init+0x6c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2082      	movs	r0, #130	; 0x82
 8003ebe:	4798      	blx	r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f640 0311 	movw	r3, #2065	; 0x811
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d104      	bne.n	8003ed6 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <BSP_TS_Init+0x70>)
 8003ece:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <BSP_TS_Init+0x6c>)
 8003ed0:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <BSP_TS_Init+0x70>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2082      	movs	r0, #130	; 0x82
 8003ee4:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <BSP_TS_Init+0x70>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2082      	movs	r0, #130	; 0x82
 8003eee:	4798      	blx	r3
  }

  return ret;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000aa8 	.word	0x20000aa8
 8003f00:	20000aaa 	.word	0x20000aaa
 8003f04:	20000314 	.word	0x20000314
 8003f08:	20000aa4 	.word	0x20000aa4

08003f0c <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <BSP_TS_ITGetStatus+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	2082      	movs	r0, #130	; 0x82
 8003f18:	4798      	blx	r3
 8003f1a:	4603      	mov	r3, r0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000aa4 	.word	0x20000aa4

08003f24 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	; (800406c <BSP_TS_GetState+0x148>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2082      	movs	r0, #130	; 0x82
 8003f34:	4798      	blx	r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 808d 	beq.w	8004062 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003f48:	4b48      	ldr	r3, [pc, #288]	; (800406c <BSP_TS_GetState+0x148>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f107 020c 	add.w	r2, r7, #12
 8003f52:	f107 010e 	add.w	r1, r7, #14
 8003f56:	2082      	movs	r0, #130	; 0x82
 8003f58:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003f5a:	89bb      	ldrh	r3, [r7, #12]
 8003f5c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003f64:	89bb      	ldrh	r3, [r7, #12]
 8003f66:	4a42      	ldr	r2, [pc, #264]	; (8004070 <BSP_TS_GetState+0x14c>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003f70:	8abb      	ldrh	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	82bb      	strh	r3, [r7, #20]
 8003f7a:	e008      	b.n	8003f8e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003f7c:	4b3d      	ldr	r3, [pc, #244]	; (8004074 <BSP_TS_GetState+0x150>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	8aba      	ldrh	r2, [r7, #20]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d903      	bls.n	8003f8e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003f86:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <BSP_TS_GetState+0x150>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003f8e:	8abb      	ldrh	r3, [r7, #20]
 8003f90:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003f92:	89fb      	ldrh	r3, [r7, #14]
 8003f94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d806      	bhi.n	8003faa <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003f9c:	89fb      	ldrh	r3, [r7, #14]
 8003f9e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003fa2:	330e      	adds	r3, #14
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	81fb      	strh	r3, [r7, #14]
 8003fa8:	e005      	b.n	8003fb6 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <BSP_TS_GetState+0x154>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	08db      	lsrs	r3, r3, #3
 8003fc0:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003fc2:	8afb      	ldrh	r3, [r7, #22]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	82fb      	strh	r3, [r7, #22]
 8003fcc:	e008      	b.n	8003fe0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003fce:	4b2b      	ldr	r3, [pc, #172]	; (800407c <BSP_TS_GetState+0x158>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	8afa      	ldrh	r2, [r7, #22]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d903      	bls.n	8003fe0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003fd8:	4b28      	ldr	r3, [pc, #160]	; (800407c <BSP_TS_GetState+0x158>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003fe0:	8afb      	ldrh	r3, [r7, #22]
 8003fe2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <BSP_TS_GetState+0x15c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d906      	bls.n	8003ffe <BSP_TS_GetState+0xda>
 8003ff0:	89fa      	ldrh	r2, [r7, #14]
 8003ff2:	4b23      	ldr	r3, [pc, #140]	; (8004080 <BSP_TS_GetState+0x15c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	e005      	b.n	800400a <BSP_TS_GetState+0xe6>
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <BSP_TS_GetState+0x15c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	b29a      	uxth	r2, r3
 8004004:	89fb      	ldrh	r3, [r7, #14]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b29b      	uxth	r3, r3
 800400a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800400c:	89bb      	ldrh	r3, [r7, #12]
 800400e:	461a      	mov	r2, r3
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <BSP_TS_GetState+0x160>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d906      	bls.n	8004026 <BSP_TS_GetState+0x102>
 8004018:	89ba      	ldrh	r2, [r7, #12]
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <BSP_TS_GetState+0x160>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	b29b      	uxth	r3, r3
 8004024:	e005      	b.n	8004032 <BSP_TS_GetState+0x10e>
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <BSP_TS_GetState+0x160>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	b29a      	uxth	r2, r3
 800402c:	89bb      	ldrh	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	b29b      	uxth	r3, r3
 8004032:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004034:	8a7a      	ldrh	r2, [r7, #18]
 8004036:	8a3b      	ldrh	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	2b05      	cmp	r3, #5
 800403c:	dd07      	ble.n	800404e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800403e:	89fb      	ldrh	r3, [r7, #14]
 8004040:	461a      	mov	r2, r3
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <BSP_TS_GetState+0x15c>)
 8004044:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004046:	89bb      	ldrh	r3, [r7, #12]
 8004048:	461a      	mov	r2, r3
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <BSP_TS_GetState+0x160>)
 800404c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <BSP_TS_GetState+0x15c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <BSP_TS_GetState+0x160>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	809a      	strh	r2, [r3, #4]
  }
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000aa4 	.word	0x20000aa4
 8004070:	ba2e8ba3 	.word	0xba2e8ba3
 8004074:	20000aaa 	.word	0x20000aaa
 8004078:	88888889 	.word	0x88888889
 800407c:	20000aa8 	.word	0x20000aa8
 8004080:	20000aac 	.word	0x20000aac
 8004084:	20000ab0 	.word	0x20000ab0

08004088 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <BSP_TS_ITClear+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	2082      	movs	r0, #130	; 0x82
 8004094:	4798      	blx	r3
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000aa4 	.word	0x20000aa4

080040a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_Init+0x40>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <HAL_Init+0x40>)
 80040aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_Init+0x40>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <HAL_Init+0x40>)
 80040b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_Init+0x40>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <HAL_Init+0x40>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c8:	2003      	movs	r0, #3
 80040ca:	f000 f957 	bl	800437c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ce:	200f      	movs	r0, #15
 80040d0:	f000 f810 	bl	80040f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040d4:	f000 f806 	bl	80040e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023c00 	.word	0x40023c00

080040e4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040fc:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_InitTick+0x54>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_InitTick+0x58>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	4619      	mov	r1, r3
 8004106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410a:	fbb3 f3f1 	udiv	r3, r3, r1
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f967 	bl	80043e6 <HAL_SYSTICK_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00e      	b.n	8004140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d80a      	bhi.n	800413e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004128:	2200      	movs	r2, #0
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f000 f92f 	bl	8004392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004134:	4a06      	ldr	r2, [pc, #24]	; (8004150 <HAL_InitTick+0x5c>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200002d8 	.word	0x200002d8
 800414c:	20000374 	.word	0x20000374
 8004150:	20000370 	.word	0x20000370

08004154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_IncTick+0x20>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_IncTick+0x24>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4413      	add	r3, r2
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_IncTick+0x24>)
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000374 	.word	0x20000374
 8004178:	20000ab4 	.word	0x20000ab4

0800417c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return uwTick;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_GetTick+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000ab4 	.word	0x20000ab4

08004194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7ff ffee 	bl	800417c <HAL_GetTick>
 80041a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d005      	beq.n	80041ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_Delay+0x44>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041ba:	bf00      	nop
 80041bc:	f7ff ffde 	bl	800417c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d8f7      	bhi.n	80041bc <HAL_Delay+0x28>
  {
  }
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000374 	.word	0x20000374

080041dc <__NVIC_SetPriorityGrouping>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800420c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420e:	4a04      	ldr	r2, [pc, #16]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	60d3      	str	r3, [r2, #12]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <__NVIC_GetPriorityGrouping>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <__NVIC_GetPriorityGrouping+0x18>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 0307 	and.w	r3, r3, #7
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <__NVIC_EnableIRQ>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	2b00      	cmp	r3, #0
 8004250:	db0b      	blt.n	800426a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	4907      	ldr	r1, [pc, #28]	; (8004278 <__NVIC_EnableIRQ+0x38>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2001      	movs	r0, #1
 8004262:	fa00 f202 	lsl.w	r2, r0, r2
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000e100 	.word	0xe000e100

0800427c <__NVIC_SetPriority>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	bf28      	it	cs
 80042ee:	2304      	movcs	r3, #4
 80042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d902      	bls.n	8004300 <NVIC_EncodePriority+0x30>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3b03      	subs	r3, #3
 80042fe:	e000      	b.n	8004302 <NVIC_EncodePriority+0x32>
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	f04f 32ff 	mov.w	r2, #4294967295
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	401a      	ands	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	f04f 31ff 	mov.w	r1, #4294967295
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43d9      	mvns	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4313      	orrs	r3, r2
         );
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004348:	d301      	bcc.n	800434e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434a:	2301      	movs	r3, #1
 800434c:	e00f      	b.n	800436e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <SysTick_Config+0x40>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004356:	210f      	movs	r1, #15
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	f7ff ff8e 	bl	800427c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <SysTick_Config+0x40>)
 8004362:	2200      	movs	r2, #0
 8004364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <SysTick_Config+0x40>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff29 	bl	80041dc <__NVIC_SetPriorityGrouping>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a4:	f7ff ff3e 	bl	8004224 <__NVIC_GetPriorityGrouping>
 80043a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f7ff ff8e 	bl	80042d0 <NVIC_EncodePriority>
 80043b4:	4602      	mov	r2, r0
 80043b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff5d 	bl	800427c <__NVIC_SetPriority>
}
 80043c2:	bf00      	nop
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff31 	bl	8004240 <__NVIC_EnableIRQ>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ffa2 	bl	8004338 <SysTick_Config>
 80043f4:	4603      	mov	r3, r0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800440c:	f7ff feb6 	bl	800417c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e099      	b.n	8004550 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800443c:	e00f      	b.n	800445e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800443e:	f7ff fe9d 	bl	800417c <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b05      	cmp	r3, #5
 800444a:	d908      	bls.n	800445e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e078      	b.n	8004550 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e8      	bne.n	800443e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_DMA_Init+0x158>)
 8004478:	4013      	ands	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800448a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d107      	bne.n	80044c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	4313      	orrs	r3, r2
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d117      	bne.n	8004522 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8bd 	bl	8004684 <DMA_CheckFifoParam>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2240      	movs	r2, #64	; 0x40
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800451e:	2301      	movs	r3, #1
 8004520:	e016      	b.n	8004550 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f874 	bl	8004618 <DMA_CalcBaseAndBitshift>
 8004530:	4603      	mov	r3, r0
 8004532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	223f      	movs	r2, #63	; 0x3f
 800453a:	409a      	lsls	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	f010803f 	.word	0xf010803f

0800455c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e050      	b.n	8004610 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d101      	bne.n	800457e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
 800457c:	e048      	b.n	8004610 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2221      	movs	r2, #33	; 0x21
 80045bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f82a 	bl	8004618 <DMA_CalcBaseAndBitshift>
 80045c4:	4603      	mov	r3, r0
 80045c6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	223f      	movs	r2, #63	; 0x3f
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3b10      	subs	r3, #16
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <DMA_CalcBaseAndBitshift+0x64>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <DMA_CalcBaseAndBitshift+0x68>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d909      	bls.n	800465a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	1d1a      	adds	r2, r3, #4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	659a      	str	r2, [r3, #88]	; 0x58
 8004658:	e007      	b.n	800466a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	aaaaaaab 	.word	0xaaaaaaab
 8004680:	0800dc40 	.word	0x0800dc40

08004684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11f      	bne.n	80046de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d856      	bhi.n	8004752 <DMA_CheckFifoParam+0xce>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <DMA_CheckFifoParam+0x28>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046cf 	.word	0x080046cf
 80046b4:	080046bd 	.word	0x080046bd
 80046b8:	08004753 	.word	0x08004753
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d046      	beq.n	8004756 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046cc:	e043      	b.n	8004756 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046d6:	d140      	bne.n	800475a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046dc:	e03d      	b.n	800475a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e6:	d121      	bne.n	800472c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d837      	bhi.n	800475e <DMA_CheckFifoParam+0xda>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <DMA_CheckFifoParam+0x70>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004705 	.word	0x08004705
 80046f8:	0800470b 	.word	0x0800470b
 80046fc:	08004705 	.word	0x08004705
 8004700:	0800471d 	.word	0x0800471d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      break;
 8004708:	e030      	b.n	800476c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d025      	beq.n	8004762 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471a:	e022      	b.n	8004762 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004724:	d11f      	bne.n	8004766 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800472a:	e01c      	b.n	8004766 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d903      	bls.n	800473a <DMA_CheckFifoParam+0xb6>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d003      	beq.n	8004740 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004738:	e018      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
      break;
 800473e:	e015      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00e      	beq.n	800476a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      break;
 8004750:	e00b      	b.n	800476a <DMA_CheckFifoParam+0xe6>
      break;
 8004752:	bf00      	nop
 8004754:	e00a      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
 8004758:	e008      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 800475a:	bf00      	nop
 800475c:	e006      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;   
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 800476a:	bf00      	nop
    }
  } 
  
  return status; 
 800476c:	7bfb      	ldrb	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e03b      	b.n	8004806 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f833 	bl	800480e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	f023 0107 	bic.w	r1, r3, #7
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80047e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68d1      	ldr	r1, [r2, #12]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af02      	add	r7, sp, #8
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_DMA2D_Start+0x1c>
 800483a:	2302      	movs	r3, #2
 800483c:	e018      	b.n	8004870 <HAL_DMA2D_Start+0x4e>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f989 	bl	8004b70 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d056      	beq.n	8004942 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004894:	f7ff fc72 	bl	800417c <HAL_GetTick>
 8004898:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800489a:	e04b      	b.n	8004934 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d023      	beq.n	80048f6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048bc:	f043 0202 	orr.w	r2, r3, #2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	f043 0201 	orr.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2221      	movs	r2, #33	; 0x21
 80048e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0a5      	b.n	8004a42 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d01a      	beq.n	8004934 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80048fe:	f7ff fc3d 	bl	800417c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <HAL_DMA2D_PollForTransfer+0x9c>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2203      	movs	r2, #3
 8004924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e086      	b.n	8004a42 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0ac      	beq.n	800489c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d061      	beq.n	8004a28 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004964:	f7ff fc0a 	bl	800417c <HAL_GetTick>
 8004968:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800496a:	e056      	b.n	8004a1a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800497a:	2b00      	cmp	r3, #0
 800497c:	d02e      	beq.n	80049dc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	f043 0201 	orr.w	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2229      	movs	r2, #41	; 0x29
 80049c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2204      	movs	r2, #4
 80049cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e032      	b.n	8004a42 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d01a      	beq.n	8004a1a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80049e4:	f7ff fbca 	bl	800417c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <HAL_DMA2D_PollForTransfer+0x182>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e013      	b.n	8004a42 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0a1      	beq.n	800496c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2212      	movs	r2, #18
 8004a2e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_DMA2D_ConfigLayer+0x20>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e079      	b.n	8004b60 <HAL_DMA2D_ConfigLayer+0x114>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	3318      	adds	r3, #24
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004a96:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <HAL_DMA2D_ConfigLayer+0x120>)
 8004a98:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b0a      	cmp	r3, #10
 8004aa0:	d003      	beq.n	8004aaa <HAL_DMA2D_ConfigLayer+0x5e>
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b09      	cmp	r3, #9
 8004aa8:	d107      	bne.n	8004aba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e005      	b.n	8004ac6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d120      	bne.n	8004b0e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	ea02 0103 	and.w	r1, r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b0a      	cmp	r3, #10
 8004af4:	d003      	beq.n	8004afe <HAL_DMA2D_ConfigLayer+0xb2>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b09      	cmp	r3, #9
 8004afc:	d127      	bne.n	8004b4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b0c:	e01f      	b.n	8004b4e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	ea02 0103 	and.w	r1, r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b0a      	cmp	r3, #10
 8004b36:	d003      	beq.n	8004b40 <HAL_DMA2D_ConfigLayer+0xf4>
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b09      	cmp	r3, #9
 8004b3e:	d106      	bne.n	8004b4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b4c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	ff03000f 	.word	0xff03000f

08004b70 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b08b      	sub	sp, #44	; 0x2c
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	041a      	lsls	r2, r3, #16
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba8:	d174      	bne.n	8004c94 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bb8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bc0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d108      	bne.n	8004be2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
 8004be0:	e053      	b.n	8004c8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d106      	bne.n	8004bf8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf6:	e048      	b.n	8004c8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d111      	bne.n	8004c24 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	0cdb      	lsrs	r3, r3, #19
 8004c04:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	0a9b      	lsrs	r3, r3, #10
 8004c0a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	02db      	lsls	r3, r3, #11
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	e032      	b.n	8004c8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d117      	bne.n	8004c5c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	0fdb      	lsrs	r3, r3, #31
 8004c30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	0cdb      	lsrs	r3, r3, #19
 8004c36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	0adb      	lsrs	r3, r3, #11
 8004c3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	029b      	lsls	r3, r3, #10
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	03db      	lsls	r3, r3, #15
 8004c52:	4313      	orrs	r3, r2
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	e016      	b.n	8004c8a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	0f1b      	lsrs	r3, r3, #28
 8004c60:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	0d1b      	lsrs	r3, r3, #20
 8004c66:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	0b1b      	lsrs	r3, r3, #12
 8004c6c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	011a      	lsls	r2, r3, #4
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	031b      	lsls	r3, r3, #12
 8004c82:	4313      	orrs	r3, r2
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004c92:	e003      	b.n	8004c9c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	60da      	str	r2, [r3, #12]
}
 8004c9c:	bf00      	nop
 8004c9e:	372c      	adds	r7, #44	; 0x2c
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	; 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e177      	b.n	8004fb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	f040 8166 	bne.w	8004fae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d00b      	beq.n	8004d02 <HAL_GPIO_Init+0x5a>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf6:	2b11      	cmp	r3, #17
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b12      	cmp	r3, #18
 8004d00:	d130      	bne.n	8004d64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d38:	2201      	movs	r2, #1
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 0201 	and.w	r2, r3, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d003      	beq.n	8004da4 <HAL_GPIO_Init+0xfc>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b12      	cmp	r3, #18
 8004da2:	d123      	bne.n	8004dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	08da      	lsrs	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3208      	adds	r2, #8
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	220f      	movs	r2, #15
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	08da      	lsrs	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3208      	adds	r2, #8
 8004de6:	69b9      	ldr	r1, [r7, #24]
 8004de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2203      	movs	r2, #3
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 0203 	and.w	r2, r3, #3
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80c0 	beq.w	8004fae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	4b66      	ldr	r3, [pc, #408]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	4a65      	ldr	r2, [pc, #404]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e3e:	4b63      	ldr	r3, [pc, #396]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e4a:	4a61      	ldr	r2, [pc, #388]	; (8004fd0 <HAL_GPIO_Init+0x328>)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	220f      	movs	r2, #15
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a58      	ldr	r2, [pc, #352]	; (8004fd4 <HAL_GPIO_Init+0x32c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d037      	beq.n	8004ee6 <HAL_GPIO_Init+0x23e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a57      	ldr	r2, [pc, #348]	; (8004fd8 <HAL_GPIO_Init+0x330>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d031      	beq.n	8004ee2 <HAL_GPIO_Init+0x23a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a56      	ldr	r2, [pc, #344]	; (8004fdc <HAL_GPIO_Init+0x334>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02b      	beq.n	8004ede <HAL_GPIO_Init+0x236>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a55      	ldr	r2, [pc, #340]	; (8004fe0 <HAL_GPIO_Init+0x338>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d025      	beq.n	8004eda <HAL_GPIO_Init+0x232>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a54      	ldr	r2, [pc, #336]	; (8004fe4 <HAL_GPIO_Init+0x33c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01f      	beq.n	8004ed6 <HAL_GPIO_Init+0x22e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a53      	ldr	r2, [pc, #332]	; (8004fe8 <HAL_GPIO_Init+0x340>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d019      	beq.n	8004ed2 <HAL_GPIO_Init+0x22a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_GPIO_Init+0x344>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_GPIO_Init+0x226>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a51      	ldr	r2, [pc, #324]	; (8004ff0 <HAL_GPIO_Init+0x348>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00d      	beq.n	8004eca <HAL_GPIO_Init+0x222>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a50      	ldr	r2, [pc, #320]	; (8004ff4 <HAL_GPIO_Init+0x34c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <HAL_GPIO_Init+0x21e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a4f      	ldr	r2, [pc, #316]	; (8004ff8 <HAL_GPIO_Init+0x350>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_GPIO_Init+0x21a>
 8004ebe:	2309      	movs	r3, #9
 8004ec0:	e012      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e010      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	e00e      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004eca:	2307      	movs	r3, #7
 8004ecc:	e00c      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ece:	2306      	movs	r3, #6
 8004ed0:	e00a      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ed2:	2305      	movs	r3, #5
 8004ed4:	e008      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	e006      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004eda:	2303      	movs	r3, #3
 8004edc:	e004      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e002      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_GPIO_Init+0x240>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	f002 0203 	and.w	r2, r2, #3
 8004eee:	0092      	lsls	r2, r2, #2
 8004ef0:	4093      	lsls	r3, r2
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ef8:	4935      	ldr	r1, [pc, #212]	; (8004fd0 <HAL_GPIO_Init+0x328>)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	089b      	lsrs	r3, r3, #2
 8004efe:	3302      	adds	r3, #2
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f06:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f2a:	4a34      	ldr	r2, [pc, #208]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f30:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f5a:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f84:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fa8:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <HAL_GPIO_Init+0x354>)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	f67f ae84 	bls.w	8004cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40013800 	.word	0x40013800
 8004fd4:	40020000 	.word	0x40020000
 8004fd8:	40020400 	.word	0x40020400
 8004fdc:	40020800 	.word	0x40020800
 8004fe0:	40020c00 	.word	0x40020c00
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40021400 	.word	0x40021400
 8004fec:	40021800 	.word	0x40021800
 8004ff0:	40021c00 	.word	0x40021c00
 8004ff4:	40022000 	.word	0x40022000
 8004ff8:	40022400 	.word	0x40022400
 8004ffc:	40013c00 	.word	0x40013c00

08005000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	887b      	ldrh	r3, [r7, #2]
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	e001      	b.n	8005022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005022:	7bfb      	ldrb	r3, [r7, #15]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
 800503c:	4613      	mov	r3, r2
 800503e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005040:	787b      	ldrb	r3, [r7, #1]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005046:	887a      	ldrh	r2, [r7, #2]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800504c:	e003      	b.n	8005056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800504e:	887b      	ldrh	r3, [r7, #2]
 8005050:	041a      	lsls	r2, r3, #16
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	619a      	str	r2, [r3, #24]
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	401a      	ands	r2, r3
 8005076:	887b      	ldrh	r3, [r7, #2]
 8005078:	429a      	cmp	r2, r3
 800507a:	d104      	bne.n	8005086 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	041a      	lsls	r2, r3, #16
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005084:	e002      	b.n	800508c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005086:	887a      	ldrh	r2, [r7, #2]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	619a      	str	r2, [r3, #24]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e12b      	b.n	8005302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f95d 	bl	800537e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2224      	movs	r2, #36	; 0x24
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050fc:	f001 ff1a 	bl	8006f34 <HAL_RCC_GetPCLK1Freq>
 8005100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4a81      	ldr	r2, [pc, #516]	; (800530c <HAL_I2C_Init+0x274>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d807      	bhi.n	800511c <HAL_I2C_Init+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a80      	ldr	r2, [pc, #512]	; (8005310 <HAL_I2C_Init+0x278>)
 8005110:	4293      	cmp	r3, r2
 8005112:	bf94      	ite	ls
 8005114:	2301      	movls	r3, #1
 8005116:	2300      	movhi	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e006      	b.n	800512a <HAL_I2C_Init+0x92>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4a7d      	ldr	r2, [pc, #500]	; (8005314 <HAL_I2C_Init+0x27c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	bf94      	ite	ls
 8005124:	2301      	movls	r3, #1
 8005126:	2300      	movhi	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0e7      	b.n	8005302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a78      	ldr	r2, [pc, #480]	; (8005318 <HAL_I2C_Init+0x280>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0c9b      	lsrs	r3, r3, #18
 800513c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a6a      	ldr	r2, [pc, #424]	; (800530c <HAL_I2C_Init+0x274>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d802      	bhi.n	800516c <HAL_I2C_Init+0xd4>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	3301      	adds	r3, #1
 800516a:	e009      	b.n	8005180 <HAL_I2C_Init+0xe8>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	4a69      	ldr	r2, [pc, #420]	; (800531c <HAL_I2C_Init+0x284>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	3301      	adds	r3, #1
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	430b      	orrs	r3, r1
 8005186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	495c      	ldr	r1, [pc, #368]	; (800530c <HAL_I2C_Init+0x274>)
 800519c:	428b      	cmp	r3, r1
 800519e:	d819      	bhi.n	80051d4 <HAL_I2C_Init+0x13c>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1e59      	subs	r1, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051b4:	400b      	ands	r3, r1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_I2C_Init+0x138>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1e59      	subs	r1, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ce:	e051      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 80051d0:	2304      	movs	r3, #4
 80051d2:	e04f      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d111      	bne.n	8005200 <HAL_I2C_Init+0x168>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e58      	subs	r0, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	440b      	add	r3, r1
 80051ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	e012      	b.n	8005226 <HAL_I2C_Init+0x18e>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e58      	subs	r0, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	0099      	lsls	r1, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	fbb0 f3f3 	udiv	r3, r0, r3
 8005216:	3301      	adds	r3, #1
 8005218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521c:	2b00      	cmp	r3, #0
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_I2C_Init+0x196>
 800522a:	2301      	movs	r3, #1
 800522c:	e022      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10e      	bne.n	8005254 <HAL_I2C_Init+0x1bc>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	1e58      	subs	r0, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6859      	ldr	r1, [r3, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	440b      	add	r3, r1
 8005244:	fbb0 f3f3 	udiv	r3, r0, r3
 8005248:	3301      	adds	r3, #1
 800524a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005252:	e00f      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1e58      	subs	r0, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	0099      	lsls	r1, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	fbb0 f3f3 	udiv	r3, r0, r3
 800526a:	3301      	adds	r3, #1
 800526c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	6809      	ldr	r1, [r1, #0]
 8005278:	4313      	orrs	r3, r2
 800527a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6911      	ldr	r1, [r2, #16]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68d2      	ldr	r2, [r2, #12]
 80052ae:	4311      	orrs	r1, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	000186a0 	.word	0x000186a0
 8005310:	001e847f 	.word	0x001e847f
 8005314:	003d08ff 	.word	0x003d08ff
 8005318:	431bde83 	.word	0x431bde83
 800531c:	10624dd3 	.word	0x10624dd3

08005320 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e021      	b.n	8005376 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2224      	movs	r2, #36	; 0x24
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f821 	bl	8005392 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	4608      	mov	r0, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	461a      	mov	r2, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	817b      	strh	r3, [r7, #10]
 80053ba:	460b      	mov	r3, r1
 80053bc:	813b      	strh	r3, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053c2:	f7fe fedb 	bl	800417c <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	f040 80d9 	bne.w	8005588 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2319      	movs	r3, #25
 80053dc:	2201      	movs	r2, #1
 80053de:	496d      	ldr	r1, [pc, #436]	; (8005594 <HAL_I2C_Mem_Write+0x1ec>)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fc89 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
 80053ee:	e0cc      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_I2C_Mem_Write+0x56>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0c5      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d007      	beq.n	8005424 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2221      	movs	r2, #33	; 0x21
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2240      	movs	r2, #64	; 0x40
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a4d      	ldr	r2, [pc, #308]	; (8005598 <HAL_I2C_Mem_Write+0x1f0>)
 8005464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005466:	88f8      	ldrh	r0, [r7, #6]
 8005468:	893a      	ldrh	r2, [r7, #8]
 800546a:	8979      	ldrh	r1, [r7, #10]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	4603      	mov	r3, r0
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fac4 	bl	8005a04 <I2C_RequestMemoryWrite>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d052      	beq.n	8005528 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e081      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fd0a 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b04      	cmp	r3, #4
 800549c:	d107      	bne.n	80054ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e06b      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d11b      	bne.n	8005528 <HAL_I2C_Mem_Write+0x180>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1aa      	bne.n	8005486 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fcf6 	bl	8005f26 <I2C_WaitOnBTFFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2b04      	cmp	r3, #4
 8005546:	d107      	bne.n	8005558 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005556:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e016      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	00100002 	.word	0x00100002
 8005598:	ffff0000 	.word	0xffff0000

0800559c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	4608      	mov	r0, r1
 80055a6:	4611      	mov	r1, r2
 80055a8:	461a      	mov	r2, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	817b      	strh	r3, [r7, #10]
 80055ae:	460b      	mov	r3, r1
 80055b0:	813b      	strh	r3, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055b6:	f7fe fde1 	bl	800417c <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	f040 8208 	bne.w	80059da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2319      	movs	r3, #25
 80055d0:	2201      	movs	r2, #1
 80055d2:	497b      	ldr	r1, [pc, #492]	; (80057c0 <HAL_I2C_Mem_Read+0x224>)
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fb8f 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
 80055e2:	e1fb      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_I2C_Mem_Read+0x56>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e1f4      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d007      	beq.n	8005618 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005626:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2222      	movs	r2, #34	; 0x22
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2240      	movs	r2, #64	; 0x40
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a5b      	ldr	r2, [pc, #364]	; (80057c4 <HAL_I2C_Mem_Read+0x228>)
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800565a:	88f8      	ldrh	r0, [r7, #6]
 800565c:	893a      	ldrh	r2, [r7, #8]
 800565e:	8979      	ldrh	r1, [r7, #10]
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4603      	mov	r3, r0
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fa5e 	bl	8005b2c <I2C_RequestMemoryRead>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e1b0      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d113      	bne.n	80056aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005682:	2300      	movs	r3, #0
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	623b      	str	r3, [r7, #32]
 8005696:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e184      	b.n	80059b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d11b      	bne.n	80056ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e164      	b.n	80059b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d11b      	bne.n	800572a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005700:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005710:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	e144      	b.n	80059b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005740:	e138      	b.n	80059b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	2b03      	cmp	r3, #3
 8005748:	f200 80f1 	bhi.w	800592e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005750:	2b01      	cmp	r3, #1
 8005752:	d123      	bne.n	800579c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fc25 	bl	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e139      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
 800579a:	e10b      	b.n	80059b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d14e      	bne.n	8005842 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	2200      	movs	r2, #0
 80057ac:	4906      	ldr	r1, [pc, #24]	; (80057c8 <HAL_I2C_Mem_Read+0x22c>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 faa2 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e10e      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
 80057be:	bf00      	nop
 80057c0:	00100002 	.word	0x00100002
 80057c4:	ffff0000 	.word	0xffff0000
 80057c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005840:	e0b8      	b.n	80059b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2200      	movs	r2, #0
 800584a:	4966      	ldr	r1, [pc, #408]	; (80059e4 <HAL_I2C_Mem_Read+0x448>)
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fa53 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0bf      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	2200      	movs	r2, #0
 80058a6:	494f      	ldr	r1, [pc, #316]	; (80059e4 <HAL_I2C_Mem_Read+0x448>)
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fa25 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e091      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800592c:	e042      	b.n	80059b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fb38 	bl	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e04c      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d118      	bne.n	80059b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f47f aec2 	bne.w	8005742 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	; 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	00010004 	.word	0x00010004

080059e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f6:	b2db      	uxtb	r3, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	817b      	strh	r3, [r7, #10]
 8005a16:	460b      	mov	r3, r1
 8005a18:	813b      	strh	r3, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f95c 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e05f      	b.n	8005b20 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a60:	897b      	ldrh	r3, [r7, #10]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	492c      	ldr	r1, [pc, #176]	; (8005b28 <I2C_RequestMemoryWrite+0x124>)
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f995 	bl	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e04c      	b.n	8005b20 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9e:	6a39      	ldr	r1, [r7, #32]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f9ff 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00d      	beq.n	8005ac8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d107      	bne.n	8005ac4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e02b      	b.n	8005b20 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d105      	bne.n	8005ada <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ace:	893b      	ldrh	r3, [r7, #8]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	611a      	str	r2, [r3, #16]
 8005ad8:	e021      	b.n	8005b1e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ada:	893b      	ldrh	r3, [r7, #8]
 8005adc:	0a1b      	lsrs	r3, r3, #8
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	6a39      	ldr	r1, [r7, #32]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f9d9 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d107      	bne.n	8005b10 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e005      	b.n	8005b20 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b14:	893b      	ldrh	r3, [r7, #8]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	00010002 	.word	0x00010002

08005b2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	4608      	mov	r0, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	817b      	strh	r3, [r7, #10]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	813b      	strh	r3, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f8c0 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00c      	beq.n	8005b98 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e0a9      	b.n	8005cec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b98:	897b      	ldrh	r3, [r7, #10]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ba6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	4951      	ldr	r1, [pc, #324]	; (8005cf4 <I2C_RequestMemoryRead+0x1c8>)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f8f9 	bl	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e096      	b.n	8005cec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd6:	6a39      	ldr	r1, [r7, #32]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f963 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00d      	beq.n	8005c00 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d107      	bne.n	8005bfc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e075      	b.n	8005cec <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d105      	bne.n	8005c12 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c06:	893b      	ldrh	r3, [r7, #8]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	e021      	b.n	8005c56 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	0a1b      	lsrs	r3, r3, #8
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	6a39      	ldr	r1, [r7, #32]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f93d 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00d      	beq.n	8005c4c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d107      	bne.n	8005c48 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e04f      	b.n	8005cec <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c4c:	893b      	ldrh	r3, [r7, #8]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c58:	6a39      	ldr	r1, [r7, #32]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f922 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d107      	bne.n	8005c7e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e034      	b.n	8005cec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f82a 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e013      	b.n	8005cec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cc4:	897b      	ldrh	r3, [r7, #10]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	4906      	ldr	r1, [pc, #24]	; (8005cf4 <I2C_RequestMemoryRead+0x1c8>)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f863 	bl	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	00010002 	.word	0x00010002

08005cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d08:	e025      	b.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d021      	beq.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fe fa33 	bl	800417c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d116      	bne.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e023      	b.n	8005d9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10d      	bne.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	43da      	mvns	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	e00c      	b.n	8005d96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	43da      	mvns	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4013      	ands	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bf0c      	ite	eq
 8005d8e:	2301      	moveq	r3, #1
 8005d90:	2300      	movne	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d0b6      	beq.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005db4:	e051      	b.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc4:	d123      	bne.n	8005e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f043 0204 	orr.w	r2, r3, #4
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e046      	b.n	8005e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d021      	beq.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e16:	f7fe f9b1 	bl	800417c <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d116      	bne.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e020      	b.n	8005e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d10c      	bne.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e00b      	b.n	8005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	43da      	mvns	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d18d      	bne.n	8005db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb0:	e02d      	b.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f8ce 	bl	8006054 <I2C_IsAcknowledgeFailed>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e02d      	b.n	8005f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d021      	beq.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fe f957 	bl	800417c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d116      	bne.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e007      	b.n	8005f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d1ca      	bne.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f32:	e02d      	b.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f88d 	bl	8006054 <I2C_IsAcknowledgeFailed>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e02d      	b.n	8005fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d021      	beq.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	f7fe f916 	bl	800417c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d116      	bne.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e007      	b.n	8005fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d1ca      	bne.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb4:	e042      	b.n	800603c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d119      	bne.n	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0210 	mvn.w	r2, #16
 8005fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e029      	b.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff8:	f7fe f8c0 	bl	800417c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e007      	b.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d1b5      	bne.n	8005fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606a:	d11b      	bne.n	80060a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006074:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	f043 0204 	orr.w	r2, r3, #4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e0bf      	b.n	8006246 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8ba 	bl	8006254 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6999      	ldr	r1, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800610c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6899      	ldr	r1, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b4a      	ldr	r3, [pc, #296]	; (8006250 <HAL_LTDC_Init+0x19c>)
 8006128:	400b      	ands	r3, r1
 800612a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68d9      	ldr	r1, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <HAL_LTDC_Init+0x19c>)
 8006156:	400b      	ands	r3, r1
 8006158:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	041b      	lsls	r3, r3, #16
 8006160:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68d9      	ldr	r1, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6919      	ldr	r1, [r3, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b33      	ldr	r3, [pc, #204]	; (8006250 <HAL_LTDC_Init+0x19c>)
 8006184:	400b      	ands	r3, r1
 8006186:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	041b      	lsls	r3, r3, #16
 800618e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6919      	ldr	r1, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6959      	ldr	r1, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <HAL_LTDC_Init+0x19c>)
 80061b2:	400b      	ands	r3, r1
 80061b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6959      	ldr	r1, [r3, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061e4:	041b      	lsls	r3, r3, #16
 80061e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0206 	orr.w	r2, r2, #6
 8006222:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	f000f800 	.word	0xf000f800

08006254 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006268:	b5b0      	push	{r4, r5, r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_LTDC_ConfigLayer+0x1a>
 800627e:	2302      	movs	r3, #2
 8006280:	e02c      	b.n	80062dc <HAL_LTDC_ConfigLayer+0x74>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2134      	movs	r1, #52	; 0x34
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4614      	mov	r4, r2
 80062a6:	461d      	mov	r5, r3
 80062a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f83b 	bl	8006338 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2201      	movs	r2, #1
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bdb0      	pop	{r4, r5, r7, pc}

080062e4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_LTDC_EnableDither+0x16>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e016      	b.n	8006328 <HAL_LTDC_EnableDither+0x44>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_LTDC_EnableDither+0x50>)
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <HAL_LTDC_EnableDither+0x50>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006314:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40016800 	.word	0x40016800

08006338 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006338:	b480      	push	{r7}
 800633a:	b089      	sub	sp, #36	; 0x24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006354:	4413      	add	r3, r2
 8006356:	041b      	lsls	r3, r3, #16
 8006358:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	01db      	lsls	r3, r3, #7
 8006364:	4413      	add	r3, r2
 8006366:	3384      	adds	r3, #132	; 0x84
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	4611      	mov	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	01d2      	lsls	r2, r2, #7
 8006374:	440a      	add	r2, r1
 8006376:	3284      	adds	r2, #132	; 0x84
 8006378:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800637c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800638e:	4413      	add	r3, r2
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4619      	mov	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	01db      	lsls	r3, r3, #7
 800639c:	440b      	add	r3, r1
 800639e:	3384      	adds	r3, #132	; 0x84
 80063a0:	4619      	mov	r1, r3
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063b6:	4413      	add	r3, r2
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	01db      	lsls	r3, r3, #7
 80063c6:	4413      	add	r3, r2
 80063c8:	3384      	adds	r3, #132	; 0x84
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	4611      	mov	r1, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	01d2      	lsls	r2, r2, #7
 80063d6:	440a      	add	r2, r1
 80063d8:	3284      	adds	r2, #132	; 0x84
 80063da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063ee:	4413      	add	r3, r2
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4619      	mov	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	01db      	lsls	r3, r3, #7
 80063fc:	440b      	add	r3, r1
 80063fe:	3384      	adds	r3, #132	; 0x84
 8006400:	4619      	mov	r1, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4313      	orrs	r3, r2
 8006406:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	01db      	lsls	r3, r3, #7
 8006412:	4413      	add	r3, r2
 8006414:	3384      	adds	r3, #132	; 0x84
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	4611      	mov	r1, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	01d2      	lsls	r2, r2, #7
 8006422:	440a      	add	r2, r1
 8006424:	3284      	adds	r2, #132	; 0x84
 8006426:	f023 0307 	bic.w	r3, r3, #7
 800642a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	01db      	lsls	r3, r3, #7
 8006436:	4413      	add	r3, r2
 8006438:	3384      	adds	r3, #132	; 0x84
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	4413      	add	r3, r2
 800646a:	3384      	adds	r3, #132	; 0x84
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	3384      	adds	r3, #132	; 0x84
 800647c:	461a      	mov	r2, r3
 800647e:	2300      	movs	r3, #0
 8006480:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006488:	461a      	mov	r2, r3
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	431a      	orrs	r2, r3
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	431a      	orrs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	440b      	add	r3, r1
 800649e:	3384      	adds	r3, #132	; 0x84
 80064a0:	4619      	mov	r1, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	01db      	lsls	r3, r3, #7
 80064b2:	4413      	add	r3, r2
 80064b4:	3384      	adds	r3, #132	; 0x84
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	4611      	mov	r1, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	01d2      	lsls	r2, r2, #7
 80064c2:	440a      	add	r2, r1
 80064c4:	3284      	adds	r2, #132	; 0x84
 80064c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	01db      	lsls	r3, r3, #7
 80064d6:	4413      	add	r3, r2
 80064d8:	3384      	adds	r3, #132	; 0x84
 80064da:	461a      	mov	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	01db      	lsls	r3, r3, #7
 80064ec:	4413      	add	r3, r2
 80064ee:	3384      	adds	r3, #132	; 0x84
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	4611      	mov	r1, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	01d2      	lsls	r2, r2, #7
 80064fc:	440a      	add	r2, r1
 80064fe:	3284      	adds	r2, #132	; 0x84
 8006500:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	6809      	ldr	r1, [r1, #0]
 8006516:	4608      	mov	r0, r1
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	01c9      	lsls	r1, r1, #7
 800651c:	4401      	add	r1, r0
 800651e:	3184      	adds	r1, #132	; 0x84
 8006520:	4313      	orrs	r3, r2
 8006522:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	01db      	lsls	r3, r3, #7
 800652e:	4413      	add	r3, r2
 8006530:	3384      	adds	r3, #132	; 0x84
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	01db      	lsls	r3, r3, #7
 800653e:	4413      	add	r3, r2
 8006540:	3384      	adds	r3, #132	; 0x84
 8006542:	461a      	mov	r2, r3
 8006544:	2300      	movs	r3, #0
 8006546:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	4413      	add	r3, r2
 8006554:	3384      	adds	r3, #132	; 0x84
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006566:	2304      	movs	r3, #4
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e01b      	b.n	80065a4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d102      	bne.n	800657a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006574:	2303      	movs	r3, #3
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	e014      	b.n	80065a4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d00b      	beq.n	800659a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006586:	2b02      	cmp	r3, #2
 8006588:	d007      	beq.n	800659a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800658e:	2b03      	cmp	r3, #3
 8006590:	d003      	beq.n	800659a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006596:	2b07      	cmp	r3, #7
 8006598:	d102      	bne.n	80065a0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800659a:	2302      	movs	r3, #2
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e001      	b.n	80065a4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80065a0:	2301      	movs	r3, #1
 80065a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	01db      	lsls	r3, r3, #7
 80065ae:	4413      	add	r3, r2
 80065b0:	3384      	adds	r3, #132	; 0x84
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	4611      	mov	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	01d2      	lsls	r2, r2, #7
 80065be:	440a      	add	r2, r1
 80065c0:	3284      	adds	r2, #132	; 0x84
 80065c2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80065c6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	041a      	lsls	r2, r3, #16
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6859      	ldr	r1, [r3, #4]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	1acb      	subs	r3, r1, r3
 80065de:	69f9      	ldr	r1, [r7, #28]
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	3303      	adds	r3, #3
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	6809      	ldr	r1, [r1, #0]
 80065ea:	4608      	mov	r0, r1
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	01c9      	lsls	r1, r1, #7
 80065f0:	4401      	add	r1, r0
 80065f2:	3184      	adds	r1, #132	; 0x84
 80065f4:	4313      	orrs	r3, r2
 80065f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	01db      	lsls	r3, r3, #7
 8006602:	4413      	add	r3, r2
 8006604:	3384      	adds	r3, #132	; 0x84
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	4611      	mov	r1, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	01d2      	lsls	r2, r2, #7
 8006612:	440a      	add	r2, r1
 8006614:	3284      	adds	r2, #132	; 0x84
 8006616:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800661a:	f023 0307 	bic.w	r3, r3, #7
 800661e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	01db      	lsls	r3, r3, #7
 800662a:	4413      	add	r3, r2
 800662c:	3384      	adds	r3, #132	; 0x84
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	01db      	lsls	r3, r3, #7
 8006640:	4413      	add	r3, r2
 8006642:	3384      	adds	r3, #132	; 0x84
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	4611      	mov	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	01d2      	lsls	r2, r2, #7
 8006650:	440a      	add	r2, r1
 8006652:	3284      	adds	r2, #132	; 0x84
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	6013      	str	r3, [r2, #0]
}
 800665a:	bf00      	nop
 800665c:	3724      	adds	r7, #36	; 0x24
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e25e      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d075      	beq.n	8006772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006686:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b04      	cmp	r3, #4
 8006690:	d00c      	beq.n	80066ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006692:	4b85      	ldr	r3, [pc, #532]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800669a:	2b08      	cmp	r3, #8
 800669c:	d112      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800669e:	4b82      	ldr	r3, [pc, #520]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066aa:	d10b      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ac:	4b7e      	ldr	r3, [pc, #504]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05b      	beq.n	8006770 <HAL_RCC_OscConfig+0x108>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d157      	bne.n	8006770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e239      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066cc:	d106      	bne.n	80066dc <HAL_RCC_OscConfig+0x74>
 80066ce:	4b76      	ldr	r3, [pc, #472]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e01d      	b.n	8006718 <HAL_RCC_OscConfig+0xb0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0x98>
 80066e6:	4b70      	ldr	r3, [pc, #448]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6f      	ldr	r2, [pc, #444]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4b6d      	ldr	r3, [pc, #436]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6c      	ldr	r2, [pc, #432]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e00b      	b.n	8006718 <HAL_RCC_OscConfig+0xb0>
 8006700:	4b69      	ldr	r3, [pc, #420]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a68      	ldr	r2, [pc, #416]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4b66      	ldr	r3, [pc, #408]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a65      	ldr	r2, [pc, #404]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d013      	beq.n	8006748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fd fd2c 	bl	800417c <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006728:	f7fd fd28 	bl	800417c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	; 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e1fe      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673a:	4b5b      	ldr	r3, [pc, #364]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0xc0>
 8006746:	e014      	b.n	8006772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fd fd18 	bl	800417c <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006750:	f7fd fd14 	bl	800417c <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e1ea      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006762:	4b51      	ldr	r3, [pc, #324]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0xe8>
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d063      	beq.n	8006846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800677e:	4b4a      	ldr	r3, [pc, #296]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678a:	4b47      	ldr	r3, [pc, #284]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006792:	2b08      	cmp	r3, #8
 8006794:	d11c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006796:	4b44      	ldr	r3, [pc, #272]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d116      	bne.n	80067d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a2:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_RCC_OscConfig+0x152>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e1be      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4937      	ldr	r1, [pc, #220]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ce:	e03a      	b.n	8006846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d020      	beq.n	800681a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d8:	4b34      	ldr	r3, [pc, #208]	; (80068ac <HAL_RCC_OscConfig+0x244>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fd fccd 	bl	800417c <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e6:	f7fd fcc9 	bl	800417c <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e19f      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f8:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006804:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4925      	ldr	r1, [pc, #148]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	e015      	b.n	8006846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <HAL_RCC_OscConfig+0x244>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fd fcac 	bl	800417c <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006828:	f7fd fca8 	bl	800417c <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e17e      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d036      	beq.n	80068c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <HAL_RCC_OscConfig+0x248>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006860:	f7fd fc8c 	bl	800417c <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006868:	f7fd fc88 	bl	800417c <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e15e      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCC_OscConfig+0x240>)
 800687c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x200>
 8006886:	e01b      	b.n	80068c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCC_OscConfig+0x248>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800688e:	f7fd fc75 	bl	800417c <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006894:	e00e      	b.n	80068b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006896:	f7fd fc71 	bl	800417c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d907      	bls.n	80068b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e147      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
 80068a8:	40023800 	.word	0x40023800
 80068ac:	42470000 	.word	0x42470000
 80068b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b4:	4b88      	ldr	r3, [pc, #544]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ea      	bne.n	8006896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8097 	beq.w	80069fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d2:	4b81      	ldr	r3, [pc, #516]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10f      	bne.n	80068fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	4b7d      	ldr	r3, [pc, #500]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	4a7c      	ldr	r2, [pc, #496]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ec:	6413      	str	r3, [r2, #64]	; 0x40
 80068ee:	4b7a      	ldr	r3, [pc, #488]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f6:	60bb      	str	r3, [r7, #8]
 80068f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fa:	2301      	movs	r3, #1
 80068fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fe:	4b77      	ldr	r3, [pc, #476]	; (8006adc <HAL_RCC_OscConfig+0x474>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d118      	bne.n	800693c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690a:	4b74      	ldr	r3, [pc, #464]	; (8006adc <HAL_RCC_OscConfig+0x474>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a73      	ldr	r2, [pc, #460]	; (8006adc <HAL_RCC_OscConfig+0x474>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006916:	f7fd fc31 	bl	800417c <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fd fc2d 	bl	800417c <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e103      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006930:	4b6a      	ldr	r3, [pc, #424]	; (8006adc <HAL_RCC_OscConfig+0x474>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x2ea>
 8006944:	4b64      	ldr	r3, [pc, #400]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a63      	ldr	r2, [pc, #396]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
 8006950:	e01c      	b.n	800698c <HAL_RCC_OscConfig+0x324>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b05      	cmp	r3, #5
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x30c>
 800695a:	4b5f      	ldr	r3, [pc, #380]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a5e      	ldr	r2, [pc, #376]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006960:	f043 0304 	orr.w	r3, r3, #4
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	4b5c      	ldr	r3, [pc, #368]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a5b      	ldr	r2, [pc, #364]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0x324>
 8006974:	4b58      	ldr	r3, [pc, #352]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a57      	ldr	r2, [pc, #348]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
 8006980:	4b55      	ldr	r3, [pc, #340]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	4a54      	ldr	r2, [pc, #336]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006986:	f023 0304 	bic.w	r3, r3, #4
 800698a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006994:	f7fd fbf2 	bl	800417c <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699c:	f7fd fbee 	bl	800417c <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0c2      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b2:	4b49      	ldr	r3, [pc, #292]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0ee      	beq.n	800699c <HAL_RCC_OscConfig+0x334>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c0:	f7fd fbdc 	bl	800417c <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c6:	e00a      	b.n	80069de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fd fbd8 	bl	800417c <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0ac      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069de:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1ee      	bne.n	80069c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d105      	bne.n	80069fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f0:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	4a38      	ldr	r2, [pc, #224]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8098 	beq.w	8006b36 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a06:	4b34      	ldr	r3, [pc, #208]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d05c      	beq.n	8006acc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d141      	bne.n	8006a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1a:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a20:	f7fd fbac 	bl	800417c <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fd fba8 	bl	800417c <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e07e      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	4b27      	ldr	r3, [pc, #156]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	019b      	lsls	r3, r3, #6
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	491b      	ldr	r1, [pc, #108]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a70:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a76:	f7fd fb81 	bl	800417c <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a7e:	f7fd fb7d 	bl	800417c <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e053      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a90:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x416>
 8006a9c:	e04b      	b.n	8006b36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9e:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fd fb6a 	bl	800417c <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fd fb66 	bl	800417c <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e03c      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x444>
 8006aca:	e034      	b.n	8006b36 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e02f      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40007000 	.word	0x40007000
 8006ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae4:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <HAL_RCC_OscConfig+0x4d8>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d11c      	bne.n	8006b32 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d115      	bne.n	8006b32 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d10d      	bne.n	8006b32 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d106      	bne.n	8006b32 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d001      	beq.n	8006b36 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40023800 	.word	0x40023800

08006b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e0cc      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b58:	4b68      	ldr	r3, [pc, #416]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d90c      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b66:	4b65      	ldr	r3, [pc, #404]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0b8      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d020      	beq.n	8006bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b98:	4b59      	ldr	r3, [pc, #356]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb0:	4b53      	ldr	r3, [pc, #332]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a52      	ldr	r2, [pc, #328]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bbc:	4b50      	ldr	r3, [pc, #320]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	494d      	ldr	r1, [pc, #308]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d044      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be2:	4b47      	ldr	r3, [pc, #284]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d119      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e07f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d003      	beq.n	8006c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d107      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e06f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c12:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e067      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c22:	4b37      	ldr	r3, [pc, #220]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 0203 	bic.w	r2, r3, #3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	4934      	ldr	r1, [pc, #208]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c34:	f7fd faa2 	bl	800417c <HAL_GetTick>
 8006c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3a:	e00a      	b.n	8006c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c3c:	f7fd fa9e 	bl	800417c <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e04f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c52:	4b2b      	ldr	r3, [pc, #172]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 020c 	and.w	r2, r3, #12
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d1eb      	bne.n	8006c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d20c      	bcs.n	8006c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c72:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e032      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c98:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4916      	ldr	r1, [pc, #88]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	490e      	ldr	r1, [pc, #56]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cca:	f000 f821 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	490a      	ldr	r1, [pc, #40]	; (8006d04 <HAL_RCC_ClockConfig+0x1c0>)
 8006cdc:	5ccb      	ldrb	r3, [r1, r3]
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ce6:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd fa02 	bl	80040f4 <HAL_InitTick>

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40023c00 	.word	0x40023c00
 8006d00:	40023800 	.word	0x40023800
 8006d04:	0800a240 	.word	0x0800a240
 8006d08:	200002d8 	.word	0x200002d8
 8006d0c:	20000370 	.word	0x20000370

08006d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d14:	b094      	sub	sp, #80	; 0x50
 8006d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d20:	2300      	movs	r3, #0
 8006d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d28:	4b79      	ldr	r3, [pc, #484]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 030c 	and.w	r3, r3, #12
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d00d      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x40>
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	f200 80e1 	bhi.w	8006efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0x34>
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d003      	beq.n	8006d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d42:	e0db      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d44:	4b73      	ldr	r3, [pc, #460]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d48:	e0db      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d4a:	4b73      	ldr	r3, [pc, #460]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d4e:	e0d8      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d50:	4b6f      	ldr	r3, [pc, #444]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d5a:	4b6d      	ldr	r3, [pc, #436]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d063      	beq.n	8006e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d66:	4b6a      	ldr	r3, [pc, #424]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	099b      	lsrs	r3, r3, #6
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d78:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	f04f 0000 	mov.w	r0, #0
 8006d8a:	f04f 0100 	mov.w	r1, #0
 8006d8e:	0159      	lsls	r1, r3, #5
 8006d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d94:	0150      	lsls	r0, r2, #5
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	1a51      	subs	r1, r2, r1
 8006d9e:	6139      	str	r1, [r7, #16]
 8006da0:	4629      	mov	r1, r5
 8006da2:	eb63 0301 	sbc.w	r3, r3, r1
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006db4:	4659      	mov	r1, fp
 8006db6:	018b      	lsls	r3, r1, #6
 8006db8:	4651      	mov	r1, sl
 8006dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	018a      	lsls	r2, r1, #6
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8006dc8:	4659      	mov	r1, fp
 8006dca:	eb63 0901 	sbc.w	r9, r3, r1
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	f04f 0300 	mov.w	r3, #0
 8006dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006de2:	4690      	mov	r8, r2
 8006de4:	4699      	mov	r9, r3
 8006de6:	4623      	mov	r3, r4
 8006de8:	eb18 0303 	adds.w	r3, r8, r3
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	462b      	mov	r3, r5
 8006df0:	eb49 0303 	adc.w	r3, r9, r3
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e02:	4629      	mov	r1, r5
 8006e04:	024b      	lsls	r3, r1, #9
 8006e06:	4621      	mov	r1, r4
 8006e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	024a      	lsls	r2, r1, #9
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e16:	2200      	movs	r2, #0
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e20:	f7f9 fc52 	bl	80006c8 <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4613      	mov	r3, r2
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e2c:	e058      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2e:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	099b      	lsrs	r3, r3, #6
 8006e34:	2200      	movs	r2, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	4611      	mov	r1, r2
 8006e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e3e:	623b      	str	r3, [r7, #32]
 8006e40:	2300      	movs	r3, #0
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
 8006e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e48:	4642      	mov	r2, r8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	f04f 0000 	mov.w	r0, #0
 8006e50:	f04f 0100 	mov.w	r1, #0
 8006e54:	0159      	lsls	r1, r3, #5
 8006e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e5a:	0150      	lsls	r0, r2, #5
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4641      	mov	r1, r8
 8006e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e66:	4649      	mov	r1, r9
 8006e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e80:	ebb2 040a 	subs.w	r4, r2, sl
 8006e84:	eb63 050b 	sbc.w	r5, r3, fp
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	00eb      	lsls	r3, r5, #3
 8006e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e96:	00e2      	lsls	r2, r4, #3
 8006e98:	4614      	mov	r4, r2
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	4643      	mov	r3, r8
 8006e9e:	18e3      	adds	r3, r4, r3
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	eb45 0303 	adc.w	r3, r5, r3
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	028b      	lsls	r3, r1, #10
 8006eba:	4621      	mov	r1, r4
 8006ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	028a      	lsls	r2, r1, #10
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eca:	2200      	movs	r2, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	61fa      	str	r2, [r7, #28]
 8006ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed4:	f7f9 fbf8 	bl	80006c8 <__aeabi_uldivmod>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4613      	mov	r3, r2
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	3301      	adds	r3, #1
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006efa:	e002      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3750      	adds	r7, #80	; 0x50
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	00f42400 	.word	0x00f42400
 8006f18:	007a1200 	.word	0x007a1200

08006f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f20:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f22:	681b      	ldr	r3, [r3, #0]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	200002d8 	.word	0x200002d8

08006f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f38:	f7ff fff0 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	0a9b      	lsrs	r3, r3, #10
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	4903      	ldr	r1, [pc, #12]	; (8006f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f4a:	5ccb      	ldrb	r3, [r1, r3]
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40023800 	.word	0x40023800
 8006f58:	0800a250 	.word	0x0800a250

08006f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10b      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d105      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d075      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f90:	4b91      	ldr	r3, [pc, #580]	; (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f96:	f7fd f8f1 	bl	800417c <HAL_GetTick>
 8006f9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f9e:	f7fd f8ed 	bl	800417c <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e189      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fb0:	4b8a      	ldr	r3, [pc, #552]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f0      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	019a      	lsls	r2, r3, #6
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	071b      	lsls	r3, r3, #28
 8006fd4:	4981      	ldr	r1, [pc, #516]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01f      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fe8:	4b7c      	ldr	r3, [pc, #496]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fee:	0f1b      	lsrs	r3, r3, #28
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	019a      	lsls	r2, r3, #6
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	061b      	lsls	r3, r3, #24
 8007002:	431a      	orrs	r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	071b      	lsls	r3, r3, #28
 8007008:	4974      	ldr	r1, [pc, #464]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007010:	4b72      	ldr	r3, [pc, #456]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007016:	f023 021f 	bic.w	r2, r3, #31
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	3b01      	subs	r3, #1
 8007020:	496e      	ldr	r1, [pc, #440]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	019a      	lsls	r2, r3, #6
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	061b      	lsls	r3, r3, #24
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	071b      	lsls	r3, r3, #28
 8007048:	4964      	ldr	r1, [pc, #400]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007050:	4b61      	ldr	r3, [pc, #388]	; (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007052:	2201      	movs	r2, #1
 8007054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007056:	f7fd f891 	bl	800417c <HAL_GetTick>
 800705a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800705c:	e008      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800705e:	f7fd f88d 	bl	800417c <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e129      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007070:	4b5a      	ldr	r3, [pc, #360]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0f0      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d105      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007090:	2b00      	cmp	r3, #0
 8007092:	d079      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007094:	4b52      	ldr	r3, [pc, #328]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800709a:	f7fd f86f 	bl	800417c <HAL_GetTick>
 800709e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070a0:	e008      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070a2:	f7fd f86b 	bl	800417c <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e107      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070b4:	4b49      	ldr	r3, [pc, #292]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c0:	d0ef      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d020      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070ce:	4b43      	ldr	r3, [pc, #268]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d4:	0f1b      	lsrs	r3, r3, #28
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	019a      	lsls	r2, r3, #6
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	061b      	lsls	r3, r3, #24
 80070e8:	431a      	orrs	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	071b      	lsls	r3, r3, #28
 80070ee:	493b      	ldr	r1, [pc, #236]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	3b01      	subs	r3, #1
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	4934      	ldr	r1, [pc, #208]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800710a:	4313      	orrs	r3, r2
 800710c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01e      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800711c:	4b2f      	ldr	r3, [pc, #188]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007122:	0e1b      	lsrs	r3, r3, #24
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	019a      	lsls	r2, r3, #6
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	061b      	lsls	r3, r3, #24
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	071b      	lsls	r3, r3, #28
 800713c:	4927      	ldr	r1, [pc, #156]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007144:	4b25      	ldr	r3, [pc, #148]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800714a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	4922      	ldr	r1, [pc, #136]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800715a:	4b21      	ldr	r3, [pc, #132]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007160:	f7fd f80c 	bl	800417c <HAL_GetTick>
 8007164:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007166:	e008      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007168:	f7fd f808 	bl	800417c <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e0a4      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800717a:	4b18      	ldr	r3, [pc, #96]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007186:	d1ef      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 808b 	beq.w	80072ac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	4a0f      	ldr	r2, [pc, #60]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a4:	6413      	str	r3, [r2, #64]	; 0x40
 80071a6:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071b2:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a0b      	ldr	r2, [pc, #44]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071be:	f7fc ffdd 	bl	800417c <HAL_GetTick>
 80071c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071c4:	e010      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071c6:	f7fc ffd9 	bl	800417c <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d909      	bls.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e075      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80071d8:	42470068 	.word	0x42470068
 80071dc:	40023800 	.word	0x40023800
 80071e0:	42470070 	.word	0x42470070
 80071e4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071e8:	4b38      	ldr	r3, [pc, #224]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0e8      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071f4:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02f      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	d028      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007212:	4b2f      	ldr	r3, [pc, #188]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800721c:	4b2d      	ldr	r3, [pc, #180]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007222:	4b2c      	ldr	r3, [pc, #176]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007228:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800722e:	4b28      	ldr	r3, [pc, #160]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b01      	cmp	r3, #1
 8007238:	d114      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800723a:	f7fc ff9f 	bl	800417c <HAL_GetTick>
 800723e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	e00a      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007242:	f7fc ff9b 	bl	800417c <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e035      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007258:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ee      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007270:	d10d      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007272:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007286:	4912      	ldr	r1, [pc, #72]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007288:	4313      	orrs	r3, r2
 800728a:	608b      	str	r3, [r1, #8]
 800728c:	e005      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800728e:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	4a0f      	ldr	r2, [pc, #60]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007294:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800729c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a6:	490a      	ldr	r1, [pc, #40]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80072be:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80072c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40007000 	.word	0x40007000
 80072d0:	40023800 	.word	0x40023800
 80072d4:	42470e40 	.word	0x42470e40
 80072d8:	424711e0 	.word	0x424711e0

080072dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e025      	b.n	800733c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d106      	bne.n	800730a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f81d 	bl	8007344 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3304      	adds	r3, #4
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f000 ff0f 	bl	8008140 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	461a      	mov	r2, r3
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	f000 ff7a 	bl	8008226 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d101      	bne.n	8007374 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
 8007372:	e018      	b.n	80073a6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 ffcd 	bl	8008324 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d104      	bne.n	800739c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2205      	movs	r2, #5
 8007396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800739a:	e003      	b.n	80073a4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d101      	bne.n	80073c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80073c4:	2302      	movs	r3, #2
 80073c6:	e00e      	b.n	80073e6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 ffe0 	bl	800839c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e05d      	b.n	80074bc <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f87d 	bl	8007514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007430:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	431a      	orrs	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	ea42 0103 	orr.w	r1, r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	f003 0104 	and.w	r1, r3, #4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007490:	d104      	bne.n	800749c <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800749a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69da      	ldr	r2, [r3, #28]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e01a      	b.n	800750c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2202      	movs	r2, #2
 80074da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f81a 	bl	8007528 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	4613      	mov	r3, r2
 800754a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_SPI_Transmit+0x22>
 800755a:	2302      	movs	r3, #2
 800755c:	e140      	b.n	80077e0 <HAL_SPI_Transmit+0x2a4>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007566:	f7fc fe09 	bl	800417c <HAL_GetTick>
 800756a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	d002      	beq.n	8007582 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800757c:	2302      	movs	r3, #2
 800757e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007580:	e125      	b.n	80077ce <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_SPI_Transmit+0x52>
 8007588:	88fb      	ldrh	r3, [r7, #6]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007592:	e11c      	b.n	80077ce <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2203      	movs	r2, #3
 8007598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075da:	d107      	bne.n	80075ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ea:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f4:	d10f      	bne.n	8007616 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007614:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007620:	2b40      	cmp	r3, #64	; 0x40
 8007622:	d007      	beq.n	8007634 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800763c:	d14b      	bne.n	80076d6 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_SPI_Transmit+0x110>
 8007646:	8afb      	ldrh	r3, [r7, #22]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d13e      	bne.n	80076ca <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	1c9a      	adds	r2, r3, #2
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007670:	e02b      	b.n	80076ca <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d112      	bne.n	80076a6 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007684:	881a      	ldrh	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	1c9a      	adds	r2, r3, #2
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80076a4:	e011      	b.n	80076ca <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a6:	f7fc fd69 	bl	800417c <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d803      	bhi.n	80076be <HAL_SPI_Transmit+0x182>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Transmit+0x188>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076c8:	e081      	b.n	80077ce <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1ce      	bne.n	8007672 <HAL_SPI_Transmit+0x136>
 80076d4:	e04c      	b.n	8007770 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_SPI_Transmit+0x1a8>
 80076de:	8afb      	ldrh	r3, [r7, #22]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d140      	bne.n	8007766 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800770a:	e02c      	b.n	8007766 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d113      	bne.n	8007742 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	7812      	ldrb	r2, [r2, #0]
 8007726:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007740:	e011      	b.n	8007766 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007742:	f7fc fd1b 	bl	800417c <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d803      	bhi.n	800775a <HAL_SPI_Transmit+0x21e>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d102      	bne.n	8007760 <HAL_SPI_Transmit+0x224>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007764:	e033      	b.n	80077ce <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1cd      	bne.n	800770c <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007778:	d107      	bne.n	800778a <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007788:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fc94 	bl	80080bc <SPI_EndRxTxTransaction>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077a8:	2300      	movs	r3, #0
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	77fb      	strb	r3, [r7, #31]
 80077ca:	e000      	b.n	80077ce <HAL_SPI_Transmit+0x292>
  }

error:
 80077cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077de:	7ffb      	ldrb	r3, [r7, #31]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007804:	d112      	bne.n	800782c <HAL_SPI_Receive+0x44>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10e      	bne.n	800782c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2204      	movs	r2, #4
 8007812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007816:	88fa      	ldrh	r2, [r7, #6]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f95f 	bl	8007ae6 <HAL_SPI_TransmitReceive>
 8007828:	4603      	mov	r3, r0
 800782a:	e158      	b.n	8007ade <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_SPI_Receive+0x52>
 8007836:	2302      	movs	r3, #2
 8007838:	e151      	b.n	8007ade <HAL_SPI_Receive+0x2f6>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007842:	f7fc fc9b 	bl	800417c <HAL_GetTick>
 8007846:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	d002      	beq.n	800785a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007854:	2302      	movs	r3, #2
 8007856:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007858:	e138      	b.n	8007acc <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_Receive+0x7e>
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
    goto error;
 800786a:	e12f      	b.n	8007acc <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2204      	movs	r2, #4
 8007870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b2:	d116      	bne.n	80078e2 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078d2:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ea:	d107      	bne.n	80078fc <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d007      	beq.n	800791a <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007918:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d162      	bne.n	80079e8 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007922:	e02e      	b.n	8007982 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b01      	cmp	r3, #1
 8007930:	d115      	bne.n	800795e <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f103 020c 	add.w	r2, r3, #12
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800795c:	e011      	b.n	8007982 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800795e:	f7fc fc0d 	bl	800417c <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d803      	bhi.n	8007976 <HAL_SPI_Receive+0x18e>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d102      	bne.n	800797c <HAL_SPI_Receive+0x194>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007980:	e0a4      	b.n	8007acc <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1cb      	bne.n	8007924 <HAL_SPI_Receive+0x13c>
 800798c:	e031      	b.n	80079f2 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b01      	cmp	r3, #1
 800799a:	d113      	bne.n	80079c4 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	b292      	uxth	r2, r2
 80079a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	1c9a      	adds	r2, r3, #2
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079c2:	e011      	b.n	80079e8 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c4:	f7fc fbda 	bl	800417c <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d803      	bhi.n	80079dc <HAL_SPI_Receive+0x1f4>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d102      	bne.n	80079e2 <HAL_SPI_Receive+0x1fa>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079e6:	e071      	b.n	8007acc <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1cd      	bne.n	800798e <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079fa:	d142      	bne.n	8007a82 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a0a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2201      	movs	r2, #1
 8007a14:	2101      	movs	r1, #1
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fa81 	bl	8007f1e <SPI_WaitFlagStateUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007a26:	e051      	b.n	8007acc <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a30:	d107      	bne.n	8007a42 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	b292      	uxth	r2, r2
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e008      	b.n	8007a54 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f103 020c 	add.w	r2, r3, #12
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	7812      	ldrb	r2, [r2, #0]
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fa5d 	bl	8007f1e <SPI_WaitFlagStateUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6e:	f043 0202 	orr.w	r2, r3, #2
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007a7a:	e027      	b.n	8007acc <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fab3 	bl	8007ff2 <SPI_EndRxTransaction>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2220      	movs	r2, #32
 8007a96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d10a      	bne.n	8007abc <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aaa:	f043 0202 	orr.w	r2, r3, #2
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007aba:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	75fb      	strb	r3, [r7, #23]
 8007ac8:	e000      	b.n	8007acc <HAL_SPI_Receive+0x2e4>
  }

error :
 8007aca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b08e      	sub	sp, #56	; 0x38
 8007aea:	af02      	add	r7, sp, #8
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007af4:	2301      	movs	r3, #1
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x26>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e1f6      	b.n	8007efa <HAL_SPI_TransmitReceive+0x414>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b14:	f7fc fb32 	bl	800417c <HAL_GetTick>
 8007b18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b2a:	887b      	ldrh	r3, [r7, #2]
 8007b2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d00f      	beq.n	8007b56 <HAL_SPI_TransmitReceive+0x70>
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b3c:	d107      	bne.n	8007b4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d103      	bne.n	8007b4e <HAL_SPI_TransmitReceive+0x68>
 8007b46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d003      	beq.n	8007b56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b54:	e1c7      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x82>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x82>
 8007b62:	887b      	ldrh	r3, [r7, #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d103      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b6e:	e1ba      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d003      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2205      	movs	r2, #5
 8007b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	887a      	ldrh	r2, [r7, #2]
 8007b94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	887a      	ldrh	r2, [r7, #2]
 8007b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	887a      	ldrh	r2, [r7, #2]
 8007ba6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	887a      	ldrh	r2, [r7, #2]
 8007bac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc2:	d10f      	bne.n	8007be4 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007be2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d007      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0a:	f040 808b 	bne.w	8007d24 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_SPI_TransmitReceive+0x136>
 8007c16:	8b7b      	ldrh	r3, [r7, #26]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d178      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	881a      	ldrh	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	1c9a      	adds	r2, r3, #2
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c40:	e065      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d12d      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1c6>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d028      	beq.n	8007cac <HAL_SPI_TransmitReceive+0x1c6>
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d125      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	881a      	ldrh	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1c6>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9a:	d107      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007caa:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d119      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x208>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d014      	beq.n	8007cee <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	b292      	uxth	r2, r2
 8007cd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	1c9a      	adds	r2, r3, #2
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cea:	2301      	movs	r3, #1
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cee:	f7fc fa45 	bl	800417c <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d807      	bhi.n	8007d0e <HAL_SPI_TransmitReceive+0x228>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d003      	beq.n	8007d0e <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d0c:	e0eb      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d194      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x15c>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d18f      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x15c>
 8007d22:	e08e      	b.n	8007e42 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_SPI_TransmitReceive+0x24c>
 8007d2c:	8b7b      	ldrh	r3, [r7, #26]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d17d      	bne.n	8007e2e <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d58:	e069      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d12e      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x2e0>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d029      	beq.n	8007dc6 <HAL_SPI_TransmitReceive+0x2e0>
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d126      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10c      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x2e0>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db4:	d107      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dc4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d119      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x322>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d014      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e04:	2301      	movs	r3, #1
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e08:	f7fc f9b8 	bl	800417c <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d803      	bhi.n	8007e20 <HAL_SPI_TransmitReceive+0x33a>
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1e:	d102      	bne.n	8007e26 <HAL_SPI_TransmitReceive+0x340>
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e2c:	e05b      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d190      	bne.n	8007d5a <HAL_SPI_TransmitReceive+0x274>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d18b      	bne.n	8007d5a <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4a:	d117      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	2201      	movs	r2, #1
 8007e54:	2101      	movs	r1, #1
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f861 	bl	8007f1e <SPI_WaitFlagStateUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e66:	f043 0202 	orr.w	r2, r3, #2
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007e74:	e037      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d10d      	bne.n	8007ea6 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8e:	f043 0202 	orr.w	r2, r3, #2
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007e9e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f906 	bl	80080bc <SPI_EndRxTxTransaction>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d006      	beq.n	8007ec4 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ec2:	e010      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10b      	bne.n	8007ee4 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	e000      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8007ee4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3730      	adds	r7, #48	; 0x30
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f10:	b2db      	uxtb	r3, r3
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f2e:	e04c      	b.n	8007fca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d048      	beq.n	8007fca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007f38:	f7fc f920 	bl	800417c <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d902      	bls.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0x30>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d13d      	bne.n	8007fca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f66:	d111      	bne.n	8007f8c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f70:	d004      	beq.n	8007f7c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7a:	d107      	bne.n	8007f8c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f94:	d10f      	bne.n	8007fb6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e00f      	b.n	8007fea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	bf0c      	ite	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	2300      	movne	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d1a3      	bne.n	8007f30 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af02      	add	r7, sp, #8
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008006:	d111      	bne.n	800802c <SPI_EndRxTransaction+0x3a>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008010:	d004      	beq.n	800801c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801a:	d107      	bne.n	800802c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800802a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008034:	d12a      	bne.n	800808c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803e:	d012      	beq.n	8008066 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	2180      	movs	r1, #128	; 0x80
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff ff67 	bl	8007f1e <SPI_WaitFlagStateUntilTimeout>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d02d      	beq.n	80080b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e026      	b.n	80080b4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2200      	movs	r2, #0
 800806e:	2101      	movs	r1, #1
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff ff54 	bl	8007f1e <SPI_WaitFlagStateUntilTimeout>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01a      	beq.n	80080b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	f043 0220 	orr.w	r2, r3, #32
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e013      	b.n	80080b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2200      	movs	r2, #0
 8008094:	2101      	movs	r1, #1
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7ff ff41 	bl	8007f1e <SPI_WaitFlagStateUntilTimeout>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a6:	f043 0220 	orr.w	r2, r3, #32
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e000      	b.n	80080b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080c8:	4b1b      	ldr	r3, [pc, #108]	; (8008138 <SPI_EndRxTxTransaction+0x7c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1b      	ldr	r2, [pc, #108]	; (800813c <SPI_EndRxTxTransaction+0x80>)
 80080ce:	fba2 2303 	umull	r2, r3, r2, r3
 80080d2:	0d5b      	lsrs	r3, r3, #21
 80080d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080d8:	fb02 f303 	mul.w	r3, r2, r3
 80080dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080e6:	d112      	bne.n	800810e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2200      	movs	r2, #0
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff ff13 	bl	8007f1e <SPI_WaitFlagStateUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d016      	beq.n	800812c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	f043 0220 	orr.w	r2, r3, #32
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e00f      	b.n	800812e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00a      	beq.n	800812a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	3b01      	subs	r3, #1
 8008118:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008124:	2b80      	cmp	r3, #128	; 0x80
 8008126:	d0f2      	beq.n	800810e <SPI_EndRxTxTransaction+0x52>
 8008128:	e000      	b.n	800812c <SPI_EndRxTxTransaction+0x70>
        break;
 800812a:	bf00      	nop
  }

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200002d8 	.word	0x200002d8
 800813c:	165e9f81 	.word	0x165e9f81

08008140 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d029      	beq.n	80081ae <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008166:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800816a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008174:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800817a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008180:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008186:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800818c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008192:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008198:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800819e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	e034      	b.n	8008218 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081ba:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80081ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80081de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081e2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081ec:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80081f2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80081f8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80081fe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008204:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4313      	orrs	r3, r2
 800820a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008226:	b480      	push	{r7}
 8008228:	b087      	sub	sp, #28
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d02e      	beq.n	800829e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800824c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	3b01      	subs	r3, #1
 800825a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800825c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	3b01      	subs	r3, #1
 8008264:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008266:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	3b01      	subs	r3, #1
 800826e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008270:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	3b01      	subs	r3, #1
 8008278:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800827a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	3b01      	subs	r3, #1
 8008282:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008284:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	3b01      	subs	r3, #1
 800828c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800828e:	4313      	orrs	r3, r2
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	609a      	str	r2, [r3, #8]
 800829c:	e03b      	b.n	8008316 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082ae:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	3b01      	subs	r3, #1
 80082be:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80082c0:	4313      	orrs	r3, r2
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082d4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80082e4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80082ee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80082f8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	3b01      	subs	r3, #1
 8008300:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008302:	4313      	orrs	r3, r2
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008340:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800834a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008352:	4313      	orrs	r3, r2
 8008354:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800835c:	f7fb ff0e 	bl	800417c <HAL_GetTick>
 8008360:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008362:	e010      	b.n	8008386 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836a:	d00c      	beq.n	8008386 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <FMC_SDRAM_SendCommand+0x5e>
 8008372:	f7fb ff03 	bl	800417c <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	429a      	cmp	r2, r3
 8008380:	d201      	bcs.n	8008386 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e006      	b.n	8008394 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b20      	cmp	r3, #32
 8008390:	d0e8      	beq.n	8008364 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <arm_max_f32>:
 80083c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c8:	1e4f      	subs	r7, r1, #1
 80083ca:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80083ce:	f100 0e04 	add.w	lr, r0, #4
 80083d2:	edd0 7a00 	vldr	s15, [r0]
 80083d6:	d058      	beq.n	800848a <arm_max_f32+0xc6>
 80083d8:	3014      	adds	r0, #20
 80083da:	46c4      	mov	ip, r8
 80083dc:	2604      	movs	r6, #4
 80083de:	2400      	movs	r4, #0
 80083e0:	ed10 6a04 	vldr	s12, [r0, #-16]
 80083e4:	ed50 6a03 	vldr	s13, [r0, #-12]
 80083e8:	ed10 7a02 	vldr	s14, [r0, #-8]
 80083ec:	ed50 5a01 	vldr	s11, [r0, #-4]
 80083f0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80083f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f8:	bfc8      	it	gt
 80083fa:	eef0 7a46 	vmovgt.f32	s15, s12
 80083fe:	f1a6 0503 	sub.w	r5, r6, #3
 8008402:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008406:	bfc8      	it	gt
 8008408:	462c      	movgt	r4, r5
 800840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840e:	bf48      	it	mi
 8008410:	eef0 7a66 	vmovmi.f32	s15, s13
 8008414:	f1a6 0502 	sub.w	r5, r6, #2
 8008418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800841c:	bf48      	it	mi
 800841e:	462c      	movmi	r4, r5
 8008420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008424:	bf48      	it	mi
 8008426:	eef0 7a47 	vmovmi.f32	s15, s14
 800842a:	f106 35ff 	add.w	r5, r6, #4294967295
 800842e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008432:	bf48      	it	mi
 8008434:	462c      	movmi	r4, r5
 8008436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843a:	bf48      	it	mi
 800843c:	4634      	movmi	r4, r6
 800843e:	bf48      	it	mi
 8008440:	eef0 7a65 	vmovmi.f32	s15, s11
 8008444:	f1bc 0c01 	subs.w	ip, ip, #1
 8008448:	f100 0010 	add.w	r0, r0, #16
 800844c:	f106 0604 	add.w	r6, r6, #4
 8008450:	d1c6      	bne.n	80083e0 <arm_max_f32+0x1c>
 8008452:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8008456:	f017 0003 	ands.w	r0, r7, #3
 800845a:	d018      	beq.n	800848e <arm_max_f32+0xca>
 800845c:	1a08      	subs	r0, r1, r0
 800845e:	ecbe 7a01 	vldmia	lr!, {s14}
 8008462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846a:	bfc8      	it	gt
 800846c:	4604      	movgt	r4, r0
 800846e:	f100 0001 	add.w	r0, r0, #1
 8008472:	bfd8      	it	le
 8008474:	eeb0 7a67 	vmovle.f32	s14, s15
 8008478:	4281      	cmp	r1, r0
 800847a:	eef0 7a47 	vmov.f32	s15, s14
 800847e:	d1ee      	bne.n	800845e <arm_max_f32+0x9a>
 8008480:	ed82 7a00 	vstr	s14, [r2]
 8008484:	601c      	str	r4, [r3, #0]
 8008486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848a:	4644      	mov	r4, r8
 800848c:	e7e3      	b.n	8008456 <arm_max_f32+0x92>
 800848e:	eeb0 7a67 	vmov.f32	s14, s15
 8008492:	e7f5      	b.n	8008480 <arm_max_f32+0xbc>

08008494 <arm_rfft_fast_init_f32>:
 8008494:	084b      	lsrs	r3, r1, #1
 8008496:	2b80      	cmp	r3, #128	; 0x80
 8008498:	b410      	push	{r4}
 800849a:	8201      	strh	r1, [r0, #16]
 800849c:	8003      	strh	r3, [r0, #0]
 800849e:	d046      	beq.n	800852e <arm_rfft_fast_init_f32+0x9a>
 80084a0:	d916      	bls.n	80084d0 <arm_rfft_fast_init_f32+0x3c>
 80084a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084a6:	d03c      	beq.n	8008522 <arm_rfft_fast_init_f32+0x8e>
 80084a8:	d928      	bls.n	80084fc <arm_rfft_fast_init_f32+0x68>
 80084aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ae:	d01f      	beq.n	80084f0 <arm_rfft_fast_init_f32+0x5c>
 80084b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b4:	d112      	bne.n	80084dc <arm_rfft_fast_init_f32+0x48>
 80084b6:	4920      	ldr	r1, [pc, #128]	; (8008538 <arm_rfft_fast_init_f32+0xa4>)
 80084b8:	4a20      	ldr	r2, [pc, #128]	; (800853c <arm_rfft_fast_init_f32+0xa8>)
 80084ba:	4b21      	ldr	r3, [pc, #132]	; (8008540 <arm_rfft_fast_init_f32+0xac>)
 80084bc:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80084c0:	8184      	strh	r4, [r0, #12]
 80084c2:	6081      	str	r1, [r0, #8]
 80084c4:	6042      	str	r2, [r0, #4]
 80084c6:	6143      	str	r3, [r0, #20]
 80084c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084cc:	2000      	movs	r0, #0
 80084ce:	4770      	bx	lr
 80084d0:	2b20      	cmp	r3, #32
 80084d2:	d01c      	beq.n	800850e <arm_rfft_fast_init_f32+0x7a>
 80084d4:	2b40      	cmp	r3, #64	; 0x40
 80084d6:	d006      	beq.n	80084e6 <arm_rfft_fast_init_f32+0x52>
 80084d8:	2b10      	cmp	r3, #16
 80084da:	d01d      	beq.n	8008518 <arm_rfft_fast_init_f32+0x84>
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	2438      	movs	r4, #56	; 0x38
 80084e8:	4916      	ldr	r1, [pc, #88]	; (8008544 <arm_rfft_fast_init_f32+0xb0>)
 80084ea:	4a17      	ldr	r2, [pc, #92]	; (8008548 <arm_rfft_fast_init_f32+0xb4>)
 80084ec:	4b17      	ldr	r3, [pc, #92]	; (800854c <arm_rfft_fast_init_f32+0xb8>)
 80084ee:	e7e7      	b.n	80084c0 <arm_rfft_fast_init_f32+0x2c>
 80084f0:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80084f4:	4916      	ldr	r1, [pc, #88]	; (8008550 <arm_rfft_fast_init_f32+0xbc>)
 80084f6:	4a17      	ldr	r2, [pc, #92]	; (8008554 <arm_rfft_fast_init_f32+0xc0>)
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <arm_rfft_fast_init_f32+0xc4>)
 80084fa:	e7e1      	b.n	80084c0 <arm_rfft_fast_init_f32+0x2c>
 80084fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008500:	d1ec      	bne.n	80084dc <arm_rfft_fast_init_f32+0x48>
 8008502:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8008506:	4915      	ldr	r1, [pc, #84]	; (800855c <arm_rfft_fast_init_f32+0xc8>)
 8008508:	4a15      	ldr	r2, [pc, #84]	; (8008560 <arm_rfft_fast_init_f32+0xcc>)
 800850a:	4b16      	ldr	r3, [pc, #88]	; (8008564 <arm_rfft_fast_init_f32+0xd0>)
 800850c:	e7d8      	b.n	80084c0 <arm_rfft_fast_init_f32+0x2c>
 800850e:	2430      	movs	r4, #48	; 0x30
 8008510:	4915      	ldr	r1, [pc, #84]	; (8008568 <arm_rfft_fast_init_f32+0xd4>)
 8008512:	4a16      	ldr	r2, [pc, #88]	; (800856c <arm_rfft_fast_init_f32+0xd8>)
 8008514:	4b16      	ldr	r3, [pc, #88]	; (8008570 <arm_rfft_fast_init_f32+0xdc>)
 8008516:	e7d3      	b.n	80084c0 <arm_rfft_fast_init_f32+0x2c>
 8008518:	2414      	movs	r4, #20
 800851a:	4916      	ldr	r1, [pc, #88]	; (8008574 <arm_rfft_fast_init_f32+0xe0>)
 800851c:	4a16      	ldr	r2, [pc, #88]	; (8008578 <arm_rfft_fast_init_f32+0xe4>)
 800851e:	4b17      	ldr	r3, [pc, #92]	; (800857c <arm_rfft_fast_init_f32+0xe8>)
 8008520:	e7ce      	b.n	80084c0 <arm_rfft_fast_init_f32+0x2c>
 8008522:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8008526:	4916      	ldr	r1, [pc, #88]	; (8008580 <arm_rfft_fast_init_f32+0xec>)
 8008528:	4a16      	ldr	r2, [pc, #88]	; (8008584 <arm_rfft_fast_init_f32+0xf0>)
 800852a:	4b17      	ldr	r3, [pc, #92]	; (8008588 <arm_rfft_fast_init_f32+0xf4>)
 800852c:	e7c8      	b.n	80084c0 <arm_rfft_fast_init_f32+0x2c>
 800852e:	24d0      	movs	r4, #208	; 0xd0
 8008530:	4916      	ldr	r1, [pc, #88]	; (800858c <arm_rfft_fast_init_f32+0xf8>)
 8008532:	4a17      	ldr	r2, [pc, #92]	; (8008590 <arm_rfft_fast_init_f32+0xfc>)
 8008534:	4b17      	ldr	r3, [pc, #92]	; (8008594 <arm_rfft_fast_init_f32+0x100>)
 8008536:	e7c3      	b.n	80084c0 <arm_rfft_fast_init_f32+0x2c>
 8008538:	0801ca50 	.word	0x0801ca50
 800853c:	0800dc48 	.word	0x0800dc48
 8008540:	08013db8 	.word	0x08013db8
 8008544:	08011d48 	.word	0x08011d48
 8008548:	0801e810 	.word	0x0801e810
 800854c:	08020d00 	.word	0x08020d00
 8008550:	0801a738 	.word	0x0801a738
 8008554:	08018638 	.word	0x08018638
 8008558:	08011db8 	.word	0x08011db8
 800855c:	08020990 	.word	0x08020990
 8008560:	08017db8 	.word	0x08017db8
 8008564:	0801ea10 	.word	0x0801ea10
 8008568:	0801b5f0 	.word	0x0801b5f0
 800856c:	0801a638 	.word	0x0801a638
 8008570:	08011c48 	.word	0x08011c48
 8008574:	0801b548 	.word	0x0801b548
 8008578:	080185b8 	.word	0x080185b8
 800857c:	0801b570 	.word	0x0801b570
 8008580:	0801f210 	.word	0x0801f210
 8008584:	0801ba50 	.word	0x0801ba50
 8008588:	0801f590 	.word	0x0801f590
 800858c:	08020f00 	.word	0x08020f00
 8008590:	0801b650 	.word	0x0801b650
 8008594:	08020590 	.word	0x08020590

08008598 <arm_rfft_fast_f32>:
 8008598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859c:	8a06      	ldrh	r6, [r0, #16]
 800859e:	0876      	lsrs	r6, r6, #1
 80085a0:	4607      	mov	r7, r0
 80085a2:	4615      	mov	r5, r2
 80085a4:	8006      	strh	r6, [r0, #0]
 80085a6:	460c      	mov	r4, r1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d15c      	bne.n	8008666 <arm_rfft_fast_f32+0xce>
 80085ac:	461a      	mov	r2, r3
 80085ae:	2301      	movs	r3, #1
 80085b0:	f000 fbe4 	bl	8008d7c <arm_cfft_f32>
 80085b4:	edd4 7a00 	vldr	s15, [r4]
 80085b8:	ed94 7a01 	vldr	s14, [r4, #4]
 80085bc:	883e      	ldrh	r6, [r7, #0]
 80085be:	6978      	ldr	r0, [r7, #20]
 80085c0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80085c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80085c8:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80085cc:	ee77 6a87 	vadd.f32	s13, s15, s14
 80085d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085d4:	3e01      	subs	r6, #1
 80085d6:	ee26 7a83 	vmul.f32	s14, s13, s6
 80085da:	ee67 7a83 	vmul.f32	s15, s15, s6
 80085de:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80085e2:	ed85 7a00 	vstr	s14, [r5]
 80085e6:	edc5 7a01 	vstr	s15, [r5, #4]
 80085ea:	3010      	adds	r0, #16
 80085ec:	f105 0210 	add.w	r2, r5, #16
 80085f0:	3b08      	subs	r3, #8
 80085f2:	f104 0110 	add.w	r1, r4, #16
 80085f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80085fa:	ed51 6a02 	vldr	s13, [r1, #-8]
 80085fe:	ed10 6a02 	vldr	s12, [r0, #-8]
 8008602:	edd3 3a03 	vldr	s7, [r3, #12]
 8008606:	ed11 5a01 	vldr	s10, [r1, #-4]
 800860a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800860e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8008612:	ee77 4a26 	vadd.f32	s9, s14, s13
 8008616:	ee33 4a85 	vadd.f32	s8, s7, s10
 800861a:	ee66 6a27 	vmul.f32	s13, s12, s15
 800861e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008622:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008626:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800862a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800862e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008632:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008636:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800863a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800863e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008642:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008646:	3e01      	subs	r6, #1
 8008648:	ed02 7a02 	vstr	s14, [r2, #-8]
 800864c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008650:	f1a3 0308 	sub.w	r3, r3, #8
 8008654:	f101 0108 	add.w	r1, r1, #8
 8008658:	f100 0008 	add.w	r0, r0, #8
 800865c:	f102 0208 	add.w	r2, r2, #8
 8008660:	d1c9      	bne.n	80085f6 <arm_rfft_fast_f32+0x5e>
 8008662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008666:	edd1 7a00 	vldr	s15, [r1]
 800866a:	edd1 6a01 	vldr	s13, [r1, #4]
 800866e:	6941      	ldr	r1, [r0, #20]
 8008670:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008674:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008678:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800867c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008680:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008684:	3e01      	subs	r6, #1
 8008686:	ed82 7a00 	vstr	s14, [r2]
 800868a:	edc2 7a01 	vstr	s15, [r2, #4]
 800868e:	00f0      	lsls	r0, r6, #3
 8008690:	b3ee      	cbz	r6, 800870e <arm_rfft_fast_f32+0x176>
 8008692:	3808      	subs	r0, #8
 8008694:	f101 0e10 	add.w	lr, r1, #16
 8008698:	4420      	add	r0, r4
 800869a:	f104 0110 	add.w	r1, r4, #16
 800869e:	f102 0c10 	add.w	ip, r2, #16
 80086a2:	ed90 7a02 	vldr	s14, [r0, #8]
 80086a6:	ed51 6a02 	vldr	s13, [r1, #-8]
 80086aa:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80086ae:	ed90 4a03 	vldr	s8, [r0, #12]
 80086b2:	ed11 5a01 	vldr	s10, [r1, #-4]
 80086b6:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80086ba:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80086be:	ee74 4a05 	vadd.f32	s9, s8, s10
 80086c2:	ee26 3a27 	vmul.f32	s6, s12, s15
 80086c6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80086ca:	ee35 5a44 	vsub.f32	s10, s10, s8
 80086ce:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80086d2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80086d6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80086da:	ee26 6a24 	vmul.f32	s12, s12, s9
 80086de:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80086e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80086e6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80086ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80086ee:	ee27 7a23 	vmul.f32	s14, s14, s7
 80086f2:	3e01      	subs	r6, #1
 80086f4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80086f8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80086fc:	f1a0 0008 	sub.w	r0, r0, #8
 8008700:	f101 0108 	add.w	r1, r1, #8
 8008704:	f10e 0e08 	add.w	lr, lr, #8
 8008708:	f10c 0c08 	add.w	ip, ip, #8
 800870c:	d1c9      	bne.n	80086a2 <arm_rfft_fast_f32+0x10a>
 800870e:	461a      	mov	r2, r3
 8008710:	4629      	mov	r1, r5
 8008712:	4638      	mov	r0, r7
 8008714:	2301      	movs	r3, #1
 8008716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	f000 bb2f 	b.w	8008d7c <arm_cfft_f32>
 800871e:	bf00      	nop

08008720 <arm_cfft_radix8by2_f32>:
 8008720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	ed2d 8b08 	vpush	{d8-d11}
 8008728:	4607      	mov	r7, r0
 800872a:	4608      	mov	r0, r1
 800872c:	f8b7 e000 	ldrh.w	lr, [r7]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8008736:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800873a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800873e:	f000 80b0 	beq.w	80088a2 <arm_cfft_radix8by2_f32+0x182>
 8008742:	008b      	lsls	r3, r1, #2
 8008744:	3310      	adds	r3, #16
 8008746:	18c6      	adds	r6, r0, r3
 8008748:	3210      	adds	r2, #16
 800874a:	4443      	add	r3, r8
 800874c:	f100 0510 	add.w	r5, r0, #16
 8008750:	f108 0410 	add.w	r4, r8, #16
 8008754:	ed54 1a04 	vldr	s3, [r4, #-16]
 8008758:	ed54 6a03 	vldr	s13, [r4, #-12]
 800875c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008760:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008764:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008768:	ed13 5a01 	vldr	s10, [r3, #-4]
 800876c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008770:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008774:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008778:	ed56 2a03 	vldr	s5, [r6, #-12]
 800877c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008780:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008784:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008788:	ed56 0a02 	vldr	s1, [r6, #-8]
 800878c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008790:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008794:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008798:	ee36 ba26 	vadd.f32	s22, s12, s13
 800879c:	ee37 aa27 	vadd.f32	s20, s14, s15
 80087a0:	ee72 9a04 	vadd.f32	s19, s4, s8
 80087a4:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80087a8:	ee31 8a05 	vadd.f32	s16, s2, s10
 80087ac:	ee74 aa80 	vadd.f32	s21, s9, s0
 80087b0:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80087b4:	ed45 ba04 	vstr	s23, [r5, #-16]
 80087b8:	ed05 ba03 	vstr	s22, [r5, #-12]
 80087bc:	ed45 aa02 	vstr	s21, [r5, #-8]
 80087c0:	ed05 aa01 	vstr	s20, [r5, #-4]
 80087c4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80087c8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80087cc:	ed06 9a03 	vstr	s18, [r6, #-12]
 80087d0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80087d4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80087d8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80087dc:	ed12 6a03 	vldr	s12, [r2, #-12]
 80087e0:	ed52 2a04 	vldr	s5, [r2, #-16]
 80087e4:	ee33 3a61 	vsub.f32	s6, s6, s3
 80087e8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80087ec:	ee26 8a86 	vmul.f32	s16, s13, s12
 80087f0:	ee24 2a06 	vmul.f32	s4, s8, s12
 80087f4:	ee63 1a22 	vmul.f32	s3, s6, s5
 80087f8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80087fc:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008800:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008804:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008808:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800880c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008810:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008814:	ee72 3a63 	vsub.f32	s7, s4, s7
 8008818:	ee71 2a88 	vadd.f32	s5, s3, s16
 800881c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008820:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008824:	ed43 3a04 	vstr	s7, [r3, #-16]
 8008828:	ed03 6a03 	vstr	s12, [r3, #-12]
 800882c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008830:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008834:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008838:	ed52 5a02 	vldr	s11, [r2, #-8]
 800883c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008840:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008844:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008848:	ee26 5a87 	vmul.f32	s10, s13, s14
 800884c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8008850:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008854:	ee64 4a87 	vmul.f32	s9, s9, s14
 8008858:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800885c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008860:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008864:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008868:	ee74 5a23 	vadd.f32	s11, s8, s7
 800886c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008870:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008874:	f1be 0e01 	subs.w	lr, lr, #1
 8008878:	ed44 5a02 	vstr	s11, [r4, #-8]
 800887c:	f105 0510 	add.w	r5, r5, #16
 8008880:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008884:	f106 0610 	add.w	r6, r6, #16
 8008888:	ed03 6a02 	vstr	s12, [r3, #-8]
 800888c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008890:	f102 0210 	add.w	r2, r2, #16
 8008894:	f104 0410 	add.w	r4, r4, #16
 8008898:	f103 0310 	add.w	r3, r3, #16
 800889c:	f47f af5a 	bne.w	8008754 <arm_cfft_radix8by2_f32+0x34>
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	b28c      	uxth	r4, r1
 80088a4:	4621      	mov	r1, r4
 80088a6:	2302      	movs	r3, #2
 80088a8:	f000 fbca 	bl	8009040 <arm_radix8_butterfly_f32>
 80088ac:	ecbd 8b08 	vpop	{d8-d11}
 80088b0:	4621      	mov	r1, r4
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	4640      	mov	r0, r8
 80088b6:	2302      	movs	r3, #2
 80088b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	f000 bbc0 	b.w	8009040 <arm_radix8_butterfly_f32>

080088c0 <arm_cfft_radix8by4_f32>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ed2d 8b0a 	vpush	{d8-d12}
 80088c8:	8802      	ldrh	r2, [r0, #0]
 80088ca:	ed91 6a00 	vldr	s12, [r1]
 80088ce:	b08f      	sub	sp, #60	; 0x3c
 80088d0:	460f      	mov	r7, r1
 80088d2:	0852      	lsrs	r2, r2, #1
 80088d4:	6841      	ldr	r1, [r0, #4]
 80088d6:	900c      	str	r0, [sp, #48]	; 0x30
 80088d8:	0093      	lsls	r3, r2, #2
 80088da:	4638      	mov	r0, r7
 80088dc:	4418      	add	r0, r3
 80088de:	4606      	mov	r6, r0
 80088e0:	9009      	str	r0, [sp, #36]	; 0x24
 80088e2:	4418      	add	r0, r3
 80088e4:	edd0 6a00 	vldr	s13, [r0]
 80088e8:	ed96 4a00 	vldr	s8, [r6]
 80088ec:	edd6 2a01 	vldr	s5, [r6, #4]
 80088f0:	edd0 7a01 	vldr	s15, [r0, #4]
 80088f4:	900a      	str	r0, [sp, #40]	; 0x28
 80088f6:	ee76 5a26 	vadd.f32	s11, s12, s13
 80088fa:	4604      	mov	r4, r0
 80088fc:	4625      	mov	r5, r4
 80088fe:	441c      	add	r4, r3
 8008900:	edd4 4a00 	vldr	s9, [r4]
 8008904:	ed97 7a01 	vldr	s14, [r7, #4]
 8008908:	ed94 3a01 	vldr	s6, [r4, #4]
 800890c:	9401      	str	r4, [sp, #4]
 800890e:	ee35 5a84 	vadd.f32	s10, s11, s8
 8008912:	4630      	mov	r0, r6
 8008914:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008918:	463e      	mov	r6, r7
 800891a:	ee15 ea10 	vmov	lr, s10
 800891e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008922:	f846 eb08 	str.w	lr, [r6], #8
 8008926:	ee37 6a27 	vadd.f32	s12, s14, s15
 800892a:	ed90 5a01 	vldr	s10, [r0, #4]
 800892e:	9605      	str	r6, [sp, #20]
 8008930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008934:	9e01      	ldr	r6, [sp, #4]
 8008936:	9707      	str	r7, [sp, #28]
 8008938:	ee76 3aa2 	vadd.f32	s7, s13, s5
 800893c:	ed96 2a01 	vldr	s4, [r6, #4]
 8008940:	ee36 7a05 	vadd.f32	s14, s12, s10
 8008944:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008948:	ee37 5ac4 	vsub.f32	s10, s15, s8
 800894c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008950:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8008954:	4604      	mov	r4, r0
 8008956:	46a3      	mov	fp, r4
 8008958:	ee37 7a02 	vadd.f32	s14, s14, s4
 800895c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008960:	ee14 8a10 	vmov	r8, s8
 8008964:	46a4      	mov	ip, r4
 8008966:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800896a:	ed87 7a01 	vstr	s14, [r7, #4]
 800896e:	f84b 8b08 	str.w	r8, [fp], #8
 8008972:	f1ac 0704 	sub.w	r7, ip, #4
 8008976:	ed8c 5a01 	vstr	s10, [ip, #4]
 800897a:	f101 0c08 	add.w	ip, r1, #8
 800897e:	462c      	mov	r4, r5
 8008980:	f8cd c010 	str.w	ip, [sp, #16]
 8008984:	ee15 ca90 	vmov	ip, s11
 8008988:	ee36 6a62 	vsub.f32	s12, s12, s5
 800898c:	f844 cb08 	str.w	ip, [r4], #8
 8008990:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008994:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008998:	9406      	str	r4, [sp, #24]
 800899a:	ee76 6a83 	vadd.f32	s13, s13, s6
 800899e:	f101 0410 	add.w	r4, r1, #16
 80089a2:	0852      	lsrs	r2, r2, #1
 80089a4:	9402      	str	r4, [sp, #8]
 80089a6:	ed85 6a01 	vstr	s12, [r5, #4]
 80089aa:	462c      	mov	r4, r5
 80089ac:	f101 0518 	add.w	r5, r1, #24
 80089b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80089b2:	46b2      	mov	sl, r6
 80089b4:	9503      	str	r5, [sp, #12]
 80089b6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80089ba:	3a02      	subs	r2, #2
 80089bc:	ee16 5a90 	vmov	r5, s13
 80089c0:	46b6      	mov	lr, r6
 80089c2:	4630      	mov	r0, r6
 80089c4:	0852      	lsrs	r2, r2, #1
 80089c6:	f84a 5b08 	str.w	r5, [sl], #8
 80089ca:	f1a0 0604 	sub.w	r6, r0, #4
 80089ce:	edce 7a01 	vstr	s15, [lr, #4]
 80089d2:	9208      	str	r2, [sp, #32]
 80089d4:	f000 8130 	beq.w	8008c38 <arm_cfft_radix8by4_f32+0x378>
 80089d8:	4691      	mov	r9, r2
 80089da:	9a07      	ldr	r2, [sp, #28]
 80089dc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80089e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80089e4:	3b08      	subs	r3, #8
 80089e6:	f102 0510 	add.w	r5, r2, #16
 80089ea:	f101 0c20 	add.w	ip, r1, #32
 80089ee:	f1a4 020c 	sub.w	r2, r4, #12
 80089f2:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80089f6:	4433      	add	r3, r6
 80089f8:	3410      	adds	r4, #16
 80089fa:	4650      	mov	r0, sl
 80089fc:	4659      	mov	r1, fp
 80089fe:	ed55 3a02 	vldr	s7, [r5, #-8]
 8008a02:	ed14 5a02 	vldr	s10, [r4, #-8]
 8008a06:	ed91 7a00 	vldr	s14, [r1]
 8008a0a:	edd0 7a00 	vldr	s15, [r0]
 8008a0e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008a12:	ed15 4a01 	vldr	s8, [r5, #-4]
 8008a16:	edd0 6a01 	vldr	s13, [r0, #4]
 8008a1a:	ed91 6a01 	vldr	s12, [r1, #4]
 8008a1e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008a22:	ee34 0a25 	vadd.f32	s0, s8, s11
 8008a26:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008a2a:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008a2e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8008a32:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008a36:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008a3a:	edd1 4a01 	vldr	s9, [r1, #4]
 8008a3e:	ed90 4a01 	vldr	s8, [r0, #4]
 8008a42:	ee70 4a24 	vadd.f32	s9, s0, s9
 8008a46:	ee75 aa06 	vadd.f32	s21, s10, s12
 8008a4a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008a4e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8008a52:	ed45 4a01 	vstr	s9, [r5, #-4]
 8008a56:	edd6 1a00 	vldr	s3, [r6]
 8008a5a:	edd7 0a00 	vldr	s1, [r7]
 8008a5e:	ed92 4a02 	vldr	s8, [r2, #8]
 8008a62:	edd3 3a02 	vldr	s7, [r3, #8]
 8008a66:	ed93 2a01 	vldr	s4, [r3, #4]
 8008a6a:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008a6e:	edd2 2a01 	vldr	s5, [r2, #4]
 8008a72:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008a76:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008a7a:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008a7e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008a82:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008a86:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8008a8a:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008a8e:	ee18 aa90 	vmov	sl, s17
 8008a92:	f847 a908 	str.w	sl, [r7], #-8
 8008a96:	edd2 8a01 	vldr	s17, [r2, #4]
 8008a9a:	ed93 9a01 	vldr	s18, [r3, #4]
 8008a9e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008aa2:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008aa6:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008aaa:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008aae:	edc7 8a01 	vstr	s17, [r7, #4]
 8008ab2:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008ab6:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008aba:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008abe:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008ac2:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008ac6:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008aca:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008ace:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008ad2:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008ad6:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008ada:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008ade:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008ae2:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008ae6:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008aea:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008aee:	ee1c aa10 	vmov	sl, s24
 8008af2:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008af6:	f841 ab08 	str.w	sl, [r1], #8
 8008afa:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008afe:	ee3b bacb 	vsub.f32	s22, s23, s22
 8008b02:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8008b06:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008b0a:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008b0e:	edc2 8a01 	vstr	s17, [r2, #4]
 8008b12:	ed82 ba02 	vstr	s22, [r2, #8]
 8008b16:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008b1a:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008b1e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8008b22:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8008b26:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008b2a:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008b2e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008b32:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008b36:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8008b3a:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008b3e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8008b42:	ee60 9a04 	vmul.f32	s19, s0, s8
 8008b46:	ee28 8a04 	vmul.f32	s16, s16, s8
 8008b4a:	ee20 0a24 	vmul.f32	s0, s0, s9
 8008b4e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8008b52:	ee39 4a68 	vsub.f32	s8, s18, s17
 8008b56:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008b5a:	ee14 aa10 	vmov	sl, s8
 8008b5e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008b62:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008b66:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008b6a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008b6e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008b72:	f846 a908 	str.w	sl, [r6], #-8
 8008b76:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008b7a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008b7e:	edc6 3a01 	vstr	s7, [r6, #4]
 8008b82:	ee76 6a26 	vadd.f32	s13, s12, s13
 8008b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b8a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008b8e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008b92:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008b96:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008b9a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008b9e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008ba2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008ba6:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008baa:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008bae:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bb6:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008bba:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008bbe:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008bc2:	ee15 aa90 	vmov	sl, s11
 8008bc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bca:	f840 ab08 	str.w	sl, [r0], #8
 8008bce:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008bd2:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8008bda:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008bde:	f105 0508 	add.w	r5, r5, #8
 8008be2:	ed83 1a02 	vstr	s2, [r3, #8]
 8008be6:	edc3 2a01 	vstr	s5, [r3, #4]
 8008bea:	f108 0808 	add.w	r8, r8, #8
 8008bee:	f1a2 0208 	sub.w	r2, r2, #8
 8008bf2:	f10c 0c10 	add.w	ip, ip, #16
 8008bf6:	f104 0408 	add.w	r4, r4, #8
 8008bfa:	f10e 0e18 	add.w	lr, lr, #24
 8008bfe:	f1a3 0308 	sub.w	r3, r3, #8
 8008c02:	f47f aefc 	bne.w	80089fe <arm_cfft_radix8by4_f32+0x13e>
 8008c06:	9908      	ldr	r1, [sp, #32]
 8008c08:	9802      	ldr	r0, [sp, #8]
 8008c0a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008c0e:	00cb      	lsls	r3, r1, #3
 8008c10:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008c14:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008c18:	9102      	str	r1, [sp, #8]
 8008c1a:	9905      	ldr	r1, [sp, #20]
 8008c1c:	4419      	add	r1, r3
 8008c1e:	9105      	str	r1, [sp, #20]
 8008c20:	9904      	ldr	r1, [sp, #16]
 8008c22:	4419      	add	r1, r3
 8008c24:	9104      	str	r1, [sp, #16]
 8008c26:	9906      	ldr	r1, [sp, #24]
 8008c28:	449b      	add	fp, r3
 8008c2a:	4419      	add	r1, r3
 8008c2c:	449a      	add	sl, r3
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	9106      	str	r1, [sp, #24]
 8008c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c36:	9303      	str	r3, [sp, #12]
 8008c38:	9a05      	ldr	r2, [sp, #20]
 8008c3a:	9806      	ldr	r0, [sp, #24]
 8008c3c:	ed92 4a00 	vldr	s8, [r2]
 8008c40:	ed90 7a00 	vldr	s14, [r0]
 8008c44:	ed9b 3a00 	vldr	s6, [fp]
 8008c48:	edda 3a00 	vldr	s7, [sl]
 8008c4c:	edd2 4a01 	vldr	s9, [r2, #4]
 8008c50:	edd0 6a01 	vldr	s13, [r0, #4]
 8008c54:	ed9a 2a01 	vldr	s4, [sl, #4]
 8008c58:	eddb 7a01 	vldr	s15, [fp, #4]
 8008c5c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008c60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c62:	ee34 6a07 	vadd.f32	s12, s8, s14
 8008c66:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8008c6a:	ee36 5a03 	vadd.f32	s10, s12, s6
 8008c6e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008c72:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008c76:	ee34 7a47 	vsub.f32	s14, s8, s14
 8008c7a:	ed82 5a00 	vstr	s10, [r2]
 8008c7e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8008c82:	edda 4a01 	vldr	s9, [sl, #4]
 8008c86:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008c8a:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008c8e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008c92:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8008c96:	ed82 5a01 	vstr	s10, [r2, #4]
 8008c9a:	9a04      	ldr	r2, [sp, #16]
 8008c9c:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008ca0:	edd2 1a00 	vldr	s3, [r2]
 8008ca4:	edd2 2a01 	vldr	s5, [r2, #4]
 8008ca8:	9a02      	ldr	r2, [sp, #8]
 8008caa:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008cae:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008cb2:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008cb6:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008cba:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008cbe:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008cc2:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008cc6:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008cca:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008cce:	edcb 2a00 	vstr	s5, [fp]
 8008cd2:	ed8b 5a01 	vstr	s10, [fp, #4]
 8008cd6:	ed92 4a01 	vldr	s8, [r2, #4]
 8008cda:	ed92 5a00 	vldr	s10, [r2]
 8008cde:	9a03      	ldr	r2, [sp, #12]
 8008ce0:	ee36 6a63 	vsub.f32	s12, s12, s7
 8008ce4:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008ce8:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008cec:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008cf0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008cf4:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008cf8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008cfc:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8008d00:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d08:	ed80 6a01 	vstr	s12, [r0, #4]
 8008d0c:	edc0 5a00 	vstr	s11, [r0]
 8008d10:	edd2 5a01 	vldr	s11, [r2, #4]
 8008d14:	9807      	ldr	r0, [sp, #28]
 8008d16:	ee77 7a02 	vadd.f32	s15, s14, s4
 8008d1a:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8008d1e:	edd2 6a00 	vldr	s13, [r2]
 8008d22:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8008d26:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008d2a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008d2e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008d32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008d36:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008d3a:	edca 7a01 	vstr	s15, [sl, #4]
 8008d3e:	ed8a 7a00 	vstr	s14, [sl]
 8008d42:	6872      	ldr	r2, [r6, #4]
 8008d44:	4621      	mov	r1, r4
 8008d46:	2304      	movs	r3, #4
 8008d48:	f000 f97a 	bl	8009040 <arm_radix8_butterfly_f32>
 8008d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4e:	6872      	ldr	r2, [r6, #4]
 8008d50:	4621      	mov	r1, r4
 8008d52:	2304      	movs	r3, #4
 8008d54:	f000 f974 	bl	8009040 <arm_radix8_butterfly_f32>
 8008d58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d5a:	6872      	ldr	r2, [r6, #4]
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	2304      	movs	r3, #4
 8008d60:	f000 f96e 	bl	8009040 <arm_radix8_butterfly_f32>
 8008d64:	6872      	ldr	r2, [r6, #4]
 8008d66:	9801      	ldr	r0, [sp, #4]
 8008d68:	4621      	mov	r1, r4
 8008d6a:	2304      	movs	r3, #4
 8008d6c:	b00f      	add	sp, #60	; 0x3c
 8008d6e:	ecbd 8b0a 	vpop	{d8-d12}
 8008d72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f000 b963 	b.w	8009040 <arm_radix8_butterfly_f32>
 8008d7a:	bf00      	nop

08008d7c <arm_cfft_f32>:
 8008d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d80:	2a01      	cmp	r2, #1
 8008d82:	4606      	mov	r6, r0
 8008d84:	4617      	mov	r7, r2
 8008d86:	460c      	mov	r4, r1
 8008d88:	4698      	mov	r8, r3
 8008d8a:	8805      	ldrh	r5, [r0, #0]
 8008d8c:	d054      	beq.n	8008e38 <arm_cfft_f32+0xbc>
 8008d8e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008d92:	d04c      	beq.n	8008e2e <arm_cfft_f32+0xb2>
 8008d94:	d916      	bls.n	8008dc4 <arm_cfft_f32+0x48>
 8008d96:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008d9a:	d01a      	beq.n	8008dd2 <arm_cfft_f32+0x56>
 8008d9c:	d95c      	bls.n	8008e58 <arm_cfft_f32+0xdc>
 8008d9e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008da2:	d044      	beq.n	8008e2e <arm_cfft_f32+0xb2>
 8008da4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008da8:	d105      	bne.n	8008db6 <arm_cfft_f32+0x3a>
 8008daa:	2301      	movs	r3, #1
 8008dac:	6872      	ldr	r2, [r6, #4]
 8008dae:	4629      	mov	r1, r5
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 f945 	bl	8009040 <arm_radix8_butterfly_f32>
 8008db6:	f1b8 0f00 	cmp.w	r8, #0
 8008dba:	d111      	bne.n	8008de0 <arm_cfft_f32+0x64>
 8008dbc:	2f01      	cmp	r7, #1
 8008dbe:	d016      	beq.n	8008dee <arm_cfft_f32+0x72>
 8008dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc4:	2d20      	cmp	r5, #32
 8008dc6:	d032      	beq.n	8008e2e <arm_cfft_f32+0xb2>
 8008dc8:	d94a      	bls.n	8008e60 <arm_cfft_f32+0xe4>
 8008dca:	2d40      	cmp	r5, #64	; 0x40
 8008dcc:	d0ed      	beq.n	8008daa <arm_cfft_f32+0x2e>
 8008dce:	2d80      	cmp	r5, #128	; 0x80
 8008dd0:	d1f1      	bne.n	8008db6 <arm_cfft_f32+0x3a>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f7ff fca3 	bl	8008720 <arm_cfft_radix8by2_f32>
 8008dda:	f1b8 0f00 	cmp.w	r8, #0
 8008dde:	d0ed      	beq.n	8008dbc <arm_cfft_f32+0x40>
 8008de0:	68b2      	ldr	r2, [r6, #8]
 8008de2:	89b1      	ldrh	r1, [r6, #12]
 8008de4:	4620      	mov	r0, r4
 8008de6:	f7f7 fa03 	bl	80001f0 <arm_bitreversal_32>
 8008dea:	2f01      	cmp	r7, #1
 8008dec:	d1e8      	bne.n	8008dc0 <arm_cfft_f32+0x44>
 8008dee:	ee07 5a90 	vmov	s15, r5
 8008df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dfa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008dfe:	2d00      	cmp	r5, #0
 8008e00:	d0de      	beq.n	8008dc0 <arm_cfft_f32+0x44>
 8008e02:	f104 0108 	add.w	r1, r4, #8
 8008e06:	2300      	movs	r3, #0
 8008e08:	3301      	adds	r3, #1
 8008e0a:	429d      	cmp	r5, r3
 8008e0c:	f101 0108 	add.w	r1, r1, #8
 8008e10:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008e14:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008e18:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008e1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008e20:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008e24:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008e28:	d1ee      	bne.n	8008e08 <arm_cfft_f32+0x8c>
 8008e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff fd45 	bl	80088c0 <arm_cfft_radix8by4_f32>
 8008e36:	e7be      	b.n	8008db6 <arm_cfft_f32+0x3a>
 8008e38:	b1ad      	cbz	r5, 8008e66 <arm_cfft_f32+0xea>
 8008e3a:	f101 030c 	add.w	r3, r1, #12
 8008e3e:	2200      	movs	r2, #0
 8008e40:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008e44:	3201      	adds	r2, #1
 8008e46:	eef1 7a67 	vneg.f32	s15, s15
 8008e4a:	4295      	cmp	r5, r2
 8008e4c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008e50:	f103 0308 	add.w	r3, r3, #8
 8008e54:	d1f4      	bne.n	8008e40 <arm_cfft_f32+0xc4>
 8008e56:	e79a      	b.n	8008d8e <arm_cfft_f32+0x12>
 8008e58:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008e5c:	d0a5      	beq.n	8008daa <arm_cfft_f32+0x2e>
 8008e5e:	e7aa      	b.n	8008db6 <arm_cfft_f32+0x3a>
 8008e60:	2d10      	cmp	r5, #16
 8008e62:	d0b6      	beq.n	8008dd2 <arm_cfft_f32+0x56>
 8008e64:	e7a7      	b.n	8008db6 <arm_cfft_f32+0x3a>
 8008e66:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008e6a:	d894      	bhi.n	8008d96 <arm_cfft_f32+0x1a>
 8008e6c:	e7aa      	b.n	8008dc4 <arm_cfft_f32+0x48>
 8008e6e:	bf00      	nop

08008e70 <arm_cmplx_mag_f32>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008e78:	b084      	sub	sp, #16
 8008e7a:	d07f      	beq.n	8008f7c <arm_cmplx_mag_f32+0x10c>
 8008e7c:	2700      	movs	r7, #0
 8008e7e:	f100 0420 	add.w	r4, r0, #32
 8008e82:	f101 0510 	add.w	r5, r1, #16
 8008e86:	4646      	mov	r6, r8
 8008e88:	e05a      	b.n	8008f40 <arm_cmplx_mag_f32+0xd0>
 8008e8a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008e8e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	f040 80a4 	bne.w	8008fe2 <arm_cmplx_mag_f32+0x172>
 8008e9a:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008e9e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008ea2:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008ea6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008eaa:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008eae:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eba:	f2c0 808f 	blt.w	8008fdc <arm_cmplx_mag_f32+0x16c>
 8008ebe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008ec2:	eeb4 0a40 	vcmp.f32	s0, s0
 8008ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eca:	f040 80af 	bne.w	800902c <arm_cmplx_mag_f32+0x1bc>
 8008ece:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008ed2:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008ed6:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008eda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ede:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008ee2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eee:	db72      	blt.n	8008fd6 <arm_cmplx_mag_f32+0x166>
 8008ef0:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008ef4:	eeb4 0a40 	vcmp.f32	s0, s0
 8008ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efc:	f040 808c 	bne.w	8009018 <arm_cmplx_mag_f32+0x1a8>
 8008f00:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008f04:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008f08:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008f0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f14:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	db20      	blt.n	8008f64 <arm_cmplx_mag_f32+0xf4>
 8008f22:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008f26:	eeb4 0a40 	vcmp.f32	s0, s0
 8008f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2e:	d169      	bne.n	8009004 <arm_cmplx_mag_f32+0x194>
 8008f30:	3e01      	subs	r6, #1
 8008f32:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008f36:	f104 0420 	add.w	r4, r4, #32
 8008f3a:	f105 0510 	add.w	r5, r5, #16
 8008f3e:	d019      	beq.n	8008f74 <arm_cmplx_mag_f32+0x104>
 8008f40:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008f44:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008f48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f50:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5c:	da95      	bge.n	8008e8a <arm_cmplx_mag_f32+0x1a>
 8008f5e:	f845 7c10 	str.w	r7, [r5, #-16]
 8008f62:	e79c      	b.n	8008e9e <arm_cmplx_mag_f32+0x2e>
 8008f64:	3e01      	subs	r6, #1
 8008f66:	f845 7c04 	str.w	r7, [r5, #-4]
 8008f6a:	f104 0420 	add.w	r4, r4, #32
 8008f6e:	f105 0510 	add.w	r5, r5, #16
 8008f72:	d1e5      	bne.n	8008f40 <arm_cmplx_mag_f32+0xd0>
 8008f74:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008f78:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008f7c:	f012 0503 	ands.w	r5, r2, #3
 8008f80:	d026      	beq.n	8008fd0 <arm_cmplx_mag_f32+0x160>
 8008f82:	2600      	movs	r6, #0
 8008f84:	f100 0408 	add.w	r4, r0, #8
 8008f88:	e00c      	b.n	8008fa4 <arm_cmplx_mag_f32+0x134>
 8008f8a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008f8e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f96:	d12e      	bne.n	8008ff6 <arm_cmplx_mag_f32+0x186>
 8008f98:	3d01      	subs	r5, #1
 8008f9a:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008f9e:	f104 0408 	add.w	r4, r4, #8
 8008fa2:	d015      	beq.n	8008fd0 <arm_cmplx_mag_f32+0x160>
 8008fa4:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008fa8:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008fac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fb0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008fb4:	3104      	adds	r1, #4
 8008fb6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc2:	dae2      	bge.n	8008f8a <arm_cmplx_mag_f32+0x11a>
 8008fc4:	3d01      	subs	r5, #1
 8008fc6:	f841 6c04 	str.w	r6, [r1, #-4]
 8008fca:	f104 0408 	add.w	r4, r4, #8
 8008fce:	d1e9      	bne.n	8008fa4 <arm_cmplx_mag_f32+0x134>
 8008fd0:	b004      	add	sp, #16
 8008fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd6:	f845 7c08 	str.w	r7, [r5, #-8]
 8008fda:	e793      	b.n	8008f04 <arm_cmplx_mag_f32+0x94>
 8008fdc:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008fe0:	e777      	b.n	8008ed2 <arm_cmplx_mag_f32+0x62>
 8008fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8008fe6:	9203      	str	r2, [sp, #12]
 8008fe8:	9102      	str	r1, [sp, #8]
 8008fea:	9001      	str	r0, [sp, #4]
 8008fec:	f000 ffcc 	bl	8009f88 <sqrtf>
 8008ff0:	a801      	add	r0, sp, #4
 8008ff2:	c807      	ldmia	r0, {r0, r1, r2}
 8008ff4:	e751      	b.n	8008e9a <arm_cmplx_mag_f32+0x2a>
 8008ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8008ffa:	9101      	str	r1, [sp, #4]
 8008ffc:	f000 ffc4 	bl	8009f88 <sqrtf>
 8009000:	9901      	ldr	r1, [sp, #4]
 8009002:	e7c9      	b.n	8008f98 <arm_cmplx_mag_f32+0x128>
 8009004:	eeb0 0a67 	vmov.f32	s0, s15
 8009008:	9203      	str	r2, [sp, #12]
 800900a:	9102      	str	r1, [sp, #8]
 800900c:	9001      	str	r0, [sp, #4]
 800900e:	f000 ffbb 	bl	8009f88 <sqrtf>
 8009012:	a801      	add	r0, sp, #4
 8009014:	c807      	ldmia	r0, {r0, r1, r2}
 8009016:	e78b      	b.n	8008f30 <arm_cmplx_mag_f32+0xc0>
 8009018:	eeb0 0a67 	vmov.f32	s0, s15
 800901c:	9203      	str	r2, [sp, #12]
 800901e:	9102      	str	r1, [sp, #8]
 8009020:	9001      	str	r0, [sp, #4]
 8009022:	f000 ffb1 	bl	8009f88 <sqrtf>
 8009026:	a801      	add	r0, sp, #4
 8009028:	c807      	ldmia	r0, {r0, r1, r2}
 800902a:	e769      	b.n	8008f00 <arm_cmplx_mag_f32+0x90>
 800902c:	eeb0 0a67 	vmov.f32	s0, s15
 8009030:	9203      	str	r2, [sp, #12]
 8009032:	9102      	str	r1, [sp, #8]
 8009034:	9001      	str	r0, [sp, #4]
 8009036:	f000 ffa7 	bl	8009f88 <sqrtf>
 800903a:	a801      	add	r0, sp, #4
 800903c:	c807      	ldmia	r0, {r0, r1, r2}
 800903e:	e746      	b.n	8008ece <arm_cmplx_mag_f32+0x5e>

08009040 <arm_radix8_butterfly_f32>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	ed2d 8b10 	vpush	{d8-d15}
 8009048:	461c      	mov	r4, r3
 800904a:	b09d      	sub	sp, #116	; 0x74
 800904c:	4603      	mov	r3, r0
 800904e:	3304      	adds	r3, #4
 8009050:	ed9f bac4 	vldr	s22, [pc, #784]	; 8009364 <arm_radix8_butterfly_f32+0x324>
 8009054:	9019      	str	r0, [sp, #100]	; 0x64
 8009056:	921a      	str	r2, [sp, #104]	; 0x68
 8009058:	468b      	mov	fp, r1
 800905a:	931b      	str	r3, [sp, #108]	; 0x6c
 800905c:	468a      	mov	sl, r1
 800905e:	46a1      	mov	r9, r4
 8009060:	4607      	mov	r7, r0
 8009062:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8009066:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800906a:	eb03 0508 	add.w	r5, r3, r8
 800906e:	195c      	adds	r4, r3, r5
 8009070:	00de      	lsls	r6, r3, #3
 8009072:	191a      	adds	r2, r3, r4
 8009074:	9600      	str	r6, [sp, #0]
 8009076:	1898      	adds	r0, r3, r2
 8009078:	4619      	mov	r1, r3
 800907a:	9e00      	ldr	r6, [sp, #0]
 800907c:	9311      	str	r3, [sp, #68]	; 0x44
 800907e:	4401      	add	r1, r0
 8009080:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8009084:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8009088:	19be      	adds	r6, r7, r6
 800908a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800908e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8009092:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8009096:	9f00      	ldr	r7, [sp, #0]
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	eb06 0e07 	add.w	lr, r6, r7
 800909e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80090a0:	9302      	str	r3, [sp, #8]
 80090a2:	3204      	adds	r2, #4
 80090a4:	3104      	adds	r1, #4
 80090a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090aa:	f04f 0c00 	mov.w	ip, #0
 80090ae:	edde 7a00 	vldr	s15, [lr]
 80090b2:	edd6 6a00 	vldr	s13, [r6]
 80090b6:	ed95 2a00 	vldr	s4, [r5]
 80090ba:	ed17 aa01 	vldr	s20, [r7, #-4]
 80090be:	edd4 4a00 	vldr	s9, [r4]
 80090c2:	ed90 5a00 	vldr	s10, [r0]
 80090c6:	ed12 7a01 	vldr	s14, [r2, #-4]
 80090ca:	ed51 0a01 	vldr	s1, [r1, #-4]
 80090ce:	ee77 8a85 	vadd.f32	s17, s15, s10
 80090d2:	ee76 3a87 	vadd.f32	s7, s13, s14
 80090d6:	ee32 4a20 	vadd.f32	s8, s4, s1
 80090da:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80090de:	ee33 6a84 	vadd.f32	s12, s7, s8
 80090e2:	ee73 5a28 	vadd.f32	s11, s6, s17
 80090e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80090ea:	ee75 6a86 	vadd.f32	s13, s11, s12
 80090ee:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80090f2:	ed47 6a01 	vstr	s13, [r7, #-4]
 80090f6:	edc4 5a00 	vstr	s11, [r4]
 80090fa:	ed92 9a00 	vldr	s18, [r2]
 80090fe:	ed95 1a01 	vldr	s2, [r5, #4]
 8009102:	edd6 5a01 	vldr	s11, [r6, #4]
 8009106:	ed91 6a00 	vldr	s12, [r1]
 800910a:	edd7 2a00 	vldr	s5, [r7]
 800910e:	edd4 1a01 	vldr	s3, [r4, #4]
 8009112:	edde 6a01 	vldr	s13, [lr, #4]
 8009116:	edd0 9a01 	vldr	s19, [r0, #4]
 800911a:	ee72 0a60 	vsub.f32	s1, s4, s1
 800911e:	ee71 aa46 	vsub.f32	s21, s2, s12
 8009122:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8009126:	ee37 0a60 	vsub.f32	s0, s14, s1
 800912a:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800912e:	ee37 7a20 	vadd.f32	s14, s14, s1
 8009132:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8009136:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800913a:	ee75 5a89 	vadd.f32	s11, s11, s18
 800913e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8009142:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8009146:	ee31 6a06 	vadd.f32	s12, s2, s12
 800914a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800914e:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8009152:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8009156:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800915a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800915e:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8009162:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8009166:	ee33 3a68 	vsub.f32	s6, s6, s17
 800916a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800916e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8009172:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8009176:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800917a:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800917e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8009182:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009186:	ee75 4a27 	vadd.f32	s9, s10, s15
 800918a:	ee71 5a49 	vsub.f32	s11, s2, s18
 800918e:	ee31 2a09 	vadd.f32	s4, s2, s18
 8009192:	ee75 7a67 	vsub.f32	s15, s10, s15
 8009196:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800919a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800919e:	ee73 0a06 	vadd.f32	s1, s6, s12
 80091a2:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80091a6:	ee36 5a87 	vadd.f32	s10, s13, s14
 80091aa:	ee32 8a28 	vadd.f32	s16, s4, s17
 80091ae:	ee33 6a46 	vsub.f32	s12, s6, s12
 80091b2:	ee34 4a25 	vadd.f32	s8, s8, s11
 80091b6:	ee33 3a80 	vadd.f32	s6, s7, s0
 80091ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80091be:	ee71 5a64 	vsub.f32	s11, s2, s9
 80091c2:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80091c6:	ee32 2a68 	vsub.f32	s4, s4, s17
 80091ca:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80091ce:	ee74 4a81 	vadd.f32	s9, s9, s2
 80091d2:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80091d6:	44dc      	add	ip, fp
 80091d8:	45e2      	cmp	sl, ip
 80091da:	ed87 8a00 	vstr	s16, [r7]
 80091de:	ed84 2a01 	vstr	s4, [r4, #4]
 80091e2:	441f      	add	r7, r3
 80091e4:	edce 0a00 	vstr	s1, [lr]
 80091e8:	441c      	add	r4, r3
 80091ea:	ed80 6a00 	vstr	s12, [r0]
 80091ee:	edce 1a01 	vstr	s3, [lr, #4]
 80091f2:	ed80 4a01 	vstr	s8, [r0, #4]
 80091f6:	449e      	add	lr, r3
 80091f8:	ed86 3a00 	vstr	s6, [r6]
 80091fc:	4418      	add	r0, r3
 80091fe:	ed41 3a01 	vstr	s7, [r1, #-4]
 8009202:	ed02 5a01 	vstr	s10, [r2, #-4]
 8009206:	ed85 7a00 	vstr	s14, [r5]
 800920a:	edc6 5a01 	vstr	s11, [r6, #4]
 800920e:	edc1 4a00 	vstr	s9, [r1]
 8009212:	441e      	add	r6, r3
 8009214:	edc2 6a00 	vstr	s13, [r2]
 8009218:	4419      	add	r1, r3
 800921a:	edc5 7a01 	vstr	s15, [r5, #4]
 800921e:	441a      	add	r2, r3
 8009220:	441d      	add	r5, r3
 8009222:	f63f af44 	bhi.w	80090ae <arm_radix8_butterfly_f32+0x6e>
 8009226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009228:	2a07      	cmp	r2, #7
 800922a:	f240 81f5 	bls.w	8009618 <arm_radix8_butterfly_f32+0x5d8>
 800922e:	f108 0101 	add.w	r1, r8, #1
 8009232:	188f      	adds	r7, r1, r2
 8009234:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8009238:	19d6      	adds	r6, r2, r7
 800923a:	eb08 0c09 	add.w	ip, r8, r9
 800923e:	1994      	adds	r4, r2, r6
 8009240:	eb0c 0e09 	add.w	lr, ip, r9
 8009244:	4610      	mov	r0, r2
 8009246:	9701      	str	r7, [sp, #4]
 8009248:	4420      	add	r0, r4
 800924a:	eb0e 0709 	add.w	r7, lr, r9
 800924e:	1815      	adds	r5, r2, r0
 8009250:	eb07 0209 	add.w	r2, r7, r9
 8009254:	9203      	str	r2, [sp, #12]
 8009256:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800925c:	9117      	str	r1, [sp, #92]	; 0x5c
 800925e:	440a      	add	r2, r1
 8009260:	9900      	ldr	r1, [sp, #0]
 8009262:	3108      	adds	r1, #8
 8009264:	9100      	str	r1, [sp, #0]
 8009266:	9902      	ldr	r1, [sp, #8]
 8009268:	3108      	adds	r1, #8
 800926a:	9102      	str	r1, [sp, #8]
 800926c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800926e:	00ff      	lsls	r7, r7, #3
 8009270:	9715      	str	r7, [sp, #84]	; 0x54
 8009272:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009276:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800927a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800927e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8009280:	9903      	ldr	r1, [sp, #12]
 8009282:	19d7      	adds	r7, r2, r7
 8009284:	00c9      	lsls	r1, r1, #3
 8009286:	9114      	str	r1, [sp, #80]	; 0x50
 8009288:	9710      	str	r7, [sp, #64]	; 0x40
 800928a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800928c:	9f00      	ldr	r7, [sp, #0]
 800928e:	19cf      	adds	r7, r1, r7
 8009290:	970d      	str	r7, [sp, #52]	; 0x34
 8009292:	9f02      	ldr	r7, [sp, #8]
 8009294:	19cf      	adds	r7, r1, r7
 8009296:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800929a:	970c      	str	r7, [sp, #48]	; 0x30
 800929c:	9f01      	ldr	r7, [sp, #4]
 800929e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80092a2:	3504      	adds	r5, #4
 80092a4:	3004      	adds	r0, #4
 80092a6:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80092aa:	9508      	str	r5, [sp, #32]
 80092ac:	9009      	str	r0, [sp, #36]	; 0x24
 80092ae:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80092b0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80092b2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80092b6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80092ba:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80092be:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80092c0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80092c4:	1945      	adds	r5, r0, r5
 80092c6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80092ca:	460f      	mov	r7, r1
 80092cc:	3404      	adds	r4, #4
 80092ce:	4641      	mov	r1, r8
 80092d0:	1841      	adds	r1, r0, r1
 80092d2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80092d6:	940a      	str	r4, [sp, #40]	; 0x28
 80092d8:	eb00 0c06 	add.w	ip, r0, r6
 80092dc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80092e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80092e2:	9506      	str	r5, [sp, #24]
 80092e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80092e6:	9105      	str	r1, [sp, #20]
 80092e8:	4639      	mov	r1, r7
 80092ea:	1905      	adds	r5, r0, r4
 80092ec:	3108      	adds	r1, #8
 80092ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80092f0:	9507      	str	r5, [sp, #28]
 80092f2:	910f      	str	r1, [sp, #60]	; 0x3c
 80092f4:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80092f8:	2101      	movs	r1, #1
 80092fa:	eb00 0e06 	add.w	lr, r0, r6
 80092fe:	9518      	str	r5, [sp, #96]	; 0x60
 8009300:	9404      	str	r4, [sp, #16]
 8009302:	9103      	str	r1, [sp, #12]
 8009304:	4620      	mov	r0, r4
 8009306:	4689      	mov	r9, r1
 8009308:	9e06      	ldr	r6, [sp, #24]
 800930a:	ed90 fa00 	vldr	s30, [r0]
 800930e:	edd6 7a01 	vldr	s15, [r6, #4]
 8009312:	edd0 ba01 	vldr	s23, [r0, #4]
 8009316:	edcd 7a00 	vstr	s15, [sp]
 800931a:	a80d      	add	r0, sp, #52	; 0x34
 800931c:	edde 7a01 	vldr	s15, [lr, #4]
 8009320:	9c05      	ldr	r4, [sp, #20]
 8009322:	9d07      	ldr	r5, [sp, #28]
 8009324:	edd2 fa00 	vldr	s31, [r2]
 8009328:	ed92 ca01 	vldr	s24, [r2, #4]
 800932c:	edcd 7a01 	vstr	s15, [sp, #4]
 8009330:	c807      	ldmia	r0, {r0, r1, r2}
 8009332:	eddc 7a01 	vldr	s15, [ip, #4]
 8009336:	edd4 ea00 	vldr	s29, [r4]
 800933a:	ed95 ea00 	vldr	s28, [r5]
 800933e:	edd6 da00 	vldr	s27, [r6]
 8009342:	edd4 aa01 	vldr	s21, [r4, #4]
 8009346:	ed95 aa01 	vldr	s20, [r5, #4]
 800934a:	ed9e da00 	vldr	s26, [lr]
 800934e:	eddc ca00 	vldr	s25, [ip]
 8009352:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009356:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009358:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800935a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800935c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800935e:	edcd 7a02 	vstr	s15, [sp, #8]
 8009362:	e001      	b.n	8009368 <arm_radix8_butterfly_f32+0x328>
 8009364:	3f3504f3 	.word	0x3f3504f3
 8009368:	ed16 6a01 	vldr	s12, [r6, #-4]
 800936c:	ed91 5a00 	vldr	s10, [r1]
 8009370:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009374:	edd5 7a00 	vldr	s15, [r5]
 8009378:	ed18 7a01 	vldr	s14, [r8, #-4]
 800937c:	edd2 3a00 	vldr	s7, [r2]
 8009380:	ed94 3a00 	vldr	s6, [r4]
 8009384:	ed90 2a00 	vldr	s4, [r0]
 8009388:	ed92 0a01 	vldr	s0, [r2, #4]
 800938c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009390:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009394:	ee33 4a29 	vadd.f32	s8, s6, s19
 8009398:	ee77 4a87 	vadd.f32	s9, s15, s14
 800939c:	ee78 1a04 	vadd.f32	s3, s16, s8
 80093a0:	ee71 6a24 	vadd.f32	s13, s2, s9
 80093a4:	ee32 2a46 	vsub.f32	s4, s4, s12
 80093a8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80093ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093b0:	ed82 6a00 	vstr	s12, [r2]
 80093b4:	edd5 8a01 	vldr	s17, [r5, #4]
 80093b8:	ed90 9a01 	vldr	s18, [r0, #4]
 80093bc:	edd6 2a00 	vldr	s5, [r6]
 80093c0:	ed98 7a00 	vldr	s14, [r8]
 80093c4:	edd4 0a01 	vldr	s1, [r4, #4]
 80093c8:	ed91 6a01 	vldr	s12, [r1, #4]
 80093cc:	edd7 5a00 	vldr	s11, [r7]
 80093d0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80093d4:	ee33 3a69 	vsub.f32	s6, s6, s19
 80093d8:	ee39 5a62 	vsub.f32	s10, s18, s5
 80093dc:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80093e0:	ee38 4a44 	vsub.f32	s8, s16, s8
 80093e4:	ee38 7a87 	vadd.f32	s14, s17, s14
 80093e8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80093ec:	ee79 2a22 	vadd.f32	s5, s18, s5
 80093f0:	ee75 8a69 	vsub.f32	s17, s10, s19
 80093f4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80093f8:	ee35 5a29 	vadd.f32	s10, s10, s19
 80093fc:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009400:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009404:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8009408:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800940c:	ee32 9a08 	vadd.f32	s18, s4, s16
 8009410:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009414:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009418:	ee71 4a64 	vsub.f32	s9, s2, s9
 800941c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009420:	ee32 1a87 	vadd.f32	s2, s5, s14
 8009424:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009428:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800942c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009430:	ee73 0a29 	vadd.f32	s1, s6, s19
 8009434:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009438:	ee33 3a69 	vsub.f32	s6, s6, s19
 800943c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8009440:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8009444:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009448:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800944c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8009450:	ee74 3a22 	vadd.f32	s7, s8, s5
 8009454:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8009458:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800945c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8009460:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009464:	ee76 5a43 	vsub.f32	s11, s12, s6
 8009468:	ee74 2a62 	vsub.f32	s5, s8, s5
 800946c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009470:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009474:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8009478:	ee30 0a80 	vadd.f32	s0, s1, s0
 800947c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8009480:	ee33 6a06 	vadd.f32	s12, s6, s12
 8009484:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009488:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800948c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009490:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009494:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009498:	ee39 1a01 	vadd.f32	s2, s18, s2
 800949c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80094a0:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80094a4:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80094a8:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80094ac:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80094b0:	ee35 3a03 	vadd.f32	s6, s10, s6
 80094b4:	ee72 6a66 	vsub.f32	s13, s4, s13
 80094b8:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80094bc:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80094c0:	ed9d 4a02 	vldr	s8, [sp, #8]
 80094c4:	ed82 1a01 	vstr	s2, [r2, #4]
 80094c8:	ee77 3a63 	vsub.f32	s7, s14, s7
 80094cc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80094d0:	ed9d 7a01 	vldr	s14, [sp, #4]
 80094d4:	ed81 3a00 	vstr	s6, [r1]
 80094d8:	ee30 9a89 	vadd.f32	s18, s1, s18
 80094dc:	ee32 2a05 	vadd.f32	s4, s4, s10
 80094e0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80094e4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80094e8:	ee67 2a22 	vmul.f32	s5, s14, s5
 80094ec:	ee64 1a00 	vmul.f32	s3, s8, s0
 80094f0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80094f4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80094f8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80094fc:	ee64 8a28 	vmul.f32	s17, s8, s17
 8009500:	ed9d 4a00 	vldr	s8, [sp]
 8009504:	edc1 6a01 	vstr	s13, [r1, #4]
 8009508:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800950c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8009510:	ee64 9a29 	vmul.f32	s19, s8, s19
 8009514:	ee24 4a25 	vmul.f32	s8, s8, s11
 8009518:	ee30 7a87 	vadd.f32	s14, s1, s14
 800951c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009520:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8009524:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8009528:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800952c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8009530:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009534:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8009538:	ee75 1a21 	vadd.f32	s3, s10, s3
 800953c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8009540:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009544:	ee70 0a84 	vadd.f32	s1, s1, s8
 8009548:	ee36 6a67 	vsub.f32	s12, s12, s15
 800954c:	44d9      	add	r9, fp
 800954e:	45ca      	cmp	sl, r9
 8009550:	ed84 9a00 	vstr	s18, [r4]
 8009554:	edc4 3a01 	vstr	s7, [r4, #4]
 8009558:	441a      	add	r2, r3
 800955a:	ed07 7a01 	vstr	s14, [r7, #-4]
 800955e:	edc7 2a00 	vstr	s5, [r7]
 8009562:	4419      	add	r1, r3
 8009564:	ed80 2a00 	vstr	s4, [r0]
 8009568:	ed80 8a01 	vstr	s16, [r0, #4]
 800956c:	441c      	add	r4, r3
 800956e:	ed48 1a01 	vstr	s3, [r8, #-4]
 8009572:	ed88 0a00 	vstr	s0, [r8]
 8009576:	441f      	add	r7, r3
 8009578:	ed46 4a01 	vstr	s9, [r6, #-4]
 800957c:	4418      	add	r0, r3
 800957e:	edc6 9a00 	vstr	s19, [r6]
 8009582:	4498      	add	r8, r3
 8009584:	edc5 0a00 	vstr	s1, [r5]
 8009588:	ed85 6a01 	vstr	s12, [r5, #4]
 800958c:	441e      	add	r6, r3
 800958e:	441d      	add	r5, r3
 8009590:	f63f aeea 	bhi.w	8009368 <arm_radix8_butterfly_f32+0x328>
 8009594:	9a03      	ldr	r2, [sp, #12]
 8009596:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009598:	3201      	adds	r2, #1
 800959a:	4611      	mov	r1, r2
 800959c:	9203      	str	r2, [sp, #12]
 800959e:	9a04      	ldr	r2, [sp, #16]
 80095a0:	4402      	add	r2, r0
 80095a2:	9204      	str	r2, [sp, #16]
 80095a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80095a6:	9a05      	ldr	r2, [sp, #20]
 80095a8:	4402      	add	r2, r0
 80095aa:	9205      	str	r2, [sp, #20]
 80095ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80095ae:	9a07      	ldr	r2, [sp, #28]
 80095b0:	4402      	add	r2, r0
 80095b2:	9207      	str	r2, [sp, #28]
 80095b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80095b6:	9a06      	ldr	r2, [sp, #24]
 80095b8:	4402      	add	r2, r0
 80095ba:	9206      	str	r2, [sp, #24]
 80095bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095be:	4496      	add	lr, r2
 80095c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095c2:	4494      	add	ip, r2
 80095c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095c6:	3208      	adds	r2, #8
 80095c8:	920f      	str	r2, [sp, #60]	; 0x3c
 80095ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095cc:	3208      	adds	r2, #8
 80095ce:	920e      	str	r2, [sp, #56]	; 0x38
 80095d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095d2:	3208      	adds	r2, #8
 80095d4:	920d      	str	r2, [sp, #52]	; 0x34
 80095d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095d8:	3208      	adds	r2, #8
 80095da:	920c      	str	r2, [sp, #48]	; 0x30
 80095dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095de:	3208      	adds	r2, #8
 80095e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80095e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e4:	3208      	adds	r2, #8
 80095e6:	920a      	str	r2, [sp, #40]	; 0x28
 80095e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ea:	3208      	adds	r2, #8
 80095ec:	9209      	str	r2, [sp, #36]	; 0x24
 80095ee:	9a08      	ldr	r2, [sp, #32]
 80095f0:	3208      	adds	r2, #8
 80095f2:	9208      	str	r2, [sp, #32]
 80095f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80095f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80095f8:	4288      	cmp	r0, r1
 80095fa:	4622      	mov	r2, r4
 80095fc:	d007      	beq.n	800960e <arm_radix8_butterfly_f32+0x5ce>
 80095fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009600:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009604:	4621      	mov	r1, r4
 8009606:	4401      	add	r1, r0
 8009608:	9110      	str	r1, [sp, #64]	; 0x40
 800960a:	9804      	ldr	r0, [sp, #16]
 800960c:	e67c      	b.n	8009308 <arm_radix8_butterfly_f32+0x2c8>
 800960e:	4683      	mov	fp, r0
 8009610:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8009614:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009616:	e524      	b.n	8009062 <arm_radix8_butterfly_f32+0x22>
 8009618:	b01d      	add	sp, #116	; 0x74
 800961a:	ecbd 8b10 	vpop	{d8-d15}
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	bf00      	nop

08009624 <sniprintf>:
 8009624:	b40c      	push	{r2, r3}
 8009626:	b530      	push	{r4, r5, lr}
 8009628:	4b17      	ldr	r3, [pc, #92]	; (8009688 <sniprintf+0x64>)
 800962a:	1e0c      	subs	r4, r1, #0
 800962c:	681d      	ldr	r5, [r3, #0]
 800962e:	b09d      	sub	sp, #116	; 0x74
 8009630:	da08      	bge.n	8009644 <sniprintf+0x20>
 8009632:	238b      	movs	r3, #139	; 0x8b
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	f04f 30ff 	mov.w	r0, #4294967295
 800963a:	b01d      	add	sp, #116	; 0x74
 800963c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009640:	b002      	add	sp, #8
 8009642:	4770      	bx	lr
 8009644:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009648:	f8ad 3014 	strh.w	r3, [sp, #20]
 800964c:	bf14      	ite	ne
 800964e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009652:	4623      	moveq	r3, r4
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	9307      	str	r3, [sp, #28]
 8009658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800965c:	9002      	str	r0, [sp, #8]
 800965e:	9006      	str	r0, [sp, #24]
 8009660:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009666:	ab21      	add	r3, sp, #132	; 0x84
 8009668:	a902      	add	r1, sp, #8
 800966a:	4628      	mov	r0, r5
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	f000 f98d 	bl	800998c <_svfiprintf_r>
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	bfbc      	itt	lt
 8009676:	238b      	movlt	r3, #139	; 0x8b
 8009678:	602b      	strlt	r3, [r5, #0]
 800967a:	2c00      	cmp	r4, #0
 800967c:	d0dd      	beq.n	800963a <sniprintf+0x16>
 800967e:	9b02      	ldr	r3, [sp, #8]
 8009680:	2200      	movs	r2, #0
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e7d9      	b.n	800963a <sniprintf+0x16>
 8009686:	bf00      	nop
 8009688:	200003c4 	.word	0x200003c4

0800968c <memset>:
 800968c:	4402      	add	r2, r0
 800968e:	4603      	mov	r3, r0
 8009690:	4293      	cmp	r3, r2
 8009692:	d100      	bne.n	8009696 <memset+0xa>
 8009694:	4770      	bx	lr
 8009696:	f803 1b01 	strb.w	r1, [r3], #1
 800969a:	e7f9      	b.n	8009690 <memset+0x4>

0800969c <__libc_init_array>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4d0d      	ldr	r5, [pc, #52]	; (80096d4 <__libc_init_array+0x38>)
 80096a0:	4c0d      	ldr	r4, [pc, #52]	; (80096d8 <__libc_init_array+0x3c>)
 80096a2:	1b64      	subs	r4, r4, r5
 80096a4:	10a4      	asrs	r4, r4, #2
 80096a6:	2600      	movs	r6, #0
 80096a8:	42a6      	cmp	r6, r4
 80096aa:	d109      	bne.n	80096c0 <__libc_init_array+0x24>
 80096ac:	4d0b      	ldr	r5, [pc, #44]	; (80096dc <__libc_init_array+0x40>)
 80096ae:	4c0c      	ldr	r4, [pc, #48]	; (80096e0 <__libc_init_array+0x44>)
 80096b0:	f000 fca0 	bl	8009ff4 <_init>
 80096b4:	1b64      	subs	r4, r4, r5
 80096b6:	10a4      	asrs	r4, r4, #2
 80096b8:	2600      	movs	r6, #0
 80096ba:	42a6      	cmp	r6, r4
 80096bc:	d105      	bne.n	80096ca <__libc_init_array+0x2e>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c4:	4798      	blx	r3
 80096c6:	3601      	adds	r6, #1
 80096c8:	e7ee      	b.n	80096a8 <__libc_init_array+0xc>
 80096ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ce:	4798      	blx	r3
 80096d0:	3601      	adds	r6, #1
 80096d2:	e7f2      	b.n	80096ba <__libc_init_array+0x1e>
 80096d4:	080210dc 	.word	0x080210dc
 80096d8:	080210dc 	.word	0x080210dc
 80096dc:	080210dc 	.word	0x080210dc
 80096e0:	080210e0 	.word	0x080210e0

080096e4 <__retarget_lock_acquire_recursive>:
 80096e4:	4770      	bx	lr

080096e6 <__retarget_lock_release_recursive>:
 80096e6:	4770      	bx	lr

080096e8 <_free_r>:
 80096e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ea:	2900      	cmp	r1, #0
 80096ec:	d044      	beq.n	8009778 <_free_r+0x90>
 80096ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096f2:	9001      	str	r0, [sp, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f1a1 0404 	sub.w	r4, r1, #4
 80096fa:	bfb8      	it	lt
 80096fc:	18e4      	addlt	r4, r4, r3
 80096fe:	f000 f8df 	bl	80098c0 <__malloc_lock>
 8009702:	4a1e      	ldr	r2, [pc, #120]	; (800977c <_free_r+0x94>)
 8009704:	9801      	ldr	r0, [sp, #4]
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	b933      	cbnz	r3, 8009718 <_free_r+0x30>
 800970a:	6063      	str	r3, [r4, #4]
 800970c:	6014      	str	r4, [r2, #0]
 800970e:	b003      	add	sp, #12
 8009710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009714:	f000 b8da 	b.w	80098cc <__malloc_unlock>
 8009718:	42a3      	cmp	r3, r4
 800971a:	d908      	bls.n	800972e <_free_r+0x46>
 800971c:	6825      	ldr	r5, [r4, #0]
 800971e:	1961      	adds	r1, r4, r5
 8009720:	428b      	cmp	r3, r1
 8009722:	bf01      	itttt	eq
 8009724:	6819      	ldreq	r1, [r3, #0]
 8009726:	685b      	ldreq	r3, [r3, #4]
 8009728:	1949      	addeq	r1, r1, r5
 800972a:	6021      	streq	r1, [r4, #0]
 800972c:	e7ed      	b.n	800970a <_free_r+0x22>
 800972e:	461a      	mov	r2, r3
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	b10b      	cbz	r3, 8009738 <_free_r+0x50>
 8009734:	42a3      	cmp	r3, r4
 8009736:	d9fa      	bls.n	800972e <_free_r+0x46>
 8009738:	6811      	ldr	r1, [r2, #0]
 800973a:	1855      	adds	r5, r2, r1
 800973c:	42a5      	cmp	r5, r4
 800973e:	d10b      	bne.n	8009758 <_free_r+0x70>
 8009740:	6824      	ldr	r4, [r4, #0]
 8009742:	4421      	add	r1, r4
 8009744:	1854      	adds	r4, r2, r1
 8009746:	42a3      	cmp	r3, r4
 8009748:	6011      	str	r1, [r2, #0]
 800974a:	d1e0      	bne.n	800970e <_free_r+0x26>
 800974c:	681c      	ldr	r4, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	6053      	str	r3, [r2, #4]
 8009752:	440c      	add	r4, r1
 8009754:	6014      	str	r4, [r2, #0]
 8009756:	e7da      	b.n	800970e <_free_r+0x26>
 8009758:	d902      	bls.n	8009760 <_free_r+0x78>
 800975a:	230c      	movs	r3, #12
 800975c:	6003      	str	r3, [r0, #0]
 800975e:	e7d6      	b.n	800970e <_free_r+0x26>
 8009760:	6825      	ldr	r5, [r4, #0]
 8009762:	1961      	adds	r1, r4, r5
 8009764:	428b      	cmp	r3, r1
 8009766:	bf04      	itt	eq
 8009768:	6819      	ldreq	r1, [r3, #0]
 800976a:	685b      	ldreq	r3, [r3, #4]
 800976c:	6063      	str	r3, [r4, #4]
 800976e:	bf04      	itt	eq
 8009770:	1949      	addeq	r1, r1, r5
 8009772:	6021      	streq	r1, [r4, #0]
 8009774:	6054      	str	r4, [r2, #4]
 8009776:	e7ca      	b.n	800970e <_free_r+0x26>
 8009778:	b003      	add	sp, #12
 800977a:	bd30      	pop	{r4, r5, pc}
 800977c:	20000bf8 	.word	0x20000bf8

08009780 <sbrk_aligned>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4e0e      	ldr	r6, [pc, #56]	; (80097bc <sbrk_aligned+0x3c>)
 8009784:	460c      	mov	r4, r1
 8009786:	6831      	ldr	r1, [r6, #0]
 8009788:	4605      	mov	r5, r0
 800978a:	b911      	cbnz	r1, 8009792 <sbrk_aligned+0x12>
 800978c:	f000 fba6 	bl	8009edc <_sbrk_r>
 8009790:	6030      	str	r0, [r6, #0]
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 fba1 	bl	8009edc <_sbrk_r>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	d00a      	beq.n	80097b4 <sbrk_aligned+0x34>
 800979e:	1cc4      	adds	r4, r0, #3
 80097a0:	f024 0403 	bic.w	r4, r4, #3
 80097a4:	42a0      	cmp	r0, r4
 80097a6:	d007      	beq.n	80097b8 <sbrk_aligned+0x38>
 80097a8:	1a21      	subs	r1, r4, r0
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 fb96 	bl	8009edc <_sbrk_r>
 80097b0:	3001      	adds	r0, #1
 80097b2:	d101      	bne.n	80097b8 <sbrk_aligned+0x38>
 80097b4:	f04f 34ff 	mov.w	r4, #4294967295
 80097b8:	4620      	mov	r0, r4
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	20000bfc 	.word	0x20000bfc

080097c0 <_malloc_r>:
 80097c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c4:	1ccd      	adds	r5, r1, #3
 80097c6:	f025 0503 	bic.w	r5, r5, #3
 80097ca:	3508      	adds	r5, #8
 80097cc:	2d0c      	cmp	r5, #12
 80097ce:	bf38      	it	cc
 80097d0:	250c      	movcc	r5, #12
 80097d2:	2d00      	cmp	r5, #0
 80097d4:	4607      	mov	r7, r0
 80097d6:	db01      	blt.n	80097dc <_malloc_r+0x1c>
 80097d8:	42a9      	cmp	r1, r5
 80097da:	d905      	bls.n	80097e8 <_malloc_r+0x28>
 80097dc:	230c      	movs	r3, #12
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	2600      	movs	r6, #0
 80097e2:	4630      	mov	r0, r6
 80097e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80098bc <_malloc_r+0xfc>
 80097ec:	f000 f868 	bl	80098c0 <__malloc_lock>
 80097f0:	f8d8 3000 	ldr.w	r3, [r8]
 80097f4:	461c      	mov	r4, r3
 80097f6:	bb5c      	cbnz	r4, 8009850 <_malloc_r+0x90>
 80097f8:	4629      	mov	r1, r5
 80097fa:	4638      	mov	r0, r7
 80097fc:	f7ff ffc0 	bl	8009780 <sbrk_aligned>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	4604      	mov	r4, r0
 8009804:	d155      	bne.n	80098b2 <_malloc_r+0xf2>
 8009806:	f8d8 4000 	ldr.w	r4, [r8]
 800980a:	4626      	mov	r6, r4
 800980c:	2e00      	cmp	r6, #0
 800980e:	d145      	bne.n	800989c <_malloc_r+0xdc>
 8009810:	2c00      	cmp	r4, #0
 8009812:	d048      	beq.n	80098a6 <_malloc_r+0xe6>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	4631      	mov	r1, r6
 8009818:	4638      	mov	r0, r7
 800981a:	eb04 0903 	add.w	r9, r4, r3
 800981e:	f000 fb5d 	bl	8009edc <_sbrk_r>
 8009822:	4581      	cmp	r9, r0
 8009824:	d13f      	bne.n	80098a6 <_malloc_r+0xe6>
 8009826:	6821      	ldr	r1, [r4, #0]
 8009828:	1a6d      	subs	r5, r5, r1
 800982a:	4629      	mov	r1, r5
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff ffa7 	bl	8009780 <sbrk_aligned>
 8009832:	3001      	adds	r0, #1
 8009834:	d037      	beq.n	80098a6 <_malloc_r+0xe6>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	442b      	add	r3, r5
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	f8d8 3000 	ldr.w	r3, [r8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d038      	beq.n	80098b6 <_malloc_r+0xf6>
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	42a2      	cmp	r2, r4
 8009848:	d12b      	bne.n	80098a2 <_malloc_r+0xe2>
 800984a:	2200      	movs	r2, #0
 800984c:	605a      	str	r2, [r3, #4]
 800984e:	e00f      	b.n	8009870 <_malloc_r+0xb0>
 8009850:	6822      	ldr	r2, [r4, #0]
 8009852:	1b52      	subs	r2, r2, r5
 8009854:	d41f      	bmi.n	8009896 <_malloc_r+0xd6>
 8009856:	2a0b      	cmp	r2, #11
 8009858:	d917      	bls.n	800988a <_malloc_r+0xca>
 800985a:	1961      	adds	r1, r4, r5
 800985c:	42a3      	cmp	r3, r4
 800985e:	6025      	str	r5, [r4, #0]
 8009860:	bf18      	it	ne
 8009862:	6059      	strne	r1, [r3, #4]
 8009864:	6863      	ldr	r3, [r4, #4]
 8009866:	bf08      	it	eq
 8009868:	f8c8 1000 	streq.w	r1, [r8]
 800986c:	5162      	str	r2, [r4, r5]
 800986e:	604b      	str	r3, [r1, #4]
 8009870:	4638      	mov	r0, r7
 8009872:	f104 060b 	add.w	r6, r4, #11
 8009876:	f000 f829 	bl	80098cc <__malloc_unlock>
 800987a:	f026 0607 	bic.w	r6, r6, #7
 800987e:	1d23      	adds	r3, r4, #4
 8009880:	1af2      	subs	r2, r6, r3
 8009882:	d0ae      	beq.n	80097e2 <_malloc_r+0x22>
 8009884:	1b9b      	subs	r3, r3, r6
 8009886:	50a3      	str	r3, [r4, r2]
 8009888:	e7ab      	b.n	80097e2 <_malloc_r+0x22>
 800988a:	42a3      	cmp	r3, r4
 800988c:	6862      	ldr	r2, [r4, #4]
 800988e:	d1dd      	bne.n	800984c <_malloc_r+0x8c>
 8009890:	f8c8 2000 	str.w	r2, [r8]
 8009894:	e7ec      	b.n	8009870 <_malloc_r+0xb0>
 8009896:	4623      	mov	r3, r4
 8009898:	6864      	ldr	r4, [r4, #4]
 800989a:	e7ac      	b.n	80097f6 <_malloc_r+0x36>
 800989c:	4634      	mov	r4, r6
 800989e:	6876      	ldr	r6, [r6, #4]
 80098a0:	e7b4      	b.n	800980c <_malloc_r+0x4c>
 80098a2:	4613      	mov	r3, r2
 80098a4:	e7cc      	b.n	8009840 <_malloc_r+0x80>
 80098a6:	230c      	movs	r3, #12
 80098a8:	603b      	str	r3, [r7, #0]
 80098aa:	4638      	mov	r0, r7
 80098ac:	f000 f80e 	bl	80098cc <__malloc_unlock>
 80098b0:	e797      	b.n	80097e2 <_malloc_r+0x22>
 80098b2:	6025      	str	r5, [r4, #0]
 80098b4:	e7dc      	b.n	8009870 <_malloc_r+0xb0>
 80098b6:	605b      	str	r3, [r3, #4]
 80098b8:	deff      	udf	#255	; 0xff
 80098ba:	bf00      	nop
 80098bc:	20000bf8 	.word	0x20000bf8

080098c0 <__malloc_lock>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__malloc_lock+0x8>)
 80098c2:	f7ff bf0f 	b.w	80096e4 <__retarget_lock_acquire_recursive>
 80098c6:	bf00      	nop
 80098c8:	20000bf4 	.word	0x20000bf4

080098cc <__malloc_unlock>:
 80098cc:	4801      	ldr	r0, [pc, #4]	; (80098d4 <__malloc_unlock+0x8>)
 80098ce:	f7ff bf0a 	b.w	80096e6 <__retarget_lock_release_recursive>
 80098d2:	bf00      	nop
 80098d4:	20000bf4 	.word	0x20000bf4

080098d8 <__ssputs_r>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	688e      	ldr	r6, [r1, #8]
 80098de:	461f      	mov	r7, r3
 80098e0:	42be      	cmp	r6, r7
 80098e2:	680b      	ldr	r3, [r1, #0]
 80098e4:	4682      	mov	sl, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4690      	mov	r8, r2
 80098ea:	d82c      	bhi.n	8009946 <__ssputs_r+0x6e>
 80098ec:	898a      	ldrh	r2, [r1, #12]
 80098ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098f2:	d026      	beq.n	8009942 <__ssputs_r+0x6a>
 80098f4:	6965      	ldr	r5, [r4, #20]
 80098f6:	6909      	ldr	r1, [r1, #16]
 80098f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098fc:	eba3 0901 	sub.w	r9, r3, r1
 8009900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009904:	1c7b      	adds	r3, r7, #1
 8009906:	444b      	add	r3, r9
 8009908:	106d      	asrs	r5, r5, #1
 800990a:	429d      	cmp	r5, r3
 800990c:	bf38      	it	cc
 800990e:	461d      	movcc	r5, r3
 8009910:	0553      	lsls	r3, r2, #21
 8009912:	d527      	bpl.n	8009964 <__ssputs_r+0x8c>
 8009914:	4629      	mov	r1, r5
 8009916:	f7ff ff53 	bl	80097c0 <_malloc_r>
 800991a:	4606      	mov	r6, r0
 800991c:	b360      	cbz	r0, 8009978 <__ssputs_r+0xa0>
 800991e:	6921      	ldr	r1, [r4, #16]
 8009920:	464a      	mov	r2, r9
 8009922:	f000 faeb 	bl	8009efc <memcpy>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800992c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	6126      	str	r6, [r4, #16]
 8009934:	6165      	str	r5, [r4, #20]
 8009936:	444e      	add	r6, r9
 8009938:	eba5 0509 	sub.w	r5, r5, r9
 800993c:	6026      	str	r6, [r4, #0]
 800993e:	60a5      	str	r5, [r4, #8]
 8009940:	463e      	mov	r6, r7
 8009942:	42be      	cmp	r6, r7
 8009944:	d900      	bls.n	8009948 <__ssputs_r+0x70>
 8009946:	463e      	mov	r6, r7
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	4632      	mov	r2, r6
 800994c:	4641      	mov	r1, r8
 800994e:	f000 faab 	bl	8009ea8 <memmove>
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	1b9b      	subs	r3, r3, r6
 8009956:	60a3      	str	r3, [r4, #8]
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	4433      	add	r3, r6
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	2000      	movs	r0, #0
 8009960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009964:	462a      	mov	r2, r5
 8009966:	f000 fad7 	bl	8009f18 <_realloc_r>
 800996a:	4606      	mov	r6, r0
 800996c:	2800      	cmp	r0, #0
 800996e:	d1e0      	bne.n	8009932 <__ssputs_r+0x5a>
 8009970:	6921      	ldr	r1, [r4, #16]
 8009972:	4650      	mov	r0, sl
 8009974:	f7ff feb8 	bl	80096e8 <_free_r>
 8009978:	230c      	movs	r3, #12
 800997a:	f8ca 3000 	str.w	r3, [sl]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	f04f 30ff 	mov.w	r0, #4294967295
 800998a:	e7e9      	b.n	8009960 <__ssputs_r+0x88>

0800998c <_svfiprintf_r>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	4698      	mov	r8, r3
 8009992:	898b      	ldrh	r3, [r1, #12]
 8009994:	061b      	lsls	r3, r3, #24
 8009996:	b09d      	sub	sp, #116	; 0x74
 8009998:	4607      	mov	r7, r0
 800999a:	460d      	mov	r5, r1
 800999c:	4614      	mov	r4, r2
 800999e:	d50e      	bpl.n	80099be <_svfiprintf_r+0x32>
 80099a0:	690b      	ldr	r3, [r1, #16]
 80099a2:	b963      	cbnz	r3, 80099be <_svfiprintf_r+0x32>
 80099a4:	2140      	movs	r1, #64	; 0x40
 80099a6:	f7ff ff0b 	bl	80097c0 <_malloc_r>
 80099aa:	6028      	str	r0, [r5, #0]
 80099ac:	6128      	str	r0, [r5, #16]
 80099ae:	b920      	cbnz	r0, 80099ba <_svfiprintf_r+0x2e>
 80099b0:	230c      	movs	r3, #12
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	e0d0      	b.n	8009b5c <_svfiprintf_r+0x1d0>
 80099ba:	2340      	movs	r3, #64	; 0x40
 80099bc:	616b      	str	r3, [r5, #20]
 80099be:	2300      	movs	r3, #0
 80099c0:	9309      	str	r3, [sp, #36]	; 0x24
 80099c2:	2320      	movs	r3, #32
 80099c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099cc:	2330      	movs	r3, #48	; 0x30
 80099ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b74 <_svfiprintf_r+0x1e8>
 80099d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099d6:	f04f 0901 	mov.w	r9, #1
 80099da:	4623      	mov	r3, r4
 80099dc:	469a      	mov	sl, r3
 80099de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e2:	b10a      	cbz	r2, 80099e8 <_svfiprintf_r+0x5c>
 80099e4:	2a25      	cmp	r2, #37	; 0x25
 80099e6:	d1f9      	bne.n	80099dc <_svfiprintf_r+0x50>
 80099e8:	ebba 0b04 	subs.w	fp, sl, r4
 80099ec:	d00b      	beq.n	8009a06 <_svfiprintf_r+0x7a>
 80099ee:	465b      	mov	r3, fp
 80099f0:	4622      	mov	r2, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	4638      	mov	r0, r7
 80099f6:	f7ff ff6f 	bl	80098d8 <__ssputs_r>
 80099fa:	3001      	adds	r0, #1
 80099fc:	f000 80a9 	beq.w	8009b52 <_svfiprintf_r+0x1c6>
 8009a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a02:	445a      	add	r2, fp
 8009a04:	9209      	str	r2, [sp, #36]	; 0x24
 8009a06:	f89a 3000 	ldrb.w	r3, [sl]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 80a1 	beq.w	8009b52 <_svfiprintf_r+0x1c6>
 8009a10:	2300      	movs	r3, #0
 8009a12:	f04f 32ff 	mov.w	r2, #4294967295
 8009a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a1a:	f10a 0a01 	add.w	sl, sl, #1
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	9307      	str	r3, [sp, #28]
 8009a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a26:	931a      	str	r3, [sp, #104]	; 0x68
 8009a28:	4654      	mov	r4, sl
 8009a2a:	2205      	movs	r2, #5
 8009a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a30:	4850      	ldr	r0, [pc, #320]	; (8009b74 <_svfiprintf_r+0x1e8>)
 8009a32:	f7f6 fc3d 	bl	80002b0 <memchr>
 8009a36:	9a04      	ldr	r2, [sp, #16]
 8009a38:	b9d8      	cbnz	r0, 8009a72 <_svfiprintf_r+0xe6>
 8009a3a:	06d0      	lsls	r0, r2, #27
 8009a3c:	bf44      	itt	mi
 8009a3e:	2320      	movmi	r3, #32
 8009a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a44:	0711      	lsls	r1, r2, #28
 8009a46:	bf44      	itt	mi
 8009a48:	232b      	movmi	r3, #43	; 0x2b
 8009a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a52:	2b2a      	cmp	r3, #42	; 0x2a
 8009a54:	d015      	beq.n	8009a82 <_svfiprintf_r+0xf6>
 8009a56:	9a07      	ldr	r2, [sp, #28]
 8009a58:	4654      	mov	r4, sl
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	f04f 0c0a 	mov.w	ip, #10
 8009a60:	4621      	mov	r1, r4
 8009a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a66:	3b30      	subs	r3, #48	; 0x30
 8009a68:	2b09      	cmp	r3, #9
 8009a6a:	d94d      	bls.n	8009b08 <_svfiprintf_r+0x17c>
 8009a6c:	b1b0      	cbz	r0, 8009a9c <_svfiprintf_r+0x110>
 8009a6e:	9207      	str	r2, [sp, #28]
 8009a70:	e014      	b.n	8009a9c <_svfiprintf_r+0x110>
 8009a72:	eba0 0308 	sub.w	r3, r0, r8
 8009a76:	fa09 f303 	lsl.w	r3, r9, r3
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	46a2      	mov	sl, r4
 8009a80:	e7d2      	b.n	8009a28 <_svfiprintf_r+0x9c>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	1d19      	adds	r1, r3, #4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	9103      	str	r1, [sp, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bfbb      	ittet	lt
 8009a8e:	425b      	neglt	r3, r3
 8009a90:	f042 0202 	orrlt.w	r2, r2, #2
 8009a94:	9307      	strge	r3, [sp, #28]
 8009a96:	9307      	strlt	r3, [sp, #28]
 8009a98:	bfb8      	it	lt
 8009a9a:	9204      	strlt	r2, [sp, #16]
 8009a9c:	7823      	ldrb	r3, [r4, #0]
 8009a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8009aa0:	d10c      	bne.n	8009abc <_svfiprintf_r+0x130>
 8009aa2:	7863      	ldrb	r3, [r4, #1]
 8009aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa6:	d134      	bne.n	8009b12 <_svfiprintf_r+0x186>
 8009aa8:	9b03      	ldr	r3, [sp, #12]
 8009aaa:	1d1a      	adds	r2, r3, #4
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	9203      	str	r2, [sp, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	bfb8      	it	lt
 8009ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ab8:	3402      	adds	r4, #2
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009b84 <_svfiprintf_r+0x1f8>
 8009ac0:	7821      	ldrb	r1, [r4, #0]
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	f7f6 fbf3 	bl	80002b0 <memchr>
 8009aca:	b138      	cbz	r0, 8009adc <_svfiprintf_r+0x150>
 8009acc:	9b04      	ldr	r3, [sp, #16]
 8009ace:	eba0 000a 	sub.w	r0, r0, sl
 8009ad2:	2240      	movs	r2, #64	; 0x40
 8009ad4:	4082      	lsls	r2, r0
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	3401      	adds	r4, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae0:	4825      	ldr	r0, [pc, #148]	; (8009b78 <_svfiprintf_r+0x1ec>)
 8009ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ae6:	2206      	movs	r2, #6
 8009ae8:	f7f6 fbe2 	bl	80002b0 <memchr>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d038      	beq.n	8009b62 <_svfiprintf_r+0x1d6>
 8009af0:	4b22      	ldr	r3, [pc, #136]	; (8009b7c <_svfiprintf_r+0x1f0>)
 8009af2:	bb1b      	cbnz	r3, 8009b3c <_svfiprintf_r+0x1b0>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	3307      	adds	r3, #7
 8009af8:	f023 0307 	bic.w	r3, r3, #7
 8009afc:	3308      	adds	r3, #8
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b02:	4433      	add	r3, r6
 8009b04:	9309      	str	r3, [sp, #36]	; 0x24
 8009b06:	e768      	b.n	80099da <_svfiprintf_r+0x4e>
 8009b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	2001      	movs	r0, #1
 8009b10:	e7a6      	b.n	8009a60 <_svfiprintf_r+0xd4>
 8009b12:	2300      	movs	r3, #0
 8009b14:	3401      	adds	r4, #1
 8009b16:	9305      	str	r3, [sp, #20]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	f04f 0c0a 	mov.w	ip, #10
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b24:	3a30      	subs	r2, #48	; 0x30
 8009b26:	2a09      	cmp	r2, #9
 8009b28:	d903      	bls.n	8009b32 <_svfiprintf_r+0x1a6>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0c6      	beq.n	8009abc <_svfiprintf_r+0x130>
 8009b2e:	9105      	str	r1, [sp, #20]
 8009b30:	e7c4      	b.n	8009abc <_svfiprintf_r+0x130>
 8009b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b36:	4604      	mov	r4, r0
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e7f0      	b.n	8009b1e <_svfiprintf_r+0x192>
 8009b3c:	ab03      	add	r3, sp, #12
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	462a      	mov	r2, r5
 8009b42:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <_svfiprintf_r+0x1f4>)
 8009b44:	a904      	add	r1, sp, #16
 8009b46:	4638      	mov	r0, r7
 8009b48:	f3af 8000 	nop.w
 8009b4c:	1c42      	adds	r2, r0, #1
 8009b4e:	4606      	mov	r6, r0
 8009b50:	d1d6      	bne.n	8009b00 <_svfiprintf_r+0x174>
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	065b      	lsls	r3, r3, #25
 8009b56:	f53f af2d 	bmi.w	80099b4 <_svfiprintf_r+0x28>
 8009b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b5c:	b01d      	add	sp, #116	; 0x74
 8009b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b62:	ab03      	add	r3, sp, #12
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	462a      	mov	r2, r5
 8009b68:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <_svfiprintf_r+0x1f4>)
 8009b6a:	a904      	add	r1, sp, #16
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f000 f879 	bl	8009c64 <_printf_i>
 8009b72:	e7eb      	b.n	8009b4c <_svfiprintf_r+0x1c0>
 8009b74:	080210a0 	.word	0x080210a0
 8009b78:	080210aa 	.word	0x080210aa
 8009b7c:	00000000 	.word	0x00000000
 8009b80:	080098d9 	.word	0x080098d9
 8009b84:	080210a6 	.word	0x080210a6

08009b88 <_printf_common>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	4616      	mov	r6, r2
 8009b8e:	4699      	mov	r9, r3
 8009b90:	688a      	ldr	r2, [r1, #8]
 8009b92:	690b      	ldr	r3, [r1, #16]
 8009b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	bfb8      	it	lt
 8009b9c:	4613      	movlt	r3, r2
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	b10a      	cbz	r2, 8009bae <_printf_common+0x26>
 8009baa:	3301      	adds	r3, #1
 8009bac:	6033      	str	r3, [r6, #0]
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	0699      	lsls	r1, r3, #26
 8009bb2:	bf42      	ittt	mi
 8009bb4:	6833      	ldrmi	r3, [r6, #0]
 8009bb6:	3302      	addmi	r3, #2
 8009bb8:	6033      	strmi	r3, [r6, #0]
 8009bba:	6825      	ldr	r5, [r4, #0]
 8009bbc:	f015 0506 	ands.w	r5, r5, #6
 8009bc0:	d106      	bne.n	8009bd0 <_printf_common+0x48>
 8009bc2:	f104 0a19 	add.w	sl, r4, #25
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	6832      	ldr	r2, [r6, #0]
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	dc26      	bgt.n	8009c1e <_printf_common+0x96>
 8009bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bd4:	1e13      	subs	r3, r2, #0
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	bf18      	it	ne
 8009bda:	2301      	movne	r3, #1
 8009bdc:	0692      	lsls	r2, r2, #26
 8009bde:	d42b      	bmi.n	8009c38 <_printf_common+0xb0>
 8009be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009be4:	4649      	mov	r1, r9
 8009be6:	4638      	mov	r0, r7
 8009be8:	47c0      	blx	r8
 8009bea:	3001      	adds	r0, #1
 8009bec:	d01e      	beq.n	8009c2c <_printf_common+0xa4>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	f003 0306 	and.w	r3, r3, #6
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	bf02      	ittt	eq
 8009bfa:	68e5      	ldreq	r5, [r4, #12]
 8009bfc:	6833      	ldreq	r3, [r6, #0]
 8009bfe:	1aed      	subeq	r5, r5, r3
 8009c00:	68a3      	ldr	r3, [r4, #8]
 8009c02:	bf0c      	ite	eq
 8009c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c08:	2500      	movne	r5, #0
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	bfc4      	itt	gt
 8009c0e:	1a9b      	subgt	r3, r3, r2
 8009c10:	18ed      	addgt	r5, r5, r3
 8009c12:	2600      	movs	r6, #0
 8009c14:	341a      	adds	r4, #26
 8009c16:	42b5      	cmp	r5, r6
 8009c18:	d11a      	bne.n	8009c50 <_printf_common+0xc8>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	e008      	b.n	8009c30 <_printf_common+0xa8>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4652      	mov	r2, sl
 8009c22:	4649      	mov	r1, r9
 8009c24:	4638      	mov	r0, r7
 8009c26:	47c0      	blx	r8
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d103      	bne.n	8009c34 <_printf_common+0xac>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c34:	3501      	adds	r5, #1
 8009c36:	e7c6      	b.n	8009bc6 <_printf_common+0x3e>
 8009c38:	18e1      	adds	r1, r4, r3
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	2030      	movs	r0, #48	; 0x30
 8009c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c42:	4422      	add	r2, r4
 8009c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	e7c7      	b.n	8009be0 <_printf_common+0x58>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4622      	mov	r2, r4
 8009c54:	4649      	mov	r1, r9
 8009c56:	4638      	mov	r0, r7
 8009c58:	47c0      	blx	r8
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d0e6      	beq.n	8009c2c <_printf_common+0xa4>
 8009c5e:	3601      	adds	r6, #1
 8009c60:	e7d9      	b.n	8009c16 <_printf_common+0x8e>
	...

08009c64 <_printf_i>:
 8009c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	7e0f      	ldrb	r7, [r1, #24]
 8009c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c6c:	2f78      	cmp	r7, #120	; 0x78
 8009c6e:	4691      	mov	r9, r2
 8009c70:	4680      	mov	r8, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	469a      	mov	sl, r3
 8009c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c7a:	d807      	bhi.n	8009c8c <_printf_i+0x28>
 8009c7c:	2f62      	cmp	r7, #98	; 0x62
 8009c7e:	d80a      	bhi.n	8009c96 <_printf_i+0x32>
 8009c80:	2f00      	cmp	r7, #0
 8009c82:	f000 80d4 	beq.w	8009e2e <_printf_i+0x1ca>
 8009c86:	2f58      	cmp	r7, #88	; 0x58
 8009c88:	f000 80c0 	beq.w	8009e0c <_printf_i+0x1a8>
 8009c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c94:	e03a      	b.n	8009d0c <_printf_i+0xa8>
 8009c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c9a:	2b15      	cmp	r3, #21
 8009c9c:	d8f6      	bhi.n	8009c8c <_printf_i+0x28>
 8009c9e:	a101      	add	r1, pc, #4	; (adr r1, 8009ca4 <_printf_i+0x40>)
 8009ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ca4:	08009cfd 	.word	0x08009cfd
 8009ca8:	08009d11 	.word	0x08009d11
 8009cac:	08009c8d 	.word	0x08009c8d
 8009cb0:	08009c8d 	.word	0x08009c8d
 8009cb4:	08009c8d 	.word	0x08009c8d
 8009cb8:	08009c8d 	.word	0x08009c8d
 8009cbc:	08009d11 	.word	0x08009d11
 8009cc0:	08009c8d 	.word	0x08009c8d
 8009cc4:	08009c8d 	.word	0x08009c8d
 8009cc8:	08009c8d 	.word	0x08009c8d
 8009ccc:	08009c8d 	.word	0x08009c8d
 8009cd0:	08009e15 	.word	0x08009e15
 8009cd4:	08009d3d 	.word	0x08009d3d
 8009cd8:	08009dcf 	.word	0x08009dcf
 8009cdc:	08009c8d 	.word	0x08009c8d
 8009ce0:	08009c8d 	.word	0x08009c8d
 8009ce4:	08009e37 	.word	0x08009e37
 8009ce8:	08009c8d 	.word	0x08009c8d
 8009cec:	08009d3d 	.word	0x08009d3d
 8009cf0:	08009c8d 	.word	0x08009c8d
 8009cf4:	08009c8d 	.word	0x08009c8d
 8009cf8:	08009dd7 	.word	0x08009dd7
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	1d1a      	adds	r2, r3, #4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	602a      	str	r2, [r5, #0]
 8009d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e09f      	b.n	8009e50 <_printf_i+0x1ec>
 8009d10:	6820      	ldr	r0, [r4, #0]
 8009d12:	682b      	ldr	r3, [r5, #0]
 8009d14:	0607      	lsls	r7, r0, #24
 8009d16:	f103 0104 	add.w	r1, r3, #4
 8009d1a:	6029      	str	r1, [r5, #0]
 8009d1c:	d501      	bpl.n	8009d22 <_printf_i+0xbe>
 8009d1e:	681e      	ldr	r6, [r3, #0]
 8009d20:	e003      	b.n	8009d2a <_printf_i+0xc6>
 8009d22:	0646      	lsls	r6, r0, #25
 8009d24:	d5fb      	bpl.n	8009d1e <_printf_i+0xba>
 8009d26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d2a:	2e00      	cmp	r6, #0
 8009d2c:	da03      	bge.n	8009d36 <_printf_i+0xd2>
 8009d2e:	232d      	movs	r3, #45	; 0x2d
 8009d30:	4276      	negs	r6, r6
 8009d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d36:	485a      	ldr	r0, [pc, #360]	; (8009ea0 <_printf_i+0x23c>)
 8009d38:	230a      	movs	r3, #10
 8009d3a:	e012      	b.n	8009d62 <_printf_i+0xfe>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1d19      	adds	r1, r3, #4
 8009d42:	6029      	str	r1, [r5, #0]
 8009d44:	0605      	lsls	r5, r0, #24
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0xe8>
 8009d48:	681e      	ldr	r6, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <_printf_i+0xee>
 8009d4c:	0641      	lsls	r1, r0, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0xe4>
 8009d50:	881e      	ldrh	r6, [r3, #0]
 8009d52:	4853      	ldr	r0, [pc, #332]	; (8009ea0 <_printf_i+0x23c>)
 8009d54:	2f6f      	cmp	r7, #111	; 0x6f
 8009d56:	bf0c      	ite	eq
 8009d58:	2308      	moveq	r3, #8
 8009d5a:	230a      	movne	r3, #10
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d62:	6865      	ldr	r5, [r4, #4]
 8009d64:	60a5      	str	r5, [r4, #8]
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	bfa2      	ittt	ge
 8009d6a:	6821      	ldrge	r1, [r4, #0]
 8009d6c:	f021 0104 	bicge.w	r1, r1, #4
 8009d70:	6021      	strge	r1, [r4, #0]
 8009d72:	b90e      	cbnz	r6, 8009d78 <_printf_i+0x114>
 8009d74:	2d00      	cmp	r5, #0
 8009d76:	d04b      	beq.n	8009e10 <_printf_i+0x1ac>
 8009d78:	4615      	mov	r5, r2
 8009d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d82:	5dc7      	ldrb	r7, [r0, r7]
 8009d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d88:	4637      	mov	r7, r6
 8009d8a:	42bb      	cmp	r3, r7
 8009d8c:	460e      	mov	r6, r1
 8009d8e:	d9f4      	bls.n	8009d7a <_printf_i+0x116>
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d10b      	bne.n	8009dac <_printf_i+0x148>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	07de      	lsls	r6, r3, #31
 8009d98:	d508      	bpl.n	8009dac <_printf_i+0x148>
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	6861      	ldr	r1, [r4, #4]
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	bfde      	ittt	le
 8009da2:	2330      	movle	r3, #48	; 0x30
 8009da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dac:	1b52      	subs	r2, r2, r5
 8009dae:	6122      	str	r2, [r4, #16]
 8009db0:	f8cd a000 	str.w	sl, [sp]
 8009db4:	464b      	mov	r3, r9
 8009db6:	aa03      	add	r2, sp, #12
 8009db8:	4621      	mov	r1, r4
 8009dba:	4640      	mov	r0, r8
 8009dbc:	f7ff fee4 	bl	8009b88 <_printf_common>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d14a      	bne.n	8009e5a <_printf_i+0x1f6>
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc8:	b004      	add	sp, #16
 8009dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	f043 0320 	orr.w	r3, r3, #32
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	4833      	ldr	r0, [pc, #204]	; (8009ea4 <_printf_i+0x240>)
 8009dd8:	2778      	movs	r7, #120	; 0x78
 8009dda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	6829      	ldr	r1, [r5, #0]
 8009de2:	061f      	lsls	r7, r3, #24
 8009de4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009de8:	d402      	bmi.n	8009df0 <_printf_i+0x18c>
 8009dea:	065f      	lsls	r7, r3, #25
 8009dec:	bf48      	it	mi
 8009dee:	b2b6      	uxthmi	r6, r6
 8009df0:	07df      	lsls	r7, r3, #31
 8009df2:	bf48      	it	mi
 8009df4:	f043 0320 	orrmi.w	r3, r3, #32
 8009df8:	6029      	str	r1, [r5, #0]
 8009dfa:	bf48      	it	mi
 8009dfc:	6023      	strmi	r3, [r4, #0]
 8009dfe:	b91e      	cbnz	r6, 8009e08 <_printf_i+0x1a4>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	f023 0320 	bic.w	r3, r3, #32
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	2310      	movs	r3, #16
 8009e0a:	e7a7      	b.n	8009d5c <_printf_i+0xf8>
 8009e0c:	4824      	ldr	r0, [pc, #144]	; (8009ea0 <_printf_i+0x23c>)
 8009e0e:	e7e4      	b.n	8009dda <_printf_i+0x176>
 8009e10:	4615      	mov	r5, r2
 8009e12:	e7bd      	b.n	8009d90 <_printf_i+0x12c>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	6826      	ldr	r6, [r4, #0]
 8009e18:	6961      	ldr	r1, [r4, #20]
 8009e1a:	1d18      	adds	r0, r3, #4
 8009e1c:	6028      	str	r0, [r5, #0]
 8009e1e:	0635      	lsls	r5, r6, #24
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	d501      	bpl.n	8009e28 <_printf_i+0x1c4>
 8009e24:	6019      	str	r1, [r3, #0]
 8009e26:	e002      	b.n	8009e2e <_printf_i+0x1ca>
 8009e28:	0670      	lsls	r0, r6, #25
 8009e2a:	d5fb      	bpl.n	8009e24 <_printf_i+0x1c0>
 8009e2c:	8019      	strh	r1, [r3, #0]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6123      	str	r3, [r4, #16]
 8009e32:	4615      	mov	r5, r2
 8009e34:	e7bc      	b.n	8009db0 <_printf_i+0x14c>
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	1d1a      	adds	r2, r3, #4
 8009e3a:	602a      	str	r2, [r5, #0]
 8009e3c:	681d      	ldr	r5, [r3, #0]
 8009e3e:	6862      	ldr	r2, [r4, #4]
 8009e40:	2100      	movs	r1, #0
 8009e42:	4628      	mov	r0, r5
 8009e44:	f7f6 fa34 	bl	80002b0 <memchr>
 8009e48:	b108      	cbz	r0, 8009e4e <_printf_i+0x1ea>
 8009e4a:	1b40      	subs	r0, r0, r5
 8009e4c:	6060      	str	r0, [r4, #4]
 8009e4e:	6863      	ldr	r3, [r4, #4]
 8009e50:	6123      	str	r3, [r4, #16]
 8009e52:	2300      	movs	r3, #0
 8009e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e58:	e7aa      	b.n	8009db0 <_printf_i+0x14c>
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	4649      	mov	r1, r9
 8009e60:	4640      	mov	r0, r8
 8009e62:	47d0      	blx	sl
 8009e64:	3001      	adds	r0, #1
 8009e66:	d0ad      	beq.n	8009dc4 <_printf_i+0x160>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	079b      	lsls	r3, r3, #30
 8009e6c:	d413      	bmi.n	8009e96 <_printf_i+0x232>
 8009e6e:	68e0      	ldr	r0, [r4, #12]
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	4298      	cmp	r0, r3
 8009e74:	bfb8      	it	lt
 8009e76:	4618      	movlt	r0, r3
 8009e78:	e7a6      	b.n	8009dc8 <_printf_i+0x164>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4632      	mov	r2, r6
 8009e7e:	4649      	mov	r1, r9
 8009e80:	4640      	mov	r0, r8
 8009e82:	47d0      	blx	sl
 8009e84:	3001      	adds	r0, #1
 8009e86:	d09d      	beq.n	8009dc4 <_printf_i+0x160>
 8009e88:	3501      	adds	r5, #1
 8009e8a:	68e3      	ldr	r3, [r4, #12]
 8009e8c:	9903      	ldr	r1, [sp, #12]
 8009e8e:	1a5b      	subs	r3, r3, r1
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	dcf2      	bgt.n	8009e7a <_printf_i+0x216>
 8009e94:	e7eb      	b.n	8009e6e <_printf_i+0x20a>
 8009e96:	2500      	movs	r5, #0
 8009e98:	f104 0619 	add.w	r6, r4, #25
 8009e9c:	e7f5      	b.n	8009e8a <_printf_i+0x226>
 8009e9e:	bf00      	nop
 8009ea0:	080210b1 	.word	0x080210b1
 8009ea4:	080210c2 	.word	0x080210c2

08009ea8 <memmove>:
 8009ea8:	4288      	cmp	r0, r1
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	eb01 0402 	add.w	r4, r1, r2
 8009eb0:	d902      	bls.n	8009eb8 <memmove+0x10>
 8009eb2:	4284      	cmp	r4, r0
 8009eb4:	4623      	mov	r3, r4
 8009eb6:	d807      	bhi.n	8009ec8 <memmove+0x20>
 8009eb8:	1e43      	subs	r3, r0, #1
 8009eba:	42a1      	cmp	r1, r4
 8009ebc:	d008      	beq.n	8009ed0 <memmove+0x28>
 8009ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ec6:	e7f8      	b.n	8009eba <memmove+0x12>
 8009ec8:	4402      	add	r2, r0
 8009eca:	4601      	mov	r1, r0
 8009ecc:	428a      	cmp	r2, r1
 8009ece:	d100      	bne.n	8009ed2 <memmove+0x2a>
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eda:	e7f7      	b.n	8009ecc <memmove+0x24>

08009edc <_sbrk_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d06      	ldr	r5, [pc, #24]	; (8009ef8 <_sbrk_r+0x1c>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	f000 f876 	bl	8009fd8 <_sbrk>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_sbrk_r+0x1a>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_sbrk_r+0x1a>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20000bf0 	.word	0x20000bf0

08009efc <memcpy>:
 8009efc:	440a      	add	r2, r1
 8009efe:	4291      	cmp	r1, r2
 8009f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f04:	d100      	bne.n	8009f08 <memcpy+0xc>
 8009f06:	4770      	bx	lr
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f12:	4291      	cmp	r1, r2
 8009f14:	d1f9      	bne.n	8009f0a <memcpy+0xe>
 8009f16:	bd10      	pop	{r4, pc}

08009f18 <_realloc_r>:
 8009f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	4614      	mov	r4, r2
 8009f20:	460e      	mov	r6, r1
 8009f22:	b921      	cbnz	r1, 8009f2e <_realloc_r+0x16>
 8009f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f28:	4611      	mov	r1, r2
 8009f2a:	f7ff bc49 	b.w	80097c0 <_malloc_r>
 8009f2e:	b92a      	cbnz	r2, 8009f3c <_realloc_r+0x24>
 8009f30:	f7ff fbda 	bl	80096e8 <_free_r>
 8009f34:	4625      	mov	r5, r4
 8009f36:	4628      	mov	r0, r5
 8009f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f3c:	f000 f81b 	bl	8009f76 <_malloc_usable_size_r>
 8009f40:	4284      	cmp	r4, r0
 8009f42:	4607      	mov	r7, r0
 8009f44:	d802      	bhi.n	8009f4c <_realloc_r+0x34>
 8009f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f4a:	d812      	bhi.n	8009f72 <_realloc_r+0x5a>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f7ff fc36 	bl	80097c0 <_malloc_r>
 8009f54:	4605      	mov	r5, r0
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d0ed      	beq.n	8009f36 <_realloc_r+0x1e>
 8009f5a:	42bc      	cmp	r4, r7
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	4631      	mov	r1, r6
 8009f60:	bf28      	it	cs
 8009f62:	463a      	movcs	r2, r7
 8009f64:	f7ff ffca 	bl	8009efc <memcpy>
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4640      	mov	r0, r8
 8009f6c:	f7ff fbbc 	bl	80096e8 <_free_r>
 8009f70:	e7e1      	b.n	8009f36 <_realloc_r+0x1e>
 8009f72:	4635      	mov	r5, r6
 8009f74:	e7df      	b.n	8009f36 <_realloc_r+0x1e>

08009f76 <_malloc_usable_size_r>:
 8009f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f7a:	1f18      	subs	r0, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfbc      	itt	lt
 8009f80:	580b      	ldrlt	r3, [r1, r0]
 8009f82:	18c0      	addlt	r0, r0, r3
 8009f84:	4770      	bx	lr
	...

08009f88 <sqrtf>:
 8009f88:	b508      	push	{r3, lr}
 8009f8a:	ed2d 8b02 	vpush	{d8}
 8009f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8009f92:	f000 f817 	bl	8009fc4 <__ieee754_sqrtf>
 8009f96:	eeb4 8a48 	vcmp.f32	s16, s16
 8009f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9e:	d60c      	bvs.n	8009fba <sqrtf+0x32>
 8009fa0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009fc0 <sqrtf+0x38>
 8009fa4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fac:	d505      	bpl.n	8009fba <sqrtf+0x32>
 8009fae:	f000 f80d 	bl	8009fcc <__errno>
 8009fb2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009fb6:	2321      	movs	r3, #33	; 0x21
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	ecbd 8b02 	vpop	{d8}
 8009fbe:	bd08      	pop	{r3, pc}
 8009fc0:	00000000 	.word	0x00000000

08009fc4 <__ieee754_sqrtf>:
 8009fc4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009fc8:	4770      	bx	lr
	...

08009fcc <__errno>:
 8009fcc:	4b01      	ldr	r3, [pc, #4]	; (8009fd4 <__errno+0x8>)
 8009fce:	6818      	ldr	r0, [r3, #0]
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	200003c4 	.word	0x200003c4

08009fd8 <_sbrk>:
 8009fd8:	4a04      	ldr	r2, [pc, #16]	; (8009fec <_sbrk+0x14>)
 8009fda:	6811      	ldr	r1, [r2, #0]
 8009fdc:	4603      	mov	r3, r0
 8009fde:	b909      	cbnz	r1, 8009fe4 <_sbrk+0xc>
 8009fe0:	4903      	ldr	r1, [pc, #12]	; (8009ff0 <_sbrk+0x18>)
 8009fe2:	6011      	str	r1, [r2, #0]
 8009fe4:	6810      	ldr	r0, [r2, #0]
 8009fe6:	4403      	add	r3, r0
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	4770      	bx	lr
 8009fec:	20000c00 	.word	0x20000c00
 8009ff0:	20000c08 	.word	0x20000c08

08009ff4 <_init>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr

0800a000 <_fini>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	bf00      	nop
 800a004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a006:	bc08      	pop	{r3}
 800a008:	469e      	mov	lr, r3
 800a00a:	4770      	bx	lr
