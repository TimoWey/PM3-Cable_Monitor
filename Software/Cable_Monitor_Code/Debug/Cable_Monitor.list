
Cable_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b20  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ffc  08008ffc  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008ffc  08008ffc  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ffc  08008ffc  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08009004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  200000e0  080090e4  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  080090e4  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dc3  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003552  00000000  00000000  00033f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00037468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f98  00000000  00000000  000388c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264c9  00000000  00000000  00039858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180ff  00000000  00000000  0005fd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddf61  00000000  00000000  00077e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005914  00000000  00000000  00155d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0015b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080074c4 	.word	0x080074c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	080074c4 	.word	0x080074c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GPIO_Init>:
/** ***************************************************************************
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void GPIO_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
	 GPIOE-> OSPEEDR |= 0x400;
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);*/

	// Initialize the GPIO pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOE_CLK_ENABLE(); // Enable the GPIO E clock
 8000296:	2300      	movs	r3, #0
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	4b2c      	ldr	r3, [pc, #176]	; (800034c <GPIO_Init+0xbc>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029e:	4a2b      	ldr	r2, [pc, #172]	; (800034c <GPIO_Init+0xbc>)
 80002a0:	f043 0310 	orr.w	r3, r3, #16
 80002a4:	6313      	str	r3, [r2, #48]	; 0x30
 80002a6:	4b29      	ldr	r3, [pc, #164]	; (800034c <GPIO_Init+0xbc>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002aa:	f003 0310 	and.w	r3, r3, #16
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

	// Configure PE3 in input mode
	GPIO_InitStruct.Pin = PIN_PE3;
 80002b2:	2308      	movs	r3, #8
 80002b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002ba:	2302      	movs	r3, #2
 80002bc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4619      	mov	r1, r3
 80002c2:	4823      	ldr	r0, [pc, #140]	; (8000350 <GPIO_Init+0xc0>)
 80002c4:	f003 fd12 	bl	8003cec <HAL_GPIO_Init>

	// Configure PE5 in output push-pull mode -> Soft latching power Circuit drive (Keeps board On)
	GPIO_InitStruct.Pin = PIN_PE5;
 80002c8:	2320      	movs	r3, #32
 80002ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4619      	mov	r1, r3
 80002dc:	481c      	ldr	r0, [pc, #112]	; (8000350 <GPIO_Init+0xc0>)
 80002de:	f003 fd05 	bl	8003cec <HAL_GPIO_Init>

	// Configure PE15 in output push-pull mode -> Used for LED_1 (Right LED)
	GPIO_InitStruct.Pin = LED_RIGHT;
 80002e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002f0:	2302      	movs	r3, #2
 80002f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4619      	mov	r1, r3
 80002f8:	4815      	ldr	r0, [pc, #84]	; (8000350 <GPIO_Init+0xc0>)
 80002fa:	f003 fcf7 	bl	8003cec <HAL_GPIO_Init>

	// Configure PE13 in output push-pull mode -> Used for LED_2 (Left LED)
	GPIO_InitStruct.Pin = LED_LEFT;
 80002fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000302:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	2301      	movs	r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800030c:	2302      	movs	r3, #2
 800030e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	480e      	ldr	r0, [pc, #56]	; (8000350 <GPIO_Init+0xc0>)
 8000316:	f003 fce9 	bl	8003cec <HAL_GPIO_Init>

	// Automatically Keeps Board alive (Soft latching circuit) by setting PIN5->High
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800031a:	2201      	movs	r2, #1
 800031c:	2120      	movs	r1, #32
 800031e:	480c      	ldr	r0, [pc, #48]	; (8000350 <GPIO_Init+0xc0>)
 8000320:	f003 fea8 	bl	8004074 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET) {
 8000324:	e002      	b.n	800032c <GPIO_Init+0x9c>
		HAL_Delay(100);
 8000326:	2064      	movs	r0, #100	; 0x64
 8000328:	f002 ff56 	bl	80031d8 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET) {
 800032c:	2108      	movs	r1, #8
 800032e:	4808      	ldr	r0, [pc, #32]	; (8000350 <GPIO_Init+0xc0>)
 8000330:	f003 fe88 	bl	8004044 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d0f5      	beq.n	8000326 <GPIO_Init+0x96>
	}
	HAL_Delay(3000);
 800033a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800033e:	f002 ff4b 	bl	80031d8 <HAL_Delay>
}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800
 8000350:	40021000 	.word	0x40021000

08000354 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000354:	b598      	push	{r3, r4, r7, lr}
 8000356:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8000358:	f002 fec4 	bl	80030e4 <HAL_Init>

	//SystemClock_Config();				// Configure system clocks

	GPIO_Init();						// Init PE5 and set it to HIGH
 800035c:	f7ff ff98 	bl	8000290 <GPIO_Init>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
#else
	BSP_LCD_Init();						// Initialize the LCD display
 8000360:	f001 fe16 	bl	8001f90 <BSP_LCD_Init>
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000364:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000368:	2001      	movs	r0, #1
 800036a:	f001 fe93 	bl	8002094 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800036e:	2001      	movs	r0, #1
 8000370:	f001 fef4 	bl	800215c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000374:	f002 f9c4 	bl	8002700 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000378:	f04f 30ff 	mov.w	r0, #4294967295
 800037c:	f001 ff4a 	bl	8002214 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8000380:	f001 fe70 	bl	8002064 <BSP_LCD_GetXSize>
 8000384:	4603      	mov	r3, r0
 8000386:	b29c      	uxth	r4, r3
 8000388:	f001 fe78 	bl	800207c <BSP_LCD_GetYSize>
 800038c:	4603      	mov	r3, r0
 800038e:	b29b      	uxth	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	4620      	mov	r0, r4
 8000394:	f002 fda2 	bl	8002edc <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt
	PB_init();							// Initialize the user pushbutton
 8000398:	f000 fcb0 	bl	8000cfc <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 800039c:	f000 fcce 	bl	8000d3c <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80003a0:	2000      	movs	r0, #0
 80003a2:	f001 f9dd 	bl	8001760 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80003a6:	2001      	movs	r0, #1
 80003a8:	f001 f9da 	bl	8001760 <BSP_LED_Init>
/*
	MENU_draw();						// Draw the menu
	MENU_hint();						// Show hint at startup
*/
	gyro_disable();						// Disable gyro, use those analog inputs
 80003ac:	f000 f854 	bl	8000458 <gyro_disable>

	//MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
	MEAS_timer_init();					// Configure the timer
 80003b0:	f000 f984 	bl	80006bc <MEAS_timer_init>

	HAL_GPIO_WritePin(GPIOE, LED_RIGHT, 0); // Set LED_Right to 0
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ba:	4824      	ldr	r0, [pc, #144]	; (800044c <main+0xf8>)
 80003bc:	f003 fe5a 	bl	8004074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LED_LEFT, 0); // Set LED_Left to 0
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c6:	4821      	ldr	r0, [pc, #132]	; (800044c <main+0xf8>)
 80003c8:	f003 fe54 	bl	8004074 <HAL_GPIO_WritePin>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80003cc:	2000      	movs	r0, #0
 80003ce:	f001 fa4f 	bl	8001870 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <main+0xfc>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d004      	beq.n	80003e4 <main+0x90>
			MEAS_data_ready = false;
 80003da:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <main+0xfc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
			MEAS_show_data();
 80003e0:	f000 fae4 	bl	80009ac <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 80003e4:	f000 fcdc 	bl	8000da0 <PB_pressed>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d01d      	beq.n	800042a <main+0xd6>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <main+0x100>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	bf14      	ite	ne
 80003f6:	2301      	movne	r3, #1
 80003f8:	2300      	moveq	r3, #0
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	f083 0301 	eor.w	r3, r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <main+0x100>)
 800040a:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <main+0x100>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d005      	beq.n	8000420 <main+0xcc>
				DAC_init();
 8000414:	f000 f8f6 	bl	8000604 <DAC_init>
				BSP_LED_On(LED4);
 8000418:	2001      	movs	r0, #1
 800041a:	f001 f9f5 	bl	8001808 <BSP_LED_On>
 800041e:	e004      	b.n	800042a <main+0xd6>
			} else {
				DAC_reset();
 8000420:	f000 f8da 	bl	80005d8 <DAC_reset>
				BSP_LED_Off(LED4);
 8000424:	2001      	movs	r0, #1
 8000426:	f001 fa09 	bl	800183c <BSP_LED_Off>
			}
		}

		// Check if Device should power off (PE3)
		if (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET) {
 800042a:	2108      	movs	r1, #8
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <main+0xf8>)
 800042e:	f003 fe09 	bl	8004044 <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b01      	cmp	r3, #1
 8000436:	d1c9      	bne.n	80003cc <main+0x78>
			//HAL_GPIO_WritePin(GPIOE, LED_RIGHT, GPIO_PIN_SET); // Set LED_Right to 1
			//HAL_GPIO_WritePin(GPIOE, LED_LEFT, GPIO_PIN_SET); // Set LED_Right to 1

			// Set PE5 low
			HAL_GPIO_WritePin(GPIOE, PIN_PE5, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <main+0xf8>)
 800043e:	f003 fe19 	bl	8004074 <HAL_GPIO_WritePin>

			// Delay for 3 seconds
			HAL_Delay(3000);
 8000442:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000446:	f002 fec7 	bl	80031d8 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 800044a:	e7bf      	b.n	80003cc <main+0x78>
 800044c:	40021000 	.word	0x40021000
 8000450:	200000fc 	.word	0x200000fc
 8000454:	200000fd 	.word	0x200000fd

08000458 <gyro_disable>:
 * which is done with the code below.
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	4b2a      	ldr	r3, [pc, #168]	; (800050c <gyro_disable+0xb4>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a29      	ldr	r2, [pc, #164]	; (800050c <gyro_disable+0xb4>)
 8000468:	f043 0304 	orr.w	r3, r3, #4
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
 800046e:	4b27      	ldr	r3, [pc, #156]	; (800050c <gyro_disable+0xb4>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	f003 0304 	and.w	r3, r3, #4
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 800047a:	4b25      	ldr	r3, [pc, #148]	; (8000510 <gyro_disable+0xb8>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a24      	ldr	r2, [pc, #144]	; (8000510 <gyro_disable+0xb8>)
 8000480:	f023 030c 	bic.w	r3, r3, #12
 8000484:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <gyro_disable+0xb8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a21      	ldr	r2, [pc, #132]	; (8000510 <gyro_disable+0xb8>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <gyro_disable+0xb8>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a1e      	ldr	r2, [pc, #120]	; (8000510 <gyro_disable+0xb8>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 800049e:	200a      	movs	r0, #10
 80004a0:	f002 fe9a 	bl	80031d8 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <gyro_disable+0xb8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a19      	ldr	r2, [pc, #100]	; (8000510 <gyro_disable+0xb8>)
 80004aa:	f043 030c 	orr.w	r3, r3, #12
 80004ae:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80004b0:	2300      	movs	r3, #0
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <gyro_disable+0xb4>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a14      	ldr	r2, [pc, #80]	; (800050c <gyro_disable+0xb4>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <gyro_disable+0xb4>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	f003 0320 	and.w	r3, r3, #32
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <gyro_disable+0xbc>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <gyro_disable+0xbc>)
 80004d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80004d6:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <gyro_disable+0xbc>)
 80004da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <gyro_disable+0xbc>)
 80004de:	f023 030f 	bic.w	r3, r3, #15
 80004e2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <gyro_disable+0xbc>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <gyro_disable+0xbc>)
 80004ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80004ee:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 80004f0:	200a      	movs	r0, #10
 80004f2:	f002 fe71 	bl	80031d8 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <gyro_disable+0xbc>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a06      	ldr	r2, [pc, #24]	; (8000514 <gyro_disable+0xbc>)
 80004fc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800
 8000510:	40020800 	.word	0x40020800
 8000514:	40021400 	.word	0x40021400

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	db12      	blt.n	800058c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f003 021f 	and.w	r2, r3, #31
 800056c:	490a      	ldr	r1, [pc, #40]	; (8000598 <__NVIC_DisableIRQ+0x44>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	2001      	movs	r0, #1
 8000576:	fa00 f202 	lsl.w	r2, r0, r2
 800057a:	3320      	adds	r3, #32
 800057c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000580:	f3bf 8f4f 	dsb	sy
}
 8000584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000586:	f3bf 8f6f 	isb	sy
}
 800058a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000e100 	.word	0xe000e100

0800059c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0c      	blt.n	80005c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	; (80005d4 <__NVIC_ClearPendingIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	3360      	adds	r3, #96	; 0x60
 80005c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <DAC_reset+0x28>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <DAC_reset+0x28>)
 80005e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005e6:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <DAC_reset+0x28>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <DAC_reset+0x28>)
 80005ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80005f2:	6213      	str	r3, [r2, #32]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800

08000604 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <DAC_init+0x3c>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <DAC_init+0x3c>)
 8000614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000618:	6413      	str	r3, [r2, #64]	; 0x40
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <DAC_init+0x3c>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <DAC_init+0x40>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <DAC_init+0x40>)
 800062c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000630:	6013      	str	r3, [r2, #0]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007400 	.word	0x40007400

08000648 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <DAC_increment+0x30>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3314      	adds	r3, #20
 8000652:	4a09      	ldr	r2, [pc, #36]	; (8000678 <DAC_increment+0x30>)
 8000654:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <DAC_increment+0x30>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800065e:	d302      	bcc.n	8000666 <DAC_increment+0x1e>
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <DAC_increment+0x30>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <DAC_increment+0x34>)
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <DAC_increment+0x30>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6153      	str	r3, [r2, #20]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	200002e4 	.word	0x200002e4
 800067c:	40007400 	.word	0x40007400

08000680 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <ADC_reset+0x38>)
 8000686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <ADC_reset+0x38>)
 800068a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068e:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <ADC_reset+0x38>)
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <ADC_reset+0x38>)
 8000696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800069a:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 800069c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MEAS_timer_init+0x68>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <MEAS_timer_init+0x68>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MEAS_timer_init+0x68>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80006de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e2:	f243 62af 	movw	r2, #13999	; 0x36af
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80006e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ec:	2209      	movs	r2, #9
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80006f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8000710:	201c      	movs	r0, #28
 8000712:	f7ff ff43 	bl	800059c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8000716:	201c      	movs	r0, #28
 8000718:	f7ff fefe 	bl	8000518 <__NVIC_EnableIRQ>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800

08000728 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 800072c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <TIM2_IRQHandler+0x24>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8000744:	f7ff ff80 	bl	8000648 <DAC_increment>
	}
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000fd 	.word	0x200000fd

08000750 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <ADC_IRQHandler+0x58>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d020      	beq.n	80007a2 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8000760:	4911      	ldr	r1, [pc, #68]	; (80007a8 <ADC_IRQHandler+0x58>)
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <ADC_IRQHandler+0x5c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <ADC_IRQHandler+0x5c>)
 800076a:	6002      	str	r2, [r0, #0]
 800076c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800076e:	4910      	ldr	r1, [pc, #64]	; (80007b0 <ADC_IRQHandler+0x60>)
 8000770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <ADC_IRQHandler+0x5c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b3b      	cmp	r3, #59	; 0x3b
 800077a:	d912      	bls.n	80007a2 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 800077c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000786:	f023 0301 	bic.w	r3, r3, #1
 800078a:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <ADC_IRQHandler+0x58>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <ADC_IRQHandler+0x58>)
 8000792:	f023 0301 	bic.w	r3, r3, #1
 8000796:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8000798:	f7ff ff72 	bl	8000680 <ADC_reset>
			MEAS_data_ready = true;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <ADC_IRQHandler+0x64>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40012200 	.word	0x40012200
 80007ac:	20000100 	.word	0x20000100
 80007b0:	20000104 	.word	0x20000104
 80007b4:	200000fc 	.word	0x200000fc

080007b8 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <DMA2_Stream1_IRQHandler+0x78>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d031      	beq.n	800082c <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 80007c8:	2039      	movs	r0, #57	; 0x39
 80007ca:	f7ff fec3 	bl	8000554 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 80007ce:	2039      	movs	r0, #57	; 0x39
 80007d0:	f7ff fee4 	bl	800059c <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <DMA2_Stream1_IRQHandler+0x7c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a16      	ldr	r2, [pc, #88]	; (8000834 <DMA2_Stream1_IRQHandler+0x7c>)
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80007e0:	bf00      	nop
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <DMA2_Stream1_IRQHandler+0x7c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f9      	bne.n	80007e2 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <DMA2_Stream1_IRQHandler+0x78>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <DMA2_Stream1_IRQHandler+0x78>)
 80007f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f8:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80007fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000804:	f023 0301 	bic.w	r3, r3, #1
 8000808:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <DMA2_Stream1_IRQHandler+0x80>)
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <DMA2_Stream1_IRQHandler+0x80>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <DMA2_Stream1_IRQHandler+0x80>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	4a07      	ldr	r2, [pc, #28]	; (8000838 <DMA2_Stream1_IRQHandler+0x80>)
 800081c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000820:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8000822:	f7ff ff2d 	bl	8000680 <ADC_reset>
		MEAS_data_ready = true;
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <DMA2_Stream1_IRQHandler+0x84>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
	}
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40026400 	.word	0x40026400
 8000834:	40026428 	.word	0x40026428
 8000838:	40012200 	.word	0x40012200
 800083c:	200000fc 	.word	0x200000fc

08000840 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <DMA2_Stream3_IRQHandler+0x78>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800084c:	2b00      	cmp	r3, #0
 800084e:	d031      	beq.n	80008b4 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8000850:	203b      	movs	r0, #59	; 0x3b
 8000852:	f7ff fe7f 	bl	8000554 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8000856:	203b      	movs	r0, #59	; 0x3b
 8000858:	f7ff fea0 	bl	800059c <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <DMA2_Stream3_IRQHandler+0x7c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <DMA2_Stream3_IRQHandler+0x7c>)
 8000862:	f023 0301 	bic.w	r3, r3, #1
 8000866:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000868:	bf00      	nop
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <DMA2_Stream3_IRQHandler+0x7c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f9      	bne.n	800086a <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <DMA2_Stream3_IRQHandler+0x78>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <DMA2_Stream3_IRQHandler+0x78>)
 800087c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000880:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8000882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088c:	f023 0301 	bic.w	r3, r3, #1
 8000890:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <DMA2_Stream3_IRQHandler+0x80>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <DMA2_Stream3_IRQHandler+0x80>)
 8000898:	f023 0301 	bic.w	r3, r3, #1
 800089c:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <DMA2_Stream3_IRQHandler+0x80>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <DMA2_Stream3_IRQHandler+0x80>)
 80008a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008a8:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80008aa:	f7ff fee9 	bl	8000680 <ADC_reset>
		MEAS_data_ready = true;
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <DMA2_Stream3_IRQHandler+0x84>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
	}
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40026400 	.word	0x40026400
 80008bc:	40026458 	.word	0x40026458
 80008c0:	40012100 	.word	0x40012100
 80008c4:	200000fc 	.word	0x200000fc

080008c8 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <DMA2_Stream4_IRQHandler+0xc8>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d055      	beq.n	8000986 <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 80008da:	203c      	movs	r0, #60	; 0x3c
 80008dc:	f7ff fe3a 	bl	8000554 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 80008e0:	203c      	movs	r0, #60	; 0x3c
 80008e2:	f7ff fe5b 	bl	800059c <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <DMA2_Stream4_IRQHandler+0xcc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <DMA2_Stream4_IRQHandler+0xcc>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80008f2:	bf00      	nop
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <DMA2_Stream4_IRQHandler+0xcc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f9      	bne.n	80008f4 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <DMA2_Stream4_IRQHandler+0xc8>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	4a22      	ldr	r2, [pc, #136]	; (8000990 <DMA2_Stream4_IRQHandler+0xc8>)
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800090c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000916:	f023 0301 	bic.w	r3, r3, #1
 800091a:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <DMA2_Stream4_IRQHandler+0xd0>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <DMA2_Stream4_IRQHandler+0xd0>)
 8000922:	f023 0301 	bic.w	r3, r3, #1
 8000926:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <DMA2_Stream4_IRQHandler+0xd4>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <DMA2_Stream4_IRQHandler+0xd4>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <DMA2_Stream4_IRQHandler+0xd8>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <DMA2_Stream4_IRQHandler+0xd8>)
 800093a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800093e:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8000940:	233b      	movs	r3, #59	; 0x3b
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	e017      	b.n	8000976 <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <DMA2_Stream4_IRQHandler+0xdc>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	3301      	adds	r3, #1
 8000954:	0c12      	lsrs	r2, r2, #16
 8000956:	4913      	ldr	r1, [pc, #76]	; (80009a4 <DMA2_Stream4_IRQHandler+0xdc>)
 8000958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 800095c:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <DMA2_Stream4_IRQHandler+0xdc>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b292      	uxth	r2, r2
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <DMA2_Stream4_IRQHandler+0xdc>)
 800096c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	dae4      	bge.n	8000946 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 800097c:	f7ff fe80 	bl	8000680 <ADC_reset>
		MEAS_data_ready = true;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <DMA2_Stream4_IRQHandler+0xe0>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
	}
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40026400 	.word	0x40026400
 8000994:	40026470 	.word	0x40026470
 8000998:	40012000 	.word	0x40012000
 800099c:	40012100 	.word	0x40012100
 80009a0:	40012300 	.word	0x40012300
 80009a4:	20000104 	.word	0x20000104
 80009a8:	200000fc 	.word	0x200000fc

080009ac <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08d      	sub	sp, #52	; 0x34
 80009b0:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET = 260;
 80009b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009b6:	61fb      	str	r3, [r7, #28]
	const uint32_t X_SIZE = 240;
 80009b8:	23f0      	movs	r3, #240	; 0xf0
 80009ba:	61bb      	str	r3, [r7, #24]
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 80009bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
	uint32_t data;
	uint32_t data_last;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295
 80009ce:	f001 fbd5 	bl	800217c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	3301      	adds	r3, #1
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fe0b 	bl	80025fc <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 80009e6:	4861      	ldr	r0, [pc, #388]	; (8000b6c <MEAS_show_data+0x1c0>)
 80009e8:	f001 fbfa 	bl	80021e0 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f001 fbdc 	bl	80021ac <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80009f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009f8:	f001 fbc0 	bl	800217c <BSP_LCD_SetTextColor>
	char text[16];
	snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 80009fc:	4b5c      	ldr	r3, [pc, #368]	; (8000b70 <MEAS_show_data+0x1c4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4638      	mov	r0, r7
 8000a02:	4a5c      	ldr	r2, [pc, #368]	; (8000b74 <MEAS_show_data+0x1c8>)
 8000a04:	210f      	movs	r1, #15
 8000a06:	f006 f8a5 	bl	8006b54 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 8000a0a:	463a      	mov	r2, r7
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	2132      	movs	r1, #50	; 0x32
 8000a10:	2000      	movs	r0, #0
 8000a12:	f001 fc6b 	bl	80022ec <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 8000a16:	4b56      	ldr	r3, [pc, #344]	; (8000b70 <MEAS_show_data+0x1c4>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4638      	mov	r0, r7
 8000a1c:	4a56      	ldr	r2, [pc, #344]	; (8000b78 <MEAS_show_data+0x1cc>)
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f006 f898 	bl	8006b54 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 8000a24:	463a      	mov	r2, r7
 8000a26:	2303      	movs	r3, #3
 8000a28:	2150      	movs	r1, #80	; 0x50
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 fc5e 	bl	80022ec <BSP_LCD_DisplayStringAt>
	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000a30:	4852      	ldr	r0, [pc, #328]	; (8000b7c <MEAS_show_data+0x1d0>)
 8000a32:	f001 fba3 	bl	800217c <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 8000a36:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <MEAS_show_data+0x1c4>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000a42:	2301      	movs	r3, #1
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a46:	e02e      	b.n	8000aa6 <MEAS_show_data+0xfa>
		data_last = data;
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	613b      	str	r3, [r7, #16]
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8000a4c:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <MEAS_show_data+0x1d4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	4a46      	ldr	r2, [pc, #280]	; (8000b70 <MEAS_show_data+0x1c4>)
 8000a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8000a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d901      	bls.n	8000a70 <MEAS_show_data+0xc4>
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	3b01      	subs	r3, #1
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	b298      	uxth	r0, r3
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	b299      	uxth	r1, r3
 8000a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	b29c      	uxth	r4, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4622      	mov	r2, r4
 8000a9c:	f001 fce4 	bl	8002468 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	2b3b      	cmp	r3, #59	; 0x3b
 8000aaa:	d9cd      	bls.n	8000a48 <MEAS_show_data+0x9c>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8000aac:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <MEAS_show_data+0x1d4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d13e      	bne.n	8000b32 <MEAS_show_data+0x186>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <MEAS_show_data+0x1d8>)
 8000ab6:	f001 fb61 	bl	800217c <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MEAS_show_data+0x1c4>)
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aca:	e02f      	b.n	8000b2c <MEAS_show_data+0x180>
			data_last = data;
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	613b      	str	r3, [r7, #16]
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MEAS_show_data+0x1d4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad6:	fb02 f303 	mul.w	r3, r2, r3
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <MEAS_show_data+0x1c4>)
 8000ade:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8000aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d901      	bls.n	8000af6 <MEAS_show_data+0x14a>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	3b01      	subs	r3, #1
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	b298      	uxth	r0, r3
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b299      	uxth	r1, r3
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	b29c      	uxth	r4, r3
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4622      	mov	r2, r4
 8000b22:	f001 fca1 	bl	8002468 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	3301      	adds	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	2b3b      	cmp	r3, #59	; 0x3b
 8000b30:	d9cc      	bls.n	8000acc <MEAS_show_data+0x120>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	e00f      	b.n	8000b58 <MEAS_show_data+0x1ac>
		ADC_samples[2*i] = 0;
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <MEAS_show_data+0x1c4>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <MEAS_show_data+0x1c4>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	3301      	adds	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	2b3b      	cmp	r3, #59	; 0x3b
 8000b5c:	d9ec      	bls.n	8000b38 <MEAS_show_data+0x18c>
	}
	ADC_sample_count = 0;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MEAS_show_data+0x1dc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	3734      	adds	r7, #52	; 0x34
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	2000007c 	.word	0x2000007c
 8000b70:	20000104 	.word	0x20000104
 8000b74:	080074dc 	.word	0x080074dc
 8000b78:	080074ec 	.word	0x080074ec
 8000b7c:	ff0000ff 	.word	0xff0000ff
 8000b80:	20000000 	.word	0x20000000
 8000b84:	ffff0000 	.word	0xffff0000
 8000b88:	20000100 	.word	0x20000100

08000b8c <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8000b8c:	b598      	push	{r3, r4, r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8000b90:	4826      	ldr	r0, [pc, #152]	; (8000c2c <MENU_check_transition+0xa0>)
 8000b92:	f002 f9e9 	bl	8002f68 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8000b96:	f001 fa71 	bl	800207c <BSP_LCD_GetYSize>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MENU_check_transition+0xa0>)
 8000ba0:	889b      	ldrh	r3, [r3, #4]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MENU_check_transition+0xa0>)
 8000ba8:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MENU_check_transition+0xa0>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d039      	beq.n	8000c26 <MENU_check_transition+0x9a>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MENU_check_transition+0xa4>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d135      	bne.n	8000c26 <MENU_check_transition+0x9a>
			item_old = item_new;		// Store old item
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MENU_check_transition+0xa8>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MENU_check_transition+0xac>)
 8000bc0:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8000bc2:	f001 fa5b 	bl	800207c <BSP_LCD_GetYSize>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	3b28      	subs	r3, #40	; 0x28
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MENU_check_transition+0xa0>)
 8000bcc:	8892      	ldrh	r2, [r2, #4]
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d229      	bcs.n	8000c26 <MENU_check_transition+0x9a>
 8000bd2:	f001 fa53 	bl	800207c <BSP_LCD_GetYSize>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <MENU_check_transition+0xa0>)
 8000bda:	8892      	ldrh	r2, [r2, #4]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d922      	bls.n	8000c26 <MENU_check_transition+0x9a>
				item_new = TS_State.X	// Calculate new item
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MENU_check_transition+0xa0>)
 8000be2:	885b      	ldrh	r3, [r3, #2]
 8000be4:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8000be6:	f001 fa3d 	bl	8002064 <BSP_LCD_GetXSize>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <MENU_check_transition+0xb0>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	fbb4 f3f3 	udiv	r3, r4, r3
 8000bf8:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MENU_check_transition+0xa8>)
 8000bfc:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MENU_check_transition+0xa8>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d902      	bls.n	8000c0c <MENU_check_transition+0x80>
					item_new = MENU_NONE;	// Out of bounds
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MENU_check_transition+0xa8>)
 8000c08:	2206      	movs	r2, #6
 8000c0a:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MENU_check_transition+0xa8>)
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MENU_check_transition+0xac>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d106      	bne.n	8000c26 <MENU_check_transition+0x9a>
					item_new = MENU_NONE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MENU_check_transition+0xa8>)
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MENU_check_transition+0xac>)
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <MENU_check_transition+0xa4>)
 8000c24:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8000c26:	bf00      	nop
 8000c28:	bd98      	pop	{r3, r4, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200002e8 	.word	0x200002e8
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000005 	.word	0x20000005
 8000c38:	20000006 	.word	0x20000006
 8000c3c:	aaaaaaab 	.word	0xaaaaaaab

08000c40 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <EXTI15_10_IRQHandler+0x40>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d014      	beq.n	8000c7a <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <EXTI15_10_IRQHandler+0x40>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <EXTI15_10_IRQHandler+0x40>)
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8000c5c:	f002 f978 	bl	8002f50 <BSP_TS_ITGetStatus>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8000c66:	f002 fa31 	bl	80030cc <BSP_TS_ITClear>
			MENU_check_transition();
 8000c6a:	f7ff ff8f 	bl	8000b8c <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <EXTI15_10_IRQHandler+0x40>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <EXTI15_10_IRQHandler+0x40>)
 8000c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c78:	6153      	str	r3, [r2, #20]
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013c00 	.word	0x40013c00

08000c84 <__NVIC_EnableIRQ>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_ClearPendingIRQ>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0c      	blt.n	8000cec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_ClearPendingIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	3360      	adds	r3, #96	; 0x60
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <PB_init+0x38>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <PB_init+0x38>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <PB_init+0x38>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <PB_init+0x3c>)
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <PB_init+0x3c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6013      	str	r3, [r2, #0]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <PB_enableIRQ+0x58>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <PB_enableIRQ+0x58>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <PB_enableIRQ+0x58>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <PB_enableIRQ+0x5c>)
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <PB_enableIRQ+0x5c>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <PB_enableIRQ+0x60>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <PB_enableIRQ+0x60>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <PB_enableIRQ+0x60>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <PB_enableIRQ+0x60>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8000d7e:	2006      	movs	r0, #6
 8000d80:	f7ff ff9e 	bl	8000cc0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8000d84:	2006      	movs	r0, #6
 8000d86:	f7ff ff7d 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40013800 	.word	0x40013800
 8000d9c:	40013c00 	.word	0x40013c00

08000da0 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <PB_pressed+0x20>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <PB_pressed+0x20>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	return pressed;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	200002f0 	.word	0x200002f0

08000dc4 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <EXTI0_IRQHandler+0x2c>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d008      	beq.n	8000de6 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <EXTI0_IRQHandler+0x2c>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <EXTI0_IRQHandler+0x2c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <EXTI0_IRQHandler+0x30>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
	}
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40013c00 	.word	0x40013c00
 8000df4:	200002f0 	.word	0x200002f0

08000df8 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000e4c:	f002 f9a4 	bl	8003198 <HAL_IncTick>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <SystemInit+0x60>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <SystemInit+0x60>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <SystemInit+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <SystemInit+0x64>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <SystemInit+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <SystemInit+0x64>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <SystemInit+0x64>)
 8000e80:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <SystemInit+0x64>)
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <SystemInit+0x68>)
 8000e8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <SystemInit+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <SystemInit+0x64>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SystemInit+0x60>)
 8000ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea8:	609a      	str	r2, [r3, #8]
#endif
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	24003010 	.word	0x24003010

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ec6:	e003      	b.n	8000ed0 <LoopCopyDataInit>

08000ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ece:	3104      	adds	r1, #4

08000ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed8:	d3f6      	bcc.n	8000ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000edc:	e002      	b.n	8000ee4 <LoopFillZerobss>

08000ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee0:	f842 3b04 	str.w	r3, [r2], #4

08000ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee8:	d3f9      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eea:	f7ff ffb3 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f005 fe65 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fa2f 	bl	8000354 <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ef8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000efc:	08009004 	.word	0x08009004
  ldr  r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f04:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8000f08:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8000f0c:	20000704 	.word	0x20000704

08000f10 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <CAN1_RX0_IRQHandler>

08000f12 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000f16:	f000 feed 	bl	8001cf4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000f1a:	20ca      	movs	r0, #202	; 0xca
 8000f1c:	f000 f95d 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000f20:	20c3      	movs	r0, #195	; 0xc3
 8000f22:	f000 f967 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000f26:	2008      	movs	r0, #8
 8000f28:	f000 f964 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000f2c:	2050      	movs	r0, #80	; 0x50
 8000f2e:	f000 f961 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000f32:	20cf      	movs	r0, #207	; 0xcf
 8000f34:	f000 f951 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 f95b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000f3e:	20c1      	movs	r0, #193	; 0xc1
 8000f40:	f000 f958 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000f44:	2030      	movs	r0, #48	; 0x30
 8000f46:	f000 f955 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000f4a:	20ed      	movs	r0, #237	; 0xed
 8000f4c:	f000 f945 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000f50:	2064      	movs	r0, #100	; 0x64
 8000f52:	f000 f94f 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f94c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f000 f949 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000f62:	2081      	movs	r0, #129	; 0x81
 8000f64:	f000 f946 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000f68:	20e8      	movs	r0, #232	; 0xe8
 8000f6a:	f000 f936 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000f6e:	2085      	movs	r0, #133	; 0x85
 8000f70:	f000 f940 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 f93d 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f000 f93a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000f80:	20cb      	movs	r0, #203	; 0xcb
 8000f82:	f000 f92a 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000f86:	2039      	movs	r0, #57	; 0x39
 8000f88:	f000 f934 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000f8c:	202c      	movs	r0, #44	; 0x2c
 8000f8e:	f000 f931 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f92e 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000f98:	2034      	movs	r0, #52	; 0x34
 8000f9a:	f000 f92b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f000 f928 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000fa4:	20f7      	movs	r0, #247	; 0xf7
 8000fa6:	f000 f918 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000faa:	2020      	movs	r0, #32
 8000fac:	f000 f922 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000fb0:	20ea      	movs	r0, #234	; 0xea
 8000fb2:	f000 f912 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f91c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f919 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000fc2:	20b1      	movs	r0, #177	; 0xb1
 8000fc4:	f000 f909 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f913 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fce:	201b      	movs	r0, #27
 8000fd0:	f000 f910 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000fd4:	20b6      	movs	r0, #182	; 0xb6
 8000fd6:	f000 f900 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f000 f90a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000fe0:	20a2      	movs	r0, #162	; 0xa2
 8000fe2:	f000 f907 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000fe6:	20c0      	movs	r0, #192	; 0xc0
 8000fe8:	f000 f8f7 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000fec:	2010      	movs	r0, #16
 8000fee:	f000 f901 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000ff2:	20c1      	movs	r0, #193	; 0xc1
 8000ff4:	f000 f8f1 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f000 f8fb 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000ffe:	20c5      	movs	r0, #197	; 0xc5
 8001000:	f000 f8eb 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001004:	2045      	movs	r0, #69	; 0x45
 8001006:	f000 f8f5 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800100a:	2015      	movs	r0, #21
 800100c:	f000 f8f2 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001010:	20c7      	movs	r0, #199	; 0xc7
 8001012:	f000 f8e2 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001016:	2090      	movs	r0, #144	; 0x90
 8001018:	f000 f8ec 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800101c:	2036      	movs	r0, #54	; 0x36
 800101e:	f000 f8dc 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001022:	20c8      	movs	r0, #200	; 0xc8
 8001024:	f000 f8e6 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001028:	20f2      	movs	r0, #242	; 0xf2
 800102a:	f000 f8d6 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f8e0 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001034:	20b0      	movs	r0, #176	; 0xb0
 8001036:	f000 f8d0 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800103a:	20c2      	movs	r0, #194	; 0xc2
 800103c:	f000 f8da 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001040:	20b6      	movs	r0, #182	; 0xb6
 8001042:	f000 f8ca 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001046:	200a      	movs	r0, #10
 8001048:	f000 f8d4 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800104c:	20a7      	movs	r0, #167	; 0xa7
 800104e:	f000 f8d1 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001052:	2027      	movs	r0, #39	; 0x27
 8001054:	f000 f8ce 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001058:	2004      	movs	r0, #4
 800105a:	f000 f8cb 	bl	80011f4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800105e:	202a      	movs	r0, #42	; 0x2a
 8001060:	f000 f8bb 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f8c5 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f8c2 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001070:	2000      	movs	r0, #0
 8001072:	f000 f8bf 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001076:	20ef      	movs	r0, #239	; 0xef
 8001078:	f000 f8bc 	bl	80011f4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800107c:	202b      	movs	r0, #43	; 0x2b
 800107e:	f000 f8ac 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f8b6 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f8b3 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 f8b0 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001094:	203f      	movs	r0, #63	; 0x3f
 8001096:	f000 f8ad 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800109a:	20f6      	movs	r0, #246	; 0xf6
 800109c:	f000 f89d 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 f8a7 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f8a4 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80010ac:	2006      	movs	r0, #6
 80010ae:	f000 f8a1 	bl	80011f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80010b2:	202c      	movs	r0, #44	; 0x2c
 80010b4:	f000 f891 	bl	80011da <ili9341_WriteReg>
  LCD_Delay(200);
 80010b8:	20c8      	movs	r0, #200	; 0xc8
 80010ba:	f000 ff09 	bl	8001ed0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80010be:	2026      	movs	r0, #38	; 0x26
 80010c0:	f000 f88b 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 f895 	bl	80011f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80010ca:	20e0      	movs	r0, #224	; 0xe0
 80010cc:	f000 f885 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80010d0:	200f      	movs	r0, #15
 80010d2:	f000 f88f 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80010d6:	2029      	movs	r0, #41	; 0x29
 80010d8:	f000 f88c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80010dc:	2024      	movs	r0, #36	; 0x24
 80010de:	f000 f889 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80010e2:	200c      	movs	r0, #12
 80010e4:	f000 f886 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80010e8:	200e      	movs	r0, #14
 80010ea:	f000 f883 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80010ee:	2009      	movs	r0, #9
 80010f0:	f000 f880 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80010f4:	204e      	movs	r0, #78	; 0x4e
 80010f6:	f000 f87d 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 f87a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001100:	203c      	movs	r0, #60	; 0x3c
 8001102:	f000 f877 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001106:	2009      	movs	r0, #9
 8001108:	f000 f874 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800110c:	2013      	movs	r0, #19
 800110e:	f000 f871 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001112:	2005      	movs	r0, #5
 8001114:	f000 f86e 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001118:	2017      	movs	r0, #23
 800111a:	f000 f86b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800111e:	2011      	movs	r0, #17
 8001120:	f000 f868 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001124:	2000      	movs	r0, #0
 8001126:	f000 f865 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800112a:	20e1      	movs	r0, #225	; 0xe1
 800112c:	f000 f855 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 f85f 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001136:	2016      	movs	r0, #22
 8001138:	f000 f85c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800113c:	201b      	movs	r0, #27
 800113e:	f000 f859 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001142:	2004      	movs	r0, #4
 8001144:	f000 f856 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001148:	2011      	movs	r0, #17
 800114a:	f000 f853 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800114e:	2007      	movs	r0, #7
 8001150:	f000 f850 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001154:	2031      	movs	r0, #49	; 0x31
 8001156:	f000 f84d 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800115a:	2033      	movs	r0, #51	; 0x33
 800115c:	f000 f84a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001160:	2042      	movs	r0, #66	; 0x42
 8001162:	f000 f847 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001166:	2005      	movs	r0, #5
 8001168:	f000 f844 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800116c:	200c      	movs	r0, #12
 800116e:	f000 f841 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001172:	200a      	movs	r0, #10
 8001174:	f000 f83e 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001178:	2028      	movs	r0, #40	; 0x28
 800117a:	f000 f83b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800117e:	202f      	movs	r0, #47	; 0x2f
 8001180:	f000 f838 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001184:	200f      	movs	r0, #15
 8001186:	f000 f835 	bl	80011f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800118a:	2011      	movs	r0, #17
 800118c:	f000 f825 	bl	80011da <ili9341_WriteReg>
  LCD_Delay(200);
 8001190:	20c8      	movs	r0, #200	; 0xc8
 8001192:	f000 fe9d 	bl	8001ed0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001196:	2029      	movs	r0, #41	; 0x29
 8001198:	f000 f81f 	bl	80011da <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800119c:	202c      	movs	r0, #44	; 0x2c
 800119e:	f000 f81c 	bl	80011da <ili9341_WriteReg>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80011aa:	f000 fda3 	bl	8001cf4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80011ae:	2103      	movs	r1, #3
 80011b0:	20d3      	movs	r0, #211	; 0xd3
 80011b2:	f000 f82c 	bl	800120e <ili9341_ReadData>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29b      	uxth	r3, r3
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}

080011be <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80011c2:	2029      	movs	r0, #41	; 0x29
 80011c4:	f000 f809 	bl	80011da <ili9341_WriteReg>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f000 f802 	bl	80011da <ili9341_WriteReg>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fe1e 	bl	8001e28 <LCD_IO_WriteReg>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fdef 	bl	8001de4 <LCD_IO_WriteData>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	460a      	mov	r2, r1
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	4613      	mov	r3, r2
 800121c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800121e:	797a      	ldrb	r2, [r7, #5]
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fe21 	bl	8001e6c <LCD_IO_ReadData>
 800122a:	4603      	mov	r3, r0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001238:	23f0      	movs	r3, #240	; 0xf0
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001248:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fa59 	bl	800171c <stmpe811_GetInstance>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	d112      	bne.n	800129a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001274:	2000      	movs	r0, #0
 8001276:	f000 fa51 	bl	800171c <stmpe811_GetInstance>
 800127a:	4603      	mov	r3, r0
 800127c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d80a      	bhi.n	800129a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	b2d1      	uxtb	r1, r2
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <stmpe811_Init+0x4c>)
 800128c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800128e:	f000 fe2a 	bl	8001ee6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f807 	bl	80012a8 <stmpe811_Reset>
    }
  }
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002f4 	.word	0x200002f4

080012a8 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2202      	movs	r2, #2
 80012b8:	2103      	movs	r1, #3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fe1f 	bl	8001efe <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80012c0:	200a      	movs	r0, #10
 80012c2:	f000 fe59 	bl	8001f78 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2200      	movs	r2, #0
 80012cc:	2103      	movs	r1, #3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fe15 	bl	8001efe <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80012d4:	2002      	movs	r0, #2
 80012d6:	f000 fe4f 	bl	8001f78 <IOE_Delay>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80012e2:	b590      	push	{r4, r7, lr}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80012ec:	f000 fdfb 	bl	8001ee6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fe14 	bl	8001f24 <IOE_Read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fe0b 	bl	8001f24 <IOE_Read>
 800130e:	4603      	mov	r3, r0
 8001310:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001312:	4323      	orrs	r3, r4
 8001314:	b21b      	sxth	r3, r3
 8001316:	b29b      	uxth	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}

08001320 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2109      	movs	r1, #9
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fdf5 	bl	8001f24 <IOE_Read>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	2109      	movs	r1, #9
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fdd5 	bl	8001efe <IOE_Write>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2109      	movs	r1, #9
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fdd7 	bl	8001f24 <IOE_Read>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	2109      	movs	r1, #9
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fdb7 	bl	8001efe <IOE_Write>
    
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	460a      	mov	r2, r1
 80013a2:	80fb      	strh	r3, [r7, #6]
 80013a4:	4613      	mov	r3, r2
 80013a6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	210a      	movs	r1, #10
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fdb6 	bl	8001f24 <IOE_Read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	210a      	movs	r1, #10
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fd96 	bl	8001efe <IOE_Write>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	460a      	mov	r2, r1
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	4613      	mov	r3, r2
 80013e8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	210a      	movs	r1, #10
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fd95 	bl	8001f24 <IOE_Read>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80013fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001402:	43db      	mvns	r3, r3
 8001404:	b25a      	sxtb	r2, r3
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4013      	ands	r3, r2
 800140c:	b25b      	sxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	210a      	movs	r1, #10
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fd70 	bl	8001efe <IOE_Write>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	460a      	mov	r2, r1
 8001430:	80fb      	strh	r3, [r7, #6]
 8001432:	4613      	mov	r3, r2
 8001434:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	210b      	movs	r1, #11
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd71 	bl	8001f24 <IOE_Read>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	4013      	ands	r3, r2
 800144a:	b2db      	uxtb	r3, r3
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	4613      	mov	r3, r2
 8001462:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	797a      	ldrb	r2, [r7, #5]
 800146a:	210b      	movs	r1, #11
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fd46 	bl	8001efe <IOE_Write>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	6039      	str	r1, [r7, #0]
 8001484:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2117      	movs	r1, #23
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fd47 	bl	8001f24 <IOE_Read>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4013      	ands	r3, r2
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	2117      	movs	r1, #23
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fd22 	bl	8001efe <IOE_Write>
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2104      	movs	r1, #4
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fd26 	bl	8001f24 <IOE_Read>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f023 0304 	bic.w	r3, r3, #4
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	2104      	movs	r1, #4
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fd06 	bl	8001efe <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	21f0      	movs	r1, #240	; 0xf0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ffbf 	bl	800147a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f023 0303 	bic.w	r3, r3, #3
 8001502:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	2104      	movs	r1, #4
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fcf6 	bl	8001efe <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2249      	movs	r2, #73	; 0x49
 8001518:	2120      	movs	r1, #32
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fcef 	bl	8001efe <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001520:	2002      	movs	r0, #2
 8001522:	f000 fd29 	bl	8001f78 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2201      	movs	r2, #1
 800152c:	2121      	movs	r1, #33	; 0x21
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fce5 	bl	8001efe <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	229a      	movs	r2, #154	; 0x9a
 800153a:	2141      	movs	r1, #65	; 0x41
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fcde 	bl	8001efe <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2201      	movs	r2, #1
 8001548:	214a      	movs	r1, #74	; 0x4a
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fcd7 	bl	8001efe <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2201      	movs	r2, #1
 8001556:	214b      	movs	r1, #75	; 0x4b
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fcd0 	bl	8001efe <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2200      	movs	r2, #0
 8001564:	214b      	movs	r1, #75	; 0x4b
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fcc9 	bl	8001efe <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2201      	movs	r2, #1
 8001572:	2156      	movs	r1, #86	; 0x56
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fcc2 	bl	8001efe <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2201      	movs	r2, #1
 8001580:	2158      	movs	r1, #88	; 0x58
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fcbb 	bl	8001efe <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2201      	movs	r2, #1
 800158e:	2140      	movs	r1, #64	; 0x40
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fcb4 	bl	8001efe <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	210b      	movs	r1, #11
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fcad 	bl	8001efe <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80015a4:	2002      	movs	r0, #2
 80015a6:	f000 fce7 	bl	8001f78 <IOE_Delay>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fcac 	bl	8001f24 <IOE_Read>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	2b80      	cmp	r3, #128	; 0x80
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	214c      	movs	r1, #76	; 0x4c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fc9a 	bl	8001f24 <IOE_Read>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d010      	beq.n	8001618 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e00d      	b.n	8001618 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2201      	movs	r2, #1
 8001602:	214b      	movs	r1, #75	; 0x4b
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fc7a 	bl	8001efe <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2200      	movs	r2, #0
 8001610:	214b      	movs	r1, #75	; 0x4b
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fc73 	bl	8001efe <IOE_Write>
  }
  
  return ret;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	b2d8      	uxtb	r0, r3
 8001634:	f107 0210 	add.w	r2, r7, #16
 8001638:	2304      	movs	r3, #4
 800163a:	21d7      	movs	r1, #215	; 0xd7
 800163c:	f000 fc85 	bl	8001f4a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001640:	7c3b      	ldrb	r3, [r7, #16]
 8001642:	061a      	lsls	r2, r3, #24
 8001644:	7c7b      	ldrb	r3, [r7, #17]
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	431a      	orrs	r2, r3
 800164a:	7cbb      	ldrb	r3, [r7, #18]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	4313      	orrs	r3, r2
 8001650:	7cfa      	ldrb	r2, [r7, #19]
 8001652:	4313      	orrs	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	0d1b      	lsrs	r3, r3, #20
 800165a:	b29a      	uxth	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2201      	movs	r2, #1
 8001676:	214b      	movs	r1, #75	; 0x4b
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fc40 	bl	8001efe <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2200      	movs	r2, #0
 8001684:	214b      	movs	r1, #75	; 0x4b
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fc39 	bl	8001efe <IOE_Write>
}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800169e:	f000 fc28 	bl	8001ef2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	211f      	movs	r1, #31
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fe76 	bl	8001398 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fe36 	bl	8001320 <stmpe811_EnableGlobalIT>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe47 	bl	800135c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	211f      	movs	r1, #31
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe81 	bl	80013da <stmpe811_DisableITSource>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	211f      	movs	r1, #31
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe99 	bl	8001426 <stmpe811_ReadGITStatus>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	211f      	movs	r1, #31
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fea1 	bl	8001454 <stmpe811_ClearGlobalIT>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e00b      	b.n	8001748 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <stmpe811_GetInstance+0x40>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	b29b      	uxth	r3, r3
 8001738:	88fa      	ldrh	r2, [r7, #6]
 800173a:	429a      	cmp	r2, r3
 800173c:	d101      	bne.n	8001742 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	e006      	b.n	8001750 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3301      	adds	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d9f0      	bls.n	8001730 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800174e:	23ff      	movs	r3, #255	; 0xff
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	200002f4 	.word	0x200002f4

08001760 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10e      	bne.n	800178e <BSP_LED_Init+0x2e>
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <BSP_LED_Init+0x9c>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <BSP_LED_Init+0x9c>)
 800177a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <BSP_LED_Init+0x9c>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	e010      	b.n	80017b0 <BSP_LED_Init+0x50>
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d10d      	bne.n	80017b0 <BSP_LED_Init+0x50>
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <BSP_LED_Init+0x9c>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <BSP_LED_Init+0x9c>)
 800179e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a2:	6313      	str	r3, [r2, #48]	; 0x30
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <BSP_LED_Init+0x9c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <BSP_LED_Init+0xa0>)
 80017b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80017c2:	2302      	movs	r3, #2
 80017c4:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <BSP_LED_Init+0xa4>)
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	f107 0214 	add.w	r2, r7, #20
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fa89 	bl	8003cec <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <BSP_LED_Init+0xa4>)
 80017de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <BSP_LED_Init+0xa0>)
 80017e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	f002 fc41 	bl	8004074 <HAL_GPIO_WritePin>
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	08007504 	.word	0x08007504
 8001804:	2000006c 	.word	0x2000006c

08001808 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <BSP_LED_On+0x2c>)
 8001816:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <BSP_LED_On+0x30>)
 800181e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001822:	2201      	movs	r2, #1
 8001824:	4619      	mov	r1, r3
 8001826:	f002 fc25 	bl	8004074 <HAL_GPIO_WritePin>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000006c 	.word	0x2000006c
 8001838:	08007504 	.word	0x08007504

0800183c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <BSP_LED_Off+0x2c>)
 800184a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <BSP_LED_Off+0x30>)
 8001852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001856:	2200      	movs	r2, #0
 8001858:	4619      	mov	r1, r3
 800185a:	f002 fc0b 	bl	8004074 <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000006c 	.word	0x2000006c
 800186c:	08007504 	.word	0x08007504

08001870 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <BSP_LED_Toggle+0x2c>)
 800187e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4906      	ldr	r1, [pc, #24]	; (80018a0 <BSP_LED_Toggle+0x30>)
 8001886:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f002 fc0a 	bl	80040a6 <HAL_GPIO_TogglePin>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000006c 	.word	0x2000006c
 80018a0:	08007504 	.word	0x08007504

080018a4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a33      	ldr	r2, [pc, #204]	; (8001980 <I2Cx_MspInit+0xdc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d15f      	bne.n	8001976 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <I2Cx_MspInit+0xe0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <I2Cx_MspInit+0xe0>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <I2Cx_MspInit+0xe0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <I2Cx_MspInit+0xe0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <I2Cx_MspInit+0xe0>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <I2Cx_MspInit+0xe0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001900:	2304      	movs	r3, #4
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	481f      	ldr	r0, [pc, #124]	; (8001988 <I2Cx_MspInit+0xe4>)
 800190c:	f002 f9ee 	bl	8003cec <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001914:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	481b      	ldr	r0, [pc, #108]	; (800198c <I2Cx_MspInit+0xe8>)
 800191e:	f002 f9e5 	bl	8003cec <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <I2Cx_MspInit+0xe0>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <I2Cx_MspInit+0xe0>)
 800192c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <I2Cx_MspInit+0xe0>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <I2Cx_MspInit+0xe0>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <I2Cx_MspInit+0xe0>)
 8001944:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001948:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <I2Cx_MspInit+0xe0>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <I2Cx_MspInit+0xe0>)
 8001950:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001954:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	210f      	movs	r1, #15
 800195a:	2048      	movs	r0, #72	; 0x48
 800195c:	f001 fd3b 	bl	80033d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001960:	2048      	movs	r0, #72	; 0x48
 8001962:	f001 fd54 	bl	800340e <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	2049      	movs	r0, #73	; 0x49
 800196c:	f001 fd33 	bl	80033d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8001970:	2049      	movs	r0, #73	; 0x49
 8001972:	f001 fd4c 	bl	800340e <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40005c00 	.word	0x40005c00
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020800 	.word	0x40020800

08001990 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001994:	4814      	ldr	r0, [pc, #80]	; (80019e8 <I2Cx_Init+0x58>)
 8001996:	f003 f849 	bl	8004a2c <HAL_I2C_GetState>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d121      	bne.n	80019e4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <I2Cx_Init+0x58>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <I2Cx_Init+0x5c>)
 80019a4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <I2Cx_Init+0x58>)
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <I2Cx_Init+0x60>)
 80019aa:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <I2Cx_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <I2Cx_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <I2Cx_Init+0x58>)
 80019ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019be:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <I2Cx_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <I2Cx_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <I2Cx_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <I2Cx_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <I2Cx_Init+0x58>)
 80019da:	f7ff ff63 	bl	80018a4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <I2Cx_Init+0x58>)
 80019e0:	f002 fb7c 	bl	80040dc <HAL_I2C_Init>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002f8 	.word	0x200002f8
 80019ec:	40005c00 	.word	0x40005c00
 80019f0:	000186a0 	.word	0x000186a0

080019f4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <I2Cx_ITConfig+0x58>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <I2Cx_ITConfig+0x58>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <I2Cx_ITConfig+0x58>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8001a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <I2Cx_ITConfig+0x5c>)
 8001a26:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <I2Cx_ITConfig+0x60>)
 8001a2e:	f002 f95d 	bl	8003cec <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8001a32:	2200      	movs	r2, #0
 8001a34:	210f      	movs	r1, #15
 8001a36:	2028      	movs	r0, #40	; 0x28
 8001a38:	f001 fccd 	bl	80033d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001a3c:	2028      	movs	r0, #40	; 0x28
 8001a3e:	f001 fce6 	bl	800340e <HAL_NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	10210000 	.word	0x10210000
 8001a54:	40020000 	.word	0x40020000

08001a58 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	460b      	mov	r3, r1
 8001a64:	71bb      	strb	r3, [r7, #6]
 8001a66:	4613      	mov	r3, r2
 8001a68:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	b299      	uxth	r1, r3
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <I2Cx_WriteData+0x4c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	1d7b      	adds	r3, r7, #5
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <I2Cx_WriteData+0x50>)
 8001a88:	f002 fcb0 	bl	80043ec <HAL_I2C_Mem_Write>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001a96:	f000 f863 	bl	8001b60 <I2Cx_Error>
  }        
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000074 	.word	0x20000074
 8001aa8:	200002f8 	.word	0x200002f8

08001aac <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <I2Cx_ReadData+0x50>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	f107 030e 	add.w	r3, r7, #14
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2301      	movs	r3, #1
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <I2Cx_ReadData+0x54>)
 8001ae0:	f002 fd7e 	bl	80045e0 <HAL_I2C_Mem_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001aee:	f000 f837 	bl	8001b60 <I2Cx_Error>
  
  }
  return value;
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000074 	.word	0x20000074
 8001b00:	200002f8 	.word	0x200002f8

08001b04 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	603a      	str	r2, [r7, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	460b      	mov	r3, r1
 8001b14:	71bb      	strb	r3, [r7, #6]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	b299      	uxth	r1, r3
 8001b22:	79bb      	ldrb	r3, [r7, #6]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <I2Cx_ReadBuffer+0x54>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	4809      	ldr	r0, [pc, #36]	; (8001b5c <I2Cx_ReadBuffer+0x58>)
 8001b38:	f002 fd52 	bl	80045e0 <HAL_I2C_Mem_Read>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e002      	b.n	8001b50 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001b4a:	f000 f809 	bl	8001b60 <I2Cx_Error>

    return 1;
 8001b4e:	2301      	movs	r3, #1
  }
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000074 	.word	0x20000074
 8001b5c:	200002f8 	.word	0x200002f8

08001b60 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <I2Cx_Error+0x14>)
 8001b66:	f002 fbfd 	bl	8004364 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8001b6a:	f7ff ff11 	bl	8001990 <I2Cx_Init>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002f8 	.word	0x200002f8

08001b78 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <SPIx_Init+0x6c>)
 8001b7e:	f004 fd88 	bl	8006692 <HAL_SPI_GetState>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d12b      	bne.n	8001be0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <SPIx_Init+0x6c>)
 8001b8a:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <SPIx_Init+0x70>)
 8001b8c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <SPIx_Init+0x6c>)
 8001b90:	2218      	movs	r2, #24
 8001b92:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <SPIx_Init+0x6c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <SPIx_Init+0x6c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <SPIx_Init+0x6c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <SPIx_Init+0x6c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <SPIx_Init+0x6c>)
 8001bae:	2207      	movs	r2, #7
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <SPIx_Init+0x6c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <SPIx_Init+0x6c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <SPIx_Init+0x6c>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <SPIx_Init+0x6c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SPIx_Init+0x6c>)
 8001bce:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bd2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <SPIx_Init+0x6c>)
 8001bd6:	f000 f853 	bl	8001c80 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <SPIx_Init+0x6c>)
 8001bdc:	f003 ffcf 	bl	8005b7e <HAL_SPI_Init>
  } 
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000034c 	.word	0x2000034c
 8001be8:	40015000 	.word	0x40015000

08001bec <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <SPIx_Read+0x38>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f107 0108 	add.w	r1, r7, #8
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <SPIx_Read+0x3c>)
 8001c08:	f004 f9b6 	bl	8005f78 <HAL_SPI_Receive>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c16:	f000 f827 	bl	8001c68 <SPIx_Error>
  }
  
  return readvalue;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000078 	.word	0x20000078
 8001c28:	2000034c 	.word	0x2000034c

08001c2c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <SPIx_Write+0x34>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1db9      	adds	r1, r7, #6
 8001c40:	2201      	movs	r2, #1
 8001c42:	4808      	ldr	r0, [pc, #32]	; (8001c64 <SPIx_Write+0x38>)
 8001c44:	f004 f842 	bl	8005ccc <HAL_SPI_Transmit>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001c52:	f000 f809 	bl	8001c68 <SPIx_Error>
  }
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000078 	.word	0x20000078
 8001c64:	2000034c 	.word	0x2000034c

08001c68 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c6c:	4803      	ldr	r0, [pc, #12]	; (8001c7c <SPIx_Error+0x14>)
 8001c6e:	f003 fff1 	bl	8005c54 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001c72:	f7ff ff81 	bl	8001b78 <SPIx_Init>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000034c 	.word	0x2000034c

08001c80 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <SPIx_MspInit+0x6c>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <SPIx_MspInit+0x6c>)
 8001c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c96:	6453      	str	r3, [r2, #68]	; 0x44
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <SPIx_MspInit+0x6c>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <SPIx_MspInit+0x6c>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <SPIx_MspInit+0x6c>)
 8001cae:	f043 0320 	orr.w	r3, r3, #32
 8001cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <SPIx_MspInit+0x6c>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001cc0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <SPIx_MspInit+0x70>)
 8001cde:	f002 f805 	bl	8003cec <HAL_GPIO_Init>
}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021400 	.word	0x40021400

08001cf4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <LCD_IO_Init+0xe0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d164      	bne.n	8001dcc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <LCD_IO_Init+0xe0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4827      	ldr	r0, [pc, #156]	; (8001ddc <LCD_IO_Init+0xe8>)
 8001d3e:	f001 ffd5 	bl	8003cec <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4819      	ldr	r0, [pc, #100]	; (8001ddc <LCD_IO_Init+0xe8>)
 8001d78:	f001 ffb8 	bl	8003cec <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <LCD_IO_Init+0xe4>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	; (8001de0 <LCD_IO_Init+0xec>)
 8001db0:	f001 ff9c 	bl	8003cec <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001db4:	2200      	movs	r2, #0
 8001db6:	2104      	movs	r1, #4
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <LCD_IO_Init+0xec>)
 8001dba:	f002 f95b 	bl	8004074 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	4807      	ldr	r0, [pc, #28]	; (8001de0 <LCD_IO_Init+0xec>)
 8001dc4:	f002 f956 	bl	8004074 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001dc8:	f7ff fed6 	bl	8001b78 <SPIx_Init>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200003a4 	.word	0x200003a4
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40020800 	.word	0x40020800

08001de4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df4:	480a      	ldr	r0, [pc, #40]	; (8001e20 <LCD_IO_WriteData+0x3c>)
 8001df6:	f002 f93d 	bl	8004074 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <LCD_IO_WriteData+0x40>)
 8001e00:	f002 f938 	bl	8004074 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff10 	bl	8001c2c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2104      	movs	r1, #4
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <LCD_IO_WriteData+0x40>)
 8001e12:	f002 f92f 	bl	8004074 <HAL_GPIO_WritePin>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40020800 	.word	0x40020800

08001e28 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e38:	480a      	ldr	r0, [pc, #40]	; (8001e64 <LCD_IO_WriteReg+0x3c>)
 8001e3a:	f002 f91b 	bl	8004074 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2104      	movs	r1, #4
 8001e42:	4809      	ldr	r0, [pc, #36]	; (8001e68 <LCD_IO_WriteReg+0x40>)
 8001e44:	f002 f916 	bl	8004074 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff feed 	bl	8001c2c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e52:	2201      	movs	r2, #1
 8001e54:	2104      	movs	r1, #4
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <LCD_IO_WriteReg+0x40>)
 8001e58:	f002 f90c 	bl	8004074 <HAL_GPIO_WritePin>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40020800 	.word	0x40020800

08001e6c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	80fb      	strh	r3, [r7, #6]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001e80:	2200      	movs	r2, #0
 8001e82:	2104      	movs	r1, #4
 8001e84:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <LCD_IO_ReadData+0x5c>)
 8001e86:	f002 f8f5 	bl	8004074 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e90:	480e      	ldr	r0, [pc, #56]	; (8001ecc <LCD_IO_ReadData+0x60>)
 8001e92:	f002 f8ef 	bl	8004074 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fec7 	bl	8001c2c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001e9e:	797b      	ldrb	r3, [r7, #5]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fea3 	bl	8001bec <SPIx_Read>
 8001ea6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eae:	4807      	ldr	r0, [pc, #28]	; (8001ecc <LCD_IO_ReadData+0x60>)
 8001eb0:	f002 f8e0 	bl	8004074 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <LCD_IO_ReadData+0x5c>)
 8001eba:	f002 f8db 	bl	8004074 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00

08001ed0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f001 f97d 	bl	80031d8 <HAL_Delay>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8001eea:	f7ff fd51 	bl	8001990 <I2Cx_Init>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8001ef6:	f7ff fd7d 	bl	80019f4 <I2Cx_ITConfig>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}

08001efe <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	71bb      	strb	r3, [r7, #6]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001f10:	797a      	ldrb	r2, [r7, #5]
 8001f12:	79b9      	ldrb	r1, [r7, #6]
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fd9e 	bl	8001a58 <I2Cx_WriteData>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001f34:	79ba      	ldrb	r2, [r7, #6]
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fdb6 	bl	8001aac <I2Cx_ReadData>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	603a      	str	r2, [r7, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	71bb      	strb	r3, [r7, #6]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	79b9      	ldrb	r1, [r7, #6]
 8001f64:	79f8      	ldrb	r0, [r7, #7]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	f7ff fdcc 	bl	8001b04 <I2Cx_ReadBuffer>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b29b      	uxth	r3, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f001 f929 	bl	80031d8 <HAL_Delay>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <BSP_LCD_Init+0xbc>)
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <BSP_LCD_Init+0xc0>)
 8001f98:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <BSP_LCD_Init+0xbc>)
 8001f9c:	2209      	movs	r2, #9
 8001f9e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fa8:	221d      	movs	r2, #29
 8001faa:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fae:	2203      	movs	r2, #3
 8001fb0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fb4:	f240 120d 	movw	r2, #269	; 0x10d
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fbc:	f240 1243 	movw	r2, #323	; 0x143
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fc4:	f240 1217 	movw	r2, #279	; 0x117
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fcc:	f240 1247 	movw	r2, #327	; 0x147
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <BSP_LCD_Init+0xbc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <BSP_LCD_Init+0xc4>)
 8001fec:	2208      	movs	r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <BSP_LCD_Init+0xc4>)
 8001ff2:	22c0      	movs	r2, #192	; 0xc0
 8001ff4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <BSP_LCD_Init+0xc4>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <BSP_LCD_Init+0xc4>)
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <BSP_LCD_Init+0xc4>)
 8002006:	f003 fb71 	bl	80056ec <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <BSP_LCD_Init+0xbc>)
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <BSP_LCD_Init+0xbc>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <BSP_LCD_Init+0xbc>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <BSP_LCD_Init+0xbc>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002022:	f000 fb7d 	bl	8002720 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002026:	4809      	ldr	r0, [pc, #36]	; (800204c <BSP_LCD_Init+0xbc>)
 8002028:	f003 f866 	bl	80050f8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <BSP_LCD_Init+0xc8>)
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <BSP_LCD_Init+0xcc>)
 8002030:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <BSP_LCD_Init+0xc8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800203a:	f000 fd85 	bl	8002b48 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800203e:	4808      	ldr	r0, [pc, #32]	; (8002060 <BSP_LCD_Init+0xd0>)
 8002040:	f000 f8ce 	bl	80021e0 <BSP_LCD_SetFont>

  return LCD_OK;
 8002044:	2300      	movs	r3, #0
}  
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200003a8 	.word	0x200003a8
 8002050:	40016800 	.word	0x40016800
 8002054:	20000490 	.word	0x20000490
 8002058:	200004dc 	.word	0x200004dc
 800205c:	2000000c 	.word	0x2000000c
 8002060:	2000007c 	.word	0x2000007c

08002064 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <BSP_LCD_GetXSize+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	4798      	blx	r3
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200004dc 	.word	0x200004dc

0800207c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <BSP_LCD_GetYSize+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	4798      	blx	r3
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200004dc 	.word	0x200004dc

08002094 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002094:	b580      	push	{r7, lr}
 8002096:	b090      	sub	sp, #64	; 0x40
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80020a4:	f7ff ffde 	bl	8002064 <BSP_LCD_GetXSize>
 80020a8:	4603      	mov	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80020b0:	f7ff ffe4 	bl	800207c <BSP_LCD_GetYSize>
 80020b4:	4603      	mov	r3, r0
 80020b6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80020c0:	23ff      	movs	r3, #255	; 0xff
 80020c2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80020da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80020e0:	2307      	movs	r3, #7
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80020e4:	f7ff ffbe 	bl	8002064 <BSP_LCD_GetXSize>
 80020e8:	4603      	mov	r3, r0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80020ec:	f7ff ffc6 	bl	800207c <BSP_LCD_GetYSize>
 80020f0:	4603      	mov	r3, r0
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	4814      	ldr	r0, [pc, #80]	; (8002150 <BSP_LCD_LayerDefaultInit+0xbc>)
 80020fe:	f003 f8d5 	bl	80052ac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	4913      	ldr	r1, [pc, #76]	; (8002154 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3304      	adds	r3, #4
 8002112:	f04f 32ff 	mov.w	r2, #4294967295
 8002116:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	490e      	ldr	r1, [pc, #56]	; (8002154 <BSP_LCD_LayerDefaultInit+0xc0>)
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3308      	adds	r3, #8
 8002128:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <BSP_LCD_LayerDefaultInit+0xc4>)
 800212a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	4909      	ldr	r1, [pc, #36]	; (8002154 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800213e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002142:	f003 f8f1 	bl	8005328 <HAL_LTDC_EnableDither>
}
 8002146:	bf00      	nop
 8002148:	3740      	adds	r7, #64	; 0x40
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200003a8 	.word	0x200003a8
 8002154:	200004c4 	.word	0x200004c4
 8002158:	2000007c 	.word	0x2000007c

0800215c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <BSP_LCD_SelectLayer+0x1c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	200004c0 	.word	0x200004c0

0800217c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <BSP_LCD_SetTextColor+0x28>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <BSP_LCD_SetTextColor+0x2c>)
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	200004c0 	.word	0x200004c0
 80021a8:	200004c4 	.word	0x200004c4

080021ac <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <BSP_LCD_SetBackColor+0x2c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4908      	ldr	r1, [pc, #32]	; (80021dc <BSP_LCD_SetBackColor+0x30>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3304      	adds	r3, #4
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	200004c0 	.word	0x200004c0
 80021dc:	200004c4 	.word	0x200004c4

080021e0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <BSP_LCD_SetFont+0x2c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4908      	ldr	r1, [pc, #32]	; (8002210 <BSP_LCD_SetFont+0x30>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3308      	adds	r3, #8
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200004c0 	.word	0x200004c0
 8002210:	200004c4 	.word	0x200004c4

08002214 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af02      	add	r7, sp, #8
 800221a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <BSP_LCD_Clear+0x48>)
 800221e:	681c      	ldr	r4, [r3, #0]
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <BSP_LCD_Clear+0x48>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <BSP_LCD_Clear+0x4c>)
 8002226:	2134      	movs	r1, #52	; 0x34
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	335c      	adds	r3, #92	; 0x5c
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461e      	mov	r6, r3
 8002234:	f7ff ff16 	bl	8002064 <BSP_LCD_GetXSize>
 8002238:	4605      	mov	r5, r0
 800223a:	f7ff ff1f 	bl	800207c <BSP_LCD_GetYSize>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	2300      	movs	r3, #0
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	462a      	mov	r2, r5
 800224c:	4631      	mov	r1, r6
 800224e:	4620      	mov	r0, r4
 8002250:	f000 fc42 	bl	8002ad8 <FillBuffer>
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225c:	200004c0 	.word	0x200004c0
 8002260:	200003a8 	.word	0x200003a8

08002264 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
 800226e:	460b      	mov	r3, r1
 8002270:	80bb      	strh	r3, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <BSP_LCD_DisplayChar+0x80>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	491b      	ldr	r1, [pc, #108]	; (80022e8 <BSP_LCD_DisplayChar+0x84>)
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	3308      	adds	r3, #8
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <BSP_LCD_DisplayChar+0x80>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4c14      	ldr	r4, [pc, #80]	; (80022e8 <BSP_LCD_DisplayChar+0x84>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4423      	add	r3, r4
 80022a2:	3308      	adds	r3, #8
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80022a8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <BSP_LCD_DisplayChar+0x80>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4c0d      	ldr	r4, [pc, #52]	; (80022e8 <BSP_LCD_DisplayChar+0x84>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4423      	add	r3, r4
 80022bc:	3308      	adds	r3, #8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	889b      	ldrh	r3, [r3, #4]
 80022c2:	3307      	adds	r3, #7
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	da00      	bge.n	80022ca <BSP_LCD_DisplayChar+0x66>
 80022c8:	3307      	adds	r3, #7
 80022ca:	10db      	asrs	r3, r3, #3
 80022cc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80022d0:	18ca      	adds	r2, r1, r3
 80022d2:	88b9      	ldrh	r1, [r7, #4]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fb44 	bl	8002964 <DrawChar>
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd90      	pop	{r4, r7, pc}
 80022e4:	200004c0 	.word	0x200004c0
 80022e8:	200004c4 	.word	0x200004c4

080022ec <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60ba      	str	r2, [r7, #8]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	81fb      	strh	r3, [r7, #14]
 80022fa:	460b      	mov	r3, r1
 80022fc:	81bb      	strh	r3, [r7, #12]
 80022fe:	4613      	mov	r3, r2
 8002300:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002302:	2301      	movs	r3, #1
 8002304:	83fb      	strh	r3, [r7, #30]
 8002306:	2300      	movs	r3, #0
 8002308:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002316:	e002      	b.n	800231e <BSP_LCD_DisplayStringAt+0x32>
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	3301      	adds	r3, #1
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	617a      	str	r2, [r7, #20]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f6      	bne.n	8002318 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800232a:	f7ff fe9b 	bl	8002064 <BSP_LCD_GetXSize>
 800232e:	4601      	mov	r1, r0
 8002330:	4b4b      	ldr	r3, [pc, #300]	; (8002460 <BSP_LCD_DisplayStringAt+0x174>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	484b      	ldr	r0, [pc, #300]	; (8002464 <BSP_LCD_DisplayStringAt+0x178>)
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4403      	add	r3, r0
 8002340:	3308      	adds	r3, #8
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	889b      	ldrh	r3, [r3, #4]
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d01c      	beq.n	800238c <BSP_LCD_DisplayStringAt+0xa0>
 8002352:	2b03      	cmp	r3, #3
 8002354:	dc33      	bgt.n	80023be <BSP_LCD_DisplayStringAt+0xd2>
 8002356:	2b01      	cmp	r3, #1
 8002358:	d002      	beq.n	8002360 <BSP_LCD_DisplayStringAt+0x74>
 800235a:	2b02      	cmp	r3, #2
 800235c:	d019      	beq.n	8002392 <BSP_LCD_DisplayStringAt+0xa6>
 800235e:	e02e      	b.n	80023be <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad1      	subs	r1, r2, r3
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <BSP_LCD_DisplayStringAt+0x174>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	483e      	ldr	r0, [pc, #248]	; (8002464 <BSP_LCD_DisplayStringAt+0x178>)
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4403      	add	r3, r0
 8002376:	3308      	adds	r3, #8
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	889b      	ldrh	r3, [r3, #4]
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	89fb      	ldrh	r3, [r7, #14]
 8002386:	4413      	add	r3, r2
 8002388:	83fb      	strh	r3, [r7, #30]
      break;
 800238a:	e01b      	b.n	80023c4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800238c:	89fb      	ldrh	r3, [r7, #14]
 800238e:	83fb      	strh	r3, [r7, #30]
      break;
 8002390:	e018      	b.n	80023c4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	b299      	uxth	r1, r3
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <BSP_LCD_DisplayStringAt+0x174>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4831      	ldr	r0, [pc, #196]	; (8002464 <BSP_LCD_DisplayStringAt+0x178>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4403      	add	r3, r0
 80023aa:	3308      	adds	r3, #8
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	fb11 f303 	smulbb	r3, r1, r3
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	89fb      	ldrh	r3, [r7, #14]
 80023b8:	4413      	add	r3, r2
 80023ba:	83fb      	strh	r3, [r7, #30]
      break;
 80023bc:	e002      	b.n	80023c4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	83fb      	strh	r3, [r7, #30]
      break;
 80023c2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80023c4:	e01a      	b.n	80023fc <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	89b9      	ldrh	r1, [r7, #12]
 80023cc:	8bfb      	ldrh	r3, [r7, #30]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff48 	bl	8002264 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <BSP_LCD_DisplayStringAt+0x174>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4922      	ldr	r1, [pc, #136]	; (8002464 <BSP_LCD_DisplayStringAt+0x178>)
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	3308      	adds	r3, #8
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	889a      	ldrh	r2, [r3, #4]
 80023ea:	8bfb      	ldrh	r3, [r7, #30]
 80023ec:	4413      	add	r3, r2
 80023ee:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
    i++;
 80023f6:	8bbb      	ldrh	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2dc      	uxtb	r4, r3
 800240a:	f7ff fe2b 	bl	8002064 <BSP_LCD_GetXSize>
 800240e:	8bb9      	ldrh	r1, [r7, #28]
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <BSP_LCD_DisplayStringAt+0x174>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4d13      	ldr	r5, [pc, #76]	; (8002464 <BSP_LCD_DisplayStringAt+0x178>)
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	442b      	add	r3, r5
 8002420:	3308      	adds	r3, #8
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	889b      	ldrh	r3, [r3, #4]
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	1ac3      	subs	r3, r0, r3
 800242c:	b299      	uxth	r1, r3
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <BSP_LCD_DisplayStringAt+0x174>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <BSP_LCD_DisplayStringAt+0x178>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4403      	add	r3, r0
 800243e:	3308      	adds	r3, #8
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	889b      	ldrh	r3, [r3, #4]
 8002444:	4299      	cmp	r1, r3
 8002446:	bf2c      	ite	cs
 8002448:	2301      	movcs	r3, #1
 800244a:	2300      	movcc	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4023      	ands	r3, r4
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1b7      	bne.n	80023c6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bdb0      	pop	{r4, r5, r7, pc}
 8002460:	200004c0 	.word	0x200004c0
 8002464:	200004c4 	.word	0x200004c4

08002468 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08b      	sub	sp, #44	; 0x2c
 800246c:	af00      	add	r7, sp, #0
 800246e:	4604      	mov	r4, r0
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4623      	mov	r3, r4
 8002478:	80fb      	strh	r3, [r7, #6]
 800247a:	4603      	mov	r3, r0
 800247c:	80bb      	strh	r3, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]
 8002482:	4613      	mov	r3, r2
 8002484:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002486:	2300      	movs	r3, #0
 8002488:	823b      	strh	r3, [r7, #16]
 800248a:	2300      	movs	r3, #0
 800248c:	81fb      	strh	r3, [r7, #14]
 800248e:	2300      	movs	r3, #0
 8002490:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002492:	2300      	movs	r3, #0
 8002494:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002496:	2300      	movs	r3, #0
 8002498:	847b      	strh	r3, [r7, #34]	; 0x22
 800249a:	2300      	movs	r3, #0
 800249c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800249e:	2300      	movs	r3, #0
 80024a0:	83fb      	strh	r3, [r7, #30]
 80024a2:	2300      	movs	r3, #0
 80024a4:	83bb      	strh	r3, [r7, #28]
 80024a6:	2300      	movs	r3, #0
 80024a8:	837b      	strh	r3, [r7, #26]
 80024aa:	2300      	movs	r3, #0
 80024ac:	833b      	strh	r3, [r7, #24]
 80024ae:	2300      	movs	r3, #0
 80024b0:	82fb      	strh	r3, [r7, #22]
 80024b2:	2300      	movs	r3, #0
 80024b4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bfb8      	it	lt
 80024c4:	425b      	neglt	r3, r3
 80024c6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80024c8:	883a      	ldrh	r2, [r7, #0]
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bfb8      	it	lt
 80024d2:	425b      	neglt	r3, r3
 80024d4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d304      	bcc.n	80024f0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	843b      	strh	r3, [r7, #32]
 80024ee:	e005      	b.n	80024fc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80024f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80024f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fa:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80024fc:	883a      	ldrh	r2, [r7, #0]
 80024fe:	88bb      	ldrh	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d304      	bcc.n	800250e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	83bb      	strh	r3, [r7, #28]
 800250c:	e005      	b.n	800251a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800250e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002512:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002518:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800251a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800251e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002522:	429a      	cmp	r2, r3
 8002524:	db10      	blt.n	8002548 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002526:	2300      	movs	r3, #0
 8002528:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800252a:	2300      	movs	r3, #0
 800252c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800252e:	8a3b      	ldrh	r3, [r7, #16]
 8002530:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002532:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002536:	0fda      	lsrs	r2, r3, #31
 8002538:	4413      	add	r3, r2
 800253a:	105b      	asrs	r3, r3, #1
 800253c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800253e:	89fb      	ldrh	r3, [r7, #14]
 8002540:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002542:	8a3b      	ldrh	r3, [r7, #16]
 8002544:	82bb      	strh	r3, [r7, #20]
 8002546:	e00f      	b.n	8002568 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002548:	2300      	movs	r3, #0
 800254a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800254c:	2300      	movs	r3, #0
 800254e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002558:	0fda      	lsrs	r2, r3, #31
 800255a:	4413      	add	r3, r2
 800255c:	105b      	asrs	r3, r3, #1
 800255e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002560:	8a3b      	ldrh	r3, [r7, #16]
 8002562:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002564:	89fb      	ldrh	r3, [r7, #14]
 8002566:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002568:	2300      	movs	r3, #0
 800256a:	827b      	strh	r3, [r7, #18]
 800256c:	e037      	b.n	80025de <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800256e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002570:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <BSP_LCD_DrawLine+0x18c>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4c20      	ldr	r4, [pc, #128]	; (80025f8 <BSP_LCD_DrawLine+0x190>)
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4423      	add	r3, r4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	f000 f9a1 	bl	80028cc <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800258a:	8b3a      	ldrh	r2, [r7, #24]
 800258c:	8afb      	ldrh	r3, [r7, #22]
 800258e:	4413      	add	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002594:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002598:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800259c:	429a      	cmp	r2, r3
 800259e:	db0e      	blt.n	80025be <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 80025a0:	8b3a      	ldrh	r2, [r7, #24]
 80025a2:	8b7b      	ldrh	r3, [r7, #26]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80025aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80025ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025ae:	4413      	add	r3, r2
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80025b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025b6:	8bfb      	ldrh	r3, [r7, #30]
 80025b8:	4413      	add	r3, r2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80025be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80025c0:	8c3b      	ldrh	r3, [r7, #32]
 80025c2:	4413      	add	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80025c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025ca:	8bbb      	ldrh	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80025d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	b29b      	uxth	r3, r3
 80025dc:	827b      	strh	r3, [r7, #18]
 80025de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	ddc1      	ble.n	800256e <BSP_LCD_DrawLine+0x106>
  }
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	372c      	adds	r7, #44	; 0x2c
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	200004c0 	.word	0x200004c0
 80025f8:	200004c4 	.word	0x200004c4

080025fc <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80025fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af02      	add	r7, sp, #8
 8002604:	4604      	mov	r4, r0
 8002606:	4608      	mov	r0, r1
 8002608:	4611      	mov	r1, r2
 800260a:	461a      	mov	r2, r3
 800260c:	4623      	mov	r3, r4
 800260e:	80fb      	strh	r3, [r7, #6]
 8002610:	4603      	mov	r3, r0
 8002612:	80bb      	strh	r3, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
 8002618:	4613      	mov	r3, r2
 800261a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <BSP_LCD_FillRect+0xf4>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4933      	ldr	r1, [pc, #204]	; (80026f4 <BSP_LCD_FillRect+0xf8>)
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fda2 	bl	800217c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8002638:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <BSP_LCD_FillRect+0xfc>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d022      	beq.n	8002686 <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <BSP_LCD_FillRect+0xf4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <BSP_LCD_FillRect+0x100>)
 8002646:	2134      	movs	r1, #52	; 0x34
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	335c      	adds	r3, #92	; 0x5c
 8002650:	681c      	ldr	r4, [r3, #0]
 8002652:	f7ff fd07 	bl	8002064 <BSP_LCD_GetXSize>
 8002656:	4603      	mov	r3, r0
 8002658:	425b      	negs	r3, r3
 800265a:	88b9      	ldrh	r1, [r7, #4]
 800265c:	883a      	ldrh	r2, [r7, #0]
 800265e:	440a      	add	r2, r1
 8002660:	fb02 f503 	mul.w	r5, r2, r3
 8002664:	f7ff fcfe 	bl	8002064 <BSP_LCD_GetXSize>
 8002668:	4606      	mov	r6, r0
 800266a:	f7ff fd07 	bl	800207c <BSP_LCD_GetYSize>
 800266e:	4603      	mov	r3, r0
 8002670:	fb06 f303 	mul.w	r3, r6, r3
 8002674:	442b      	add	r3, r5
 8002676:	88f9      	ldrh	r1, [r7, #6]
 8002678:	887a      	ldrh	r2, [r7, #2]
 800267a:	440a      	add	r2, r1
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4423      	add	r3, r4
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e013      	b.n	80026ae <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <BSP_LCD_FillRect+0xf4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <BSP_LCD_FillRect+0x100>)
 800268c:	2134      	movs	r1, #52	; 0x34
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	335c      	adds	r3, #92	; 0x5c
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	f7ff fce4 	bl	8002064 <BSP_LCD_GetXSize>
 800269c:	4602      	mov	r2, r0
 800269e:	88bb      	ldrh	r3, [r7, #4]
 80026a0:	fb03 f202 	mul.w	r2, r3, r2
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4423      	add	r3, r4
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <BSP_LCD_FillRect+0xf4>)
 80026b0:	681c      	ldr	r4, [r3, #0]
 80026b2:	68fd      	ldr	r5, [r7, #12]
 80026b4:	887e      	ldrh	r6, [r7, #2]
 80026b6:	f8b7 8000 	ldrh.w	r8, [r7]
 80026ba:	f7ff fcd3 	bl	8002064 <BSP_LCD_GetXSize>
 80026be:	4602      	mov	r2, r0
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	1ad1      	subs	r1, r2, r3
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <BSP_LCD_FillRect+0xf4>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	480a      	ldr	r0, [pc, #40]	; (80026f4 <BSP_LCD_FillRect+0xf8>)
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4403      	add	r3, r0
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	9100      	str	r1, [sp, #0]
 80026da:	4643      	mov	r3, r8
 80026dc:	4632      	mov	r2, r6
 80026de:	4629      	mov	r1, r5
 80026e0:	4620      	mov	r0, r4
 80026e2:	f000 f9f9 	bl	8002ad8 <FillBuffer>
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f0:	200004c0 	.word	0x200004c0
 80026f4:	200004c4 	.word	0x200004c4
 80026f8:	200004e0 	.word	0x200004e0
 80026fc:	200003a8 	.word	0x200003a8

08002700 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <BSP_LCD_DisplayOn+0x1c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <BSP_LCD_DisplayOn+0x1c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4798      	blx	r3
  }
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200004dc 	.word	0x200004dc

08002720 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08e      	sub	sp, #56	; 0x38
 8002724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a60      	ldr	r2, [pc, #384]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b5e      	ldr	r3, [pc, #376]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	4b5a      	ldr	r3, [pc, #360]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a59      	ldr	r2, [pc, #356]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 800274c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a52      	ldr	r2, [pc, #328]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a4b      	ldr	r2, [pc, #300]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b45      	ldr	r3, [pc, #276]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a44      	ldr	r2, [pc, #272]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a3d      	ldr	r2, [pc, #244]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a36      	ldr	r2, [pc, #216]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a2f      	ldr	r2, [pc, #188]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <BSP_LCD_MspInit+0x190>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002806:	f641 0358 	movw	r3, #6232	; 0x1858
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002814:	2302      	movs	r3, #2
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002818:	230e      	movs	r3, #14
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	4824      	ldr	r0, [pc, #144]	; (80028b4 <BSP_LCD_MspInit+0x194>)
 8002824:	f001 fa62 	bl	8003cec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002828:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800282e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002832:	4619      	mov	r1, r3
 8002834:	4820      	ldr	r0, [pc, #128]	; (80028b8 <BSP_LCD_MspInit+0x198>)
 8002836:	f001 fa59 	bl	8003cec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800283a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002844:	4619      	mov	r1, r3
 8002846:	481d      	ldr	r0, [pc, #116]	; (80028bc <BSP_LCD_MspInit+0x19c>)
 8002848:	f001 fa50 	bl	8003cec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800284c:	2348      	movs	r3, #72	; 0x48
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	4619      	mov	r1, r3
 8002856:	481a      	ldr	r0, [pc, #104]	; (80028c0 <BSP_LCD_MspInit+0x1a0>)
 8002858:	f001 fa48 	bl	8003cec <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800285c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002866:	4619      	mov	r1, r3
 8002868:	4816      	ldr	r0, [pc, #88]	; (80028c4 <BSP_LCD_MspInit+0x1a4>)
 800286a:	f001 fa3f 	bl	8003cec <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800286e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	4813      	ldr	r0, [pc, #76]	; (80028c8 <BSP_LCD_MspInit+0x1a8>)
 800287c:	f001 fa36 	bl	8003cec <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002880:	2303      	movs	r3, #3
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002884:	2309      	movs	r3, #9
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288c:	4619      	mov	r1, r3
 800288e:	480a      	ldr	r0, [pc, #40]	; (80028b8 <BSP_LCD_MspInit+0x198>)
 8002890:	f001 fa2c 	bl	8003cec <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800289a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4809      	ldr	r0, [pc, #36]	; (80028c8 <BSP_LCD_MspInit+0x1a8>)
 80028a2:	f001 fa23 	bl	8003cec <HAL_GPIO_Init>
}
 80028a6:	bf00      	nop
 80028a8:	3738      	adds	r7, #56	; 0x38
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40020400 	.word	0x40020400
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00
 80028c4:	40021400 	.word	0x40021400
 80028c8:	40021800 	.word	0x40021800

080028cc <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	603a      	str	r2, [r7, #0]
 80028d6:	80fb      	strh	r3, [r7, #6]
 80028d8:	460b      	mov	r3, r1
 80028da:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <BSP_LCD_DrawPixel+0x8c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01f      	beq.n	8002924 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <BSP_LCD_DrawPixel+0x90>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <BSP_LCD_DrawPixel+0x94>)
 80028ea:	2134      	movs	r1, #52	; 0x34
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	335c      	adds	r3, #92	; 0x5c
 80028f4:	681c      	ldr	r4, [r3, #0]
 80028f6:	f7ff fbb5 	bl	8002064 <BSP_LCD_GetXSize>
 80028fa:	4605      	mov	r5, r0
 80028fc:	f7ff fbbe 	bl	800207c <BSP_LCD_GetYSize>
 8002900:	4603      	mov	r3, r0
 8002902:	fb03 f205 	mul.w	r2, r3, r5
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	1ad5      	subs	r5, r2, r3
 800290a:	f7ff fbab 	bl	8002064 <BSP_LCD_GetXSize>
 800290e:	4602      	mov	r2, r0
 8002910:	88bb      	ldrh	r3, [r7, #4]
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	1aeb      	subs	r3, r5, r3
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4423      	add	r3, r4
 800291c:	461a      	mov	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002922:	e015      	b.n	8002950 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <BSP_LCD_DrawPixel+0x90>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <BSP_LCD_DrawPixel+0x94>)
 800292a:	2134      	movs	r1, #52	; 0x34
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	681c      	ldr	r4, [r3, #0]
 8002936:	88bd      	ldrh	r5, [r7, #4]
 8002938:	f7ff fb94 	bl	8002064 <BSP_LCD_GetXSize>
 800293c:	4603      	mov	r3, r0
 800293e:	fb03 f205 	mul.w	r2, r3, r5
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4423      	add	r3, r4
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bdb0      	pop	{r4, r5, r7, pc}
 8002958:	200004e0 	.word	0x200004e0
 800295c:	200004c0 	.word	0x200004c0
 8002960:	200003a8 	.word	0x200003a8

08002964 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	603a      	str	r2, [r7, #0]
 800296e:	80fb      	strh	r3, [r7, #6]
 8002970:	460b      	mov	r3, r1
 8002972:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <DrawChar+0x16c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4953      	ldr	r1, [pc, #332]	; (8002ad4 <DrawChar+0x170>)
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3308      	adds	r3, #8
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	88db      	ldrh	r3, [r3, #6]
 8002996:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002998:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <DrawChar+0x16c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <DrawChar+0x170>)
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3308      	adds	r3, #8
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	889b      	ldrh	r3, [r3, #4]
 80029ae:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80029b0:	8a3b      	ldrh	r3, [r7, #16]
 80029b2:	3307      	adds	r3, #7
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da00      	bge.n	80029ba <DrawChar+0x56>
 80029b8:	3307      	adds	r3, #7
 80029ba:	10db      	asrs	r3, r3, #3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	8a3b      	ldrh	r3, [r7, #16]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e076      	b.n	8002abe <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80029d0:	8a3b      	ldrh	r3, [r7, #16]
 80029d2:	3307      	adds	r3, #7
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da00      	bge.n	80029da <DrawChar+0x76>
 80029d8:	3307      	adds	r3, #7
 80029da:	10db      	asrs	r3, r3, #3
 80029dc:	461a      	mov	r2, r3
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80029ea:	8a3b      	ldrh	r3, [r7, #16]
 80029ec:	3307      	adds	r3, #7
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da00      	bge.n	80029f4 <DrawChar+0x90>
 80029f2:	3307      	adds	r3, #7
 80029f4:	10db      	asrs	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d002      	beq.n	8002a00 <DrawChar+0x9c>
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d004      	beq.n	8002a08 <DrawChar+0xa4>
 80029fe:	e00c      	b.n	8002a1a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	617b      	str	r3, [r7, #20]
      break;
 8002a06:	e016      	b.n	8002a36 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	3201      	adds	r2, #1
 8002a12:	7812      	ldrb	r2, [r2, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
      break;
 8002a18:	e00d      	b.n	8002a36 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	041a      	lsls	r2, r3, #16
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	3301      	adds	r3, #1
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	3202      	adds	r2, #2
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
      break;
 8002a34:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e036      	b.n	8002aaa <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002a3c:	8a3a      	ldrh	r2, [r7, #16]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad2      	subs	r2, r2, r3
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	4413      	add	r3, r2
 8002a46:	3b01      	subs	r3, #1
 8002a48:	2201      	movs	r2, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4413      	add	r3, r2
 8002a60:	b298      	uxth	r0, r3
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <DrawChar+0x16c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	491b      	ldr	r1, [pc, #108]	; (8002ad4 <DrawChar+0x170>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	88bb      	ldrh	r3, [r7, #4]
 8002a76:	4619      	mov	r1, r3
 8002a78:	f7ff ff28 	bl	80028cc <BSP_LCD_DrawPixel>
 8002a7c:	e012      	b.n	8002aa4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	4413      	add	r3, r2
 8002a86:	b298      	uxth	r0, r3
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <DrawChar+0x16c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4911      	ldr	r1, [pc, #68]	; (8002ad4 <DrawChar+0x170>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3304      	adds	r3, #4
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	88bb      	ldrh	r3, [r7, #4]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7ff ff14 	bl	80028cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	8a3b      	ldrh	r3, [r7, #16]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d3c4      	bcc.n	8002a3c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002ab2:	88bb      	ldrh	r3, [r7, #4]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	8a7b      	ldrh	r3, [r7, #18]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d384      	bcc.n	80029d0 <DrawChar+0x6c>
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200004c0 	.word	0x200004c0
 8002ad4:	200004c4 	.word	0x200004c4

08002ad8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <FillBuffer+0x68>)
 8002ae8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002aec:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <FillBuffer+0x68>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <FillBuffer+0x68>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <FillBuffer+0x68>)
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <FillBuffer+0x6c>)
 8002afe:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002b00:	480f      	ldr	r0, [pc, #60]	; (8002b40 <FillBuffer+0x68>)
 8002b02:	f000 fe5d 	bl	80037c0 <HAL_DMA2D_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d115      	bne.n	8002b38 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	480c      	ldr	r0, [pc, #48]	; (8002b40 <FillBuffer+0x68>)
 8002b10:	f000 ffbe 	bl	8003a90 <HAL_DMA2D_ConfigLayer>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69f9      	ldr	r1, [r7, #28]
 8002b24:	4806      	ldr	r0, [pc, #24]	; (8002b40 <FillBuffer+0x68>)
 8002b26:	f000 fe9e 	bl	8003866 <HAL_DMA2D_Start>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002b30:	210a      	movs	r1, #10
 8002b32:	4803      	ldr	r0, [pc, #12]	; (8002b40 <FillBuffer+0x68>)
 8002b34:	f000 fec2 	bl	80038bc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000450 	.word	0x20000450
 8002b44:	4002b000 	.word	0x4002b000

08002b48 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <BSP_SDRAM_Init+0xb0>)
 8002b50:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002b54:	2202      	movs	r2, #2
 8002b56:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002b60:	2204      	movs	r2, #4
 8002b62:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002b66:	2207      	movs	r2, #7
 8002b68:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002b70:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002b72:	2202      	movs	r2, #2
 8002b74:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002b78:	2202      	movs	r2, #2
 8002b7a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002b90:	2210      	movs	r2, #16
 8002b92:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002b9c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002ba0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bae:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002bc2:	f000 f87f 	bl	8002cc4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002bc6:	490d      	ldr	r1, [pc, #52]	; (8002bfc <BSP_SDRAM_Init+0xb4>)
 8002bc8:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <BSP_SDRAM_Init+0xac>)
 8002bca:	f002 ff4f 	bl	8005a6c <HAL_SDRAM_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <BSP_SDRAM_Init+0xb8>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e002      	b.n	8002be2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <BSP_SDRAM_Init+0xb8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002be2:	f240 506a 	movw	r0, #1386	; 0x56a
 8002be6:	f000 f80d 	bl	8002c04 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <BSP_SDRAM_Init+0xb8>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200004e4 	.word	0x200004e4
 8002bf8:	a0000140 	.word	0xa0000140
 8002bfc:	20000518 	.word	0x20000518
 8002c00:	20000084 	.word	0x20000084

08002c04 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c10:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c16:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c18:	2208      	movs	r2, #8
 8002c1a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2c:	4923      	ldr	r1, [pc, #140]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c2e:	4824      	ldr	r0, [pc, #144]	; (8002cc0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c30:	f002 ff5a 	bl	8005ae8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c34:	2001      	movs	r0, #1
 8002c36:	f000 facf 	bl	80031d8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c42:	2208      	movs	r2, #8
 8002c44:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c56:	4919      	ldr	r1, [pc, #100]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c58:	4819      	ldr	r0, [pc, #100]	; (8002cc0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c5a:	f002 ff45 	bl	8005ae8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c60:	2203      	movs	r2, #3
 8002c62:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c66:	2208      	movs	r2, #8
 8002c68:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7a:	4910      	ldr	r1, [pc, #64]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c7c:	4810      	ldr	r0, [pc, #64]	; (8002cc0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c7e:	f002 ff33 	bl	8005ae8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002c82:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002c86:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c90:	2208      	movs	r2, #8
 8002c92:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c9e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca4:	4905      	ldr	r1, [pc, #20]	; (8002cbc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca6:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ca8:	f002 ff1e 	bl	8005ae8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cb0:	f002 ff45 	bl	8005b3e <HAL_SDRAM_ProgramRefreshRate>
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000534 	.word	0x20000534
 8002cc0:	200004e4 	.word	0x200004e4

08002cc4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b090      	sub	sp, #64	; 0x40
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80ec 	beq.w	8002eae <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cda:	4b77      	ldr	r3, [pc, #476]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4a76      	ldr	r2, [pc, #472]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ce6:	4b74      	ldr	r3, [pc, #464]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf6:	4b70      	ldr	r3, [pc, #448]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002cfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	4b69      	ldr	r3, [pc, #420]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a68      	ldr	r2, [pc, #416]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	4b62      	ldr	r3, [pc, #392]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a5a      	ldr	r2, [pc, #360]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d6c:	f043 0310 	orr.w	r3, r3, #16
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b51      	ldr	r3, [pc, #324]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a4c      	ldr	r2, [pc, #304]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d88:	f043 0320 	orr.w	r3, r3, #32
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a45      	ldr	r2, [pc, #276]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <BSP_SDRAM_MspInit+0x1f4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002dc6:	2360      	movs	r3, #96	; 0x60
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dce:	4619      	mov	r1, r3
 8002dd0:	483a      	ldr	r0, [pc, #232]	; (8002ebc <BSP_SDRAM_MspInit+0x1f8>)
 8002dd2:	f000 ff8b 	bl	8003cec <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dde:	4619      	mov	r1, r3
 8002de0:	4837      	ldr	r0, [pc, #220]	; (8002ec0 <BSP_SDRAM_MspInit+0x1fc>)
 8002de2:	f000 ff83 	bl	8003cec <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002de6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002df0:	4619      	mov	r1, r3
 8002df2:	4834      	ldr	r0, [pc, #208]	; (8002ec4 <BSP_SDRAM_MspInit+0x200>)
 8002df4:	f000 ff7a 	bl	8003cec <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002df8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e02:	4619      	mov	r1, r3
 8002e04:	4830      	ldr	r0, [pc, #192]	; (8002ec8 <BSP_SDRAM_MspInit+0x204>)
 8002e06:	f000 ff71 	bl	8003cec <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002e0a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e14:	4619      	mov	r1, r3
 8002e16:	482d      	ldr	r0, [pc, #180]	; (8002ecc <BSP_SDRAM_MspInit+0x208>)
 8002e18:	f000 ff68 	bl	8003cec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002e1c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e26:	4619      	mov	r1, r3
 8002e28:	4829      	ldr	r0, [pc, #164]	; (8002ed0 <BSP_SDRAM_MspInit+0x20c>)
 8002e2a:	f000 ff5f 	bl	8003cec <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002e2e:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e40:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e48:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e50:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e58:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e66:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e70:	2203      	movs	r2, #3
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e82:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <BSP_SDRAM_MspInit+0x214>)
 8002e84:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8c:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002e92:	4810      	ldr	r0, [pc, #64]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e94:	f000 fb84 	bl	80035a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002e98:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <BSP_SDRAM_MspInit+0x210>)
 8002e9a:	f000 fad3 	bl	8003444 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	210f      	movs	r1, #15
 8002ea2:	2038      	movs	r0, #56	; 0x38
 8002ea4:	f000 fa97 	bl	80033d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002ea8:	2038      	movs	r0, #56	; 0x38
 8002eaa:	f000 fab0 	bl	800340e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002eae:	bf00      	nop
 8002eb0:	3740      	adds	r7, #64	; 0x40
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40020c00 	.word	0x40020c00
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40021400 	.word	0x40021400
 8002ed0:	40021800 	.word	0x40021800
 8002ed4:	20000544 	.word	0x20000544
 8002ed8:	40026410 	.word	0x40026410

08002edc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	80fb      	strh	r3, [r7, #6]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <BSP_TS_Init+0x64>)
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002ef6:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <BSP_TS_Init+0x68>)
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <BSP_TS_Init+0x6c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2082      	movs	r0, #130	; 0x82
 8002f02:	4798      	blx	r3
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	f640 0311 	movw	r3, #2065	; 0x811
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d104      	bne.n	8002f1a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <BSP_TS_Init+0x70>)
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <BSP_TS_Init+0x6c>)
 8002f14:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <BSP_TS_Init+0x70>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2082      	movs	r0, #130	; 0x82
 8002f28:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <BSP_TS_Init+0x70>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2082      	movs	r0, #130	; 0x82
 8002f32:	4798      	blx	r3
  }

  return ret;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200005a8 	.word	0x200005a8
 8002f44:	200005aa 	.word	0x200005aa
 8002f48:	20000044 	.word	0x20000044
 8002f4c:	200005a4 	.word	0x200005a4

08002f50 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <BSP_TS_ITGetStatus+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	2082      	movs	r0, #130	; 0x82
 8002f5c:	4798      	blx	r3
 8002f5e:	4603      	mov	r3, r0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200005a4 	.word	0x200005a4

08002f68 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002f70:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <BSP_TS_GetState+0x148>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2082      	movs	r0, #130	; 0x82
 8002f78:	4798      	blx	r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 808d 	beq.w	80030a6 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8002f8c:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <BSP_TS_GetState+0x148>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f107 020c 	add.w	r2, r7, #12
 8002f96:	f107 010e 	add.w	r1, r7, #14
 8002f9a:	2082      	movs	r0, #130	; 0x82
 8002f9c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8002f9e:	89bb      	ldrh	r3, [r7, #12]
 8002fa0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8002fa8:	89bb      	ldrh	r3, [r7, #12]
 8002faa:	4a42      	ldr	r2, [pc, #264]	; (80030b4 <BSP_TS_GetState+0x14c>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8002fb4:	8abb      	ldrh	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	82bb      	strh	r3, [r7, #20]
 8002fbe:	e008      	b.n	8002fd2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8002fc0:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <BSP_TS_GetState+0x150>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	8aba      	ldrh	r2, [r7, #20]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d903      	bls.n	8002fd2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <BSP_TS_GetState+0x150>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8002fd2:	8abb      	ldrh	r3, [r7, #20]
 8002fd4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d806      	bhi.n	8002fee <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8002fe6:	330e      	adds	r3, #14
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	81fb      	strh	r3, [r7, #14]
 8002fec:	e005      	b.n	8002ffa <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8002ffa:	89fb      	ldrh	r3, [r7, #14]
 8002ffc:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <BSP_TS_GetState+0x154>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003006:	8afb      	ldrh	r3, [r7, #22]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	82fb      	strh	r3, [r7, #22]
 8003010:	e008      	b.n	8003024 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <BSP_TS_GetState+0x158>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	8afa      	ldrh	r2, [r7, #22]
 8003018:	429a      	cmp	r2, r3
 800301a:	d903      	bls.n	8003024 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <BSP_TS_GetState+0x158>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	3b01      	subs	r3, #1
 8003022:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003024:	8afb      	ldrh	r3, [r7, #22]
 8003026:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003028:	89fb      	ldrh	r3, [r7, #14]
 800302a:	461a      	mov	r2, r3
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <BSP_TS_GetState+0x15c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d906      	bls.n	8003042 <BSP_TS_GetState+0xda>
 8003034:	89fa      	ldrh	r2, [r7, #14]
 8003036:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <BSP_TS_GetState+0x15c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	b29b      	uxth	r3, r3
 8003040:	e005      	b.n	800304e <BSP_TS_GetState+0xe6>
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <BSP_TS_GetState+0x15c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29a      	uxth	r2, r3
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	b29b      	uxth	r3, r3
 800304e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003050:	89bb      	ldrh	r3, [r7, #12]
 8003052:	461a      	mov	r2, r3
 8003054:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <BSP_TS_GetState+0x160>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d906      	bls.n	800306a <BSP_TS_GetState+0x102>
 800305c:	89ba      	ldrh	r2, [r7, #12]
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <BSP_TS_GetState+0x160>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	b29b      	uxth	r3, r3
 8003068:	e005      	b.n	8003076 <BSP_TS_GetState+0x10e>
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <BSP_TS_GetState+0x160>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29a      	uxth	r2, r3
 8003070:	89bb      	ldrh	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003078:	8a7a      	ldrh	r2, [r7, #18]
 800307a:	8a3b      	ldrh	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	2b05      	cmp	r3, #5
 8003080:	dd07      	ble.n	8003092 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003082:	89fb      	ldrh	r3, [r7, #14]
 8003084:	461a      	mov	r2, r3
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <BSP_TS_GetState+0x15c>)
 8003088:	601a      	str	r2, [r3, #0]
      _y = y; 
 800308a:	89bb      	ldrh	r3, [r7, #12]
 800308c:	461a      	mov	r2, r3
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <BSP_TS_GetState+0x160>)
 8003090:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <BSP_TS_GetState+0x15c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <BSP_TS_GetState+0x160>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	809a      	strh	r2, [r3, #4]
  }
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200005a4 	.word	0x200005a4
 80030b4:	ba2e8ba3 	.word	0xba2e8ba3
 80030b8:	200005aa 	.word	0x200005aa
 80030bc:	88888889 	.word	0x88888889
 80030c0:	200005a8 	.word	0x200005a8
 80030c4:	200005ac 	.word	0x200005ac
 80030c8:	200005b0 	.word	0x200005b0

080030cc <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <BSP_TS_ITClear+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	2082      	movs	r0, #130	; 0x82
 80030d8:	4798      	blx	r3
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200005a4 	.word	0x200005a4

080030e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_Init+0x40>)
 80030ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_Init+0x40>)
 80030fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_Init+0x40>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800310c:	2003      	movs	r0, #3
 800310e:	f000 f957 	bl	80033c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003112:	200f      	movs	r0, #15
 8003114:	f000 f810 	bl	8003138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003118:	f000 f806 	bl	8003128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00

08003128 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_InitTick+0x54>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_InitTick+0x58>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f967 	bl	800342a <HAL_SYSTICK_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e00e      	b.n	8003184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d80a      	bhi.n	8003182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800316c:	2200      	movs	r2, #0
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f000 f92f 	bl	80033d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003178:	4a06      	ldr	r2, [pc, #24]	; (8003194 <HAL_InitTick+0x5c>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000008 	.word	0x20000008
 8003190:	2000008c 	.word	0x2000008c
 8003194:	20000088 	.word	0x20000088

08003198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_IncTick+0x20>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_IncTick+0x24>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <HAL_IncTick+0x24>)
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	2000008c 	.word	0x2000008c
 80031bc:	200005b4 	.word	0x200005b4

080031c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return uwTick;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_GetTick+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	200005b4 	.word	0x200005b4

080031d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff ffee 	bl	80031c0 <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d005      	beq.n	80031fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_Delay+0x44>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031fe:	bf00      	nop
 8003200:	f7ff ffde 	bl	80031c0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d8f7      	bhi.n	8003200 <HAL_Delay+0x28>
  {
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2000008c 	.word	0x2000008c

08003220 <__NVIC_SetPriorityGrouping>:
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_GetPriorityGrouping>:
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4907      	ldr	r1, [pc, #28]	; (80032bc <__NVIC_EnableIRQ+0x38>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	db0a      	blt.n	80032ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	490c      	ldr	r1, [pc, #48]	; (800330c <__NVIC_SetPriority+0x4c>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	440b      	add	r3, r1
 80032e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e8:	e00a      	b.n	8003300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4908      	ldr	r1, [pc, #32]	; (8003310 <__NVIC_SetPriority+0x50>)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	3b04      	subs	r3, #4
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	440b      	add	r3, r1
 80032fe:	761a      	strb	r2, [r3, #24]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	bf28      	it	cs
 8003332:	2304      	movcs	r3, #4
 8003334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3304      	adds	r3, #4
 800333a:	2b06      	cmp	r3, #6
 800333c:	d902      	bls.n	8003344 <NVIC_EncodePriority+0x30>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3b03      	subs	r3, #3
 8003342:	e000      	b.n	8003346 <NVIC_EncodePriority+0x32>
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	401a      	ands	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800335c:	f04f 31ff 	mov.w	r1, #4294967295
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43d9      	mvns	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	4313      	orrs	r3, r2
         );
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	; 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800338c:	d301      	bcc.n	8003392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800338e:	2301      	movs	r3, #1
 8003390:	e00f      	b.n	80033b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <SysTick_Config+0x40>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339a:	210f      	movs	r1, #15
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f7ff ff8e 	bl	80032c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <SysTick_Config+0x40>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <SysTick_Config+0x40>)
 80033ac:	2207      	movs	r2, #7
 80033ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	e000e010 	.word	0xe000e010

080033c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff29 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e8:	f7ff ff3e 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80033ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	6978      	ldr	r0, [r7, #20]
 80033f4:	f7ff ff8e 	bl	8003314 <NVIC_EncodePriority>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff5d 	bl	80032c0 <__NVIC_SetPriority>
}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff31 	bl	8003284 <__NVIC_EnableIRQ>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffa2 	bl	800337c <SysTick_Config>
 8003438:	4603      	mov	r3, r0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff feb6 	bl	80031c0 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e099      	b.n	8003594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003480:	e00f      	b.n	80034a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003482:	f7ff fe9d 	bl	80031c0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b05      	cmp	r3, #5
 800348e:	d908      	bls.n	80034a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e078      	b.n	8003594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e8      	bne.n	8003482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_DMA_Init+0x158>)
 80034bc:	4013      	ands	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d107      	bne.n	800350c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	4313      	orrs	r3, r2
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0307 	bic.w	r3, r3, #7
 8003522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b04      	cmp	r3, #4
 8003534:	d117      	bne.n	8003566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8bd 	bl	80036c8 <DMA_CheckFifoParam>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2240      	movs	r2, #64	; 0x40
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003562:	2301      	movs	r3, #1
 8003564:	e016      	b.n	8003594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f874 	bl	800365c <DMA_CalcBaseAndBitshift>
 8003574:	4603      	mov	r3, r0
 8003576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	223f      	movs	r2, #63	; 0x3f
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	f010803f 	.word	0xf010803f

080035a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e050      	b.n	8003654 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d101      	bne.n	80035c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	e048      	b.n	8003654 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2221      	movs	r2, #33	; 0x21
 8003600:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f82a 	bl	800365c <DMA_CalcBaseAndBitshift>
 8003608:	4603      	mov	r3, r0
 800360a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	223f      	movs	r2, #63	; 0x3f
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3b10      	subs	r3, #16
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <DMA_CalcBaseAndBitshift+0x64>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003676:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d909      	bls.n	800369e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	659a      	str	r2, [r3, #88]	; 0x58
 800369c:	e007      	b.n	80036ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	aaaaaaab 	.word	0xaaaaaaab
 80036c4:	08008fc0 	.word	0x08008fc0

080036c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11f      	bne.n	8003722 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d856      	bhi.n	8003796 <DMA_CheckFifoParam+0xce>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <DMA_CheckFifoParam+0x28>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003701 	.word	0x08003701
 80036f4:	08003713 	.word	0x08003713
 80036f8:	08003701 	.word	0x08003701
 80036fc:	08003797 	.word	0x08003797
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d046      	beq.n	800379a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e043      	b.n	800379a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800371a:	d140      	bne.n	800379e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e03d      	b.n	800379e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	d121      	bne.n	8003770 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d837      	bhi.n	80037a2 <DMA_CheckFifoParam+0xda>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <DMA_CheckFifoParam+0x70>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003749 	.word	0x08003749
 800373c:	0800374f 	.word	0x0800374f
 8003740:	08003749 	.word	0x08003749
 8003744:	08003761 	.word	0x08003761
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      break;
 800374c:	e030      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d025      	beq.n	80037a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375e:	e022      	b.n	80037a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003768:	d11f      	bne.n	80037aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800376e:	e01c      	b.n	80037aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d903      	bls.n	800377e <DMA_CheckFifoParam+0xb6>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d003      	beq.n	8003784 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800377c:	e018      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      break;
 8003782:	e015      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e00b      	b.n	80037ae <DMA_CheckFifoParam+0xe6>
      break;
 8003796:	bf00      	nop
 8003798:	e00a      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e008      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e006      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e004      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
    }
  } 
  
  return status; 
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e03b      	b.n	800384a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f833 	bl	8003852 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	f023 0107 	bic.w	r1, r3, #7
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800382a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d1      	ldr	r1, [r2, #12]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	430b      	orrs	r3, r1
 8003838:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af02      	add	r7, sp, #8
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_DMA2D_Start+0x1c>
 800387e:	2302      	movs	r3, #2
 8003880:	e018      	b.n	80038b4 <HAL_DMA2D_Start+0x4e>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f989 	bl	8003bb4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d056      	beq.n	8003986 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80038d8:	f7ff fc72 	bl	80031c0 <HAL_GetTick>
 80038dc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038de:	e04b      	b.n	8003978 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d023      	beq.n	800393a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	f043 0202 	orr.w	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2221      	movs	r2, #33	; 0x21
 8003924:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0a5      	b.n	8003a86 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d01a      	beq.n	8003978 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003942:	f7ff fc3d 	bl	80031c0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <HAL_DMA2D_PollForTransfer+0x9c>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10f      	bne.n	8003978 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2203      	movs	r2, #3
 8003968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e086      	b.n	8003a86 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ac      	beq.n	80038e0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d061      	beq.n	8003a6c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80039a8:	f7ff fc0a 	bl	80031c0 <HAL_GetTick>
 80039ac:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80039ae:	e056      	b.n	8003a5e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02e      	beq.n	8003a20 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2229      	movs	r2, #41	; 0x29
 8003a0a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d01a      	beq.n	8003a5e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003a28:	f7ff fbca 	bl	80031c0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d302      	bcc.n	8003a3e <HAL_DMA2D_PollForTransfer+0x182>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e013      	b.n	8003a86 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0a1      	beq.n	80039b0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2212      	movs	r2, #18
 8003a72:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DMA2D_ConfigLayer+0x20>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e079      	b.n	8003ba4 <HAL_DMA2D_ConfigLayer+0x114>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003ada:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003adc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b0a      	cmp	r3, #10
 8003ae4:	d003      	beq.n	8003aee <HAL_DMA2D_ConfigLayer+0x5e>
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	d107      	bne.n	8003afe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e005      	b.n	8003b0a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d120      	bne.n	8003b52 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	ea02 0103 	and.w	r1, r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b0a      	cmp	r3, #10
 8003b38:	d003      	beq.n	8003b42 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	d127      	bne.n	8003b92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b50:	e01f      	b.n	8003b92 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	ea02 0103 	and.w	r1, r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b0a      	cmp	r3, #10
 8003b7a:	d003      	beq.n	8003b84 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	d106      	bne.n	8003b92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b90:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	ff03000f 	.word	0xff03000f

08003bb4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b08b      	sub	sp, #44	; 0x2c
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	041a      	lsls	r2, r3, #16
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bec:	d174      	bne.n	8003cd8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bf4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bfc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c04:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d108      	bne.n	8003c26 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
 8003c24:	e053      	b.n	8003cce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d106      	bne.n	8003c3c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	e048      	b.n	8003cce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d111      	bne.n	8003c68 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	0cdb      	lsrs	r3, r3, #19
 8003c48:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	0a9b      	lsrs	r3, r3, #10
 8003c4e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	08db      	lsrs	r3, r3, #3
 8003c54:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	02db      	lsls	r3, r3, #11
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	e032      	b.n	8003cce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d117      	bne.n	8003ca0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	0fdb      	lsrs	r3, r3, #31
 8003c74:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	0cdb      	lsrs	r3, r3, #19
 8003c7a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	0adb      	lsrs	r3, r3, #11
 8003c80:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	029b      	lsls	r3, r3, #10
 8003c90:	431a      	orrs	r2, r3
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	03db      	lsls	r3, r3, #15
 8003c96:	4313      	orrs	r3, r2
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	e016      	b.n	8003cce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	0d1b      	lsrs	r3, r3, #20
 8003caa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	0b1b      	lsrs	r3, r3, #12
 8003cb0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	011a      	lsls	r2, r3, #4
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	031b      	lsls	r3, r3, #12
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003cd6:	e003      	b.n	8003ce0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	60da      	str	r2, [r3, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	372c      	adds	r7, #44	; 0x2c
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b089      	sub	sp, #36	; 0x24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e177      	b.n	8003ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d08:	2201      	movs	r2, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	f040 8166 	bne.w	8003ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d00b      	beq.n	8003d46 <HAL_GPIO_Init+0x5a>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d007      	beq.n	8003d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d3a:	2b11      	cmp	r3, #17
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b12      	cmp	r3, #18
 8003d44:	d130      	bne.n	8003da8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2203      	movs	r2, #3
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 0201 	and.w	r2, r3, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0xfc>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b12      	cmp	r3, #18
 8003de6:	d123      	bne.n	8003e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	08da      	lsrs	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3208      	adds	r2, #8
 8003df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	220f      	movs	r2, #15
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0203 	and.w	r2, r3, #3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80c0 	beq.w	8003ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b66      	ldr	r3, [pc, #408]	; (8004010 <HAL_GPIO_Init+0x324>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	4a65      	ldr	r2, [pc, #404]	; (8004010 <HAL_GPIO_Init+0x324>)
 8003e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e80:	6453      	str	r3, [r2, #68]	; 0x44
 8003e82:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_GPIO_Init+0x324>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e8e:	4a61      	ldr	r2, [pc, #388]	; (8004014 <HAL_GPIO_Init+0x328>)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	3302      	adds	r3, #2
 8003e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	220f      	movs	r2, #15
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_GPIO_Init+0x32c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d037      	beq.n	8003f2a <HAL_GPIO_Init+0x23e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a57      	ldr	r2, [pc, #348]	; (800401c <HAL_GPIO_Init+0x330>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d031      	beq.n	8003f26 <HAL_GPIO_Init+0x23a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a56      	ldr	r2, [pc, #344]	; (8004020 <HAL_GPIO_Init+0x334>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02b      	beq.n	8003f22 <HAL_GPIO_Init+0x236>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a55      	ldr	r2, [pc, #340]	; (8004024 <HAL_GPIO_Init+0x338>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d025      	beq.n	8003f1e <HAL_GPIO_Init+0x232>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a54      	ldr	r2, [pc, #336]	; (8004028 <HAL_GPIO_Init+0x33c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01f      	beq.n	8003f1a <HAL_GPIO_Init+0x22e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a53      	ldr	r2, [pc, #332]	; (800402c <HAL_GPIO_Init+0x340>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d019      	beq.n	8003f16 <HAL_GPIO_Init+0x22a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_GPIO_Init+0x344>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_GPIO_Init+0x226>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a51      	ldr	r2, [pc, #324]	; (8004034 <HAL_GPIO_Init+0x348>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00d      	beq.n	8003f0e <HAL_GPIO_Init+0x222>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a50      	ldr	r2, [pc, #320]	; (8004038 <HAL_GPIO_Init+0x34c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <HAL_GPIO_Init+0x21e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4f      	ldr	r2, [pc, #316]	; (800403c <HAL_GPIO_Init+0x350>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_GPIO_Init+0x21a>
 8003f02:	2309      	movs	r3, #9
 8003f04:	e012      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f06:	230a      	movs	r3, #10
 8003f08:	e010      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	e00e      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f0e:	2307      	movs	r3, #7
 8003f10:	e00c      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f12:	2306      	movs	r3, #6
 8003f14:	e00a      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f16:	2305      	movs	r3, #5
 8003f18:	e008      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	e006      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e004      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e002      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_GPIO_Init+0x240>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	f002 0203 	and.w	r2, r2, #3
 8003f32:	0092      	lsls	r2, r2, #2
 8003f34:	4093      	lsls	r3, r2
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f3c:	4935      	ldr	r1, [pc, #212]	; (8004014 <HAL_GPIO_Init+0x328>)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	3302      	adds	r3, #2
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f6e:	4a34      	ldr	r2, [pc, #208]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f74:	4b32      	ldr	r3, [pc, #200]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f98:	4a29      	ldr	r2, [pc, #164]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <HAL_GPIO_Init+0x354>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	f67f ae84 	bls.w	8003d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3724      	adds	r7, #36	; 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	40013800 	.word	0x40013800
 8004018:	40020000 	.word	0x40020000
 800401c:	40020400 	.word	0x40020400
 8004020:	40020800 	.word	0x40020800
 8004024:	40020c00 	.word	0x40020c00
 8004028:	40021000 	.word	0x40021000
 800402c:	40021400 	.word	0x40021400
 8004030:	40021800 	.word	0x40021800
 8004034:	40021c00 	.word	0x40021c00
 8004038:	40022000 	.word	0x40022000
 800403c:	40022400 	.word	0x40022400
 8004040:	40013c00 	.word	0x40013c00

08004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e001      	b.n	8004066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
 8004080:	4613      	mov	r3, r2
 8004082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004084:	787b      	ldrb	r3, [r7, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004090:	e003      	b.n	800409a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	041a      	lsls	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	619a      	str	r2, [r3, #24]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	401a      	ands	r2, r3
 80040ba:	887b      	ldrh	r3, [r7, #2]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d104      	bne.n	80040ca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040c0:	887b      	ldrh	r3, [r7, #2]
 80040c2:	041a      	lsls	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80040c8:	e002      	b.n	80040d0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e12b      	b.n	8004346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f95d 	bl	80043c2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004140:	f001 fac0 	bl	80056c4 <HAL_RCC_GetPCLK1Freq>
 8004144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4a81      	ldr	r2, [pc, #516]	; (8004350 <HAL_I2C_Init+0x274>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d807      	bhi.n	8004160 <HAL_I2C_Init+0x84>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a80      	ldr	r2, [pc, #512]	; (8004354 <HAL_I2C_Init+0x278>)
 8004154:	4293      	cmp	r3, r2
 8004156:	bf94      	ite	ls
 8004158:	2301      	movls	r3, #1
 800415a:	2300      	movhi	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e006      	b.n	800416e <HAL_I2C_Init+0x92>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a7d      	ldr	r2, [pc, #500]	; (8004358 <HAL_I2C_Init+0x27c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	bf94      	ite	ls
 8004168:	2301      	movls	r3, #1
 800416a:	2300      	movhi	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0e7      	b.n	8004346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a78      	ldr	r2, [pc, #480]	; (800435c <HAL_I2C_Init+0x280>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0c9b      	lsrs	r3, r3, #18
 8004180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a6a      	ldr	r2, [pc, #424]	; (8004350 <HAL_I2C_Init+0x274>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d802      	bhi.n	80041b0 <HAL_I2C_Init+0xd4>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3301      	adds	r3, #1
 80041ae:	e009      	b.n	80041c4 <HAL_I2C_Init+0xe8>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	4a69      	ldr	r2, [pc, #420]	; (8004360 <HAL_I2C_Init+0x284>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	3301      	adds	r3, #1
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	495c      	ldr	r1, [pc, #368]	; (8004350 <HAL_I2C_Init+0x274>)
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d819      	bhi.n	8004218 <HAL_I2C_Init+0x13c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e59      	subs	r1, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f2:	1c59      	adds	r1, r3, #1
 80041f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041f8:	400b      	ands	r3, r1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_I2C_Init+0x138>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1e59      	subs	r1, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fbb1 f3f3 	udiv	r3, r1, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004212:	e051      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004214:	2304      	movs	r3, #4
 8004216:	e04f      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d111      	bne.n	8004244 <HAL_I2C_Init+0x168>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1e58      	subs	r0, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	440b      	add	r3, r1
 800422e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004232:	3301      	adds	r3, #1
 8004234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e012      	b.n	800426a <HAL_I2C_Init+0x18e>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e58      	subs	r0, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	0099      	lsls	r1, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	fbb0 f3f3 	udiv	r3, r0, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Init+0x196>
 800426e:	2301      	movs	r3, #1
 8004270:	e022      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10e      	bne.n	8004298 <HAL_I2C_Init+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1e58      	subs	r0, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	440b      	add	r3, r1
 8004288:	fbb0 f3f3 	udiv	r3, r0, r3
 800428c:	3301      	adds	r3, #1
 800428e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004296:	e00f      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1e58      	subs	r0, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	0099      	lsls	r1, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	6809      	ldr	r1, [r1, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6911      	ldr	r1, [r2, #16]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68d2      	ldr	r2, [r2, #12]
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	000186a0 	.word	0x000186a0
 8004354:	001e847f 	.word	0x001e847f
 8004358:	003d08ff 	.word	0x003d08ff
 800435c:	431bde83 	.word	0x431bde83
 8004360:	10624dd3 	.word	0x10624dd3

08004364 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e021      	b.n	80043ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	; 0x24
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f821 	bl	80043d6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	4608      	mov	r0, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	461a      	mov	r2, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	817b      	strh	r3, [r7, #10]
 80043fe:	460b      	mov	r3, r1
 8004400:	813b      	strh	r3, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004406:	f7fe fedb 	bl	80031c0 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b20      	cmp	r3, #32
 8004416:	f040 80d9 	bne.w	80045cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	2319      	movs	r3, #25
 8004420:	2201      	movs	r2, #1
 8004422:	496d      	ldr	r1, [pc, #436]	; (80045d8 <HAL_I2C_Mem_Write+0x1ec>)
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fc89 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
 8004432:	e0cc      	b.n	80045ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_I2C_Mem_Write+0x56>
 800443e:	2302      	movs	r3, #2
 8004440:	e0c5      	b.n	80045ce <HAL_I2C_Mem_Write+0x1e2>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d007      	beq.n	8004468 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2221      	movs	r2, #33	; 0x21
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2240      	movs	r2, #64	; 0x40
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a4d      	ldr	r2, [pc, #308]	; (80045dc <HAL_I2C_Mem_Write+0x1f0>)
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044aa:	88f8      	ldrh	r0, [r7, #6]
 80044ac:	893a      	ldrh	r2, [r7, #8]
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	4603      	mov	r3, r0
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fac4 	bl	8004a48 <I2C_RequestMemoryWrite>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d052      	beq.n	800456c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e081      	b.n	80045ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fd0a 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06b      	b.n	80045ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d11b      	bne.n	800456c <HAL_I2C_Mem_Write+0x180>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	d017      	beq.n	800456c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1aa      	bne.n	80044ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fcf6 	bl	8004f6a <I2C_WaitOnBTFFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	2b04      	cmp	r3, #4
 800458a:	d107      	bne.n	800459c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e016      	b.n	80045ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	00100002 	.word	0x00100002
 80045dc:	ffff0000 	.word	0xffff0000

080045e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	; 0x30
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	4608      	mov	r0, r1
 80045ea:	4611      	mov	r1, r2
 80045ec:	461a      	mov	r2, r3
 80045ee:	4603      	mov	r3, r0
 80045f0:	817b      	strh	r3, [r7, #10]
 80045f2:	460b      	mov	r3, r1
 80045f4:	813b      	strh	r3, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045fa:	f7fe fde1 	bl	80031c0 <HAL_GetTick>
 80045fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b20      	cmp	r3, #32
 800460a:	f040 8208 	bne.w	8004a1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2319      	movs	r3, #25
 8004614:	2201      	movs	r2, #1
 8004616:	497b      	ldr	r1, [pc, #492]	; (8004804 <HAL_I2C_Mem_Read+0x224>)
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fb8f 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
 8004626:	e1fb      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_I2C_Mem_Read+0x56>
 8004632:	2302      	movs	r3, #2
 8004634:	e1f4      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d007      	beq.n	800465c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800466a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2222      	movs	r2, #34	; 0x22
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2240      	movs	r2, #64	; 0x40
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800468c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a5b      	ldr	r2, [pc, #364]	; (8004808 <HAL_I2C_Mem_Read+0x228>)
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800469e:	88f8      	ldrh	r0, [r7, #6]
 80046a0:	893a      	ldrh	r2, [r7, #8]
 80046a2:	8979      	ldrh	r1, [r7, #10]
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4603      	mov	r3, r0
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fa5e 	bl	8004b70 <I2C_RequestMemoryRead>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e1b0      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d113      	bne.n	80046ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c6:	2300      	movs	r3, #0
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e184      	b.n	80049f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d11b      	bne.n	800472e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e164      	b.n	80049f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	2b02      	cmp	r3, #2
 8004734:	d11b      	bne.n	800476e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004744:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	e144      	b.n	80049f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004784:	e138      	b.n	80049f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	2b03      	cmp	r3, #3
 800478c:	f200 80f1 	bhi.w	8004972 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004794:	2b01      	cmp	r3, #1
 8004796:	d123      	bne.n	80047e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fc25 	bl	8004fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e139      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047de:	e10b      	b.n	80049f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d14e      	bne.n	8004886 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	2200      	movs	r2, #0
 80047f0:	4906      	ldr	r1, [pc, #24]	; (800480c <HAL_I2C_Mem_Read+0x22c>)
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 faa2 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e10e      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
 8004802:	bf00      	nop
 8004804:	00100002 	.word	0x00100002
 8004808:	ffff0000 	.word	0xffff0000
 800480c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004884:	e0b8      	b.n	80049f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	2200      	movs	r2, #0
 800488e:	4966      	ldr	r1, [pc, #408]	; (8004a28 <HAL_I2C_Mem_Read+0x448>)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fa53 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0bf      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2200      	movs	r2, #0
 80048ea:	494f      	ldr	r1, [pc, #316]	; (8004a28 <HAL_I2C_Mem_Read+0x448>)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fa25 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e091      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004970:	e042      	b.n	80049f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fb38 	bl	8004fec <I2C_WaitOnRXNEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e04c      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d118      	bne.n	80049f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f47f aec2 	bne.w	8004786 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3728      	adds	r7, #40	; 0x28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	00010004 	.word	0x00010004

08004a2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	4608      	mov	r0, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	461a      	mov	r2, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	817b      	strh	r3, [r7, #10]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	813b      	strh	r3, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f95c 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e05f      	b.n	8004b64 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aa4:	897b      	ldrh	r3, [r7, #10]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ab2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	492c      	ldr	r1, [pc, #176]	; (8004b6c <I2C_RequestMemoryWrite+0x124>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f995 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e04c      	b.n	8004b64 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	6a39      	ldr	r1, [r7, #32]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f9ff 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d107      	bne.n	8004b08 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e02b      	b.n	8004b64 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b12:	893b      	ldrh	r3, [r7, #8]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]
 8004b1c:	e021      	b.n	8004b62 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b1e:	893b      	ldrh	r3, [r7, #8]
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	6a39      	ldr	r1, [r7, #32]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f9d9 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00d      	beq.n	8004b58 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d107      	bne.n	8004b54 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e005      	b.n	8004b64 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b58:	893b      	ldrh	r3, [r7, #8]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	00010002 	.word	0x00010002

08004b70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4603      	mov	r3, r0
 8004b80:	817b      	strh	r3, [r7, #10]
 8004b82:	460b      	mov	r3, r1
 8004b84:	813b      	strh	r3, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f8c0 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0a9      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bdc:	897b      	ldrh	r3, [r7, #10]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	6a3a      	ldr	r2, [r7, #32]
 8004bf0:	4951      	ldr	r1, [pc, #324]	; (8004d38 <I2C_RequestMemoryRead+0x1c8>)
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f8f9 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e096      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	6a39      	ldr	r1, [r7, #32]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f963 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d107      	bne.n	8004c40 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e075      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4a:	893b      	ldrh	r3, [r7, #8]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]
 8004c54:	e021      	b.n	8004c9a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c56:	893b      	ldrh	r3, [r7, #8]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c66:	6a39      	ldr	r1, [r7, #32]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f93d 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d107      	bne.n	8004c8c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e04f      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c90:	893b      	ldrh	r3, [r7, #8]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f922 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e034      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f82a 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e013      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d08:	897b      	ldrh	r3, [r7, #10]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	6a3a      	ldr	r2, [r7, #32]
 8004d1c:	4906      	ldr	r1, [pc, #24]	; (8004d38 <I2C_RequestMemoryRead+0x1c8>)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f863 	bl	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	00010002 	.word	0x00010002

08004d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4c:	e025      	b.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d021      	beq.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fe fa33 	bl	80031c0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d116      	bne.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e023      	b.n	8004de2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10d      	bne.n	8004dc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	43da      	mvns	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	e00c      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d0b6      	beq.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df8:	e051      	b.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e08:	d123      	bne.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e046      	b.n	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d021      	beq.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5a:	f7fe f9b1 	bl	80031c0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e020      	b.n	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10c      	bne.n	8004ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e00b      	b.n	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	43da      	mvns	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d18d      	bne.n	8004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef4:	e02d      	b.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f8ce 	bl	8005098 <I2C_IsAcknowledgeFailed>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e02d      	b.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d021      	beq.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fe f957 	bl	80031c0 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d116      	bne.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e007      	b.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d1ca      	bne.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f76:	e02d      	b.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f88d 	bl	8005098 <I2C_IsAcknowledgeFailed>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e02d      	b.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d021      	beq.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f90:	f7fe f916 	bl	80031c0 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d302      	bcc.n	8004fa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d116      	bne.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e007      	b.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d1ca      	bne.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ff8:	e042      	b.n	8005080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d119      	bne.n	800503c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0210 	mvn.w	r2, #16
 8005010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e029      	b.n	8005090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fe f8c0 	bl	80031c0 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d116      	bne.n	8005080 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e007      	b.n	8005090 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d1b5      	bne.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ae:	d11b      	bne.n	80050e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f043 0204 	orr.w	r2, r3, #4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0bf      	b.n	800528a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8ba 	bl	8005298 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800513a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6999      	ldr	r1, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005150:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_LTDC_Init+0x19c>)
 800516c:	400b      	ands	r3, r1
 800516e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6899      	ldr	r1, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68d9      	ldr	r1, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b3e      	ldr	r3, [pc, #248]	; (8005294 <HAL_LTDC_Init+0x19c>)
 800519a:	400b      	ands	r3, r1
 800519c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68d9      	ldr	r1, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6919      	ldr	r1, [r3, #16]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b33      	ldr	r3, [pc, #204]	; (8005294 <HAL_LTDC_Init+0x19c>)
 80051c8:	400b      	ands	r3, r1
 80051ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6919      	ldr	r1, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6959      	ldr	r1, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_LTDC_Init+0x19c>)
 80051f6:	400b      	ands	r3, r1
 80051f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6959      	ldr	r1, [r3, #20]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800523a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0206 	orr.w	r2, r2, #6
 8005266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	f000f800 	.word	0xf000f800

08005298 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052ac:	b5b0      	push	{r4, r5, r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_LTDC_ConfigLayer+0x1a>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e02c      	b.n	8005320 <HAL_LTDC_ConfigLayer+0x74>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2134      	movs	r1, #52	; 0x34
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4614      	mov	r4, r2
 80052ea:	461d      	mov	r5, r3
 80052ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f83b 	bl	800537c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2201      	movs	r2, #1
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bdb0      	pop	{r4, r5, r7, pc}

08005328 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_LTDC_EnableDither+0x16>
 800533a:	2302      	movs	r3, #2
 800533c:	e016      	b.n	800536c <HAL_LTDC_EnableDither+0x44>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <HAL_LTDC_EnableDither+0x50>)
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	4a09      	ldr	r2, [pc, #36]	; (8005378 <HAL_LTDC_EnableDither+0x50>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005358:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40016800 	.word	0x40016800

0800537c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	; 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005398:	4413      	add	r3, r2
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	01db      	lsls	r3, r3, #7
 80053a8:	4413      	add	r3, r2
 80053aa:	3384      	adds	r3, #132	; 0x84
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	4611      	mov	r1, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	01d2      	lsls	r2, r2, #7
 80053b8:	440a      	add	r2, r1
 80053ba:	3284      	adds	r2, #132	; 0x84
 80053bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d2:	4413      	add	r3, r2
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	440b      	add	r3, r1
 80053e2:	3384      	adds	r3, #132	; 0x84
 80053e4:	4619      	mov	r1, r3
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053fa:	4413      	add	r3, r2
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	01db      	lsls	r3, r3, #7
 800540a:	4413      	add	r3, r2
 800540c:	3384      	adds	r3, #132	; 0x84
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	4611      	mov	r1, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	01d2      	lsls	r2, r2, #7
 800541a:	440a      	add	r2, r1
 800541c:	3284      	adds	r2, #132	; 0x84
 800541e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005422:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005432:	4413      	add	r3, r2
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4619      	mov	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	01db      	lsls	r3, r3, #7
 8005440:	440b      	add	r3, r1
 8005442:	3384      	adds	r3, #132	; 0x84
 8005444:	4619      	mov	r1, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	01db      	lsls	r3, r3, #7
 8005456:	4413      	add	r3, r2
 8005458:	3384      	adds	r3, #132	; 0x84
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	4611      	mov	r1, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	01d2      	lsls	r2, r2, #7
 8005466:	440a      	add	r2, r1
 8005468:	3284      	adds	r2, #132	; 0x84
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	01db      	lsls	r3, r3, #7
 800547a:	4413      	add	r3, r2
 800547c:	3384      	adds	r3, #132	; 0x84
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	01db      	lsls	r3, r3, #7
 80054ac:	4413      	add	r3, r2
 80054ae:	3384      	adds	r3, #132	; 0x84
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	01db      	lsls	r3, r3, #7
 80054bc:	4413      	add	r3, r2
 80054be:	3384      	adds	r3, #132	; 0x84
 80054c0:	461a      	mov	r2, r3
 80054c2:	2300      	movs	r3, #0
 80054c4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054cc:	461a      	mov	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4619      	mov	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	440b      	add	r3, r1
 80054e2:	3384      	adds	r3, #132	; 0x84
 80054e4:	4619      	mov	r1, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	01db      	lsls	r3, r3, #7
 80054f6:	4413      	add	r3, r2
 80054f8:	3384      	adds	r3, #132	; 0x84
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	4611      	mov	r1, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	01d2      	lsls	r2, r2, #7
 8005506:	440a      	add	r2, r1
 8005508:	3284      	adds	r2, #132	; 0x84
 800550a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800550e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	01db      	lsls	r3, r3, #7
 800551a:	4413      	add	r3, r2
 800551c:	3384      	adds	r3, #132	; 0x84
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	01db      	lsls	r3, r3, #7
 8005530:	4413      	add	r3, r2
 8005532:	3384      	adds	r3, #132	; 0x84
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	4611      	mov	r1, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	01d2      	lsls	r2, r2, #7
 8005540:	440a      	add	r2, r1
 8005542:	3284      	adds	r2, #132	; 0x84
 8005544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005548:	f023 0307 	bic.w	r3, r3, #7
 800554c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	6809      	ldr	r1, [r1, #0]
 800555a:	4608      	mov	r0, r1
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	01c9      	lsls	r1, r1, #7
 8005560:	4401      	add	r1, r0
 8005562:	3184      	adds	r1, #132	; 0x84
 8005564:	4313      	orrs	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	01db      	lsls	r3, r3, #7
 8005572:	4413      	add	r3, r2
 8005574:	3384      	adds	r3, #132	; 0x84
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	4413      	add	r3, r2
 8005584:	3384      	adds	r3, #132	; 0x84
 8005586:	461a      	mov	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	01db      	lsls	r3, r3, #7
 8005596:	4413      	add	r3, r2
 8005598:	3384      	adds	r3, #132	; 0x84
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80055aa:	2304      	movs	r3, #4
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	e01b      	b.n	80055e8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80055b8:	2303      	movs	r3, #3
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	e014      	b.n	80055e8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d00b      	beq.n	80055de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d007      	beq.n	80055de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d003      	beq.n	80055de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055da:	2b07      	cmp	r3, #7
 80055dc:	d102      	bne.n	80055e4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80055de:	2302      	movs	r3, #2
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	e001      	b.n	80055e8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80055e4:	2301      	movs	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	01db      	lsls	r3, r3, #7
 80055f2:	4413      	add	r3, r2
 80055f4:	3384      	adds	r3, #132	; 0x84
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	4611      	mov	r1, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	01d2      	lsls	r2, r2, #7
 8005602:	440a      	add	r2, r1
 8005604:	3284      	adds	r2, #132	; 0x84
 8005606:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800560a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	041a      	lsls	r2, r3, #16
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	1acb      	subs	r3, r1, r3
 8005622:	69f9      	ldr	r1, [r7, #28]
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	3303      	adds	r3, #3
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	6809      	ldr	r1, [r1, #0]
 800562e:	4608      	mov	r0, r1
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	01c9      	lsls	r1, r1, #7
 8005634:	4401      	add	r1, r0
 8005636:	3184      	adds	r1, #132	; 0x84
 8005638:	4313      	orrs	r3, r2
 800563a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	01db      	lsls	r3, r3, #7
 8005646:	4413      	add	r3, r2
 8005648:	3384      	adds	r3, #132	; 0x84
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	4611      	mov	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	01d2      	lsls	r2, r2, #7
 8005656:	440a      	add	r2, r1
 8005658:	3284      	adds	r2, #132	; 0x84
 800565a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	01db      	lsls	r3, r3, #7
 800566e:	4413      	add	r3, r2
 8005670:	3384      	adds	r3, #132	; 0x84
 8005672:	461a      	mov	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	01db      	lsls	r3, r3, #7
 8005684:	4413      	add	r3, r2
 8005686:	3384      	adds	r3, #132	; 0x84
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	4611      	mov	r1, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	01d2      	lsls	r2, r2, #7
 8005694:	440a      	add	r2, r1
 8005696:	3284      	adds	r2, #132	; 0x84
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6013      	str	r3, [r2, #0]
}
 800569e:	bf00      	nop
 80056a0:	3724      	adds	r7, #36	; 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000008 	.word	0x20000008

080056c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056c8:	f7ff fff0 	bl	80056ac <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	0a9b      	lsrs	r3, r3, #10
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4903      	ldr	r1, [pc, #12]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40023800 	.word	0x40023800
 80056e8:	080074fc 	.word	0x080074fc

080056ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005710:	2b00      	cmp	r3, #0
 8005712:	d105      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800571c:	2b00      	cmp	r3, #0
 800571e:	d075      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005720:	4b91      	ldr	r3, [pc, #580]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005726:	f7fd fd4b 	bl	80031c0 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800572e:	f7fd fd47 	bl	80031c0 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e189      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005740:	4b8a      	ldr	r3, [pc, #552]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d009      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	019a      	lsls	r2, r3, #6
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	071b      	lsls	r3, r3, #28
 8005764:	4981      	ldr	r1, [pc, #516]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01f      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005778:	4b7c      	ldr	r3, [pc, #496]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577e:	0f1b      	lsrs	r3, r3, #28
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	019a      	lsls	r2, r3, #6
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	431a      	orrs	r2, r3
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	071b      	lsls	r3, r3, #28
 8005798:	4974      	ldr	r1, [pc, #464]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057a0:	4b72      	ldr	r3, [pc, #456]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a6:	f023 021f 	bic.w	r2, r3, #31
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	496e      	ldr	r1, [pc, #440]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00d      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	019a      	lsls	r2, r3, #6
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	061b      	lsls	r3, r3, #24
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	071b      	lsls	r3, r3, #28
 80057d8:	4964      	ldr	r1, [pc, #400]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057e0:	4b61      	ldr	r3, [pc, #388]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057e6:	f7fd fceb 	bl	80031c0 <HAL_GetTick>
 80057ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ec:	e008      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057ee:	f7fd fce7 	bl	80031c0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e129      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005800:	4b5a      	ldr	r3, [pc, #360]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005820:	2b00      	cmp	r3, #0
 8005822:	d079      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005824:	4b52      	ldr	r3, [pc, #328]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800582a:	f7fd fcc9 	bl	80031c0 <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005832:	f7fd fcc5 	bl	80031c0 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e107      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005844:	4b49      	ldr	r3, [pc, #292]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800584c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005850:	d0ef      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800585e:	4b43      	ldr	r3, [pc, #268]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	0f1b      	lsrs	r3, r3, #28
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	019a      	lsls	r2, r3, #6
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	431a      	orrs	r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	071b      	lsls	r3, r3, #28
 800587e:	493b      	ldr	r1, [pc, #236]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005886:	4b39      	ldr	r3, [pc, #228]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	3b01      	subs	r3, #1
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	4934      	ldr	r1, [pc, #208]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01e      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058ac:	4b2f      	ldr	r3, [pc, #188]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	0e1b      	lsrs	r3, r3, #24
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	019a      	lsls	r2, r3, #6
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	061b      	lsls	r3, r3, #24
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	071b      	lsls	r3, r3, #28
 80058cc:	4927      	ldr	r1, [pc, #156]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058d4:	4b25      	ldr	r3, [pc, #148]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	4922      	ldr	r1, [pc, #136]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058ea:	4b21      	ldr	r3, [pc, #132]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058f0:	f7fd fc66 	bl	80031c0 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058f8:	f7fd fc62 	bl	80031c0 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0a4      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800590a:	4b18      	ldr	r3, [pc, #96]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005916:	d1ef      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 808b 	beq.w	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	4a0f      	ldr	r2, [pc, #60]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005934:	6413      	str	r3, [r2, #64]	; 0x40
 8005936:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005942:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a0b      	ldr	r2, [pc, #44]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800594e:	f7fd fc37 	bl	80031c0 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005954:	e010      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005956:	f7fd fc33 	bl	80031c0 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d909      	bls.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e075      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005968:	42470068 	.word	0x42470068
 800596c:	40023800 	.word	0x40023800
 8005970:	42470070 	.word	0x42470070
 8005974:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005978:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0e8      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005984:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02f      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d028      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a2:	4b2f      	ldr	r3, [pc, #188]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059ac:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059b2:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059b8:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059be:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d114      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059ca:	f7fd fbf9 	bl	80031c0 <HAL_GetTick>
 80059ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d0:	e00a      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fd fbf5 	bl	80031c0 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e035      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ee      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a00:	d10d      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a16:	4912      	ldr	r1, [pc, #72]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]
 8005a1c:	e005      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4a0f      	ldr	r2, [pc, #60]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a28:	6093      	str	r3, [r2, #8]
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a36:	490a      	ldr	r1, [pc, #40]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005a50:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40007000 	.word	0x40007000
 8005a60:	40023800 	.word	0x40023800
 8005a64:	42470e40 	.word	0x42470e40
 8005a68:	424711e0 	.word	0x424711e0

08005a6c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e025      	b.n	8005acc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f81d 	bl	8005ad4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f000 ff0f 	bl	80068d0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	f000 ff7a 	bl	80069b6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d101      	bne.n	8005b04 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
 8005b02:	e018      	b.n	8005b36 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 ffcd 	bl	8006ab4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d104      	bne.n	8005b2c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2205      	movs	r2, #5
 8005b26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005b2a:	e003      	b.n	8005b34 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d101      	bne.n	8005b58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
 8005b56:	e00e      	b.n	8005b76 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 ffe0 	bl	8006b2c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e05d      	b.n	8005c4c <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f87d 	bl	8005ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	ea42 0103 	orr.w	r1, r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	0c1b      	lsrs	r3, r3, #16
 8005c08:	f003 0104 	and.w	r1, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c20:	d104      	bne.n	8005c2c <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c2a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e01a      	b.n	8005c9c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f81a 	bl	8005cb8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_SPI_Transmit+0x22>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e140      	b.n	8005f70 <HAL_SPI_Transmit+0x2a4>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf6:	f7fd fa63 	bl	80031c0 <HAL_GetTick>
 8005cfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d002      	beq.n	8005d12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d10:	e125      	b.n	8005f5e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_SPI_Transmit+0x52>
 8005d18:	88fb      	ldrh	r3, [r7, #6]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d22:	e11c      	b.n	8005f5e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2203      	movs	r2, #3
 8005d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6a:	d107      	bne.n	8005d7c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d7a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d84:	d10f      	bne.n	8005da6 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005da4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d007      	beq.n	8005dc4 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dcc:	d14b      	bne.n	8005e66 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Transmit+0x110>
 8005dd6:	8afb      	ldrh	r3, [r7, #22]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d13e      	bne.n	8005e5a <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	881a      	ldrh	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e00:	e02b      	b.n	8005e5a <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d112      	bne.n	8005e36 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	881a      	ldrh	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	1c9a      	adds	r2, r3, #2
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e34:	e011      	b.n	8005e5a <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e36:	f7fd f9c3 	bl	80031c0 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d803      	bhi.n	8005e4e <HAL_SPI_Transmit+0x182>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d102      	bne.n	8005e54 <HAL_SPI_Transmit+0x188>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e58:	e081      	b.n	8005f5e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ce      	bne.n	8005e02 <HAL_SPI_Transmit+0x136>
 8005e64:	e04c      	b.n	8005f00 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_SPI_Transmit+0x1a8>
 8005e6e:	8afb      	ldrh	r3, [r7, #22]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d140      	bne.n	8005ef6 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	7812      	ldrb	r2, [r2, #0]
 8005e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e9a:	e02c      	b.n	8005ef6 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d113      	bne.n	8005ed2 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ed0:	e011      	b.n	8005ef6 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed2:	f7fd f975 	bl	80031c0 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d803      	bhi.n	8005eea <HAL_SPI_Transmit+0x21e>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d102      	bne.n	8005ef0 <HAL_SPI_Transmit+0x224>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ef4:	e033      	b.n	8005f5e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1cd      	bne.n	8005e9c <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f08:	d107      	bne.n	8005f1a <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f18:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fc94 	bl	800684c <SPI_EndRxTxTransaction>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e000      	b.n	8005f5e <HAL_SPI_Transmit+0x292>
  }

error:
 8005f5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f94:	d112      	bne.n	8005fbc <HAL_SPI_Receive+0x44>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10e      	bne.n	8005fbc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f95f 	bl	8006276 <HAL_SPI_TransmitReceive>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	e158      	b.n	800626e <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_SPI_Receive+0x52>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e151      	b.n	800626e <HAL_SPI_Receive+0x2f6>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd2:	f7fd f8f5 	bl	80031c0 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d002      	beq.n	8005fea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fe8:	e138      	b.n	800625c <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_Receive+0x7e>
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ffa:	e12f      	b.n	800625c <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2204      	movs	r2, #4
 8006000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006042:	d116      	bne.n	8006072 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006062:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607a:	d107      	bne.n	800608c <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800608a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d007      	beq.n	80060aa <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d162      	bne.n	8006178 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060b2:	e02e      	b.n	8006112 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d115      	bne.n	80060ee <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f103 020c 	add.w	r2, r3, #12
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ec:	e011      	b.n	8006112 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ee:	f7fd f867 	bl	80031c0 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d803      	bhi.n	8006106 <HAL_SPI_Receive+0x18e>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d102      	bne.n	800610c <HAL_SPI_Receive+0x194>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006110:	e0a4      	b.n	800625c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1cb      	bne.n	80060b4 <HAL_SPI_Receive+0x13c>
 800611c:	e031      	b.n	8006182 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d113      	bne.n	8006154 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	b292      	uxth	r2, r2
 8006138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006152:	e011      	b.n	8006178 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006154:	f7fd f834 	bl	80031c0 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d803      	bhi.n	800616c <HAL_SPI_Receive+0x1f4>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d102      	bne.n	8006172 <HAL_SPI_Receive+0x1fa>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006176:	e071      	b.n	800625c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1cd      	bne.n	800611e <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618a:	d142      	bne.n	8006212 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800619a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	2101      	movs	r1, #1
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fa81 	bl	80066ae <SPI_WaitFlagStateUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	75fb      	strb	r3, [r7, #23]
      goto error;
 80061b6:	e051      	b.n	800625c <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c0:	d107      	bne.n	80061d2 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	b292      	uxth	r2, r2
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e008      	b.n	80061e4 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f103 020c 	add.w	r2, r3, #12
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2201      	movs	r2, #1
 80061ec:	2101      	movs	r1, #1
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fa5d 	bl	80066ae <SPI_WaitFlagStateUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	f043 0202 	orr.w	r2, r3, #2
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	75fb      	strb	r3, [r7, #23]
      goto error;
 800620a:	e027      	b.n	800625c <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fab3 	bl	8006782 <SPI_EndRxTransaction>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b10      	cmp	r3, #16
 8006234:	d10a      	bne.n	800624c <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f043 0202 	orr.w	r2, r3, #2
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800624a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
 8006258:	e000      	b.n	800625c <HAL_SPI_Receive+0x2e4>
  }

error :
 800625a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b08e      	sub	sp, #56	; 0x38
 800627a:	af02      	add	r7, sp, #8
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
 8006282:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006284:	2301      	movs	r3, #1
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_SPI_TransmitReceive+0x26>
 8006298:	2302      	movs	r3, #2
 800629a:	e1f6      	b.n	800668a <HAL_SPI_TransmitReceive+0x414>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062a4:	f7fc ff8c 	bl	80031c0 <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062ba:	887b      	ldrh	r3, [r7, #2]
 80062bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d00f      	beq.n	80062e6 <HAL_SPI_TransmitReceive+0x70>
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062cc:	d107      	bne.n	80062de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <HAL_SPI_TransmitReceive+0x68>
 80062d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d003      	beq.n	80062e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062de:	2302      	movs	r3, #2
 80062e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062e4:	e1c7      	b.n	8006676 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x82>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x82>
 80062f2:	887b      	ldrh	r3, [r7, #2]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062fe:	e1ba      	b.n	8006676 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b04      	cmp	r3, #4
 800630a:	d003      	beq.n	8006314 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2205      	movs	r2, #5
 8006310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	887a      	ldrh	r2, [r7, #2]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	887a      	ldrh	r2, [r7, #2]
 800632a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	887a      	ldrh	r2, [r7, #2]
 8006336:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	887a      	ldrh	r2, [r7, #2]
 800633c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006352:	d10f      	bne.n	8006374 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006372:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637e:	2b40      	cmp	r3, #64	; 0x40
 8006380:	d007      	beq.n	8006392 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639a:	f040 808b 	bne.w	80064b4 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_TransmitReceive+0x136>
 80063a6:	8b7b      	ldrh	r3, [r7, #26]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d178      	bne.n	800649e <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	881a      	ldrh	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	1c9a      	adds	r2, r3, #2
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d0:	e065      	b.n	800649e <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d12d      	bne.n	800643c <HAL_SPI_TransmitReceive+0x1c6>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d028      	beq.n	800643c <HAL_SPI_TransmitReceive+0x1c6>
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d125      	bne.n	800643c <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	881a      	ldrh	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	1c9a      	adds	r2, r3, #2
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10c      	bne.n	800643c <HAL_SPI_TransmitReceive+0x1c6>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642a:	d107      	bne.n	800643c <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800643a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b01      	cmp	r3, #1
 8006448:	d119      	bne.n	800647e <HAL_SPI_TransmitReceive+0x208>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d014      	beq.n	800647e <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	b292      	uxth	r2, r2
 8006460:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	1c9a      	adds	r2, r3, #2
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800647a:	2301      	movs	r3, #1
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800647e:	f7fc fe9f 	bl	80031c0 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648a:	429a      	cmp	r2, r3
 800648c:	d807      	bhi.n	800649e <HAL_SPI_TransmitReceive+0x228>
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d003      	beq.n	800649e <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800649c:	e0eb      	b.n	8006676 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d194      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x15c>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d18f      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x15c>
 80064b2:	e08e      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_TransmitReceive+0x24c>
 80064bc:	8b7b      	ldrh	r3, [r7, #26]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d17d      	bne.n	80065be <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e8:	e069      	b.n	80065be <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d12e      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x2e0>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d029      	beq.n	8006556 <HAL_SPI_TransmitReceive+0x2e0>
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d126      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	7812      	ldrb	r2, [r2, #0]
 8006514:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10c      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x2e0>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006544:	d107      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006554:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	d119      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x322>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d014      	beq.n	8006598 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006594:	2301      	movs	r3, #1
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006598:	f7fc fe12 	bl	80031c0 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d803      	bhi.n	80065b0 <HAL_SPI_TransmitReceive+0x33a>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d102      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x340>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065bc:	e05b      	b.n	8006676 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d190      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x274>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d18b      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065da:	d117      	bne.n	800660c <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	2201      	movs	r2, #1
 80065e4:	2101      	movs	r1, #1
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f861 	bl	80066ae <SPI_WaitFlagStateUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	f043 0202 	orr.w	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8006604:	e037      	b.n	8006676 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b10      	cmp	r3, #16
 8006618:	d10d      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	f043 0202 	orr.w	r2, r3, #2
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800662e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006638:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f906 	bl	800684c <SPI_EndRxTxTransaction>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006652:	e010      	b.n	8006676 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	e000      	b.n	8006676 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8006674:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800668a:	4618      	mov	r0, r3
 800668c:	3730      	adds	r7, #48	; 0x30
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066a0:	b2db      	uxtb	r3, r3
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	603b      	str	r3, [r7, #0]
 80066ba:	4613      	mov	r3, r2
 80066bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066be:	e04c      	b.n	800675a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d048      	beq.n	800675a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80066c8:	f7fc fd7a 	bl	80031c0 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d902      	bls.n	80066de <SPI_WaitFlagStateUntilTimeout+0x30>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d13d      	bne.n	800675a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f6:	d111      	bne.n	800671c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006700:	d004      	beq.n	800670c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d107      	bne.n	800671c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800671a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006724:	d10f      	bne.n	8006746 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e00f      	b.n	800677a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4013      	ands	r3, r2
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	429a      	cmp	r2, r3
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	429a      	cmp	r2, r3
 8006776:	d1a3      	bne.n	80066c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af02      	add	r7, sp, #8
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006796:	d111      	bne.n	80067bc <SPI_EndRxTransaction+0x3a>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a0:	d004      	beq.n	80067ac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067aa:	d107      	bne.n	80067bc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c4:	d12a      	bne.n	800681c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	d012      	beq.n	80067f6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2200      	movs	r2, #0
 80067d8:	2180      	movs	r1, #128	; 0x80
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ff67 	bl	80066ae <SPI_WaitFlagStateUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d02d      	beq.n	8006842 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e026      	b.n	8006844 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	2101      	movs	r1, #1
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff ff54 	bl	80066ae <SPI_WaitFlagStateUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01a      	beq.n	8006842 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	f043 0220 	orr.w	r2, r3, #32
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e013      	b.n	8006844 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	2101      	movs	r1, #1
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff ff41 	bl	80066ae <SPI_WaitFlagStateUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e000      	b.n	8006844 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <SPI_EndRxTxTransaction+0x7c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <SPI_EndRxTxTransaction+0x80>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	0d5b      	lsrs	r3, r3, #21
 8006864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006876:	d112      	bne.n	800689e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff ff13 	bl	80066ae <SPI_WaitFlagStateUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	f043 0220 	orr.w	r2, r3, #32
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e00f      	b.n	80068be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b4:	2b80      	cmp	r3, #128	; 0x80
 80068b6:	d0f2      	beq.n	800689e <SPI_EndRxTxTransaction+0x52>
 80068b8:	e000      	b.n	80068bc <SPI_EndRxTxTransaction+0x70>
        break;
 80068ba:	bf00      	nop
  }

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000008 	.word	0x20000008
 80068cc:	165e9f81 	.word	0x165e9f81

080068d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d029      	beq.n	800693e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068fa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006904:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800690a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006910:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006916:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800691c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006922:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006928:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800692e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e034      	b.n	80069a8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800694a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006954:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800695a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800696e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006972:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800697c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006982:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006988:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800698e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006994:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b087      	sub	sp, #28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d02e      	beq.n	8006a2e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069dc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80069ec:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80069f6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006a00:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a0a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006a14:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	609a      	str	r2, [r3, #8]
 8006a2c:	e03b      	b.n	8006aa6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a3e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a50:	4313      	orrs	r3, r2
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a64:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a74:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006a7e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006a88:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a92:	4313      	orrs	r3, r2
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006ad0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006ada:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006aec:	f7fc fb68 	bl	80031c0 <HAL_GetTick>
 8006af0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006af2:	e010      	b.n	8006b16 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d00c      	beq.n	8006b16 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d007      	beq.n	8006b12 <FMC_SDRAM_SendCommand+0x5e>
 8006b02:	f7fc fb5d 	bl	80031c0 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d201      	bcs.n	8006b16 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e006      	b.n	8006b24 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d0e8      	beq.n	8006af4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <sniprintf>:
 8006b54:	b40c      	push	{r2, r3}
 8006b56:	b530      	push	{r4, r5, lr}
 8006b58:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <sniprintf+0x64>)
 8006b5a:	1e0c      	subs	r4, r1, #0
 8006b5c:	681d      	ldr	r5, [r3, #0]
 8006b5e:	b09d      	sub	sp, #116	; 0x74
 8006b60:	da08      	bge.n	8006b74 <sniprintf+0x20>
 8006b62:	238b      	movs	r3, #139	; 0x8b
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6a:	b01d      	add	sp, #116	; 0x74
 8006b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b70:	b002      	add	sp, #8
 8006b72:	4770      	bx	lr
 8006b74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b7c:	bf14      	ite	ne
 8006b7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b82:	4623      	moveq	r3, r4
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b8c:	9002      	str	r0, [sp, #8]
 8006b8e:	9006      	str	r0, [sp, #24]
 8006b90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b96:	ab21      	add	r3, sp, #132	; 0x84
 8006b98:	a902      	add	r1, sp, #8
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	f000 f985 	bl	8006eac <_svfiprintf_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	bfbc      	itt	lt
 8006ba6:	238b      	movlt	r3, #139	; 0x8b
 8006ba8:	602b      	strlt	r3, [r5, #0]
 8006baa:	2c00      	cmp	r4, #0
 8006bac:	d0dd      	beq.n	8006b6a <sniprintf+0x16>
 8006bae:	9b02      	ldr	r3, [sp, #8]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	e7d9      	b.n	8006b6a <sniprintf+0x16>
 8006bb6:	bf00      	nop
 8006bb8:	200000dc 	.word	0x200000dc

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4d0d      	ldr	r5, [pc, #52]	; (8006bf4 <__libc_init_array+0x38>)
 8006bc0:	4c0d      	ldr	r4, [pc, #52]	; (8006bf8 <__libc_init_array+0x3c>)
 8006bc2:	1b64      	subs	r4, r4, r5
 8006bc4:	10a4      	asrs	r4, r4, #2
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	42a6      	cmp	r6, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	4d0b      	ldr	r5, [pc, #44]	; (8006bfc <__libc_init_array+0x40>)
 8006bce:	4c0c      	ldr	r4, [pc, #48]	; (8006c00 <__libc_init_array+0x44>)
 8006bd0:	f000 fc78 	bl	80074c4 <_init>
 8006bd4:	1b64      	subs	r4, r4, r5
 8006bd6:	10a4      	asrs	r4, r4, #2
 8006bd8:	2600      	movs	r6, #0
 8006bda:	42a6      	cmp	r6, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be4:	4798      	blx	r3
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bee:	4798      	blx	r3
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	08008ffc 	.word	0x08008ffc
 8006bf8:	08008ffc 	.word	0x08008ffc
 8006bfc:	08008ffc 	.word	0x08008ffc
 8006c00:	08009000 	.word	0x08009000

08006c04 <__retarget_lock_acquire_recursive>:
 8006c04:	4770      	bx	lr

08006c06 <__retarget_lock_release_recursive>:
 8006c06:	4770      	bx	lr

08006c08 <_free_r>:
 8006c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c0a:	2900      	cmp	r1, #0
 8006c0c:	d044      	beq.n	8006c98 <_free_r+0x90>
 8006c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c12:	9001      	str	r0, [sp, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f1a1 0404 	sub.w	r4, r1, #4
 8006c1a:	bfb8      	it	lt
 8006c1c:	18e4      	addlt	r4, r4, r3
 8006c1e:	f000 f8df 	bl	8006de0 <__malloc_lock>
 8006c22:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <_free_r+0x94>)
 8006c24:	9801      	ldr	r0, [sp, #4]
 8006c26:	6813      	ldr	r3, [r2, #0]
 8006c28:	b933      	cbnz	r3, 8006c38 <_free_r+0x30>
 8006c2a:	6063      	str	r3, [r4, #4]
 8006c2c:	6014      	str	r4, [r2, #0]
 8006c2e:	b003      	add	sp, #12
 8006c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c34:	f000 b8da 	b.w	8006dec <__malloc_unlock>
 8006c38:	42a3      	cmp	r3, r4
 8006c3a:	d908      	bls.n	8006c4e <_free_r+0x46>
 8006c3c:	6825      	ldr	r5, [r4, #0]
 8006c3e:	1961      	adds	r1, r4, r5
 8006c40:	428b      	cmp	r3, r1
 8006c42:	bf01      	itttt	eq
 8006c44:	6819      	ldreq	r1, [r3, #0]
 8006c46:	685b      	ldreq	r3, [r3, #4]
 8006c48:	1949      	addeq	r1, r1, r5
 8006c4a:	6021      	streq	r1, [r4, #0]
 8006c4c:	e7ed      	b.n	8006c2a <_free_r+0x22>
 8006c4e:	461a      	mov	r2, r3
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	b10b      	cbz	r3, 8006c58 <_free_r+0x50>
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	d9fa      	bls.n	8006c4e <_free_r+0x46>
 8006c58:	6811      	ldr	r1, [r2, #0]
 8006c5a:	1855      	adds	r5, r2, r1
 8006c5c:	42a5      	cmp	r5, r4
 8006c5e:	d10b      	bne.n	8006c78 <_free_r+0x70>
 8006c60:	6824      	ldr	r4, [r4, #0]
 8006c62:	4421      	add	r1, r4
 8006c64:	1854      	adds	r4, r2, r1
 8006c66:	42a3      	cmp	r3, r4
 8006c68:	6011      	str	r1, [r2, #0]
 8006c6a:	d1e0      	bne.n	8006c2e <_free_r+0x26>
 8006c6c:	681c      	ldr	r4, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	6053      	str	r3, [r2, #4]
 8006c72:	440c      	add	r4, r1
 8006c74:	6014      	str	r4, [r2, #0]
 8006c76:	e7da      	b.n	8006c2e <_free_r+0x26>
 8006c78:	d902      	bls.n	8006c80 <_free_r+0x78>
 8006c7a:	230c      	movs	r3, #12
 8006c7c:	6003      	str	r3, [r0, #0]
 8006c7e:	e7d6      	b.n	8006c2e <_free_r+0x26>
 8006c80:	6825      	ldr	r5, [r4, #0]
 8006c82:	1961      	adds	r1, r4, r5
 8006c84:	428b      	cmp	r3, r1
 8006c86:	bf04      	itt	eq
 8006c88:	6819      	ldreq	r1, [r3, #0]
 8006c8a:	685b      	ldreq	r3, [r3, #4]
 8006c8c:	6063      	str	r3, [r4, #4]
 8006c8e:	bf04      	itt	eq
 8006c90:	1949      	addeq	r1, r1, r5
 8006c92:	6021      	streq	r1, [r4, #0]
 8006c94:	6054      	str	r4, [r2, #4]
 8006c96:	e7ca      	b.n	8006c2e <_free_r+0x26>
 8006c98:	b003      	add	sp, #12
 8006c9a:	bd30      	pop	{r4, r5, pc}
 8006c9c:	200006f8 	.word	0x200006f8

08006ca0 <sbrk_aligned>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	4e0e      	ldr	r6, [pc, #56]	; (8006cdc <sbrk_aligned+0x3c>)
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	6831      	ldr	r1, [r6, #0]
 8006ca8:	4605      	mov	r5, r0
 8006caa:	b911      	cbnz	r1, 8006cb2 <sbrk_aligned+0x12>
 8006cac:	f000 fba6 	bl	80073fc <_sbrk_r>
 8006cb0:	6030      	str	r0, [r6, #0]
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 fba1 	bl	80073fc <_sbrk_r>
 8006cba:	1c43      	adds	r3, r0, #1
 8006cbc:	d00a      	beq.n	8006cd4 <sbrk_aligned+0x34>
 8006cbe:	1cc4      	adds	r4, r0, #3
 8006cc0:	f024 0403 	bic.w	r4, r4, #3
 8006cc4:	42a0      	cmp	r0, r4
 8006cc6:	d007      	beq.n	8006cd8 <sbrk_aligned+0x38>
 8006cc8:	1a21      	subs	r1, r4, r0
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f000 fb96 	bl	80073fc <_sbrk_r>
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d101      	bne.n	8006cd8 <sbrk_aligned+0x38>
 8006cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8006cd8:	4620      	mov	r0, r4
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	200006fc 	.word	0x200006fc

08006ce0 <_malloc_r>:
 8006ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	1ccd      	adds	r5, r1, #3
 8006ce6:	f025 0503 	bic.w	r5, r5, #3
 8006cea:	3508      	adds	r5, #8
 8006cec:	2d0c      	cmp	r5, #12
 8006cee:	bf38      	it	cc
 8006cf0:	250c      	movcc	r5, #12
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	db01      	blt.n	8006cfc <_malloc_r+0x1c>
 8006cf8:	42a9      	cmp	r1, r5
 8006cfa:	d905      	bls.n	8006d08 <_malloc_r+0x28>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	2600      	movs	r6, #0
 8006d02:	4630      	mov	r0, r6
 8006d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ddc <_malloc_r+0xfc>
 8006d0c:	f000 f868 	bl	8006de0 <__malloc_lock>
 8006d10:	f8d8 3000 	ldr.w	r3, [r8]
 8006d14:	461c      	mov	r4, r3
 8006d16:	bb5c      	cbnz	r4, 8006d70 <_malloc_r+0x90>
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f7ff ffc0 	bl	8006ca0 <sbrk_aligned>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	4604      	mov	r4, r0
 8006d24:	d155      	bne.n	8006dd2 <_malloc_r+0xf2>
 8006d26:	f8d8 4000 	ldr.w	r4, [r8]
 8006d2a:	4626      	mov	r6, r4
 8006d2c:	2e00      	cmp	r6, #0
 8006d2e:	d145      	bne.n	8006dbc <_malloc_r+0xdc>
 8006d30:	2c00      	cmp	r4, #0
 8006d32:	d048      	beq.n	8006dc6 <_malloc_r+0xe6>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	4631      	mov	r1, r6
 8006d38:	4638      	mov	r0, r7
 8006d3a:	eb04 0903 	add.w	r9, r4, r3
 8006d3e:	f000 fb5d 	bl	80073fc <_sbrk_r>
 8006d42:	4581      	cmp	r9, r0
 8006d44:	d13f      	bne.n	8006dc6 <_malloc_r+0xe6>
 8006d46:	6821      	ldr	r1, [r4, #0]
 8006d48:	1a6d      	subs	r5, r5, r1
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f7ff ffa7 	bl	8006ca0 <sbrk_aligned>
 8006d52:	3001      	adds	r0, #1
 8006d54:	d037      	beq.n	8006dc6 <_malloc_r+0xe6>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	442b      	add	r3, r5
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d038      	beq.n	8006dd6 <_malloc_r+0xf6>
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	42a2      	cmp	r2, r4
 8006d68:	d12b      	bne.n	8006dc2 <_malloc_r+0xe2>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e00f      	b.n	8006d90 <_malloc_r+0xb0>
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	1b52      	subs	r2, r2, r5
 8006d74:	d41f      	bmi.n	8006db6 <_malloc_r+0xd6>
 8006d76:	2a0b      	cmp	r2, #11
 8006d78:	d917      	bls.n	8006daa <_malloc_r+0xca>
 8006d7a:	1961      	adds	r1, r4, r5
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	6025      	str	r5, [r4, #0]
 8006d80:	bf18      	it	ne
 8006d82:	6059      	strne	r1, [r3, #4]
 8006d84:	6863      	ldr	r3, [r4, #4]
 8006d86:	bf08      	it	eq
 8006d88:	f8c8 1000 	streq.w	r1, [r8]
 8006d8c:	5162      	str	r2, [r4, r5]
 8006d8e:	604b      	str	r3, [r1, #4]
 8006d90:	4638      	mov	r0, r7
 8006d92:	f104 060b 	add.w	r6, r4, #11
 8006d96:	f000 f829 	bl	8006dec <__malloc_unlock>
 8006d9a:	f026 0607 	bic.w	r6, r6, #7
 8006d9e:	1d23      	adds	r3, r4, #4
 8006da0:	1af2      	subs	r2, r6, r3
 8006da2:	d0ae      	beq.n	8006d02 <_malloc_r+0x22>
 8006da4:	1b9b      	subs	r3, r3, r6
 8006da6:	50a3      	str	r3, [r4, r2]
 8006da8:	e7ab      	b.n	8006d02 <_malloc_r+0x22>
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	6862      	ldr	r2, [r4, #4]
 8006dae:	d1dd      	bne.n	8006d6c <_malloc_r+0x8c>
 8006db0:	f8c8 2000 	str.w	r2, [r8]
 8006db4:	e7ec      	b.n	8006d90 <_malloc_r+0xb0>
 8006db6:	4623      	mov	r3, r4
 8006db8:	6864      	ldr	r4, [r4, #4]
 8006dba:	e7ac      	b.n	8006d16 <_malloc_r+0x36>
 8006dbc:	4634      	mov	r4, r6
 8006dbe:	6876      	ldr	r6, [r6, #4]
 8006dc0:	e7b4      	b.n	8006d2c <_malloc_r+0x4c>
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	e7cc      	b.n	8006d60 <_malloc_r+0x80>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f000 f80e 	bl	8006dec <__malloc_unlock>
 8006dd0:	e797      	b.n	8006d02 <_malloc_r+0x22>
 8006dd2:	6025      	str	r5, [r4, #0]
 8006dd4:	e7dc      	b.n	8006d90 <_malloc_r+0xb0>
 8006dd6:	605b      	str	r3, [r3, #4]
 8006dd8:	deff      	udf	#255	; 0xff
 8006dda:	bf00      	nop
 8006ddc:	200006f8 	.word	0x200006f8

08006de0 <__malloc_lock>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__malloc_lock+0x8>)
 8006de2:	f7ff bf0f 	b.w	8006c04 <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	200006f4 	.word	0x200006f4

08006dec <__malloc_unlock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_unlock+0x8>)
 8006dee:	f7ff bf0a 	b.w	8006c06 <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	200006f4 	.word	0x200006f4

08006df8 <__ssputs_r>:
 8006df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	688e      	ldr	r6, [r1, #8]
 8006dfe:	461f      	mov	r7, r3
 8006e00:	42be      	cmp	r6, r7
 8006e02:	680b      	ldr	r3, [r1, #0]
 8006e04:	4682      	mov	sl, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	4690      	mov	r8, r2
 8006e0a:	d82c      	bhi.n	8006e66 <__ssputs_r+0x6e>
 8006e0c:	898a      	ldrh	r2, [r1, #12]
 8006e0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e12:	d026      	beq.n	8006e62 <__ssputs_r+0x6a>
 8006e14:	6965      	ldr	r5, [r4, #20]
 8006e16:	6909      	ldr	r1, [r1, #16]
 8006e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e1c:	eba3 0901 	sub.w	r9, r3, r1
 8006e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e24:	1c7b      	adds	r3, r7, #1
 8006e26:	444b      	add	r3, r9
 8006e28:	106d      	asrs	r5, r5, #1
 8006e2a:	429d      	cmp	r5, r3
 8006e2c:	bf38      	it	cc
 8006e2e:	461d      	movcc	r5, r3
 8006e30:	0553      	lsls	r3, r2, #21
 8006e32:	d527      	bpl.n	8006e84 <__ssputs_r+0x8c>
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7ff ff53 	bl	8006ce0 <_malloc_r>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	b360      	cbz	r0, 8006e98 <__ssputs_r+0xa0>
 8006e3e:	6921      	ldr	r1, [r4, #16]
 8006e40:	464a      	mov	r2, r9
 8006e42:	f000 faeb 	bl	800741c <memcpy>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	6126      	str	r6, [r4, #16]
 8006e54:	6165      	str	r5, [r4, #20]
 8006e56:	444e      	add	r6, r9
 8006e58:	eba5 0509 	sub.w	r5, r5, r9
 8006e5c:	6026      	str	r6, [r4, #0]
 8006e5e:	60a5      	str	r5, [r4, #8]
 8006e60:	463e      	mov	r6, r7
 8006e62:	42be      	cmp	r6, r7
 8006e64:	d900      	bls.n	8006e68 <__ssputs_r+0x70>
 8006e66:	463e      	mov	r6, r7
 8006e68:	6820      	ldr	r0, [r4, #0]
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	f000 faab 	bl	80073c8 <memmove>
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	1b9b      	subs	r3, r3, r6
 8006e76:	60a3      	str	r3, [r4, #8]
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	4433      	add	r3, r6
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e84:	462a      	mov	r2, r5
 8006e86:	f000 fad7 	bl	8007438 <_realloc_r>
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1e0      	bne.n	8006e52 <__ssputs_r+0x5a>
 8006e90:	6921      	ldr	r1, [r4, #16]
 8006e92:	4650      	mov	r0, sl
 8006e94:	f7ff feb8 	bl	8006c08 <_free_r>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	f8ca 3000 	str.w	r3, [sl]
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	e7e9      	b.n	8006e80 <__ssputs_r+0x88>

08006eac <_svfiprintf_r>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	4698      	mov	r8, r3
 8006eb2:	898b      	ldrh	r3, [r1, #12]
 8006eb4:	061b      	lsls	r3, r3, #24
 8006eb6:	b09d      	sub	sp, #116	; 0x74
 8006eb8:	4607      	mov	r7, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	d50e      	bpl.n	8006ede <_svfiprintf_r+0x32>
 8006ec0:	690b      	ldr	r3, [r1, #16]
 8006ec2:	b963      	cbnz	r3, 8006ede <_svfiprintf_r+0x32>
 8006ec4:	2140      	movs	r1, #64	; 0x40
 8006ec6:	f7ff ff0b 	bl	8006ce0 <_malloc_r>
 8006eca:	6028      	str	r0, [r5, #0]
 8006ecc:	6128      	str	r0, [r5, #16]
 8006ece:	b920      	cbnz	r0, 8006eda <_svfiprintf_r+0x2e>
 8006ed0:	230c      	movs	r3, #12
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	e0d0      	b.n	800707c <_svfiprintf_r+0x1d0>
 8006eda:	2340      	movs	r3, #64	; 0x40
 8006edc:	616b      	str	r3, [r5, #20]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee2:	2320      	movs	r3, #32
 8006ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eec:	2330      	movs	r3, #48	; 0x30
 8006eee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007094 <_svfiprintf_r+0x1e8>
 8006ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ef6:	f04f 0901 	mov.w	r9, #1
 8006efa:	4623      	mov	r3, r4
 8006efc:	469a      	mov	sl, r3
 8006efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f02:	b10a      	cbz	r2, 8006f08 <_svfiprintf_r+0x5c>
 8006f04:	2a25      	cmp	r2, #37	; 0x25
 8006f06:	d1f9      	bne.n	8006efc <_svfiprintf_r+0x50>
 8006f08:	ebba 0b04 	subs.w	fp, sl, r4
 8006f0c:	d00b      	beq.n	8006f26 <_svfiprintf_r+0x7a>
 8006f0e:	465b      	mov	r3, fp
 8006f10:	4622      	mov	r2, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7ff ff6f 	bl	8006df8 <__ssputs_r>
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	f000 80a9 	beq.w	8007072 <_svfiprintf_r+0x1c6>
 8006f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f22:	445a      	add	r2, fp
 8006f24:	9209      	str	r2, [sp, #36]	; 0x24
 8006f26:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80a1 	beq.w	8007072 <_svfiprintf_r+0x1c6>
 8006f30:	2300      	movs	r3, #0
 8006f32:	f04f 32ff 	mov.w	r2, #4294967295
 8006f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f3a:	f10a 0a01 	add.w	sl, sl, #1
 8006f3e:	9304      	str	r3, [sp, #16]
 8006f40:	9307      	str	r3, [sp, #28]
 8006f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f46:	931a      	str	r3, [sp, #104]	; 0x68
 8006f48:	4654      	mov	r4, sl
 8006f4a:	2205      	movs	r2, #5
 8006f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f50:	4850      	ldr	r0, [pc, #320]	; (8007094 <_svfiprintf_r+0x1e8>)
 8006f52:	f7f9 f94d 	bl	80001f0 <memchr>
 8006f56:	9a04      	ldr	r2, [sp, #16]
 8006f58:	b9d8      	cbnz	r0, 8006f92 <_svfiprintf_r+0xe6>
 8006f5a:	06d0      	lsls	r0, r2, #27
 8006f5c:	bf44      	itt	mi
 8006f5e:	2320      	movmi	r3, #32
 8006f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f64:	0711      	lsls	r1, r2, #28
 8006f66:	bf44      	itt	mi
 8006f68:	232b      	movmi	r3, #43	; 0x2b
 8006f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f72:	2b2a      	cmp	r3, #42	; 0x2a
 8006f74:	d015      	beq.n	8006fa2 <_svfiprintf_r+0xf6>
 8006f76:	9a07      	ldr	r2, [sp, #28]
 8006f78:	4654      	mov	r4, sl
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f04f 0c0a 	mov.w	ip, #10
 8006f80:	4621      	mov	r1, r4
 8006f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f86:	3b30      	subs	r3, #48	; 0x30
 8006f88:	2b09      	cmp	r3, #9
 8006f8a:	d94d      	bls.n	8007028 <_svfiprintf_r+0x17c>
 8006f8c:	b1b0      	cbz	r0, 8006fbc <_svfiprintf_r+0x110>
 8006f8e:	9207      	str	r2, [sp, #28]
 8006f90:	e014      	b.n	8006fbc <_svfiprintf_r+0x110>
 8006f92:	eba0 0308 	sub.w	r3, r0, r8
 8006f96:	fa09 f303 	lsl.w	r3, r9, r3
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	46a2      	mov	sl, r4
 8006fa0:	e7d2      	b.n	8006f48 <_svfiprintf_r+0x9c>
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	1d19      	adds	r1, r3, #4
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	9103      	str	r1, [sp, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bfbb      	ittet	lt
 8006fae:	425b      	neglt	r3, r3
 8006fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8006fb4:	9307      	strge	r3, [sp, #28]
 8006fb6:	9307      	strlt	r3, [sp, #28]
 8006fb8:	bfb8      	it	lt
 8006fba:	9204      	strlt	r2, [sp, #16]
 8006fbc:	7823      	ldrb	r3, [r4, #0]
 8006fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc0:	d10c      	bne.n	8006fdc <_svfiprintf_r+0x130>
 8006fc2:	7863      	ldrb	r3, [r4, #1]
 8006fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc6:	d134      	bne.n	8007032 <_svfiprintf_r+0x186>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	9203      	str	r2, [sp, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bfb8      	it	lt
 8006fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fd8:	3402      	adds	r4, #2
 8006fda:	9305      	str	r3, [sp, #20]
 8006fdc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80070a4 <_svfiprintf_r+0x1f8>
 8006fe0:	7821      	ldrb	r1, [r4, #0]
 8006fe2:	2203      	movs	r2, #3
 8006fe4:	4650      	mov	r0, sl
 8006fe6:	f7f9 f903 	bl	80001f0 <memchr>
 8006fea:	b138      	cbz	r0, 8006ffc <_svfiprintf_r+0x150>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	eba0 000a 	sub.w	r0, r0, sl
 8006ff2:	2240      	movs	r2, #64	; 0x40
 8006ff4:	4082      	lsls	r2, r0
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	3401      	adds	r4, #1
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007000:	4825      	ldr	r0, [pc, #148]	; (8007098 <_svfiprintf_r+0x1ec>)
 8007002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007006:	2206      	movs	r2, #6
 8007008:	f7f9 f8f2 	bl	80001f0 <memchr>
 800700c:	2800      	cmp	r0, #0
 800700e:	d038      	beq.n	8007082 <_svfiprintf_r+0x1d6>
 8007010:	4b22      	ldr	r3, [pc, #136]	; (800709c <_svfiprintf_r+0x1f0>)
 8007012:	bb1b      	cbnz	r3, 800705c <_svfiprintf_r+0x1b0>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	3307      	adds	r3, #7
 8007018:	f023 0307 	bic.w	r3, r3, #7
 800701c:	3308      	adds	r3, #8
 800701e:	9303      	str	r3, [sp, #12]
 8007020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007022:	4433      	add	r3, r6
 8007024:	9309      	str	r3, [sp, #36]	; 0x24
 8007026:	e768      	b.n	8006efa <_svfiprintf_r+0x4e>
 8007028:	fb0c 3202 	mla	r2, ip, r2, r3
 800702c:	460c      	mov	r4, r1
 800702e:	2001      	movs	r0, #1
 8007030:	e7a6      	b.n	8006f80 <_svfiprintf_r+0xd4>
 8007032:	2300      	movs	r3, #0
 8007034:	3401      	adds	r4, #1
 8007036:	9305      	str	r3, [sp, #20]
 8007038:	4619      	mov	r1, r3
 800703a:	f04f 0c0a 	mov.w	ip, #10
 800703e:	4620      	mov	r0, r4
 8007040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007044:	3a30      	subs	r2, #48	; 0x30
 8007046:	2a09      	cmp	r2, #9
 8007048:	d903      	bls.n	8007052 <_svfiprintf_r+0x1a6>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0c6      	beq.n	8006fdc <_svfiprintf_r+0x130>
 800704e:	9105      	str	r1, [sp, #20]
 8007050:	e7c4      	b.n	8006fdc <_svfiprintf_r+0x130>
 8007052:	fb0c 2101 	mla	r1, ip, r1, r2
 8007056:	4604      	mov	r4, r0
 8007058:	2301      	movs	r3, #1
 800705a:	e7f0      	b.n	800703e <_svfiprintf_r+0x192>
 800705c:	ab03      	add	r3, sp, #12
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	462a      	mov	r2, r5
 8007062:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <_svfiprintf_r+0x1f4>)
 8007064:	a904      	add	r1, sp, #16
 8007066:	4638      	mov	r0, r7
 8007068:	f3af 8000 	nop.w
 800706c:	1c42      	adds	r2, r0, #1
 800706e:	4606      	mov	r6, r0
 8007070:	d1d6      	bne.n	8007020 <_svfiprintf_r+0x174>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	065b      	lsls	r3, r3, #25
 8007076:	f53f af2d 	bmi.w	8006ed4 <_svfiprintf_r+0x28>
 800707a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800707c:	b01d      	add	sp, #116	; 0x74
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	ab03      	add	r3, sp, #12
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	462a      	mov	r2, r5
 8007088:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <_svfiprintf_r+0x1f4>)
 800708a:	a904      	add	r1, sp, #16
 800708c:	4638      	mov	r0, r7
 800708e:	f000 f879 	bl	8007184 <_printf_i>
 8007092:	e7eb      	b.n	800706c <_svfiprintf_r+0x1c0>
 8007094:	08008fc8 	.word	0x08008fc8
 8007098:	08008fd2 	.word	0x08008fd2
 800709c:	00000000 	.word	0x00000000
 80070a0:	08006df9 	.word	0x08006df9
 80070a4:	08008fce 	.word	0x08008fce

080070a8 <_printf_common>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	4616      	mov	r6, r2
 80070ae:	4699      	mov	r9, r3
 80070b0:	688a      	ldr	r2, [r1, #8]
 80070b2:	690b      	ldr	r3, [r1, #16]
 80070b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	bfb8      	it	lt
 80070bc:	4613      	movlt	r3, r2
 80070be:	6033      	str	r3, [r6, #0]
 80070c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c4:	4607      	mov	r7, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	b10a      	cbz	r2, 80070ce <_printf_common+0x26>
 80070ca:	3301      	adds	r3, #1
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	0699      	lsls	r1, r3, #26
 80070d2:	bf42      	ittt	mi
 80070d4:	6833      	ldrmi	r3, [r6, #0]
 80070d6:	3302      	addmi	r3, #2
 80070d8:	6033      	strmi	r3, [r6, #0]
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	f015 0506 	ands.w	r5, r5, #6
 80070e0:	d106      	bne.n	80070f0 <_printf_common+0x48>
 80070e2:	f104 0a19 	add.w	sl, r4, #25
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	6832      	ldr	r2, [r6, #0]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	dc26      	bgt.n	800713e <_printf_common+0x96>
 80070f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f4:	1e13      	subs	r3, r2, #0
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	bf18      	it	ne
 80070fa:	2301      	movne	r3, #1
 80070fc:	0692      	lsls	r2, r2, #26
 80070fe:	d42b      	bmi.n	8007158 <_printf_common+0xb0>
 8007100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007104:	4649      	mov	r1, r9
 8007106:	4638      	mov	r0, r7
 8007108:	47c0      	blx	r8
 800710a:	3001      	adds	r0, #1
 800710c:	d01e      	beq.n	800714c <_printf_common+0xa4>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	6922      	ldr	r2, [r4, #16]
 8007112:	f003 0306 	and.w	r3, r3, #6
 8007116:	2b04      	cmp	r3, #4
 8007118:	bf02      	ittt	eq
 800711a:	68e5      	ldreq	r5, [r4, #12]
 800711c:	6833      	ldreq	r3, [r6, #0]
 800711e:	1aed      	subeq	r5, r5, r3
 8007120:	68a3      	ldr	r3, [r4, #8]
 8007122:	bf0c      	ite	eq
 8007124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007128:	2500      	movne	r5, #0
 800712a:	4293      	cmp	r3, r2
 800712c:	bfc4      	itt	gt
 800712e:	1a9b      	subgt	r3, r3, r2
 8007130:	18ed      	addgt	r5, r5, r3
 8007132:	2600      	movs	r6, #0
 8007134:	341a      	adds	r4, #26
 8007136:	42b5      	cmp	r5, r6
 8007138:	d11a      	bne.n	8007170 <_printf_common+0xc8>
 800713a:	2000      	movs	r0, #0
 800713c:	e008      	b.n	8007150 <_printf_common+0xa8>
 800713e:	2301      	movs	r3, #1
 8007140:	4652      	mov	r2, sl
 8007142:	4649      	mov	r1, r9
 8007144:	4638      	mov	r0, r7
 8007146:	47c0      	blx	r8
 8007148:	3001      	adds	r0, #1
 800714a:	d103      	bne.n	8007154 <_printf_common+0xac>
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007154:	3501      	adds	r5, #1
 8007156:	e7c6      	b.n	80070e6 <_printf_common+0x3e>
 8007158:	18e1      	adds	r1, r4, r3
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	2030      	movs	r0, #48	; 0x30
 800715e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007162:	4422      	add	r2, r4
 8007164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800716c:	3302      	adds	r3, #2
 800716e:	e7c7      	b.n	8007100 <_printf_common+0x58>
 8007170:	2301      	movs	r3, #1
 8007172:	4622      	mov	r2, r4
 8007174:	4649      	mov	r1, r9
 8007176:	4638      	mov	r0, r7
 8007178:	47c0      	blx	r8
 800717a:	3001      	adds	r0, #1
 800717c:	d0e6      	beq.n	800714c <_printf_common+0xa4>
 800717e:	3601      	adds	r6, #1
 8007180:	e7d9      	b.n	8007136 <_printf_common+0x8e>
	...

08007184 <_printf_i>:
 8007184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	7e0f      	ldrb	r7, [r1, #24]
 800718a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800718c:	2f78      	cmp	r7, #120	; 0x78
 800718e:	4691      	mov	r9, r2
 8007190:	4680      	mov	r8, r0
 8007192:	460c      	mov	r4, r1
 8007194:	469a      	mov	sl, r3
 8007196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800719a:	d807      	bhi.n	80071ac <_printf_i+0x28>
 800719c:	2f62      	cmp	r7, #98	; 0x62
 800719e:	d80a      	bhi.n	80071b6 <_printf_i+0x32>
 80071a0:	2f00      	cmp	r7, #0
 80071a2:	f000 80d4 	beq.w	800734e <_printf_i+0x1ca>
 80071a6:	2f58      	cmp	r7, #88	; 0x58
 80071a8:	f000 80c0 	beq.w	800732c <_printf_i+0x1a8>
 80071ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b4:	e03a      	b.n	800722c <_printf_i+0xa8>
 80071b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ba:	2b15      	cmp	r3, #21
 80071bc:	d8f6      	bhi.n	80071ac <_printf_i+0x28>
 80071be:	a101      	add	r1, pc, #4	; (adr r1, 80071c4 <_printf_i+0x40>)
 80071c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071c4:	0800721d 	.word	0x0800721d
 80071c8:	08007231 	.word	0x08007231
 80071cc:	080071ad 	.word	0x080071ad
 80071d0:	080071ad 	.word	0x080071ad
 80071d4:	080071ad 	.word	0x080071ad
 80071d8:	080071ad 	.word	0x080071ad
 80071dc:	08007231 	.word	0x08007231
 80071e0:	080071ad 	.word	0x080071ad
 80071e4:	080071ad 	.word	0x080071ad
 80071e8:	080071ad 	.word	0x080071ad
 80071ec:	080071ad 	.word	0x080071ad
 80071f0:	08007335 	.word	0x08007335
 80071f4:	0800725d 	.word	0x0800725d
 80071f8:	080072ef 	.word	0x080072ef
 80071fc:	080071ad 	.word	0x080071ad
 8007200:	080071ad 	.word	0x080071ad
 8007204:	08007357 	.word	0x08007357
 8007208:	080071ad 	.word	0x080071ad
 800720c:	0800725d 	.word	0x0800725d
 8007210:	080071ad 	.word	0x080071ad
 8007214:	080071ad 	.word	0x080071ad
 8007218:	080072f7 	.word	0x080072f7
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	602a      	str	r2, [r5, #0]
 8007224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800722c:	2301      	movs	r3, #1
 800722e:	e09f      	b.n	8007370 <_printf_i+0x1ec>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	682b      	ldr	r3, [r5, #0]
 8007234:	0607      	lsls	r7, r0, #24
 8007236:	f103 0104 	add.w	r1, r3, #4
 800723a:	6029      	str	r1, [r5, #0]
 800723c:	d501      	bpl.n	8007242 <_printf_i+0xbe>
 800723e:	681e      	ldr	r6, [r3, #0]
 8007240:	e003      	b.n	800724a <_printf_i+0xc6>
 8007242:	0646      	lsls	r6, r0, #25
 8007244:	d5fb      	bpl.n	800723e <_printf_i+0xba>
 8007246:	f9b3 6000 	ldrsh.w	r6, [r3]
 800724a:	2e00      	cmp	r6, #0
 800724c:	da03      	bge.n	8007256 <_printf_i+0xd2>
 800724e:	232d      	movs	r3, #45	; 0x2d
 8007250:	4276      	negs	r6, r6
 8007252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007256:	485a      	ldr	r0, [pc, #360]	; (80073c0 <_printf_i+0x23c>)
 8007258:	230a      	movs	r3, #10
 800725a:	e012      	b.n	8007282 <_printf_i+0xfe>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	6820      	ldr	r0, [r4, #0]
 8007260:	1d19      	adds	r1, r3, #4
 8007262:	6029      	str	r1, [r5, #0]
 8007264:	0605      	lsls	r5, r0, #24
 8007266:	d501      	bpl.n	800726c <_printf_i+0xe8>
 8007268:	681e      	ldr	r6, [r3, #0]
 800726a:	e002      	b.n	8007272 <_printf_i+0xee>
 800726c:	0641      	lsls	r1, r0, #25
 800726e:	d5fb      	bpl.n	8007268 <_printf_i+0xe4>
 8007270:	881e      	ldrh	r6, [r3, #0]
 8007272:	4853      	ldr	r0, [pc, #332]	; (80073c0 <_printf_i+0x23c>)
 8007274:	2f6f      	cmp	r7, #111	; 0x6f
 8007276:	bf0c      	ite	eq
 8007278:	2308      	moveq	r3, #8
 800727a:	230a      	movne	r3, #10
 800727c:	2100      	movs	r1, #0
 800727e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007282:	6865      	ldr	r5, [r4, #4]
 8007284:	60a5      	str	r5, [r4, #8]
 8007286:	2d00      	cmp	r5, #0
 8007288:	bfa2      	ittt	ge
 800728a:	6821      	ldrge	r1, [r4, #0]
 800728c:	f021 0104 	bicge.w	r1, r1, #4
 8007290:	6021      	strge	r1, [r4, #0]
 8007292:	b90e      	cbnz	r6, 8007298 <_printf_i+0x114>
 8007294:	2d00      	cmp	r5, #0
 8007296:	d04b      	beq.n	8007330 <_printf_i+0x1ac>
 8007298:	4615      	mov	r5, r2
 800729a:	fbb6 f1f3 	udiv	r1, r6, r3
 800729e:	fb03 6711 	mls	r7, r3, r1, r6
 80072a2:	5dc7      	ldrb	r7, [r0, r7]
 80072a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072a8:	4637      	mov	r7, r6
 80072aa:	42bb      	cmp	r3, r7
 80072ac:	460e      	mov	r6, r1
 80072ae:	d9f4      	bls.n	800729a <_printf_i+0x116>
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d10b      	bne.n	80072cc <_printf_i+0x148>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	07de      	lsls	r6, r3, #31
 80072b8:	d508      	bpl.n	80072cc <_printf_i+0x148>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	6861      	ldr	r1, [r4, #4]
 80072be:	4299      	cmp	r1, r3
 80072c0:	bfde      	ittt	le
 80072c2:	2330      	movle	r3, #48	; 0x30
 80072c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072cc:	1b52      	subs	r2, r2, r5
 80072ce:	6122      	str	r2, [r4, #16]
 80072d0:	f8cd a000 	str.w	sl, [sp]
 80072d4:	464b      	mov	r3, r9
 80072d6:	aa03      	add	r2, sp, #12
 80072d8:	4621      	mov	r1, r4
 80072da:	4640      	mov	r0, r8
 80072dc:	f7ff fee4 	bl	80070a8 <_printf_common>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d14a      	bne.n	800737a <_printf_i+0x1f6>
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	b004      	add	sp, #16
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	f043 0320 	orr.w	r3, r3, #32
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	4833      	ldr	r0, [pc, #204]	; (80073c4 <_printf_i+0x240>)
 80072f8:	2778      	movs	r7, #120	; 0x78
 80072fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	6829      	ldr	r1, [r5, #0]
 8007302:	061f      	lsls	r7, r3, #24
 8007304:	f851 6b04 	ldr.w	r6, [r1], #4
 8007308:	d402      	bmi.n	8007310 <_printf_i+0x18c>
 800730a:	065f      	lsls	r7, r3, #25
 800730c:	bf48      	it	mi
 800730e:	b2b6      	uxthmi	r6, r6
 8007310:	07df      	lsls	r7, r3, #31
 8007312:	bf48      	it	mi
 8007314:	f043 0320 	orrmi.w	r3, r3, #32
 8007318:	6029      	str	r1, [r5, #0]
 800731a:	bf48      	it	mi
 800731c:	6023      	strmi	r3, [r4, #0]
 800731e:	b91e      	cbnz	r6, 8007328 <_printf_i+0x1a4>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	f023 0320 	bic.w	r3, r3, #32
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	2310      	movs	r3, #16
 800732a:	e7a7      	b.n	800727c <_printf_i+0xf8>
 800732c:	4824      	ldr	r0, [pc, #144]	; (80073c0 <_printf_i+0x23c>)
 800732e:	e7e4      	b.n	80072fa <_printf_i+0x176>
 8007330:	4615      	mov	r5, r2
 8007332:	e7bd      	b.n	80072b0 <_printf_i+0x12c>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	6826      	ldr	r6, [r4, #0]
 8007338:	6961      	ldr	r1, [r4, #20]
 800733a:	1d18      	adds	r0, r3, #4
 800733c:	6028      	str	r0, [r5, #0]
 800733e:	0635      	lsls	r5, r6, #24
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	d501      	bpl.n	8007348 <_printf_i+0x1c4>
 8007344:	6019      	str	r1, [r3, #0]
 8007346:	e002      	b.n	800734e <_printf_i+0x1ca>
 8007348:	0670      	lsls	r0, r6, #25
 800734a:	d5fb      	bpl.n	8007344 <_printf_i+0x1c0>
 800734c:	8019      	strh	r1, [r3, #0]
 800734e:	2300      	movs	r3, #0
 8007350:	6123      	str	r3, [r4, #16]
 8007352:	4615      	mov	r5, r2
 8007354:	e7bc      	b.n	80072d0 <_printf_i+0x14c>
 8007356:	682b      	ldr	r3, [r5, #0]
 8007358:	1d1a      	adds	r2, r3, #4
 800735a:	602a      	str	r2, [r5, #0]
 800735c:	681d      	ldr	r5, [r3, #0]
 800735e:	6862      	ldr	r2, [r4, #4]
 8007360:	2100      	movs	r1, #0
 8007362:	4628      	mov	r0, r5
 8007364:	f7f8 ff44 	bl	80001f0 <memchr>
 8007368:	b108      	cbz	r0, 800736e <_printf_i+0x1ea>
 800736a:	1b40      	subs	r0, r0, r5
 800736c:	6060      	str	r0, [r4, #4]
 800736e:	6863      	ldr	r3, [r4, #4]
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	2300      	movs	r3, #0
 8007374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007378:	e7aa      	b.n	80072d0 <_printf_i+0x14c>
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	462a      	mov	r2, r5
 800737e:	4649      	mov	r1, r9
 8007380:	4640      	mov	r0, r8
 8007382:	47d0      	blx	sl
 8007384:	3001      	adds	r0, #1
 8007386:	d0ad      	beq.n	80072e4 <_printf_i+0x160>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	079b      	lsls	r3, r3, #30
 800738c:	d413      	bmi.n	80073b6 <_printf_i+0x232>
 800738e:	68e0      	ldr	r0, [r4, #12]
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	4298      	cmp	r0, r3
 8007394:	bfb8      	it	lt
 8007396:	4618      	movlt	r0, r3
 8007398:	e7a6      	b.n	80072e8 <_printf_i+0x164>
 800739a:	2301      	movs	r3, #1
 800739c:	4632      	mov	r2, r6
 800739e:	4649      	mov	r1, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	47d0      	blx	sl
 80073a4:	3001      	adds	r0, #1
 80073a6:	d09d      	beq.n	80072e4 <_printf_i+0x160>
 80073a8:	3501      	adds	r5, #1
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	9903      	ldr	r1, [sp, #12]
 80073ae:	1a5b      	subs	r3, r3, r1
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dcf2      	bgt.n	800739a <_printf_i+0x216>
 80073b4:	e7eb      	b.n	800738e <_printf_i+0x20a>
 80073b6:	2500      	movs	r5, #0
 80073b8:	f104 0619 	add.w	r6, r4, #25
 80073bc:	e7f5      	b.n	80073aa <_printf_i+0x226>
 80073be:	bf00      	nop
 80073c0:	08008fd9 	.word	0x08008fd9
 80073c4:	08008fea 	.word	0x08008fea

080073c8 <memmove>:
 80073c8:	4288      	cmp	r0, r1
 80073ca:	b510      	push	{r4, lr}
 80073cc:	eb01 0402 	add.w	r4, r1, r2
 80073d0:	d902      	bls.n	80073d8 <memmove+0x10>
 80073d2:	4284      	cmp	r4, r0
 80073d4:	4623      	mov	r3, r4
 80073d6:	d807      	bhi.n	80073e8 <memmove+0x20>
 80073d8:	1e43      	subs	r3, r0, #1
 80073da:	42a1      	cmp	r1, r4
 80073dc:	d008      	beq.n	80073f0 <memmove+0x28>
 80073de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073e6:	e7f8      	b.n	80073da <memmove+0x12>
 80073e8:	4402      	add	r2, r0
 80073ea:	4601      	mov	r1, r0
 80073ec:	428a      	cmp	r2, r1
 80073ee:	d100      	bne.n	80073f2 <memmove+0x2a>
 80073f0:	bd10      	pop	{r4, pc}
 80073f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073fa:	e7f7      	b.n	80073ec <memmove+0x24>

080073fc <_sbrk_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d06      	ldr	r5, [pc, #24]	; (8007418 <_sbrk_r+0x1c>)
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	f000 f84e 	bl	80074a8 <_sbrk>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_sbrk_r+0x1a>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_sbrk_r+0x1a>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	200006f0 	.word	0x200006f0

0800741c <memcpy>:
 800741c:	440a      	add	r2, r1
 800741e:	4291      	cmp	r1, r2
 8007420:	f100 33ff 	add.w	r3, r0, #4294967295
 8007424:	d100      	bne.n	8007428 <memcpy+0xc>
 8007426:	4770      	bx	lr
 8007428:	b510      	push	{r4, lr}
 800742a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800742e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007432:	4291      	cmp	r1, r2
 8007434:	d1f9      	bne.n	800742a <memcpy+0xe>
 8007436:	bd10      	pop	{r4, pc}

08007438 <_realloc_r>:
 8007438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743c:	4680      	mov	r8, r0
 800743e:	4614      	mov	r4, r2
 8007440:	460e      	mov	r6, r1
 8007442:	b921      	cbnz	r1, 800744e <_realloc_r+0x16>
 8007444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	4611      	mov	r1, r2
 800744a:	f7ff bc49 	b.w	8006ce0 <_malloc_r>
 800744e:	b92a      	cbnz	r2, 800745c <_realloc_r+0x24>
 8007450:	f7ff fbda 	bl	8006c08 <_free_r>
 8007454:	4625      	mov	r5, r4
 8007456:	4628      	mov	r0, r5
 8007458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745c:	f000 f81b 	bl	8007496 <_malloc_usable_size_r>
 8007460:	4284      	cmp	r4, r0
 8007462:	4607      	mov	r7, r0
 8007464:	d802      	bhi.n	800746c <_realloc_r+0x34>
 8007466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800746a:	d812      	bhi.n	8007492 <_realloc_r+0x5a>
 800746c:	4621      	mov	r1, r4
 800746e:	4640      	mov	r0, r8
 8007470:	f7ff fc36 	bl	8006ce0 <_malloc_r>
 8007474:	4605      	mov	r5, r0
 8007476:	2800      	cmp	r0, #0
 8007478:	d0ed      	beq.n	8007456 <_realloc_r+0x1e>
 800747a:	42bc      	cmp	r4, r7
 800747c:	4622      	mov	r2, r4
 800747e:	4631      	mov	r1, r6
 8007480:	bf28      	it	cs
 8007482:	463a      	movcs	r2, r7
 8007484:	f7ff ffca 	bl	800741c <memcpy>
 8007488:	4631      	mov	r1, r6
 800748a:	4640      	mov	r0, r8
 800748c:	f7ff fbbc 	bl	8006c08 <_free_r>
 8007490:	e7e1      	b.n	8007456 <_realloc_r+0x1e>
 8007492:	4635      	mov	r5, r6
 8007494:	e7df      	b.n	8007456 <_realloc_r+0x1e>

08007496 <_malloc_usable_size_r>:
 8007496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749a:	1f18      	subs	r0, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfbc      	itt	lt
 80074a0:	580b      	ldrlt	r3, [r1, r0]
 80074a2:	18c0      	addlt	r0, r0, r3
 80074a4:	4770      	bx	lr
	...

080074a8 <_sbrk>:
 80074a8:	4a04      	ldr	r2, [pc, #16]	; (80074bc <_sbrk+0x14>)
 80074aa:	6811      	ldr	r1, [r2, #0]
 80074ac:	4603      	mov	r3, r0
 80074ae:	b909      	cbnz	r1, 80074b4 <_sbrk+0xc>
 80074b0:	4903      	ldr	r1, [pc, #12]	; (80074c0 <_sbrk+0x18>)
 80074b2:	6011      	str	r1, [r2, #0]
 80074b4:	6810      	ldr	r0, [r2, #0]
 80074b6:	4403      	add	r3, r0
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	4770      	bx	lr
 80074bc:	20000700 	.word	0x20000700
 80074c0:	20000708 	.word	0x20000708

080074c4 <_init>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr

080074d0 <_fini>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr
