
Cable_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca0  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b324  0800b324  0002034c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b32c  0800b32c  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800b334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  2000034c  0800b680  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800b680  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013eb9  00000000  00000000  000203bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035aa  00000000  00000000  00034278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00037828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb1  00000000  00000000  00038ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264bd  00000000  00000000  00039c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018286  00000000  00000000  0006010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddfe8  00000000  00000000  00078394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a0c  00000000  00000000  0015637c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0015bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800866c 	.word	0x0800866c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000350 	.word	0x20000350
 80001ec:	0800866c 	.word	0x0800866c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <GPIO_Init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	GPIOE-> OSPEEDR |= 0x400;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);*/

	// Initialize the GPIO pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOE_CLK_ENABLE(); // Enable the GPIO E clock
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <GPIO_Init+0x84>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <GPIO_Init+0x84>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <GPIO_Init+0x84>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

	// Configure PE3 in input mode
	GPIO_InitStruct.Pin = PIN_PE3;
 80005ae:	2308      	movs	r3, #8
 80005b0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b6:	2302      	movs	r3, #2
 80005b8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <GPIO_Init+0x88>)
 80005c0:	f004 f806 	bl	80045d0 <HAL_GPIO_Init>

	// Configure PE5 in output push-pull mode
	GPIO_InitStruct.Pin = PIN_PE5;
 80005c4:	2320      	movs	r3, #32
 80005c6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4619      	mov	r1, r3
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <GPIO_Init+0x88>)
 80005da:	f003 fff9 	bl	80045d0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2120      	movs	r1, #32
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <GPIO_Init+0x88>)
 80005e4:	f004 f9b8 	bl	8004958 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 80005e8:	e002      	b.n	80005f0 <GPIO_Init+0x64>
	{
	  HAL_Delay(100);
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f003 fa66 	bl	8003abc <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 80005f0:	2108      	movs	r1, #8
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <GPIO_Init+0x88>)
 80005f4:	f004 f998 	bl	8004928 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d0f5      	beq.n	80005ea <GPIO_Init+0x5e>
	}
	HAL_Delay(3000);
 80005fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000602:	f003 fa5b 	bl	8003abc <HAL_Delay>
}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40021000 	.word	0x40021000

08000618 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000618:	b598      	push	{r3, r4, r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800061c:	f003 f9d4 	bl	80039c8 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 8000620:	f000 f880 	bl	8000724 <SystemClock_Config>

	GPIO_Init();						// Init PE5 and set it to HIGH
 8000624:	f7ff ffb2 	bl	800058c <GPIO_Init>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
#else
	BSP_LCD_Init();						// Initialize the LCD display
 8000628:	f002 f924 	bl	8002874 <BSP_LCD_Init>
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 800062c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000630:	2001      	movs	r0, #1
 8000632:	f002 f9a1 	bl	8002978 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000636:	2001      	movs	r0, #1
 8000638:	f002 fa02 	bl	8002a40 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800063c:	f002 fcd2 	bl	8002fe4 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f002 fa58 	bl	8002af8 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8000648:	f002 f97e 	bl	8002948 <BSP_LCD_GetXSize>
 800064c:	4603      	mov	r3, r0
 800064e:	b29c      	uxth	r4, r3
 8000650:	f002 f986 	bl	8002960 <BSP_LCD_GetYSize>
 8000654:	4603      	mov	r3, r0
 8000656:	b29b      	uxth	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	4620      	mov	r0, r4
 800065c:	f003 f8b0 	bl	80037c0 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	//BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8000660:	f000 ffbe 	bl	80015e0 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8000664:	f000 ffdc 	bl	8001620 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8000668:	2000      	movs	r0, #0
 800066a:	f001 fceb 	bl	8002044 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 800066e:	2001      	movs	r0, #1
 8000670:	f001 fce8 	bl	8002044 <BSP_LED_Init>

	MENU_hint();						// Show hint at startup
 8000674:	f000 fdb4 	bl	80011e0 <MENU_hint>
	MENU_draw(0,3);						// Draw the menu
 8000678:	2103      	movs	r1, #3
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fcfa 	bl	8001074 <MENU_draw>

	gyro_disable();						// Disable gyro, use those analog inputs
 8000680:	f000 f8ce 	bl	8000820 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8000684:	f000 f98c 	bl	80009a0 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8000688:	f000 fa4a 	bl	8000b20 <MEAS_timer_init>
	


	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 800068c:	2000      	movs	r0, #0
 800068e:	f001 fd61 	bl	8002154 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <main+0x100>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d004      	beq.n	80006a4 <main+0x8c>
			MEAS_data_ready = false;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <main+0x100>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
			MEAS_show_data();
 80006a0:	f000 fbb6 	bl	8000e10 <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 80006a4:	f000 ffee 	bl	8001684 <PB_pressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d01d      	beq.n	80006ea <main+0xd2>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <main+0x104>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf14      	ite	ne
 80006b6:	2301      	movne	r3, #1
 80006b8:	2300      	moveq	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f083 0301 	eor.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <main+0x104>)
 80006ca:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <main+0x104>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <main+0xc8>
				DAC_init();
 80006d4:	f000 f9c8 	bl	8000a68 <DAC_init>
				BSP_LED_On(LED4);
 80006d8:	2001      	movs	r0, #1
 80006da:	f001 fd07 	bl	80020ec <BSP_LED_On>
 80006de:	e004      	b.n	80006ea <main+0xd2>
			} else {
				DAC_reset();
 80006e0:	f000 f9ac 	bl	8000a3c <DAC_reset>
				BSP_LED_Off(LED4);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f001 fd1b 	bl	8002120 <BSP_LED_Off>
			}
		}

		// Check if Device should power off (PE3)
		if (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 80006ea:	2108      	movs	r1, #8
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <main+0x108>)
 80006ee:	f004 f91b 	bl	8004928 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d108      	bne.n	800070a <main+0xf2>
		{
		  // Set PE5 low
		  HAL_GPIO_WritePin(GPIOE, PIN_PE5, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2120      	movs	r1, #32
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <main+0x108>)
 80006fe:	f004 f92b 	bl	8004958 <HAL_GPIO_WritePin>

		  // Delay for 3 seconds
		  HAL_Delay(3000);
 8000702:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000706:	f003 f9d9 	bl	8003abc <HAL_Delay>
		}

		//DISP_info_screen();

		MENU_main();					// Check for user input
 800070a:	f000 fc71 	bl	8000ff0 <MENU_main>

		HAL_Delay(200);					// Wait or sleep
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f003 f9d4 	bl	8003abc <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000714:	e7ba      	b.n	800068c <main+0x74>
 8000716:	bf00      	nop
 8000718:	20000368 	.word	0x20000368
 800071c:	20000369 	.word	0x20000369
 8000720:	40021000 	.word	0x40021000

08000724 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	b0a0      	sub	sp, #128	; 0x80
 8000728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 fb0e 	bl	8007d54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2230      	movs	r2, #48	; 0x30
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f007 faff 	bl	8007d54 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <SystemClock_Config+0xf0>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <SystemClock_Config+0xf0>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemClock_Config+0xf0>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <SystemClock_Config+0xf4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a27      	ldr	r2, [pc, #156]	; (8000818 <SystemClock_Config+0xf4>)
 800077c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemClock_Config+0xf4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078e:	2301      	movs	r3, #1
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007a2:	2308      	movs	r3, #8
 80007a4:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007aa:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b0:	2307      	movs	r3, #7
 80007b2:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80007b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 fbe9 	bl	8005f90 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80007d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007da:	2105      	movs	r1, #5
 80007dc:	4618      	mov	r0, r3
 80007de:	f005 fe45 	bl	800646c <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007e2:	2308      	movs	r3, #8
 80007e4:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80007e6:	23c0      	movs	r3, #192	; 0xc0
 80007e8:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80007ea:	2304      	movs	r3, #4
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4618      	mov	r0, r3
 80007fa:	f006 f843 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <SystemClock_Config+0xf8>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <SystemClock_Config+0xf8>)
 8000804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000808:	6053      	str	r3, [r2, #4]
}
 800080a:	bf00      	nop
 800080c:	3780      	adds	r7, #128	; 0x80
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000
 800081c:	40012300 	.word	0x40012300

08000820 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <gyro_disable+0xb4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <gyro_disable+0xb4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <gyro_disable+0xb4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <gyro_disable+0xb8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a24      	ldr	r2, [pc, #144]	; (80008d8 <gyro_disable+0xb8>)
 8000848:	f023 030c 	bic.w	r3, r3, #12
 800084c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <gyro_disable+0xb8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <gyro_disable+0xb8>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <gyro_disable+0xb8>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <gyro_disable+0xb8>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8000866:	200a      	movs	r0, #10
 8000868:	f003 f928 	bl	8003abc <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <gyro_disable+0xb8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <gyro_disable+0xb8>)
 8000872:	f043 030c 	orr.w	r3, r3, #12
 8000876:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <gyro_disable+0xb4>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <gyro_disable+0xb4>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <gyro_disable+0xb4>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0320 	and.w	r3, r3, #32
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <gyro_disable+0xbc>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	4a10      	ldr	r2, [pc, #64]	; (80008dc <gyro_disable+0xbc>)
 800089a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800089e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <gyro_disable+0xbc>)
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <gyro_disable+0xbc>)
 80008a6:	f023 030f 	bic.w	r3, r3, #15
 80008aa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <gyro_disable+0xbc>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <gyro_disable+0xbc>)
 80008b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008b6:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 80008b8:	200a      	movs	r0, #10
 80008ba:	f003 f8ff 	bl	8003abc <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <gyro_disable+0xbc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a06      	ldr	r2, [pc, #24]	; (80008dc <gyro_disable+0xbc>)
 80008c4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80008c8:	6013      	str	r3, [r2, #0]
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40021400 	.word	0x40021400

080008e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0b      	blt.n	800090a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 021f 	and.w	r2, r3, #31
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <__NVIC_EnableIRQ+0x38>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2001      	movs	r0, #1
 8000902:	fa00 f202 	lsl.w	r2, r0, r2
 8000906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db12      	blt.n	8000954 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	490a      	ldr	r1, [pc, #40]	; (8000960 <__NVIC_DisableIRQ+0x44>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	3320      	adds	r3, #32
 8000944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000948:	f3bf 8f4f 	dsb	sy
}
 800094c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800094e:	f3bf 8f6f 	isb	sy
}
 8000952:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0c      	blt.n	8000990 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <__NVIC_ClearPendingIRQ+0x38>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	3360      	adds	r3, #96	; 0x60
 800098c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100

080009a0 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MEAS_GPIO_analog_init+0x90>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <MEAS_GPIO_analog_init+0x90>)
 80009c8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80009cc:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MEAS_GPIO_analog_init+0x94>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <MEAS_GPIO_analog_init+0x94>)
 80009f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009f4:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MEAS_GPIO_analog_init+0x8c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MEAS_GPIO_analog_init+0x98>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <MEAS_GPIO_analog_init+0x98>)
 8000a18:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000a1c:	6013      	str	r3, [r2, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40021400 	.word	0x40021400
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000

08000a3c <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <DAC_reset+0x28>)
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <DAC_reset+0x28>)
 8000a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a4a:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <DAC_reset+0x28>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <DAC_reset+0x28>)
 8000a52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000a56:	6213      	str	r3, [r2, #32]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <DAC_init+0x3c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <DAC_init+0x3c>)
 8000a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <DAC_init+0x3c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <DAC_init+0x40>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <DAC_init+0x40>)
 8000a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007400 	.word	0x40007400

08000aac <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <DAC_increment+0x30>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	4a09      	ldr	r2, [pc, #36]	; (8000adc <DAC_increment+0x30>)
 8000ab8:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <DAC_increment+0x30>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ac2:	d302      	bcc.n	8000aca <DAC_increment+0x1e>
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <DAC_increment+0x30>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <DAC_increment+0x34>)
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <DAC_increment+0x30>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6153      	str	r3, [r2, #20]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20000550 	.word	0x20000550
 8000ae0:	40007400 	.word	0x40007400

08000ae4 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <ADC_reset+0x38>)
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <ADC_reset+0x38>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <ADC_reset+0x38>)
 8000af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af8:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <ADC_reset+0x38>)
 8000afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000afe:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8000b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b0a:	f023 0301 	bic.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MEAS_timer_init+0x68>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <MEAS_timer_init+0x68>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MEAS_timer_init+0x68>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8000b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b46:	f243 62af 	movw	r2, #13999	; 0x36af
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8000b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b50:	2209      	movs	r2, #9
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8000b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8000b74:	201c      	movs	r0, #28
 8000b76:	f7ff fef5 	bl	8000964 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8000b7a:	201c      	movs	r0, #28
 8000b7c:	f7ff feb0 	bl	80008e0 <__NVIC_EnableIRQ>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800

08000b8c <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8000b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <TIM2_IRQHandler+0x24>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <TIM2_IRQHandler+0x20>
		DAC_increment();
 8000ba8:	f7ff ff80 	bl	8000aac <DAC_increment>
	}
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000369 	.word	0x20000369

08000bb4 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <ADC_IRQHandler+0x58>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d020      	beq.n	8000c06 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8000bc4:	4911      	ldr	r1, [pc, #68]	; (8000c0c <ADC_IRQHandler+0x58>)
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <ADC_IRQHandler+0x5c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <ADC_IRQHandler+0x5c>)
 8000bce:	6002      	str	r2, [r0, #0]
 8000bd0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000bd2:	4910      	ldr	r1, [pc, #64]	; (8000c14 <ADC_IRQHandler+0x60>)
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <ADC_IRQHandler+0x5c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b3b      	cmp	r3, #59	; 0x3b
 8000bde:	d912      	bls.n	8000c06 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	f023 0301 	bic.w	r3, r3, #1
 8000bee:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <ADC_IRQHandler+0x58>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <ADC_IRQHandler+0x58>)
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8000bfc:	f7ff ff72 	bl	8000ae4 <ADC_reset>
			MEAS_data_ready = true;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <ADC_IRQHandler+0x64>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40012200 	.word	0x40012200
 8000c10:	2000036c 	.word	0x2000036c
 8000c14:	20000370 	.word	0x20000370
 8000c18:	20000368 	.word	0x20000368

08000c1c <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <DMA2_Stream1_IRQHandler+0x78>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d031      	beq.n	8000c90 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8000c2c:	2039      	movs	r0, #57	; 0x39
 8000c2e:	f7ff fe75 	bl	800091c <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8000c32:	2039      	movs	r0, #57	; 0x39
 8000c34:	f7ff fe96 	bl	8000964 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <DMA2_Stream1_IRQHandler+0x7c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <DMA2_Stream1_IRQHandler+0x7c>)
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000c44:	bf00      	nop
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <DMA2_Stream1_IRQHandler+0x7c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f9      	bne.n	8000c46 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <DMA2_Stream1_IRQHandler+0x78>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <DMA2_Stream1_IRQHandler+0x78>)
 8000c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c5c:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8000c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c68:	f023 0301 	bic.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <DMA2_Stream1_IRQHandler+0x80>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <DMA2_Stream1_IRQHandler+0x80>)
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <DMA2_Stream1_IRQHandler+0x80>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <DMA2_Stream1_IRQHandler+0x80>)
 8000c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c84:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8000c86:	f7ff ff2d 	bl	8000ae4 <ADC_reset>
		MEAS_data_ready = true;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <DMA2_Stream1_IRQHandler+0x84>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40026400 	.word	0x40026400
 8000c98:	40026428 	.word	0x40026428
 8000c9c:	40012200 	.word	0x40012200
 8000ca0:	20000368 	.word	0x20000368

08000ca4 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <DMA2_Stream3_IRQHandler+0x78>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d031      	beq.n	8000d18 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8000cb4:	203b      	movs	r0, #59	; 0x3b
 8000cb6:	f7ff fe31 	bl	800091c <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8000cba:	203b      	movs	r0, #59	; 0x3b
 8000cbc:	f7ff fe52 	bl	8000964 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <DMA2_Stream3_IRQHandler+0x7c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <DMA2_Stream3_IRQHandler+0x7c>)
 8000cc6:	f023 0301 	bic.w	r3, r3, #1
 8000cca:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000ccc:	bf00      	nop
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <DMA2_Stream3_IRQHandler+0x7c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f9      	bne.n	8000cce <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <DMA2_Stream3_IRQHandler+0x78>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <DMA2_Stream3_IRQHandler+0x78>)
 8000ce0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ce4:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8000ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf0:	f023 0301 	bic.w	r3, r3, #1
 8000cf4:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <DMA2_Stream3_IRQHandler+0x80>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <DMA2_Stream3_IRQHandler+0x80>)
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <DMA2_Stream3_IRQHandler+0x80>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <DMA2_Stream3_IRQHandler+0x80>)
 8000d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d0c:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8000d0e:	f7ff fee9 	bl	8000ae4 <ADC_reset>
		MEAS_data_ready = true;
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <DMA2_Stream3_IRQHandler+0x84>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40026400 	.word	0x40026400
 8000d20:	40026458 	.word	0x40026458
 8000d24:	40012100 	.word	0x40012100
 8000d28:	20000368 	.word	0x20000368

08000d2c <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <DMA2_Stream4_IRQHandler+0xc8>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d055      	beq.n	8000dea <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8000d3e:	203c      	movs	r0, #60	; 0x3c
 8000d40:	f7ff fdec 	bl	800091c <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8000d44:	203c      	movs	r0, #60	; 0x3c
 8000d46:	f7ff fe0d 	bl	8000964 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <DMA2_Stream4_IRQHandler+0xcc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2a      	ldr	r2, [pc, #168]	; (8000df8 <DMA2_Stream4_IRQHandler+0xcc>)
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000d56:	bf00      	nop
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <DMA2_Stream4_IRQHandler+0xcc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f9      	bne.n	8000d58 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <DMA2_Stream4_IRQHandler+0xc8>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <DMA2_Stream4_IRQHandler+0xc8>)
 8000d6a:	f043 0320 	orr.w	r3, r3, #32
 8000d6e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8000d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <DMA2_Stream4_IRQHandler+0xd0>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <DMA2_Stream4_IRQHandler+0xd0>)
 8000d86:	f023 0301 	bic.w	r3, r3, #1
 8000d8a:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <DMA2_Stream4_IRQHandler+0xd4>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <DMA2_Stream4_IRQHandler+0xd4>)
 8000d92:	f023 0301 	bic.w	r3, r3, #1
 8000d96:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <DMA2_Stream4_IRQHandler+0xd8>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <DMA2_Stream4_IRQHandler+0xd8>)
 8000d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000da2:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8000da4:	233b      	movs	r3, #59	; 0x3b
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	e017      	b.n	8000dda <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <DMA2_Stream4_IRQHandler+0xdc>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	3301      	adds	r3, #1
 8000db8:	0c12      	lsrs	r2, r2, #16
 8000dba:	4913      	ldr	r1, [pc, #76]	; (8000e08 <DMA2_Stream4_IRQHandler+0xdc>)
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8000dc0:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <DMA2_Stream4_IRQHandler+0xdc>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	b292      	uxth	r2, r2
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <DMA2_Stream4_IRQHandler+0xdc>)
 8000dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dae4      	bge.n	8000daa <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8000de0:	f7ff fe80 	bl	8000ae4 <ADC_reset>
		MEAS_data_ready = true;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <DMA2_Stream4_IRQHandler+0xe0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
	}
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40026400 	.word	0x40026400
 8000df8:	40026470 	.word	0x40026470
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	40012100 	.word	0x40012100
 8000e04:	40012300 	.word	0x40012300
 8000e08:	20000370 	.word	0x20000370
 8000e0c:	20000368 	.word	0x20000368

08000e10 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08d      	sub	sp, #52	; 0x34
 8000e14:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET = 260;
 8000e16:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e1a:	61fb      	str	r3, [r7, #28]
	const uint32_t X_SIZE = 240;
 8000e1c:	23f0      	movs	r3, #240	; 0xf0
 8000e1e:	61bb      	str	r3, [r7, #24]
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8000e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
	uint32_t data;
	uint32_t data_last;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e32:	f001 fe15 	bl	8002a60 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f002 f84b 	bl	8002ee0 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 8000e4a:	4861      	ldr	r0, [pc, #388]	; (8000fd0 <MEAS_show_data+0x1c0>)
 8000e4c:	f001 fe3a 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f001 fe1c 	bl	8002a90 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e58:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e5c:	f001 fe00 	bl	8002a60 <BSP_LCD_SetTextColor>
	char text[16];
	snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 8000e60:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4638      	mov	r0, r7
 8000e66:	4a5c      	ldr	r2, [pc, #368]	; (8000fd8 <MEAS_show_data+0x1c8>)
 8000e68:	210f      	movs	r1, #15
 8000e6a:	f006 ff3f 	bl	8007cec <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 8000e6e:	463a      	mov	r2, r7
 8000e70:	2303      	movs	r3, #3
 8000e72:	2132      	movs	r1, #50	; 0x32
 8000e74:	2000      	movs	r0, #0
 8000e76:	f001 feab 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4638      	mov	r0, r7
 8000e80:	4a56      	ldr	r2, [pc, #344]	; (8000fdc <MEAS_show_data+0x1cc>)
 8000e82:	210f      	movs	r1, #15
 8000e84:	f006 ff32 	bl	8007cec <sniprintf>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 8000e88:	463a      	mov	r2, r7
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	2150      	movs	r1, #80	; 0x50
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f001 fe9e 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000e94:	4852      	ldr	r0, [pc, #328]	; (8000fe0 <MEAS_show_data+0x1d0>)
 8000e96:	f001 fde3 	bl	8002a60 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eaa:	e02e      	b.n	8000f0a <MEAS_show_data+0xfa>
		data_last = data;
 8000eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eae:	613b      	str	r3, [r7, #16]
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8000eb0:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <MEAS_show_data+0x1d4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8000ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d901      	bls.n	8000ed4 <MEAS_show_data+0xc4>
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	b298      	uxth	r0, r3
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	b29c      	uxth	r4, r3
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4622      	mov	r2, r4
 8000f00:	f001 ff24 	bl	8002d4c <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	3301      	adds	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0c:	2b3b      	cmp	r3, #59	; 0x3b
 8000f0e:	d9cd      	bls.n	8000eac <MEAS_show_data+0x9c>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <MEAS_show_data+0x1d4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d13e      	bne.n	8000f96 <MEAS_show_data+0x186>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000f18:	4833      	ldr	r0, [pc, #204]	; (8000fe8 <MEAS_show_data+0x1d8>)
 8000f1a:	f001 fda1 	bl	8002a60 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2e:	e02f      	b.n	8000f90 <MEAS_show_data+0x180>
			data_last = data;
 8000f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f32:	613b      	str	r3, [r7, #16]
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <MEAS_show_data+0x1d4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3a:	fb02 f303 	mul.w	r3, r2, r3
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000f42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8000f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d901      	bls.n	8000f5a <MEAS_show_data+0x14a>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	b298      	uxth	r0, r3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	b29c      	uxth	r4, r3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4622      	mov	r2, r4
 8000f86:	f001 fee1 	bl	8002d4c <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	2b3b      	cmp	r3, #59	; 0x3b
 8000f94:	d9cc      	bls.n	8000f30 <MEAS_show_data+0x120>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
 8000f9a:	e00f      	b.n	8000fbc <MEAS_show_data+0x1ac>
		ADC_samples[2*i] = 0;
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <MEAS_show_data+0x1c4>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	2b3b      	cmp	r3, #59	; 0x3b
 8000fc0:	d9ec      	bls.n	8000f9c <MEAS_show_data+0x18c>
	}
	ADC_sample_count = 0;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MEAS_show_data+0x1dc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	3734      	adds	r7, #52	; 0x34
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	200002d8 	.word	0x200002d8
 8000fd4:	20000370 	.word	0x20000370
 8000fd8:	08008684 	.word	0x08008684
 8000fdc:	08008694 	.word	0x08008694
 8000fe0:	ff0000ff 	.word	0xff0000ff
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	ffff0000 	.word	0xffff0000
 8000fec:	2000036c 	.word	0x2000036c

08000ff0 <MENU_main>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	//static CALC_meas_data_t meas_data;
	static MENU_item_t menu = MENU_HOME;

	/* Comment next line if touchscreen interrupt is enabled */
	MENU_check_transition(menu);
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MENU_main+0x80>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fa2b 	bl	8001454 <MENU_check_transition>

	switch (MENU_get_transition())
 8000ffe:	f000 fa17 	bl	8001430 <MENU_get_transition>
 8001002:	4603      	mov	r3, r0
 8001004:	2b07      	cmp	r3, #7
 8001006:	d82f      	bhi.n	8001068 <MENU_main+0x78>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <MENU_main+0x20>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001031 	.word	0x08001031
 8001014:	0800103f 	.word	0x0800103f
 8001018:	08001069 	.word	0x08001069
 800101c:	08001069 	.word	0x08001069
 8001020:	08001061 	.word	0x08001061
 8001024:	0800104d 	.word	0x0800104d
 8001028:	0800105b 	.word	0x0800105b
 800102c:	08001069 	.word	0x08001069
	{	// Handle user menu choice
		case MENU_HOME:
            // Handle home menu selection
			MENU_hint();
 8001030:	f000 f8d6 	bl	80011e0 <MENU_hint>
			MENU_draw(0, 3);
 8001034:	2103      	movs	r1, #3
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f81c 	bl	8001074 <MENU_draw>
            break;
 800103c:	e015      	b.n	800106a <MENU_main+0x7a>
        case MENU_MEASUREMENTS:
			MENU_Measurements();
 800103e:	f000 f94f 	bl	80012e0 <MENU_Measurements>
        	MENU_draw(4, 7);
 8001042:	2107      	movs	r1, #7
 8001044:	2004      	movs	r0, #4
 8001046:	f000 f815 	bl	8001074 <MENU_draw>
            // Handle measurements menu selection
            break;
 800104a:	e00e      	b.n	800106a <MENU_main+0x7a>
            break;
        case MENU_ACCURATE:
            // Handle accurate menu selection
            break;
        case MENU_CALIBRATION:
			MENU_Calibrations();
 800104c:	f000 f980 	bl	8001350 <MENU_Calibrations>
			MENU_draw(10, 11);
 8001050:	210b      	movs	r1, #11
 8001052:	200a      	movs	r0, #10
 8001054:	f000 f80e 	bl	8001074 <MENU_draw>
            // Handle calibration menu selection
            break;
 8001058:	e007      	b.n	800106a <MENU_main+0x7a>
        case MENU_INFO:
			MENU_Info();
 800105a:	f000 f9b1 	bl	80013c0 <MENU_Info>
            // Handle info menu selection
            break;
 800105e:	e004      	b.n	800106a <MENU_main+0x7a>
		case MENU_RETURN:
			menu = MENU_HOME;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <MENU_main+0x80>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
			break;
 8001066:	e000      	b.n	800106a <MENU_main+0x7a>
        case MENU_NONE:
            // Handle none menu selection
            break;
        default:
            // Handle invalid menu selection
            break;
 8001068:	bf00      	nop
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
			ADC3_IN13_IN4_scan_start();
			break;*/
	}
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000554 	.word	0x20000554

08001074 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(uint8_t start_item, uint8_t end_item)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
	uint8_t count = end_item - start_item;
 8001084:	79ba      	ldrb	r2, [r7, #6]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	77bb      	strb	r3, [r7, #30]
	
	BSP_LCD_SetFont(MENU_FONT);
 800108c:	4852      	ldr	r0, [pc, #328]	; (80011d8 <MENU_draw+0x164>)
 800108e:	f001 fd19 	bl	8002ac4 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001092:	f001 fc65 	bl	8002960 <BSP_LCD_GetYSize>
 8001096:	4603      	mov	r3, r0
 8001098:	3b28      	subs	r3, #40	; 0x28
 800109a:	61bb      	str	r3, [r7, #24]
	m = MENU_MARGIN;
 800109c:	2302      	movs	r3, #2
 800109e:	617b      	str	r3, [r7, #20]
	w = BSP_LCD_GetXSize()/count;
 80010a0:	f001 fc52 	bl	8002948 <BSP_LCD_GetXSize>
 80010a4:	4602      	mov	r2, r0
 80010a6:	7fbb      	ldrb	r3, [r7, #30]
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	613b      	str	r3, [r7, #16]
	h = MENU_HEIGHT;
 80010ae:	2328      	movs	r3, #40	; 0x28
 80010b0:	60fb      	str	r3, [r7, #12]
	
	
	for (uint8_t i = start_item; i < end_item; i++) 
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	77fb      	strb	r3, [r7, #31]
 80010b6:	e084      	b.n	80011c2 <MENU_draw+0x14e>
	{
		x = i*w;
 80010b8:	7ffa      	ldrb	r2, [r7, #31]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	60bb      	str	r3, [r7, #8]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 80010c2:	7ffa      	ldrb	r2, [r7, #31]
 80010c4:	4945      	ldr	r1, [pc, #276]	; (80011dc <MENU_draw+0x168>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	3324      	adds	r3, #36	; 0x24
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fcc3 	bl	8002a60 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b298      	uxth	r0, r3
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b299      	uxth	r1, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b29c      	uxth	r4, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	b29a      	uxth	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	b29b      	uxth	r3, r3
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	4622      	mov	r2, r4
 8001114:	f001 fee4 	bl	8002ee0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8001118:	7ffa      	ldrb	r2, [r7, #31]
 800111a:	4930      	ldr	r1, [pc, #192]	; (80011dc <MENU_draw+0x168>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	3324      	adds	r3, #36	; 0x24
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fcb0 	bl	8002a90 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8001130:	7ffa      	ldrb	r2, [r7, #31]
 8001132:	492a      	ldr	r1, [pc, #168]	; (80011dc <MENU_draw+0x168>)
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3320      	adds	r3, #32
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fc8c 	bl	8002a60 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	b29b      	uxth	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	4413      	add	r3, r2
 8001152:	b29a      	uxth	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	b298      	uxth	r0, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	b29b      	uxth	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	0052      	lsls	r2, r2, #1
 8001164:	4413      	add	r3, r2
 8001166:	b29a      	uxth	r2, r3
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 8001170:	7ffa      	ldrb	r2, [r7, #31]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <MENU_draw+0x168>)
 800117c:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800117e:	2303      	movs	r3, #3
 8001180:	f001 fd26 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	0052      	lsls	r2, r2, #1
 800118c:	4413      	add	r3, r2
 800118e:	b29a      	uxth	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	b29b      	uxth	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b298      	uxth	r0, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 80011a6:	7ffa      	ldrb	r2, [r7, #31]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	3310      	adds	r3, #16
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <MENU_draw+0x168>)
 80011b4:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 80011b6:	2303      	movs	r3, #3
 80011b8:	f001 fd0a 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	for (uint8_t i = start_item; i < end_item; i++) 
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
 80011be:	3301      	adds	r3, #1
 80011c0:	77fb      	strb	r3, [r7, #31]
 80011c2:	7ffa      	ldrb	r2, [r7, #31]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	f4ff af76 	bcc.w	80010b8 <MENU_draw+0x44>
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002e8 	.word	0x200002e8
 80011dc:	20000008 	.word	0x20000008

080011e0 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f001 fc86 	bl	8002af8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f001 fc4e 	bl	8002a90 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011f8:	f001 fc32 	bl	8002a60 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80011fc:	4829      	ldr	r0, [pc, #164]	; (80012a4 <MENU_hint+0xc4>)
 80011fe:	f001 fc61 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,10, (uint8_t *)"Cable-Monitor", CENTER_MODE);
 8001202:	2301      	movs	r3, #1
 8001204:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <MENU_hint+0xc8>)
 8001206:	210a      	movs	r1, #10
 8001208:	2000      	movs	r0, #0
 800120a:	f001 fce1 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 800120e:	4827      	ldr	r0, [pc, #156]	; (80012ac <MENU_hint+0xcc>)
 8001210:	f001 fc58 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,30, (uint8_t *) "by Alejandro & Timo", CENTER_MODE);
 8001214:	2301      	movs	r3, #1
 8001216:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <MENU_hint+0xd0>)
 8001218:	211e      	movs	r1, #30
 800121a:	2000      	movs	r0, #0
 800121c:	f001 fcd8 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001220:	4824      	ldr	r0, [pc, #144]	; (80012b4 <MENU_hint+0xd4>)
 8001222:	f001 fc4f 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"1. Touch a menu item", LEFT_MODE);
 8001226:	2303      	movs	r3, #3
 8001228:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <MENU_hint+0xd8>)
 800122a:	213c      	movs	r1, #60	; 0x3c
 800122c:	2005      	movs	r0, #5
 800122e:	f001 fccf 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start a cable", LEFT_MODE);
 8001232:	2303      	movs	r3, #3
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <MENU_hint+0xdc>)
 8001236:	2150      	movs	r1, #80	; 0x50
 8001238:	2005      	movs	r0, #5
 800123a:	f001 fcc9 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 100, (uint8_t *)"measurement:", LEFT_MODE);
 800123e:	2303      	movs	r3, #3
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <MENU_hint+0xe0>)
 8001242:	2164      	movs	r1, #100	; 0x64
 8001244:	2005      	movs	r0, #5
 8001246:	f001 fcc3 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 120, (uint8_t *)"Single or Accurate.", LEFT_MODE);
 800124a:	2303      	movs	r3, #3
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <MENU_hint+0xe4>)
 800124e:	2178      	movs	r1, #120	; 0x78
 8001250:	2005      	movs	r0, #5
 8001252:	f001 fcbd 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 150, (uint8_t *)"Version: 01.00", LEFT_MODE);
 8001256:	2303      	movs	r3, #3
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MENU_hint+0xe8>)
 800125a:	2196      	movs	r1, #150	; 0x96
 800125c:	2005      	movs	r0, #5
 800125e:	f001 fcb7 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 170, (uint8_t *)"Data: 17.12.2023", LEFT_MODE);
 8001262:	2303      	movs	r3, #3
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <MENU_hint+0xec>)
 8001266:	21aa      	movs	r1, #170	; 0xaa
 8001268:	2005      	movs	r0, #5
 800126a:	f001 fcb1 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 190, (uint8_t *)"Authors: Horvat, Wey", LEFT_MODE);
 800126e:	2303      	movs	r3, #3
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <MENU_hint+0xf0>)
 8001272:	21be      	movs	r1, #190	; 0xbe
 8001274:	2005      	movs	r0, #5
 8001276:	f001 fcab 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 210, (uint8_t *)"Modul: ET.PM3 ZHAW", LEFT_MODE);
 800127a:	2303      	movs	r3, #3
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <MENU_hint+0xf4>)
 800127e:	21d2      	movs	r1, #210	; 0xd2
 8001280:	2005      	movs	r0, #5
 8001282:	f001 fca5 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 230, (uint8_t *)"Lecturers: Matic &", LEFT_MODE);
 8001286:	2303      	movs	r3, #3
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <MENU_hint+0xf8>)
 800128a:	21e6      	movs	r1, #230	; 0xe6
 800128c:	2005      	movs	r0, #5
 800128e:	f001 fc9f 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 250, (uint8_t *)"Ehrensperger", LEFT_MODE);
 8001292:	2303      	movs	r3, #3
 8001294:	4a11      	ldr	r2, [pc, #68]	; (80012dc <MENU_hint+0xfc>)
 8001296:	21fa      	movs	r1, #250	; 0xfa
 8001298:	2005      	movs	r0, #5
 800129a:	f001 fc99 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002d8 	.word	0x200002d8
 80012a8:	080086a4 	.word	0x080086a4
 80012ac:	200002e8 	.word	0x200002e8
 80012b0:	080086b4 	.word	0x080086b4
 80012b4:	200002e0 	.word	0x200002e0
 80012b8:	080086c8 	.word	0x080086c8
 80012bc:	080086e0 	.word	0x080086e0
 80012c0:	080086f4 	.word	0x080086f4
 80012c4:	08008704 	.word	0x08008704
 80012c8:	08008718 	.word	0x08008718
 80012cc:	08008728 	.word	0x08008728
 80012d0:	0800873c 	.word	0x0800873c
 80012d4:	08008754 	.word	0x08008754
 80012d8:	08008768 	.word	0x08008768
 80012dc:	0800877c 	.word	0x0800877c

080012e0 <MENU_Measurements>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_Measurements(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f001 fc06 	bl	8002af8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f001 fbce 	bl	8002a90 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012f8:	f001 fbb2 	bl	8002a60 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80012fc:	480e      	ldr	r0, [pc, #56]	; (8001338 <MENU_Measurements+0x58>)
 80012fe:	f001 fbe1 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,10, (uint8_t *)"Cable-Monitor", CENTER_MODE);
 8001302:	2301      	movs	r3, #1
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <MENU_Measurements+0x5c>)
 8001306:	210a      	movs	r1, #10
 8001308:	2000      	movs	r0, #0
 800130a:	f001 fc61 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <MENU_Measurements+0x60>)
 8001310:	f001 fbd8 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,30, (uint8_t *) "by Alejandro & Timo", CENTER_MODE);
 8001314:	2301      	movs	r3, #1
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <MENU_Measurements+0x64>)
 8001318:	211e      	movs	r1, #30
 800131a:	2000      	movs	r0, #0
 800131c:	f001 fc58 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <MENU_Measurements+0x68>)
 8001322:	f001 fbcf 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Menu: Measurements", LEFT_MODE);
 8001326:	2303      	movs	r3, #3
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <MENU_Measurements+0x6c>)
 800132a:	213c      	movs	r1, #60	; 0x3c
 800132c:	2005      	movs	r0, #5
 800132e:	f001 fc4f 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002d8 	.word	0x200002d8
 800133c:	080086a4 	.word	0x080086a4
 8001340:	200002e8 	.word	0x200002e8
 8001344:	080086b4 	.word	0x080086b4
 8001348:	200002e0 	.word	0x200002e0
 800134c:	0800878c 	.word	0x0800878c

08001350 <MENU_Calibrations>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_Calibrations(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f001 fbce 	bl	8002af8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f001 fb96 	bl	8002a90 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001364:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001368:	f001 fb7a 	bl	8002a60 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MENU_Calibrations+0x58>)
 800136e:	f001 fba9 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,10, (uint8_t *)"Cable-Monitor", CENTER_MODE);
 8001372:	2301      	movs	r3, #1
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <MENU_Calibrations+0x5c>)
 8001376:	210a      	movs	r1, #10
 8001378:	2000      	movs	r0, #0
 800137a:	f001 fc29 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MENU_Calibrations+0x60>)
 8001380:	f001 fba0 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,30, (uint8_t *) "by Alejandro & Timo", CENTER_MODE);
 8001384:	2301      	movs	r3, #1
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <MENU_Calibrations+0x64>)
 8001388:	211e      	movs	r1, #30
 800138a:	2000      	movs	r0, #0
 800138c:	f001 fc20 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MENU_Calibrations+0x68>)
 8001392:	f001 fb97 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Menu: Calibrations", LEFT_MODE);
 8001396:	2303      	movs	r3, #3
 8001398:	4a08      	ldr	r2, [pc, #32]	; (80013bc <MENU_Calibrations+0x6c>)
 800139a:	213c      	movs	r1, #60	; 0x3c
 800139c:	2005      	movs	r0, #5
 800139e:	f001 fc17 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200002d8 	.word	0x200002d8
 80013ac:	080086a4 	.word	0x080086a4
 80013b0:	200002e8 	.word	0x200002e8
 80013b4:	080086b4 	.word	0x080086b4
 80013b8:	200002e0 	.word	0x200002e0
 80013bc:	080087a0 	.word	0x080087a0

080013c0 <MENU_Info>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_Info(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f001 fb96 	bl	8002af8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f001 fb5e 	bl	8002a90 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013d4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013d8:	f001 fb42 	bl	8002a60 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80013dc:	480e      	ldr	r0, [pc, #56]	; (8001418 <MENU_Info+0x58>)
 80013de:	f001 fb71 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,10, (uint8_t *)"Cable-Monitor", CENTER_MODE);
 80013e2:	2301      	movs	r3, #1
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <MENU_Info+0x5c>)
 80013e6:	210a      	movs	r1, #10
 80013e8:	2000      	movs	r0, #0
 80013ea:	f001 fbf1 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <MENU_Info+0x60>)
 80013f0:	f001 fb68 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,30, (uint8_t *) "by Alejandro & Timo", CENTER_MODE);
 80013f4:	2301      	movs	r3, #1
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <MENU_Info+0x64>)
 80013f8:	211e      	movs	r1, #30
 80013fa:	2000      	movs	r0, #0
 80013fc:	f001 fbe8 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001400:	4809      	ldr	r0, [pc, #36]	; (8001428 <MENU_Info+0x68>)
 8001402:	f001 fb5f 	bl	8002ac4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Menu: Info", LEFT_MODE);
 8001406:	2303      	movs	r3, #3
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <MENU_Info+0x6c>)
 800140a:	213c      	movs	r1, #60	; 0x3c
 800140c:	2005      	movs	r0, #5
 800140e:	f001 fbdf 	bl	8002bd0 <BSP_LCD_DisplayStringAt>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002d8 	.word	0x200002d8
 800141c:	080086a4 	.word	0x080086a4
 8001420:	200002e8 	.word	0x200002e8
 8001424:	080086b4 	.word	0x080086b4
 8001428:	200002e0 	.word	0x200002e0
 800142c:	080087b4 	.word	0x080087b4

08001430 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MENU_get_transition+0x20>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <MENU_get_transition+0x20>)
 800143e:	2207      	movs	r2, #7
 8001440:	701a      	strb	r2, [r3, #0]
	return item;
 8001442:	79fb      	ldrb	r3, [r7, #7]
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20000004 	.word	0x20000004

08001454 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(MENU_item_t menu)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]

	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	uint32_t menu_offset = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
	BSP_TS_GetState(&TS_State);			// Get the state
 8001462:	482b      	ldr	r0, [pc, #172]	; (8001510 <MENU_check_transition+0xbc>)
 8001464:	f002 f9f2 	bl	800384c <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001468:	f001 fa7a 	bl	8002960 <BSP_LCD_GetYSize>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MENU_check_transition+0xbc>)
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MENU_check_transition+0xbc>)
 800147a:	809a      	strh	r2, [r3, #4]
#endif
#ifdef EVAL_REV_E
#endif
*/

	if (TS_State.TouchDetected) {		// If a touch was detected
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MENU_check_transition+0xbc>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d041      	beq.n	8001508 <MENU_check_transition+0xb4>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <MENU_check_transition+0xc0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b07      	cmp	r3, #7
 800148a:	d13d      	bne.n	8001508 <MENU_check_transition+0xb4>
			item_old = item_new;		// Store old item
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MENU_check_transition+0xc4>)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MENU_check_transition+0xc8>)
 8001492:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001494:	f001 fa64 	bl	8002960 <BSP_LCD_GetYSize>
 8001498:	4603      	mov	r3, r0
 800149a:	3b28      	subs	r3, #40	; 0x28
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <MENU_check_transition+0xbc>)
 800149e:	8892      	ldrh	r2, [r2, #4]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d231      	bcs.n	8001508 <MENU_check_transition+0xb4>
 80014a4:	f001 fa5c 	bl	8002960 <BSP_LCD_GetYSize>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4a19      	ldr	r2, [pc, #100]	; (8001510 <MENU_check_transition+0xbc>)
 80014ac:	8892      	ldrh	r2, [r2, #4]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d92a      	bls.n	8001508 <MENU_check_transition+0xb4>
				//Calculate which menu is next
				if(menu < MENU_NUM_NUM_ENTRIES) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d804      	bhi.n	80014c2 <MENU_check_transition+0x6e>
					menu_offset = menu*MENU_NUM_MENU_ELEMENTS; //calculate the menu
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
				}
				
				item_new = TS_State.X	// Calculate new item
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MENU_check_transition+0xbc>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
 80014c6:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_NUM_MENU_ELEMENTS);
 80014c8:	f001 fa3e 	bl	8002948 <BSP_LCD_GetXSize>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <MENU_check_transition+0xcc>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80014da:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MENU_check_transition+0xc4>)
 80014de:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MENU_check_transition+0xc4>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b0e      	cmp	r3, #14
 80014e6:	d902      	bls.n	80014ee <MENU_check_transition+0x9a>
					item_new = MENU_NONE;	// Out of bounds
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MENU_check_transition+0xc4>)
 80014ea:	2207      	movs	r2, #7
 80014ec:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MENU_check_transition+0xc4>)
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MENU_check_transition+0xc8>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d106      	bne.n	8001508 <MENU_check_transition+0xb4>
					item_new = MENU_NONE;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MENU_check_transition+0xc4>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MENU_check_transition+0xc8>)
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <MENU_check_transition+0xc0>)
 8001506:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	20000558 	.word	0x20000558
 8001514:	20000004 	.word	0x20000004
 8001518:	20000260 	.word	0x20000260
 800151c:	20000261 	.word	0x20000261
 8001520:	aaaaaaab 	.word	0xaaaaaaab

08001524 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <EXTI15_10_IRQHandler+0x40>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d015      	beq.n	8001560 <EXTI15_10_IRQHandler+0x3c>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <EXTI15_10_IRQHandler+0x40>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <EXTI15_10_IRQHandler+0x40>)
 800153a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153e:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8001540:	f002 f978 	bl	8003834 <BSP_TS_ITGetStatus>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <EXTI15_10_IRQHandler+0x30>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 800154a:	f002 fa31 	bl	80039b0 <BSP_TS_ITClear>
			MENU_check_transition(MENU_NONE);
 800154e:	2007      	movs	r0, #7
 8001550:	f7ff ff80 	bl	8001454 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <EXTI15_10_IRQHandler+0x40>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	4a02      	ldr	r2, [pc, #8]	; (8001564 <EXTI15_10_IRQHandler+0x40>)
 800155a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155e:	6153      	str	r3, [r2, #20]
	}
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013c00 	.word	0x40013c00

08001568 <__NVIC_EnableIRQ>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <__NVIC_EnableIRQ+0x38>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_ClearPendingIRQ>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0c      	blt.n	80015d0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <__NVIC_ClearPendingIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	3360      	adds	r3, #96	; 0x60
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <PB_init+0x38>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <PB_init+0x38>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <PB_init+0x38>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <PB_init+0x3c>)
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <PB_init+0x3c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <PB_enableIRQ+0x58>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <PB_enableIRQ+0x58>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <PB_enableIRQ+0x58>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <PB_enableIRQ+0x5c>)
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <PB_enableIRQ+0x5c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <PB_enableIRQ+0x60>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <PB_enableIRQ+0x60>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <PB_enableIRQ+0x60>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <PB_enableIRQ+0x60>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001662:	2006      	movs	r0, #6
 8001664:	f7ff ff9e 	bl	80015a4 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001668:	2006      	movs	r0, #6
 800166a:	f7ff ff7d 	bl	8001568 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40013c00 	.word	0x40013c00

08001684 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <PB_pressed+0x20>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <PB_pressed+0x20>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
	return pressed;
 8001696:	79fb      	ldrb	r3, [r7, #7]
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000560 	.word	0x20000560

080016a8 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <EXTI0_IRQHandler+0x2c>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <EXTI0_IRQHandler+0x2c>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <EXTI0_IRQHandler+0x2c>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <EXTI0_IRQHandler+0x30>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
	}
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40013c00 	.word	0x40013c00
 80016d8:	20000560 	.word	0x20000560

080016dc <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001730:	f002 f9a4 	bl	8003a7c <HAL_IncTick>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <SystemInit+0x60>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <SystemInit+0x60>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <SystemInit+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <SystemInit+0x64>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <SystemInit+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <SystemInit+0x64>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <SystemInit+0x64>)
 8001764:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <SystemInit+0x64>)
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <SystemInit+0x68>)
 8001772:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <SystemInit+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <SystemInit+0x64>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SystemInit+0x60>)
 8001788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800178c:	609a      	str	r2, [r3, #8]
#endif
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	40023800 	.word	0x40023800
 80017a0:	24003010 	.word	0x24003010

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017aa:	e003      	b.n	80017b4 <LoopCopyDataInit>

080017ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017b2:	3104      	adds	r1, #4

080017b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017bc:	d3f6      	bcc.n	80017ac <CopyDataInit>
  ldr  r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017c0:	e002      	b.n	80017c8 <LoopFillZerobss>

080017c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017c4:	f842 3b04 	str.w	r3, [r2], #4

080017c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017cc:	d3f9      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffb3 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f006 fac7 	bl	8007d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7fe ff1f 	bl	8000618 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80017e0:	0800b334 	.word	0x0800b334
  ldr  r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017e8:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 80017ec:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 80017f0:	20000974 	.word	0x20000974

080017f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <CAN1_RX0_IRQHandler>

080017f6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80017fa:	f000 feed 	bl	80025d8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80017fe:	20ca      	movs	r0, #202	; 0xca
 8001800:	f000 f95d 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001804:	20c3      	movs	r0, #195	; 0xc3
 8001806:	f000 f967 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800180a:	2008      	movs	r0, #8
 800180c:	f000 f964 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001810:	2050      	movs	r0, #80	; 0x50
 8001812:	f000 f961 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001816:	20cf      	movs	r0, #207	; 0xcf
 8001818:	f000 f951 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800181c:	2000      	movs	r0, #0
 800181e:	f000 f95b 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001822:	20c1      	movs	r0, #193	; 0xc1
 8001824:	f000 f958 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001828:	2030      	movs	r0, #48	; 0x30
 800182a:	f000 f955 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800182e:	20ed      	movs	r0, #237	; 0xed
 8001830:	f000 f945 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001834:	2064      	movs	r0, #100	; 0x64
 8001836:	f000 f94f 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800183a:	2003      	movs	r0, #3
 800183c:	f000 f94c 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001840:	2012      	movs	r0, #18
 8001842:	f000 f949 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001846:	2081      	movs	r0, #129	; 0x81
 8001848:	f000 f946 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800184c:	20e8      	movs	r0, #232	; 0xe8
 800184e:	f000 f936 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001852:	2085      	movs	r0, #133	; 0x85
 8001854:	f000 f940 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001858:	2000      	movs	r0, #0
 800185a:	f000 f93d 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800185e:	2078      	movs	r0, #120	; 0x78
 8001860:	f000 f93a 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001864:	20cb      	movs	r0, #203	; 0xcb
 8001866:	f000 f92a 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800186a:	2039      	movs	r0, #57	; 0x39
 800186c:	f000 f934 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001870:	202c      	movs	r0, #44	; 0x2c
 8001872:	f000 f931 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f92e 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800187c:	2034      	movs	r0, #52	; 0x34
 800187e:	f000 f92b 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001882:	2002      	movs	r0, #2
 8001884:	f000 f928 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001888:	20f7      	movs	r0, #247	; 0xf7
 800188a:	f000 f918 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800188e:	2020      	movs	r0, #32
 8001890:	f000 f922 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001894:	20ea      	movs	r0, #234	; 0xea
 8001896:	f000 f912 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f91c 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 f919 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80018a6:	20b1      	movs	r0, #177	; 0xb1
 80018a8:	f000 f909 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f913 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018b2:	201b      	movs	r0, #27
 80018b4:	f000 f910 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80018b8:	20b6      	movs	r0, #182	; 0xb6
 80018ba:	f000 f900 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80018be:	200a      	movs	r0, #10
 80018c0:	f000 f90a 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80018c4:	20a2      	movs	r0, #162	; 0xa2
 80018c6:	f000 f907 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80018ca:	20c0      	movs	r0, #192	; 0xc0
 80018cc:	f000 f8f7 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018d0:	2010      	movs	r0, #16
 80018d2:	f000 f901 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80018d6:	20c1      	movs	r0, #193	; 0xc1
 80018d8:	f000 f8f1 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018dc:	2010      	movs	r0, #16
 80018de:	f000 f8fb 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80018e2:	20c5      	movs	r0, #197	; 0xc5
 80018e4:	f000 f8eb 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80018e8:	2045      	movs	r0, #69	; 0x45
 80018ea:	f000 f8f5 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80018ee:	2015      	movs	r0, #21
 80018f0:	f000 f8f2 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80018f4:	20c7      	movs	r0, #199	; 0xc7
 80018f6:	f000 f8e2 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80018fa:	2090      	movs	r0, #144	; 0x90
 80018fc:	f000 f8ec 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001900:	2036      	movs	r0, #54	; 0x36
 8001902:	f000 f8dc 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001906:	20c8      	movs	r0, #200	; 0xc8
 8001908:	f000 f8e6 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800190c:	20f2      	movs	r0, #242	; 0xf2
 800190e:	f000 f8d6 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f8e0 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001918:	20b0      	movs	r0, #176	; 0xb0
 800191a:	f000 f8d0 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800191e:	20c2      	movs	r0, #194	; 0xc2
 8001920:	f000 f8da 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001924:	20b6      	movs	r0, #182	; 0xb6
 8001926:	f000 f8ca 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800192a:	200a      	movs	r0, #10
 800192c:	f000 f8d4 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001930:	20a7      	movs	r0, #167	; 0xa7
 8001932:	f000 f8d1 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001936:	2027      	movs	r0, #39	; 0x27
 8001938:	f000 f8ce 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800193c:	2004      	movs	r0, #4
 800193e:	f000 f8cb 	bl	8001ad8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001942:	202a      	movs	r0, #42	; 0x2a
 8001944:	f000 f8bb 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001948:	2000      	movs	r0, #0
 800194a:	f000 f8c5 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f8c2 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001954:	2000      	movs	r0, #0
 8001956:	f000 f8bf 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800195a:	20ef      	movs	r0, #239	; 0xef
 800195c:	f000 f8bc 	bl	8001ad8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001960:	202b      	movs	r0, #43	; 0x2b
 8001962:	f000 f8ac 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001966:	2000      	movs	r0, #0
 8001968:	f000 f8b6 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f8b3 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001972:	2001      	movs	r0, #1
 8001974:	f000 f8b0 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001978:	203f      	movs	r0, #63	; 0x3f
 800197a:	f000 f8ad 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800197e:	20f6      	movs	r0, #246	; 0xf6
 8001980:	f000 f89d 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001984:	2001      	movs	r0, #1
 8001986:	f000 f8a7 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f8a4 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001990:	2006      	movs	r0, #6
 8001992:	f000 f8a1 	bl	8001ad8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001996:	202c      	movs	r0, #44	; 0x2c
 8001998:	f000 f891 	bl	8001abe <ili9341_WriteReg>
  LCD_Delay(200);
 800199c:	20c8      	movs	r0, #200	; 0xc8
 800199e:	f000 ff09 	bl	80027b4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80019a2:	2026      	movs	r0, #38	; 0x26
 80019a4:	f000 f88b 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f000 f895 	bl	8001ad8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80019ae:	20e0      	movs	r0, #224	; 0xe0
 80019b0:	f000 f885 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80019b4:	200f      	movs	r0, #15
 80019b6:	f000 f88f 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80019ba:	2029      	movs	r0, #41	; 0x29
 80019bc:	f000 f88c 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80019c0:	2024      	movs	r0, #36	; 0x24
 80019c2:	f000 f889 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019c6:	200c      	movs	r0, #12
 80019c8:	f000 f886 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80019cc:	200e      	movs	r0, #14
 80019ce:	f000 f883 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019d2:	2009      	movs	r0, #9
 80019d4:	f000 f880 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80019d8:	204e      	movs	r0, #78	; 0x4e
 80019da:	f000 f87d 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019de:	2078      	movs	r0, #120	; 0x78
 80019e0:	f000 f87a 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80019e4:	203c      	movs	r0, #60	; 0x3c
 80019e6:	f000 f877 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019ea:	2009      	movs	r0, #9
 80019ec:	f000 f874 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80019f0:	2013      	movs	r0, #19
 80019f2:	f000 f871 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019f6:	2005      	movs	r0, #5
 80019f8:	f000 f86e 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80019fc:	2017      	movs	r0, #23
 80019fe:	f000 f86b 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a02:	2011      	movs	r0, #17
 8001a04:	f000 f868 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 f865 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001a0e:	20e1      	movs	r0, #225	; 0xe1
 8001a10:	f000 f855 	bl	8001abe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 f85f 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001a1a:	2016      	movs	r0, #22
 8001a1c:	f000 f85c 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a20:	201b      	movs	r0, #27
 8001a22:	f000 f859 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a26:	2004      	movs	r0, #4
 8001a28:	f000 f856 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	f000 f853 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001a32:	2007      	movs	r0, #7
 8001a34:	f000 f850 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001a38:	2031      	movs	r0, #49	; 0x31
 8001a3a:	f000 f84d 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001a3e:	2033      	movs	r0, #51	; 0x33
 8001a40:	f000 f84a 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001a44:	2042      	movs	r0, #66	; 0x42
 8001a46:	f000 f847 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001a4a:	2005      	movs	r0, #5
 8001a4c:	f000 f844 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a50:	200c      	movs	r0, #12
 8001a52:	f000 f841 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001a56:	200a      	movs	r0, #10
 8001a58:	f000 f83e 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001a5c:	2028      	movs	r0, #40	; 0x28
 8001a5e:	f000 f83b 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001a62:	202f      	movs	r0, #47	; 0x2f
 8001a64:	f000 f838 	bl	8001ad8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001a68:	200f      	movs	r0, #15
 8001a6a:	f000 f835 	bl	8001ad8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001a6e:	2011      	movs	r0, #17
 8001a70:	f000 f825 	bl	8001abe <ili9341_WriteReg>
  LCD_Delay(200);
 8001a74:	20c8      	movs	r0, #200	; 0xc8
 8001a76:	f000 fe9d 	bl	80027b4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a7a:	2029      	movs	r0, #41	; 0x29
 8001a7c:	f000 f81f 	bl	8001abe <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001a80:	202c      	movs	r0, #44	; 0x2c
 8001a82:	f000 f81c 	bl	8001abe <ili9341_WriteReg>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001a8e:	f000 fda3 	bl	80025d8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a92:	2103      	movs	r1, #3
 8001a94:	20d3      	movs	r0, #211	; 0xd3
 8001a96:	f000 f82c 	bl	8001af2 <ili9341_ReadData>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29b      	uxth	r3, r3
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001aa6:	2029      	movs	r0, #41	; 0x29
 8001aa8:	f000 f809 	bl	8001abe <ili9341_WriteReg>
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ab4:	2028      	movs	r0, #40	; 0x28
 8001ab6:	f000 f802 	bl	8001abe <ili9341_WriteReg>
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}

08001abe <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fe1e 	bl	800270c <LCD_IO_WriteReg>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fdef 	bl	80026c8 <LCD_IO_WriteData>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	460a      	mov	r2, r1
 8001afc:	80fb      	strh	r3, [r7, #6]
 8001afe:	4613      	mov	r3, r2
 8001b00:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001b02:	797a      	ldrb	r2, [r7, #5]
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fe21 	bl	8002750 <LCD_IO_ReadData>
 8001b0e:	4603      	mov	r3, r0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001b1c:	23f0      	movs	r3, #240	; 0xf0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001b2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fa59 	bl	8002000 <stmpe811_GetInstance>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2bff      	cmp	r3, #255	; 0xff
 8001b56:	d112      	bne.n	8001b7e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 fa51 	bl	8002000 <stmpe811_GetInstance>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d80a      	bhi.n	8001b7e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	b2d1      	uxtb	r1, r2
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <stmpe811_Init+0x4c>)
 8001b70:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001b72:	f000 fe2a 	bl	80027ca <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f807 	bl	8001b8c <stmpe811_Reset>
    }
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000564 	.word	0x20000564

08001b8c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fe1f 	bl	80027e2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f000 fe59 	bl	800285c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2103      	movs	r1, #3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fe15 	bl	80027e2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f000 fe4f 	bl	800285c <IOE_Delay>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001bc6:	b590      	push	{r4, r7, lr}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001bd0:	f000 fdfb 	bl	80027ca <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fe14 	bl	8002808 <IOE_Read>
 8001be0:	4603      	mov	r3, r0
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fe0b 	bl	8002808 <IOE_Read>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	b29b      	uxth	r3, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}

08001c04 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2109      	movs	r1, #9
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fdf5 	bl	8002808 <IOE_Read>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	2109      	movs	r1, #9
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fdd5 	bl	80027e2 <IOE_Write>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2109      	movs	r1, #9
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fdd7 	bl	8002808 <IOE_Read>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	2109      	movs	r1, #9
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fdb7 	bl	80027e2 <IOE_Write>
    
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	460a      	mov	r2, r1
 8001c86:	80fb      	strh	r3, [r7, #6]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	210a      	movs	r1, #10
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fdb6 	bl	8002808 <IOE_Read>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	797b      	ldrb	r3, [r7, #5]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	210a      	movs	r1, #10
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fd96 	bl	80027e2 <IOE_Write>
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	80fb      	strh	r3, [r7, #6]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	210a      	movs	r1, #10
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd95 	bl	8002808 <IOE_Read>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001ce2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	b25a      	sxtb	r2, r3
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	210a      	movs	r1, #10
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fd70 	bl	80027e2 <IOE_Write>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	460a      	mov	r2, r1
 8001d14:	80fb      	strh	r3, [r7, #6]
 8001d16:	4613      	mov	r3, r2
 8001d18:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	210b      	movs	r1, #11
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fd71 	bl	8002808 <IOE_Read>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b2db      	uxtb	r3, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	80fb      	strh	r3, [r7, #6]
 8001d44:	4613      	mov	r3, r2
 8001d46:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	797a      	ldrb	r2, [r7, #5]
 8001d4e:	210b      	movs	r1, #11
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fd46 	bl	80027e2 <IOE_Write>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	6039      	str	r1, [r7, #0]
 8001d68:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2117      	movs	r1, #23
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fd47 	bl	8002808 <IOE_Read>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	2117      	movs	r1, #23
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fd22 	bl	80027e2 <IOE_Write>
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2104      	movs	r1, #4
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fd26 	bl	8002808 <IOE_Read>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	f023 0304 	bic.w	r3, r3, #4
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	2104      	movs	r1, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fd06 	bl	80027e2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	21f0      	movs	r1, #240	; 0xf0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ffbf 	bl	8001d5e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	2104      	movs	r1, #4
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fcf6 	bl	80027e2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2249      	movs	r2, #73	; 0x49
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fcef 	bl	80027e2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001e04:	2002      	movs	r0, #2
 8001e06:	f000 fd29 	bl	800285c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2121      	movs	r1, #33	; 0x21
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fce5 	bl	80027e2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	229a      	movs	r2, #154	; 0x9a
 8001e1e:	2141      	movs	r1, #65	; 0x41
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fcde 	bl	80027e2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	214a      	movs	r1, #74	; 0x4a
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fcd7 	bl	80027e2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	214b      	movs	r1, #75	; 0x4b
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fcd0 	bl	80027e2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2200      	movs	r2, #0
 8001e48:	214b      	movs	r1, #75	; 0x4b
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fcc9 	bl	80027e2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2201      	movs	r2, #1
 8001e56:	2156      	movs	r1, #86	; 0x56
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fcc2 	bl	80027e2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2201      	movs	r2, #1
 8001e64:	2158      	movs	r1, #88	; 0x58
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fcbb 	bl	80027e2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2201      	movs	r2, #1
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fcb4 	bl	80027e2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	22ff      	movs	r2, #255	; 0xff
 8001e80:	210b      	movs	r1, #11
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fcad 	bl	80027e2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f000 fce7 	bl	800285c <IOE_Delay>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fcac 	bl	8002808 <IOE_Read>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001ec2:	7bbb      	ldrb	r3, [r7, #14]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	214c      	movs	r1, #76	; 0x4c
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fc9a 	bl	8002808 <IOE_Read>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d010      	beq.n	8001efc <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e00d      	b.n	8001efc <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	214b      	movs	r1, #75	; 0x4b
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fc7a 	bl	80027e2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	214b      	movs	r1, #75	; 0x4b
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fc73 	bl	80027e2 <IOE_Write>
  }
  
  return ret;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	b2d8      	uxtb	r0, r3
 8001f18:	f107 0210 	add.w	r2, r7, #16
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	21d7      	movs	r1, #215	; 0xd7
 8001f20:	f000 fc85 	bl	800282e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001f24:	7c3b      	ldrb	r3, [r7, #16]
 8001f26:	061a      	lsls	r2, r3, #24
 8001f28:	7c7b      	ldrb	r3, [r7, #17]
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	7cbb      	ldrb	r3, [r7, #18]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	4313      	orrs	r3, r2
 8001f34:	7cfa      	ldrb	r2, [r7, #19]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	0d1b      	lsrs	r3, r3, #20
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f54:	89fb      	ldrh	r3, [r7, #14]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2201      	movs	r2, #1
 8001f5a:	214b      	movs	r1, #75	; 0x4b
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fc40 	bl	80027e2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2200      	movs	r2, #0
 8001f68:	214b      	movs	r1, #75	; 0x4b
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fc39 	bl	80027e2 <IOE_Write>
}
 8001f70:	bf00      	nop
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8001f82:	f000 fc28 	bl	80027d6 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	211f      	movs	r1, #31
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe76 	bl	8001c7c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe36 	bl	8001c04 <stmpe811_EnableGlobalIT>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fe47 	bl	8001c40 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	211f      	movs	r1, #31
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fe81 	bl	8001cbe <stmpe811_DisableITSource>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	211f      	movs	r1, #31
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fe99 	bl	8001d0a <stmpe811_ReadGITStatus>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	211f      	movs	r1, #31
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fea1 	bl	8001d38 <stmpe811_ClearGlobalIT>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e00b      	b.n	800202c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <stmpe811_GetInstance+0x40>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	b29b      	uxth	r3, r3
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	429a      	cmp	r2, r3
 8002020:	d101      	bne.n	8002026 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	e006      	b.n	8002034 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d9f0      	bls.n	8002014 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002032:	23ff      	movs	r3, #255	; 0xff
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000564 	.word	0x20000564

08002044 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10e      	bne.n	8002072 <BSP_LED_Init+0x2e>
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <BSP_LED_Init+0x9c>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <BSP_LED_Init+0x9c>)
 800205e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002062:	6313      	str	r3, [r2, #48]	; 0x30
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <BSP_LED_Init+0x9c>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	e010      	b.n	8002094 <BSP_LED_Init+0x50>
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10d      	bne.n	8002094 <BSP_LED_Init+0x50>
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <BSP_LED_Init+0x9c>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <BSP_LED_Init+0x9c>)
 8002082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <BSP_LED_Init+0x9c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <BSP_LED_Init+0xa0>)
 8002098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	2301      	movs	r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <BSP_LED_Init+0xa4>)
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	f107 0214 	add.w	r2, r7, #20
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fa89 	bl	80045d0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <BSP_LED_Init+0xa4>)
 80020c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <BSP_LED_Init+0xa0>)
 80020ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ce:	2200      	movs	r2, #0
 80020d0:	4619      	mov	r1, r3
 80020d2:	f002 fc41 	bl	8004958 <HAL_GPIO_WritePin>
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	080087d8 	.word	0x080087d8
 80020e8:	200002c8 	.word	0x200002c8

080020ec <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <BSP_LED_On+0x2c>)
 80020fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <BSP_LED_On+0x30>)
 8002102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002106:	2201      	movs	r2, #1
 8002108:	4619      	mov	r1, r3
 800210a:	f002 fc25 	bl	8004958 <HAL_GPIO_WritePin>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200002c8 	.word	0x200002c8
 800211c:	080087d8 	.word	0x080087d8

08002120 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <BSP_LED_Off+0x2c>)
 800212e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <BSP_LED_Off+0x30>)
 8002136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	f002 fc0b 	bl	8004958 <HAL_GPIO_WritePin>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200002c8 	.word	0x200002c8
 8002150:	080087d8 	.word	0x080087d8

08002154 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <BSP_LED_Toggle+0x2c>)
 8002162:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <BSP_LED_Toggle+0x30>)
 800216a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f002 fc0a 	bl	800498a <HAL_GPIO_TogglePin>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200002c8 	.word	0x200002c8
 8002184:	080087d8 	.word	0x080087d8

08002188 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a33      	ldr	r2, [pc, #204]	; (8002264 <I2Cx_MspInit+0xdc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d15f      	bne.n	800225a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	4b32      	ldr	r3, [pc, #200]	; (8002268 <I2Cx_MspInit+0xe0>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a31      	ldr	r2, [pc, #196]	; (8002268 <I2Cx_MspInit+0xe0>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <I2Cx_MspInit+0xe0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <I2Cx_MspInit+0xe0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <I2Cx_MspInit+0xe0>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b28      	ldr	r3, [pc, #160]	; (8002268 <I2Cx_MspInit+0xe0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80021d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80021d8:	2312      	movs	r3, #18
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80021e4:	2304      	movs	r3, #4
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	481f      	ldr	r0, [pc, #124]	; (800226c <I2Cx_MspInit+0xe4>)
 80021f0:	f002 f9ee 	bl	80045d0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80021f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	481b      	ldr	r0, [pc, #108]	; (8002270 <I2Cx_MspInit+0xe8>)
 8002202:	f002 f9e5 	bl	80045d0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <I2Cx_MspInit+0xe0>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <I2Cx_MspInit+0xe0>)
 8002210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <I2Cx_MspInit+0xe0>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <I2Cx_MspInit+0xe0>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <I2Cx_MspInit+0xe0>)
 8002228:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800222c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <I2Cx_MspInit+0xe0>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <I2Cx_MspInit+0xe0>)
 8002234:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002238:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	210f      	movs	r1, #15
 800223e:	2048      	movs	r0, #72	; 0x48
 8002240:	f001 fd3b 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002244:	2048      	movs	r0, #72	; 0x48
 8002246:	f001 fd54 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	210f      	movs	r1, #15
 800224e:	2049      	movs	r0, #73	; 0x49
 8002250:	f001 fd33 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002254:	2049      	movs	r0, #73	; 0x49
 8002256:	f001 fd4c 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	; 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40005c00 	.word	0x40005c00
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000
 8002270:	40020800 	.word	0x40020800

08002274 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002278:	4814      	ldr	r0, [pc, #80]	; (80022cc <I2Cx_Init+0x58>)
 800227a:	f003 f849 	bl	8005310 <HAL_I2C_GetState>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d121      	bne.n	80022c8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <I2Cx_Init+0x58>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <I2Cx_Init+0x5c>)
 8002288:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <I2Cx_Init+0x58>)
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <I2Cx_Init+0x60>)
 800228e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <I2Cx_Init+0x58>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <I2Cx_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <I2Cx_Init+0x58>)
 800229e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <I2Cx_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <I2Cx_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <I2Cx_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <I2Cx_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <I2Cx_Init+0x58>)
 80022be:	f7ff ff63 	bl	8002188 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80022c2:	4802      	ldr	r0, [pc, #8]	; (80022cc <I2Cx_Init+0x58>)
 80022c4:	f002 fb7c 	bl	80049c0 <HAL_I2C_Init>
  }
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000568 	.word	0x20000568
 80022d0:	40005c00 	.word	0x40005c00
 80022d4:	000186a0 	.word	0x000186a0

080022d8 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <I2Cx_ITConfig+0x58>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <I2Cx_ITConfig+0x58>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <I2Cx_ITConfig+0x58>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80022fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002300:	2301      	movs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <I2Cx_ITConfig+0x5c>)
 800230a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <I2Cx_ITConfig+0x60>)
 8002312:	f002 f95d 	bl	80045d0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002316:	2200      	movs	r2, #0
 8002318:	210f      	movs	r1, #15
 800231a:	2028      	movs	r0, #40	; 0x28
 800231c:	f001 fccd 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002320:	2028      	movs	r0, #40	; 0x28
 8002322:	f001 fce6 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	10210000 	.word	0x10210000
 8002338:	40020000 	.word	0x40020000

0800233c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af04      	add	r7, sp, #16
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	460b      	mov	r3, r1
 8002348:	71bb      	strb	r3, [r7, #6]
 800234a:	4613      	mov	r3, r2
 800234c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	b299      	uxth	r1, r3
 8002356:	79bb      	ldrb	r3, [r7, #6]
 8002358:	b29a      	uxth	r2, r3
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <I2Cx_WriteData+0x4c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2301      	movs	r3, #1
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	1d7b      	adds	r3, r7, #5
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	4808      	ldr	r0, [pc, #32]	; (800238c <I2Cx_WriteData+0x50>)
 800236c:	f002 fcb0 	bl	8004cd0 <HAL_I2C_Mem_Write>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800237a:	f000 f863 	bl	8002444 <I2Cx_Error>
  }        
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200002d0 	.word	0x200002d0
 800238c:	20000568 	.word	0x20000568

08002390 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af04      	add	r7, sp, #16
 8002396:	4603      	mov	r3, r0
 8002398:	460a      	mov	r2, r1
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	4613      	mov	r3, r2
 800239e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	b299      	uxth	r1, r3
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <I2Cx_ReadData+0x50>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	f107 030e 	add.w	r3, r7, #14
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	4808      	ldr	r0, [pc, #32]	; (80023e4 <I2Cx_ReadData+0x54>)
 80023c4:	f002 fd7e 	bl	8004ec4 <HAL_I2C_Mem_Read>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80023d2:	f000 f837 	bl	8002444 <I2Cx_Error>
  
  }
  return value;
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200002d0 	.word	0x200002d0
 80023e4:	20000568 	.word	0x20000568

080023e8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af04      	add	r7, sp, #16
 80023ee:	603a      	str	r2, [r7, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	460b      	mov	r3, r1
 80023f8:	71bb      	strb	r3, [r7, #6]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	b299      	uxth	r1, r3
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <I2Cx_ReadBuffer+0x54>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	9302      	str	r3, [sp, #8]
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	4809      	ldr	r0, [pc, #36]	; (8002440 <I2Cx_ReadBuffer+0x58>)
 800241c:	f002 fd52 	bl	8004ec4 <HAL_I2C_Mem_Read>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800242a:	2300      	movs	r3, #0
 800242c:	e002      	b.n	8002434 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800242e:	f000 f809 	bl	8002444 <I2Cx_Error>

    return 1;
 8002432:	2301      	movs	r3, #1
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200002d0 	.word	0x200002d0
 8002440:	20000568 	.word	0x20000568

08002444 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002448:	4803      	ldr	r0, [pc, #12]	; (8002458 <I2Cx_Error+0x14>)
 800244a:	f002 fbfd 	bl	8004c48 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800244e:	f7ff ff11 	bl	8002274 <I2Cx_Init>
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000568 	.word	0x20000568

0800245c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002460:	4819      	ldr	r0, [pc, #100]	; (80024c8 <SPIx_Init+0x6c>)
 8002462:	f005 f9e2 	bl	800782a <HAL_SPI_GetState>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d12b      	bne.n	80024c4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <SPIx_Init+0x6c>)
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <SPIx_Init+0x70>)
 8002470:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <SPIx_Init+0x6c>)
 8002474:	2218      	movs	r2, #24
 8002476:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <SPIx_Init+0x6c>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <SPIx_Init+0x6c>)
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <SPIx_Init+0x6c>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <SPIx_Init+0x6c>)
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <SPIx_Init+0x6c>)
 8002492:	2207      	movs	r2, #7
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <SPIx_Init+0x6c>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <SPIx_Init+0x6c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <SPIx_Init+0x6c>)
 80024a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <SPIx_Init+0x6c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SPIx_Init+0x6c>)
 80024b2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024b6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <SPIx_Init+0x6c>)
 80024ba:	f000 f853 	bl	8002564 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80024be:	4802      	ldr	r0, [pc, #8]	; (80024c8 <SPIx_Init+0x6c>)
 80024c0:	f004 fc29 	bl	8006d16 <HAL_SPI_Init>
  } 
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200005bc 	.word	0x200005bc
 80024cc:	40015000 	.word	0x40015000

080024d0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <SPIx_Read+0x38>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f107 0108 	add.w	r1, r7, #8
 80024ea:	4808      	ldr	r0, [pc, #32]	; (800250c <SPIx_Read+0x3c>)
 80024ec:	f004 fe10 	bl	8007110 <HAL_SPI_Receive>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024fa:	f000 f827 	bl	800254c <SPIx_Error>
  }
  
  return readvalue;
 80024fe:	68bb      	ldr	r3, [r7, #8]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200002d4 	.word	0x200002d4
 800250c:	200005bc 	.word	0x200005bc

08002510 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <SPIx_Write+0x34>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1db9      	adds	r1, r7, #6
 8002524:	2201      	movs	r2, #1
 8002526:	4808      	ldr	r0, [pc, #32]	; (8002548 <SPIx_Write+0x38>)
 8002528:	f004 fc9c 	bl	8006e64 <HAL_SPI_Transmit>
 800252c:	4603      	mov	r3, r0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002536:	f000 f809 	bl	800254c <SPIx_Error>
  }
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200002d4 	.word	0x200002d4
 8002548:	200005bc 	.word	0x200005bc

0800254c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002550:	4803      	ldr	r0, [pc, #12]	; (8002560 <SPIx_Error+0x14>)
 8002552:	f004 fc4b 	bl	8006dec <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002556:	f7ff ff81 	bl	800245c <SPIx_Init>
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200005bc 	.word	0x200005bc

08002564 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <SPIx_MspInit+0x6c>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <SPIx_MspInit+0x6c>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257a:	6453      	str	r3, [r2, #68]	; 0x44
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <SPIx_MspInit+0x6c>)
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <SPIx_MspInit+0x6c>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <SPIx_MspInit+0x6c>)
 8002592:	f043 0320 	orr.w	r3, r3, #32
 8002596:	6313      	str	r3, [r2, #48]	; 0x30
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <SPIx_MspInit+0x6c>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80025a4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80025b2:	2301      	movs	r3, #1
 80025b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80025b6:	2305      	movs	r3, #5
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4804      	ldr	r0, [pc, #16]	; (80025d4 <SPIx_MspInit+0x70>)
 80025c2:	f002 f805 	bl	80045d0 <HAL_GPIO_Init>
}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40021400 	.word	0x40021400

080025d8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <LCD_IO_Init+0xe0>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d164      	bne.n	80026b0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <LCD_IO_Init+0xe0>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	4b32      	ldr	r3, [pc, #200]	; (80026bc <LCD_IO_Init+0xe4>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a31      	ldr	r2, [pc, #196]	; (80026bc <LCD_IO_Init+0xe4>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <LCD_IO_Init+0xe4>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800260e:	2301      	movs	r3, #1
 8002610:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	4619      	mov	r1, r3
 8002620:	4827      	ldr	r0, [pc, #156]	; (80026c0 <LCD_IO_Init+0xe8>)
 8002622:	f001 ffd5 	bl	80045d0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <LCD_IO_Init+0xe4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <LCD_IO_Init+0xe4>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <LCD_IO_Init+0xe4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002648:	2301      	movs	r3, #1
 800264a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	4619      	mov	r1, r3
 800265a:	4819      	ldr	r0, [pc, #100]	; (80026c0 <LCD_IO_Init+0xe8>)
 800265c:	f001 ffb8 	bl	80045d0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <LCD_IO_Init+0xe4>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <LCD_IO_Init+0xe4>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6313      	str	r3, [r2, #48]	; 0x30
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <LCD_IO_Init+0xe4>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800267c:	2304      	movs	r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002688:	2302      	movs	r3, #2
 800268a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	4619      	mov	r1, r3
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <LCD_IO_Init+0xec>)
 8002694:	f001 ff9c 	bl	80045d0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002698:	2200      	movs	r2, #0
 800269a:	2104      	movs	r1, #4
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <LCD_IO_Init+0xec>)
 800269e:	f002 f95b 	bl	8004958 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80026a2:	2201      	movs	r2, #1
 80026a4:	2104      	movs	r1, #4
 80026a6:	4807      	ldr	r0, [pc, #28]	; (80026c4 <LCD_IO_Init+0xec>)
 80026a8:	f002 f956 	bl	8004958 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80026ac:	f7ff fed6 	bl	800245c <SPIx_Init>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000614 	.word	0x20000614
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40020800 	.word	0x40020800

080026c8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80026d2:	2201      	movs	r2, #1
 80026d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d8:	480a      	ldr	r0, [pc, #40]	; (8002704 <LCD_IO_WriteData+0x3c>)
 80026da:	f002 f93d 	bl	8004958 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80026de:	2200      	movs	r2, #0
 80026e0:	2104      	movs	r1, #4
 80026e2:	4809      	ldr	r0, [pc, #36]	; (8002708 <LCD_IO_WriteData+0x40>)
 80026e4:	f002 f938 	bl	8004958 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff10 	bl	8002510 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026f0:	2201      	movs	r2, #1
 80026f2:	2104      	movs	r1, #4
 80026f4:	4804      	ldr	r0, [pc, #16]	; (8002708 <LCD_IO_WriteData+0x40>)
 80026f6:	f002 f92f 	bl	8004958 <HAL_GPIO_WritePin>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40020800 	.word	0x40020800

0800270c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800271c:	480a      	ldr	r0, [pc, #40]	; (8002748 <LCD_IO_WriteReg+0x3c>)
 800271e:	f002 f91b 	bl	8004958 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002722:	2200      	movs	r2, #0
 8002724:	2104      	movs	r1, #4
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <LCD_IO_WriteReg+0x40>)
 8002728:	f002 f916 	bl	8004958 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	b29b      	uxth	r3, r3
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff feed 	bl	8002510 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002736:	2201      	movs	r2, #1
 8002738:	2104      	movs	r1, #4
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <LCD_IO_WriteReg+0x40>)
 800273c:	f002 f90c 	bl	8004958 <HAL_GPIO_WritePin>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40020800 	.word	0x40020800

08002750 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	460a      	mov	r2, r1
 800275a:	80fb      	strh	r3, [r7, #6]
 800275c:	4613      	mov	r3, r2
 800275e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002764:	2200      	movs	r2, #0
 8002766:	2104      	movs	r1, #4
 8002768:	4810      	ldr	r0, [pc, #64]	; (80027ac <LCD_IO_ReadData+0x5c>)
 800276a:	f002 f8f5 	bl	8004958 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002774:	480e      	ldr	r0, [pc, #56]	; (80027b0 <LCD_IO_ReadData+0x60>)
 8002776:	f002 f8ef 	bl	8004958 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fec7 	bl	8002510 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002782:	797b      	ldrb	r3, [r7, #5]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fea3 	bl	80024d0 <SPIx_Read>
 800278a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800278c:	2201      	movs	r2, #1
 800278e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002792:	4807      	ldr	r0, [pc, #28]	; (80027b0 <LCD_IO_ReadData+0x60>)
 8002794:	f002 f8e0 	bl	8004958 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002798:	2201      	movs	r2, #1
 800279a:	2104      	movs	r1, #4
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <LCD_IO_ReadData+0x5c>)
 800279e:	f002 f8db 	bl	8004958 <HAL_GPIO_WritePin>
  
  return readvalue;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00

080027b4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 f97d 	bl	8003abc <HAL_Delay>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80027ce:	f7ff fd51 	bl	8002274 <I2Cx_Init>
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80027da:	f7ff fd7d 	bl	80022d8 <I2Cx_ITConfig>
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
 80027ec:	460b      	mov	r3, r1
 80027ee:	71bb      	strb	r3, [r7, #6]
 80027f0:	4613      	mov	r3, r2
 80027f2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80027f4:	797a      	ldrb	r2, [r7, #5]
 80027f6:	79b9      	ldrb	r1, [r7, #6]
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fd9e 	bl	800233c <I2Cx_WriteData>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	460a      	mov	r2, r1
 8002812:	71fb      	strb	r3, [r7, #7]
 8002814:	4613      	mov	r3, r2
 8002816:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002818:	79ba      	ldrb	r2, [r7, #6]
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fdb6 	bl	8002390 <I2Cx_ReadData>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	603a      	str	r2, [r7, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	460b      	mov	r3, r1
 800283e:	71bb      	strb	r3, [r7, #6]
 8002840:	4613      	mov	r3, r2
 8002842:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	79b9      	ldrb	r1, [r7, #6]
 8002848:	79f8      	ldrb	r0, [r7, #7]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	f7ff fdcc 	bl	80023e8 <I2Cx_ReadBuffer>
 8002850:	4603      	mov	r3, r0
 8002852:	b29b      	uxth	r3, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f001 f929 	bl	8003abc <HAL_Delay>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <BSP_LCD_Init+0xbc>)
 800287a:	4a2e      	ldr	r2, [pc, #184]	; (8002934 <BSP_LCD_Init+0xc0>)
 800287c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <BSP_LCD_Init+0xbc>)
 8002880:	2209      	movs	r2, #9
 8002882:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <BSP_LCD_Init+0xbc>)
 8002886:	2201      	movs	r2, #1
 8002888:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800288a:	4b29      	ldr	r3, [pc, #164]	; (8002930 <BSP_LCD_Init+0xbc>)
 800288c:	221d      	movs	r2, #29
 800288e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <BSP_LCD_Init+0xbc>)
 8002892:	2203      	movs	r2, #3
 8002894:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <BSP_LCD_Init+0xbc>)
 8002898:	f240 120d 	movw	r2, #269	; 0x10d
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028a0:	f240 1243 	movw	r2, #323	; 0x143
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028a8:	f240 1217 	movw	r2, #279	; 0x117
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028b0:	f240 1247 	movw	r2, #327	; 0x147
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <BSP_LCD_Init+0xc4>)
 80028d0:	2208      	movs	r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <BSP_LCD_Init+0xc4>)
 80028d6:	22c0      	movs	r2, #192	; 0xc0
 80028d8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <BSP_LCD_Init+0xc4>)
 80028dc:	2204      	movs	r2, #4
 80028de:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <BSP_LCD_Init+0xc4>)
 80028e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80028e8:	4813      	ldr	r0, [pc, #76]	; (8002938 <BSP_LCD_Init+0xc4>)
 80028ea:	f003 ffcb 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <BSP_LCD_Init+0xbc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <BSP_LCD_Init+0xbc>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002906:	f000 fb7d 	bl	8003004 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800290a:	4809      	ldr	r0, [pc, #36]	; (8002930 <BSP_LCD_Init+0xbc>)
 800290c:	f003 f866 	bl	80059dc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <BSP_LCD_Init+0xc8>)
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <BSP_LCD_Init+0xcc>)
 8002914:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <BSP_LCD_Init+0xc8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800291e:	f000 fd85 	bl	800342c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <BSP_LCD_Init+0xd0>)
 8002924:	f000 f8ce 	bl	8002ac4 <BSP_LCD_SetFont>

  return LCD_OK;
 8002928:	2300      	movs	r3, #0
}  
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000618 	.word	0x20000618
 8002934:	40016800 	.word	0x40016800
 8002938:	20000700 	.word	0x20000700
 800293c:	2000074c 	.word	0x2000074c
 8002940:	20000268 	.word	0x20000268
 8002944:	200002d8 	.word	0x200002d8

08002948 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <BSP_LCD_GetXSize+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4798      	blx	r3
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000074c 	.word	0x2000074c

08002960 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <BSP_LCD_GetYSize+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	4798      	blx	r3
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000074c 	.word	0x2000074c

08002978 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002978:	b580      	push	{r7, lr}
 800297a:	b090      	sub	sp, #64	; 0x40
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002988:	f7ff ffde 	bl	8002948 <BSP_LCD_GetXSize>
 800298c:	4603      	mov	r3, r0
 800298e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002994:	f7ff ffe4 	bl	8002960 <BSP_LCD_GetYSize>
 8002998:	4603      	mov	r3, r0
 800299a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80029a4:	23ff      	movs	r3, #255	; 0xff
 80029a6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80029be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80029c4:	2307      	movs	r3, #7
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80029c8:	f7ff ffbe 	bl	8002948 <BSP_LCD_GetXSize>
 80029cc:	4603      	mov	r3, r0
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80029d0:	f7ff ffc6 	bl	8002960 <BSP_LCD_GetYSize>
 80029d4:	4603      	mov	r3, r0
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	4619      	mov	r1, r3
 80029e0:	4814      	ldr	r0, [pc, #80]	; (8002a34 <BSP_LCD_LayerDefaultInit+0xbc>)
 80029e2:	f003 f8d5 	bl	8005b90 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	4913      	ldr	r1, [pc, #76]	; (8002a38 <BSP_LCD_LayerDefaultInit+0xc0>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3304      	adds	r3, #4
 80029f6:	f04f 32ff 	mov.w	r2, #4294967295
 80029fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	490e      	ldr	r1, [pc, #56]	; (8002a38 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <BSP_LCD_LayerDefaultInit+0xc4>)
 8002a0e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	4909      	ldr	r1, [pc, #36]	; (8002a38 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002a22:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002a24:	4803      	ldr	r0, [pc, #12]	; (8002a34 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002a26:	f003 f8f1 	bl	8005c0c <HAL_LTDC_EnableDither>
}
 8002a2a:	bf00      	nop
 8002a2c:	3740      	adds	r7, #64	; 0x40
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000618 	.word	0x20000618
 8002a38:	20000734 	.word	0x20000734
 8002a3c:	200002d8 	.word	0x200002d8

08002a40 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <BSP_LCD_SelectLayer+0x1c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000730 	.word	0x20000730

08002a60 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <BSP_LCD_SetTextColor+0x28>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <BSP_LCD_SetTextColor+0x2c>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	601a      	str	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	20000730 	.word	0x20000730
 8002a8c:	20000734 	.word	0x20000734

08002a90 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <BSP_LCD_SetBackColor+0x2c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <BSP_LCD_SetBackColor+0x30>)
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000730 	.word	0x20000730
 8002ac0:	20000734 	.word	0x20000734

08002ac4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <BSP_LCD_SetFont+0x2c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4908      	ldr	r1, [pc, #32]	; (8002af4 <BSP_LCD_SetFont+0x30>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3308      	adds	r3, #8
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000730 	.word	0x20000730
 8002af4:	20000734 	.word	0x20000734

08002af8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <BSP_LCD_Clear+0x48>)
 8002b02:	681c      	ldr	r4, [r3, #0]
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <BSP_LCD_Clear+0x48>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <BSP_LCD_Clear+0x4c>)
 8002b0a:	2134      	movs	r1, #52	; 0x34
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	335c      	adds	r3, #92	; 0x5c
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461e      	mov	r6, r3
 8002b18:	f7ff ff16 	bl	8002948 <BSP_LCD_GetXSize>
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	f7ff ff1f 	bl	8002960 <BSP_LCD_GetYSize>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	462a      	mov	r2, r5
 8002b30:	4631      	mov	r1, r6
 8002b32:	4620      	mov	r0, r4
 8002b34:	f000 fc42 	bl	80033bc <FillBuffer>
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b40:	20000730 	.word	0x20000730
 8002b44:	20000618 	.word	0x20000618

08002b48 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
 8002b52:	460b      	mov	r3, r1
 8002b54:	80bb      	strh	r3, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <BSP_LCD_DisplayChar+0x80>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	491b      	ldr	r1, [pc, #108]	; (8002bcc <BSP_LCD_DisplayChar+0x84>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <BSP_LCD_DisplayChar+0x80>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4c14      	ldr	r4, [pc, #80]	; (8002bcc <BSP_LCD_DisplayChar+0x84>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4423      	add	r3, r4
 8002b86:	3308      	adds	r3, #8
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b8c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <BSP_LCD_DisplayChar+0x80>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <BSP_LCD_DisplayChar+0x84>)
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4423      	add	r3, r4
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	889b      	ldrh	r3, [r3, #4]
 8002ba6:	3307      	adds	r3, #7
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da00      	bge.n	8002bae <BSP_LCD_DisplayChar+0x66>
 8002bac:	3307      	adds	r3, #7
 8002bae:	10db      	asrs	r3, r3, #3
 8002bb0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002bb4:	18ca      	adds	r2, r1, r3
 8002bb6:	88b9      	ldrh	r1, [r7, #4]
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fb44 	bl	8003248 <DrawChar>
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	20000730 	.word	0x20000730
 8002bcc:	20000734 	.word	0x20000734

08002bd0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60ba      	str	r2, [r7, #8]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	81fb      	strh	r3, [r7, #14]
 8002bde:	460b      	mov	r3, r1
 8002be0:	81bb      	strh	r3, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002be6:	2301      	movs	r3, #1
 8002be8:	83fb      	strh	r3, [r7, #30]
 8002bea:	2300      	movs	r3, #0
 8002bec:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002bfa:	e002      	b.n	8002c02 <BSP_LCD_DisplayStringAt+0x32>
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	617a      	str	r2, [r7, #20]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f6      	bne.n	8002bfc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002c0e:	f7ff fe9b 	bl	8002948 <BSP_LCD_GetXSize>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <BSP_LCD_DisplayStringAt+0x174>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	484b      	ldr	r0, [pc, #300]	; (8002d48 <BSP_LCD_DisplayStringAt+0x178>)
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4403      	add	r3, r0
 8002c24:	3308      	adds	r3, #8
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	889b      	ldrh	r3, [r3, #4]
 8002c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c2e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d01c      	beq.n	8002c70 <BSP_LCD_DisplayStringAt+0xa0>
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	dc33      	bgt.n	8002ca2 <BSP_LCD_DisplayStringAt+0xd2>
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d002      	beq.n	8002c44 <BSP_LCD_DisplayStringAt+0x74>
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d019      	beq.n	8002c76 <BSP_LCD_DisplayStringAt+0xa6>
 8002c42:	e02e      	b.n	8002ca2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad1      	subs	r1, r2, r3
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <BSP_LCD_DisplayStringAt+0x174>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	483e      	ldr	r0, [pc, #248]	; (8002d48 <BSP_LCD_DisplayStringAt+0x178>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4403      	add	r3, r0
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	889b      	ldrh	r3, [r3, #4]
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	83fb      	strh	r3, [r7, #30]
      break;
 8002c6e:	e01b      	b.n	8002ca8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002c70:	89fb      	ldrh	r3, [r7, #14]
 8002c72:	83fb      	strh	r3, [r7, #30]
      break;
 8002c74:	e018      	b.n	8002ca8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	b299      	uxth	r1, r3
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <BSP_LCD_DisplayStringAt+0x174>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4831      	ldr	r0, [pc, #196]	; (8002d48 <BSP_LCD_DisplayStringAt+0x178>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4403      	add	r3, r0
 8002c8e:	3308      	adds	r3, #8
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	889b      	ldrh	r3, [r3, #4]
 8002c94:	fb11 f303 	smulbb	r3, r1, r3
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	83fb      	strh	r3, [r7, #30]
      break;
 8002ca0:	e002      	b.n	8002ca8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002ca2:	89fb      	ldrh	r3, [r7, #14]
 8002ca4:	83fb      	strh	r3, [r7, #30]
      break;
 8002ca6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ca8:	e01a      	b.n	8002ce0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	89b9      	ldrh	r1, [r7, #12]
 8002cb0:	8bfb      	ldrh	r3, [r7, #30]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff48 	bl	8002b48 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002cb8:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <BSP_LCD_DisplayStringAt+0x174>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4922      	ldr	r1, [pc, #136]	; (8002d48 <BSP_LCD_DisplayStringAt+0x178>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3308      	adds	r3, #8
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	889a      	ldrh	r2, [r3, #4]
 8002cce:	8bfb      	ldrh	r3, [r7, #30]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
    i++;
 8002cda:	8bbb      	ldrh	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2dc      	uxtb	r4, r3
 8002cee:	f7ff fe2b 	bl	8002948 <BSP_LCD_GetXSize>
 8002cf2:	8bb9      	ldrh	r1, [r7, #28]
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <BSP_LCD_DisplayStringAt+0x174>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4d13      	ldr	r5, [pc, #76]	; (8002d48 <BSP_LCD_DisplayStringAt+0x178>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	442b      	add	r3, r5
 8002d04:	3308      	adds	r3, #8
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	889b      	ldrh	r3, [r3, #4]
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	1ac3      	subs	r3, r0, r3
 8002d10:	b299      	uxth	r1, r3
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <BSP_LCD_DisplayStringAt+0x174>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	480c      	ldr	r0, [pc, #48]	; (8002d48 <BSP_LCD_DisplayStringAt+0x178>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4403      	add	r3, r0
 8002d22:	3308      	adds	r3, #8
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	889b      	ldrh	r3, [r3, #4]
 8002d28:	4299      	cmp	r1, r3
 8002d2a:	bf2c      	ite	cs
 8002d2c:	2301      	movcs	r3, #1
 8002d2e:	2300      	movcc	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4023      	ands	r3, r4
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1b7      	bne.n	8002caa <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bdb0      	pop	{r4, r5, r7, pc}
 8002d44:	20000730 	.word	0x20000730
 8002d48:	20000734 	.word	0x20000734

08002d4c <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4604      	mov	r4, r0
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	80fb      	strh	r3, [r7, #6]
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80bb      	strh	r3, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]
 8002d66:	4613      	mov	r3, r2
 8002d68:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	823b      	strh	r3, [r7, #16]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	81fb      	strh	r3, [r7, #14]
 8002d72:	2300      	movs	r3, #0
 8002d74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d76:	2300      	movs	r3, #0
 8002d78:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d7e:	2300      	movs	r3, #0
 8002d80:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002d82:	2300      	movs	r3, #0
 8002d84:	83fb      	strh	r3, [r7, #30]
 8002d86:	2300      	movs	r3, #0
 8002d88:	83bb      	strh	r3, [r7, #28]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	837b      	strh	r3, [r7, #26]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	833b      	strh	r3, [r7, #24]
 8002d92:	2300      	movs	r3, #0
 8002d94:	82fb      	strh	r3, [r7, #22]
 8002d96:	2300      	movs	r3, #0
 8002d98:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bfb8      	it	lt
 8002da8:	425b      	neglt	r3, r3
 8002daa:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002dac:	883a      	ldrh	r2, [r7, #0]
 8002dae:	88bb      	ldrh	r3, [r7, #4]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bfb8      	it	lt
 8002db6:	425b      	neglt	r3, r3
 8002db8:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002dbe:	88bb      	ldrh	r3, [r7, #4]
 8002dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d304      	bcc.n	8002dd4 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	843b      	strh	r3, [r7, #32]
 8002dd2:	e005      	b.n	8002de0 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dd8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dde:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002de0:	883a      	ldrh	r2, [r7, #0]
 8002de2:	88bb      	ldrh	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d304      	bcc.n	8002df2 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002de8:	2301      	movs	r3, #1
 8002dea:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002dec:	2301      	movs	r3, #1
 8002dee:	83bb      	strh	r3, [r7, #28]
 8002df0:	e005      	b.n	8002dfe <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dfc:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002dfe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	db10      	blt.n	8002e2c <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002e0e:	2300      	movs	r3, #0
 8002e10:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002e12:	8a3b      	ldrh	r3, [r7, #16]
 8002e14:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002e16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e1a:	0fda      	lsrs	r2, r3, #31
 8002e1c:	4413      	add	r3, r2
 8002e1e:	105b      	asrs	r3, r3, #1
 8002e20:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002e26:	8a3b      	ldrh	r3, [r7, #16]
 8002e28:	82bb      	strh	r3, [r7, #20]
 8002e2a:	e00f      	b.n	8002e4c <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002e30:	2300      	movs	r3, #0
 8002e32:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002e38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e3c:	0fda      	lsrs	r2, r3, #31
 8002e3e:	4413      	add	r3, r2
 8002e40:	105b      	asrs	r3, r3, #1
 8002e42:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002e44:	8a3b      	ldrh	r3, [r7, #16]
 8002e46:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	827b      	strh	r3, [r7, #18]
 8002e50:	e037      	b.n	8002ec2 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002e52:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002e54:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <BSP_LCD_DrawLine+0x18c>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4c20      	ldr	r4, [pc, #128]	; (8002edc <BSP_LCD_DrawLine+0x190>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4423      	add	r3, r4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f000 f9a1 	bl	80031b0 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002e6e:	8b3a      	ldrh	r2, [r7, #24]
 8002e70:	8afb      	ldrh	r3, [r7, #22]
 8002e72:	4413      	add	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002e78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002e7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	db0e      	blt.n	8002ea2 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002e84:	8b3a      	ldrh	r2, [r7, #24]
 8002e86:	8b7b      	ldrh	r3, [r7, #26]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002e8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e92:	4413      	add	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002e98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e9a:	8bfb      	ldrh	r3, [r7, #30]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002ea2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ea4:	8c3b      	ldrh	r3, [r7, #32]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002eac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002eae:	8bbb      	ldrh	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002eb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	827b      	strh	r3, [r7, #18]
 8002ec2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ec6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	ddc1      	ble.n	8002e52 <BSP_LCD_DrawLine+0x106>
  }
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	372c      	adds	r7, #44	; 0x2c
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	20000730 	.word	0x20000730
 8002edc:	20000734 	.word	0x20000734

08002ee0 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af02      	add	r7, sp, #8
 8002ee8:	4604      	mov	r4, r0
 8002eea:	4608      	mov	r0, r1
 8002eec:	4611      	mov	r1, r2
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	80fb      	strh	r3, [r7, #6]
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	80bb      	strh	r3, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f04:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <BSP_LCD_FillRect+0xf4>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4933      	ldr	r1, [pc, #204]	; (8002fd8 <BSP_LCD_FillRect+0xf8>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fda2 	bl	8002a60 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <BSP_LCD_FillRect+0xfc>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d022      	beq.n	8002f6a <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <BSP_LCD_FillRect+0xf4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <BSP_LCD_FillRect+0x100>)
 8002f2a:	2134      	movs	r1, #52	; 0x34
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	681c      	ldr	r4, [r3, #0]
 8002f36:	f7ff fd07 	bl	8002948 <BSP_LCD_GetXSize>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	88b9      	ldrh	r1, [r7, #4]
 8002f40:	883a      	ldrh	r2, [r7, #0]
 8002f42:	440a      	add	r2, r1
 8002f44:	fb02 f503 	mul.w	r5, r2, r3
 8002f48:	f7ff fcfe 	bl	8002948 <BSP_LCD_GetXSize>
 8002f4c:	4606      	mov	r6, r0
 8002f4e:	f7ff fd07 	bl	8002960 <BSP_LCD_GetYSize>
 8002f52:	4603      	mov	r3, r0
 8002f54:	fb06 f303 	mul.w	r3, r6, r3
 8002f58:	442b      	add	r3, r5
 8002f5a:	88f9      	ldrh	r1, [r7, #6]
 8002f5c:	887a      	ldrh	r2, [r7, #2]
 8002f5e:	440a      	add	r2, r1
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4423      	add	r3, r4
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e013      	b.n	8002f92 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <BSP_LCD_FillRect+0xf4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <BSP_LCD_FillRect+0x100>)
 8002f70:	2134      	movs	r1, #52	; 0x34
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	335c      	adds	r3, #92	; 0x5c
 8002f7a:	681c      	ldr	r4, [r3, #0]
 8002f7c:	f7ff fce4 	bl	8002948 <BSP_LCD_GetXSize>
 8002f80:	4602      	mov	r2, r0
 8002f82:	88bb      	ldrh	r3, [r7, #4]
 8002f84:	fb03 f202 	mul.w	r2, r3, r2
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4423      	add	r3, r4
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <BSP_LCD_FillRect+0xf4>)
 8002f94:	681c      	ldr	r4, [r3, #0]
 8002f96:	68fd      	ldr	r5, [r7, #12]
 8002f98:	887e      	ldrh	r6, [r7, #2]
 8002f9a:	f8b7 8000 	ldrh.w	r8, [r7]
 8002f9e:	f7ff fcd3 	bl	8002948 <BSP_LCD_GetXSize>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	1ad1      	subs	r1, r2, r3
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <BSP_LCD_FillRect+0xf4>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <BSP_LCD_FillRect+0xf8>)
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4403      	add	r3, r0
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	9100      	str	r1, [sp, #0]
 8002fbe:	4643      	mov	r3, r8
 8002fc0:	4632      	mov	r2, r6
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f000 f9f9 	bl	80033bc <FillBuffer>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd4:	20000730 	.word	0x20000730
 8002fd8:	20000734 	.word	0x20000734
 8002fdc:	20000750 	.word	0x20000750
 8002fe0:	20000618 	.word	0x20000618

08002fe4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <BSP_LCD_DisplayOn+0x1c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002ff2:	4b03      	ldr	r3, [pc, #12]	; (8003000 <BSP_LCD_DisplayOn+0x1c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4798      	blx	r3
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000074c 	.word	0x2000074c

08003004 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08e      	sub	sp, #56	; 0x38
 8003008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	4b61      	ldr	r3, [pc, #388]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	4a60      	ldr	r2, [pc, #384]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <BSP_LCD_MspInit+0x190>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	4b5a      	ldr	r3, [pc, #360]	; (8003194 <BSP_LCD_MspInit+0x190>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a59      	ldr	r2, [pc, #356]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b57      	ldr	r3, [pc, #348]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	4b53      	ldr	r3, [pc, #332]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a52      	ldr	r2, [pc, #328]	; (8003194 <BSP_LCD_MspInit+0x190>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b50      	ldr	r3, [pc, #320]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	6313      	str	r3, [r2, #48]	; 0x30
 800306e:	4b49      	ldr	r3, [pc, #292]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	4b45      	ldr	r3, [pc, #276]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a44      	ldr	r2, [pc, #272]	; (8003194 <BSP_LCD_MspInit+0x190>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b42      	ldr	r3, [pc, #264]	; (8003194 <BSP_LCD_MspInit+0x190>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b3e      	ldr	r3, [pc, #248]	; (8003194 <BSP_LCD_MspInit+0x190>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4b37      	ldr	r3, [pc, #220]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a36      	ldr	r2, [pc, #216]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030bc:	f043 0320 	orr.w	r3, r3, #32
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a2f      	ldr	r2, [pc, #188]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <BSP_LCD_MspInit+0x190>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80030ea:	f641 0358 	movw	r3, #6232	; 0x1858
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80030f8:	2302      	movs	r3, #2
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80030fc:	230e      	movs	r3, #14
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003104:	4619      	mov	r1, r3
 8003106:	4824      	ldr	r0, [pc, #144]	; (8003198 <BSP_LCD_MspInit+0x194>)
 8003108:	f001 fa62 	bl	80045d0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800310c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003116:	4619      	mov	r1, r3
 8003118:	4820      	ldr	r0, [pc, #128]	; (800319c <BSP_LCD_MspInit+0x198>)
 800311a:	f001 fa59 	bl	80045d0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800311e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	481d      	ldr	r0, [pc, #116]	; (80031a0 <BSP_LCD_MspInit+0x19c>)
 800312c:	f001 fa50 	bl	80045d0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003130:	2348      	movs	r3, #72	; 0x48
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003138:	4619      	mov	r1, r3
 800313a:	481a      	ldr	r0, [pc, #104]	; (80031a4 <BSP_LCD_MspInit+0x1a0>)
 800313c:	f001 fa48 	bl	80045d0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314a:	4619      	mov	r1, r3
 800314c:	4816      	ldr	r0, [pc, #88]	; (80031a8 <BSP_LCD_MspInit+0x1a4>)
 800314e:	f001 fa3f 	bl	80045d0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003152:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315c:	4619      	mov	r1, r3
 800315e:	4813      	ldr	r0, [pc, #76]	; (80031ac <BSP_LCD_MspInit+0x1a8>)
 8003160:	f001 fa36 	bl	80045d0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003164:	2303      	movs	r3, #3
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003168:	2309      	movs	r3, #9
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800316c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003170:	4619      	mov	r1, r3
 8003172:	480a      	ldr	r0, [pc, #40]	; (800319c <BSP_LCD_MspInit+0x198>)
 8003174:	f001 fa2c 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800317e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	4809      	ldr	r0, [pc, #36]	; (80031ac <BSP_LCD_MspInit+0x1a8>)
 8003186:	f001 fa23 	bl	80045d0 <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	3738      	adds	r7, #56	; 0x38
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000
 800319c:	40020400 	.word	0x40020400
 80031a0:	40020800 	.word	0x40020800
 80031a4:	40020c00 	.word	0x40020c00
 80031a8:	40021400 	.word	0x40021400
 80031ac:	40021800 	.word	0x40021800

080031b0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	603a      	str	r2, [r7, #0]
 80031ba:	80fb      	strh	r3, [r7, #6]
 80031bc:	460b      	mov	r3, r1
 80031be:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <BSP_LCD_DrawPixel+0x8c>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01f      	beq.n	8003208 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <BSP_LCD_DrawPixel+0x90>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <BSP_LCD_DrawPixel+0x94>)
 80031ce:	2134      	movs	r1, #52	; 0x34
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	335c      	adds	r3, #92	; 0x5c
 80031d8:	681c      	ldr	r4, [r3, #0]
 80031da:	f7ff fbb5 	bl	8002948 <BSP_LCD_GetXSize>
 80031de:	4605      	mov	r5, r0
 80031e0:	f7ff fbbe 	bl	8002960 <BSP_LCD_GetYSize>
 80031e4:	4603      	mov	r3, r0
 80031e6:	fb03 f205 	mul.w	r2, r3, r5
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	1ad5      	subs	r5, r2, r3
 80031ee:	f7ff fbab 	bl	8002948 <BSP_LCD_GetXSize>
 80031f2:	4602      	mov	r2, r0
 80031f4:	88bb      	ldrh	r3, [r7, #4]
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	1aeb      	subs	r3, r5, r3
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4423      	add	r3, r4
 8003200:	461a      	mov	r2, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003206:	e015      	b.n	8003234 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003208:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <BSP_LCD_DrawPixel+0x90>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <BSP_LCD_DrawPixel+0x94>)
 800320e:	2134      	movs	r1, #52	; 0x34
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	335c      	adds	r3, #92	; 0x5c
 8003218:	681c      	ldr	r4, [r3, #0]
 800321a:	88bd      	ldrh	r5, [r7, #4]
 800321c:	f7ff fb94 	bl	8002948 <BSP_LCD_GetXSize>
 8003220:	4603      	mov	r3, r0
 8003222:	fb03 f205 	mul.w	r2, r3, r5
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4423      	add	r3, r4
 800322e:	461a      	mov	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bdb0      	pop	{r4, r5, r7, pc}
 800323c:	20000750 	.word	0x20000750
 8003240:	20000730 	.word	0x20000730
 8003244:	20000618 	.word	0x20000618

08003248 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	603a      	str	r2, [r7, #0]
 8003252:	80fb      	strh	r3, [r7, #6]
 8003254:	460b      	mov	r3, r1
 8003256:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <DrawChar+0x16c>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4953      	ldr	r1, [pc, #332]	; (80033b8 <DrawChar+0x170>)
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3308      	adds	r3, #8
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	88db      	ldrh	r3, [r3, #6]
 800327a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800327c:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <DrawChar+0x16c>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	494d      	ldr	r1, [pc, #308]	; (80033b8 <DrawChar+0x170>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3308      	adds	r3, #8
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	889b      	ldrh	r3, [r3, #4]
 8003292:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003294:	8a3b      	ldrh	r3, [r7, #16]
 8003296:	3307      	adds	r3, #7
 8003298:	2b00      	cmp	r3, #0
 800329a:	da00      	bge.n	800329e <DrawChar+0x56>
 800329c:	3307      	adds	r3, #7
 800329e:	10db      	asrs	r3, r3, #3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	8a3b      	ldrh	r3, [r7, #16]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e076      	b.n	80033a2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80032b4:	8a3b      	ldrh	r3, [r7, #16]
 80032b6:	3307      	adds	r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da00      	bge.n	80032be <DrawChar+0x76>
 80032bc:	3307      	adds	r3, #7
 80032be:	10db      	asrs	r3, r3, #3
 80032c0:	461a      	mov	r2, r3
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80032ce:	8a3b      	ldrh	r3, [r7, #16]
 80032d0:	3307      	adds	r3, #7
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da00      	bge.n	80032d8 <DrawChar+0x90>
 80032d6:	3307      	adds	r3, #7
 80032d8:	10db      	asrs	r3, r3, #3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d002      	beq.n	80032e4 <DrawChar+0x9c>
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d004      	beq.n	80032ec <DrawChar+0xa4>
 80032e2:	e00c      	b.n	80032fe <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	617b      	str	r3, [r7, #20]
      break;
 80032ea:	e016      	b.n	800331a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	3201      	adds	r2, #1
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
      break;
 80032fc:	e00d      	b.n	800331a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	041a      	lsls	r2, r3, #16
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3301      	adds	r3, #1
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	4313      	orrs	r3, r2
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	3202      	adds	r2, #2
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
      break;
 8003318:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	e036      	b.n	800338e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003320:	8a3a      	ldrh	r2, [r7, #16]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	1ad2      	subs	r2, r2, r3
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	4413      	add	r3, r2
 800332a:	3b01      	subs	r3, #1
 800332c:	2201      	movs	r2, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	461a      	mov	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d012      	beq.n	8003362 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	b29a      	uxth	r2, r3
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	4413      	add	r3, r2
 8003344:	b298      	uxth	r0, r3
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <DrawChar+0x16c>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	491b      	ldr	r1, [pc, #108]	; (80033b8 <DrawChar+0x170>)
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	88bb      	ldrh	r3, [r7, #4]
 800335a:	4619      	mov	r1, r3
 800335c:	f7ff ff28 	bl	80031b0 <BSP_LCD_DrawPixel>
 8003360:	e012      	b.n	8003388 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	b29a      	uxth	r2, r3
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4413      	add	r3, r2
 800336a:	b298      	uxth	r0, r3
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <DrawChar+0x16c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4911      	ldr	r1, [pc, #68]	; (80033b8 <DrawChar+0x170>)
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3304      	adds	r3, #4
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	88bb      	ldrh	r3, [r7, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	f7ff ff14 	bl	80031b0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	3301      	adds	r3, #1
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	8a3b      	ldrh	r3, [r7, #16]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	429a      	cmp	r2, r3
 8003394:	d3c4      	bcc.n	8003320 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003396:	88bb      	ldrh	r3, [r7, #4]
 8003398:	3301      	adds	r3, #1
 800339a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	3301      	adds	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	8a7b      	ldrh	r3, [r7, #18]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d384      	bcc.n	80032b4 <DrawChar+0x6c>
  }
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000730 	.word	0x20000730
 80033b8:	20000734 	.word	0x20000734

080033bc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <FillBuffer+0x68>)
 80033cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033d0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <FillBuffer+0x68>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80033d8:	4a12      	ldr	r2, [pc, #72]	; (8003424 <FillBuffer+0x68>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <FillBuffer+0x68>)
 80033e0:	4a11      	ldr	r2, [pc, #68]	; (8003428 <FillBuffer+0x6c>)
 80033e2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80033e4:	480f      	ldr	r0, [pc, #60]	; (8003424 <FillBuffer+0x68>)
 80033e6:	f000 fe5d 	bl	80040a4 <HAL_DMA2D_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d115      	bne.n	800341c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80033f0:	68f9      	ldr	r1, [r7, #12]
 80033f2:	480c      	ldr	r0, [pc, #48]	; (8003424 <FillBuffer+0x68>)
 80033f4:	f000 ffbe 	bl	8004374 <HAL_DMA2D_ConfigLayer>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69f9      	ldr	r1, [r7, #28]
 8003408:	4806      	ldr	r0, [pc, #24]	; (8003424 <FillBuffer+0x68>)
 800340a:	f000 fe9e 	bl	800414a <HAL_DMA2D_Start>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003414:	210a      	movs	r1, #10
 8003416:	4803      	ldr	r0, [pc, #12]	; (8003424 <FillBuffer+0x68>)
 8003418:	f000 fec2 	bl	80041a0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200006c0 	.word	0x200006c0
 8003428:	4002b000 	.word	0x4002b000

0800342c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 8003432:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <BSP_SDRAM_Init+0xb0>)
 8003434:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 800343e:	2207      	movs	r2, #7
 8003440:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 8003444:	2204      	movs	r2, #4
 8003446:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 800344a:	2207      	movs	r2, #7
 800344c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 8003450:	2202      	movs	r2, #2
 8003452:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 8003456:	2202      	movs	r2, #2
 8003458:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 800345c:	2202      	movs	r2, #2
 800345e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 8003462:	2201      	movs	r2, #1
 8003464:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 800346e:	2204      	movs	r2, #4
 8003470:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 8003474:	2210      	movs	r2, #16
 8003476:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 8003480:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003484:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 8003488:	2200      	movs	r2, #0
 800348a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 800348e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003492:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 8003496:	2200      	movs	r2, #0
 8003498:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 800349c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80034a2:	2100      	movs	r1, #0
 80034a4:	480c      	ldr	r0, [pc, #48]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 80034a6:	f000 f87f 	bl	80035a8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80034aa:	490d      	ldr	r1, [pc, #52]	; (80034e0 <BSP_SDRAM_Init+0xb4>)
 80034ac:	480a      	ldr	r0, [pc, #40]	; (80034d8 <BSP_SDRAM_Init+0xac>)
 80034ae:	f003 fba9 	bl	8006c04 <HAL_SDRAM_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <BSP_SDRAM_Init+0xb8>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e002      	b.n	80034c6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <BSP_SDRAM_Init+0xb8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80034c6:	f240 506a 	movw	r0, #1386	; 0x56a
 80034ca:	f000 f80d 	bl	80034e8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <BSP_SDRAM_Init+0xb8>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000754 	.word	0x20000754
 80034dc:	a0000140 	.word	0xa0000140
 80034e0:	20000788 	.word	0x20000788
 80034e4:	200002f0 	.word	0x200002f0

080034e8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80034f4:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034fc:	2208      	movs	r2, #8
 80034fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003500:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003502:	2201      	movs	r2, #1
 8003504:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003506:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003508:	2200      	movs	r2, #0
 800350a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800350c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003510:	4923      	ldr	r1, [pc, #140]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003512:	4824      	ldr	r0, [pc, #144]	; (80035a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003514:	f003 fbb4 	bl	8006c80 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003518:	2001      	movs	r0, #1
 800351a:	f000 facf 	bl	8003abc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003520:	2202      	movs	r2, #2
 8003522:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003524:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003526:	2208      	movs	r2, #8
 8003528:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800352c:	2201      	movs	r2, #1
 800352e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800353a:	4919      	ldr	r1, [pc, #100]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800353c:	4819      	ldr	r0, [pc, #100]	; (80035a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800353e:	f003 fb9f 	bl	8006c80 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003542:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003544:	2203      	movs	r2, #3
 8003546:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800354a:	2208      	movs	r2, #8
 800354c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003550:	2204      	movs	r2, #4
 8003552:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800355a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800355e:	4910      	ldr	r1, [pc, #64]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003560:	4810      	ldr	r0, [pc, #64]	; (80035a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003562:	f003 fb8d 	bl	8006c80 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003566:	f44f 730c 	mov.w	r3, #560	; 0x230
 800356a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800356e:	2204      	movs	r2, #4
 8003570:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003574:	2208      	movs	r2, #8
 8003576:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800357a:	2201      	movs	r2, #1
 800357c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003582:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003588:	4905      	ldr	r1, [pc, #20]	; (80035a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800358c:	f003 fb78 	bl	8006c80 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4804      	ldr	r0, [pc, #16]	; (80035a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003594:	f003 fb9f 	bl	8006cd6 <HAL_SDRAM_ProgramRefreshRate>
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200007a4 	.word	0x200007a4
 80035a4:	20000754 	.word	0x20000754

080035a8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b090      	sub	sp, #64	; 0x40
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80ec 	beq.w	8003792 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035be:	4b77      	ldr	r3, [pc, #476]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	4a76      	ldr	r2, [pc, #472]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6393      	str	r3, [r2, #56]	; 0x38
 80035ca:	4b74      	ldr	r3, [pc, #464]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a6f      	ldr	r2, [pc, #444]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	4b69      	ldr	r3, [pc, #420]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a68      	ldr	r2, [pc, #416]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b66      	ldr	r3, [pc, #408]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	4b62      	ldr	r3, [pc, #392]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	4a61      	ldr	r2, [pc, #388]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003618:	f043 0304 	orr.w	r3, r3, #4
 800361c:	6313      	str	r3, [r2, #48]	; 0x30
 800361e:	4b5f      	ldr	r3, [pc, #380]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a5a      	ldr	r2, [pc, #360]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b58      	ldr	r3, [pc, #352]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	4b54      	ldr	r3, [pc, #336]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a53      	ldr	r2, [pc, #332]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003650:	f043 0310 	orr.w	r3, r3, #16
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b51      	ldr	r3, [pc, #324]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	4b4d      	ldr	r3, [pc, #308]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a4c      	ldr	r2, [pc, #304]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 800366c:	f043 0320 	orr.w	r3, r3, #32
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a45      	ldr	r2, [pc, #276]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <BSP_SDRAM_MspInit+0x1f4>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800369e:	2302      	movs	r3, #2
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80036a6:	230c      	movs	r3, #12
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80036aa:	2360      	movs	r3, #96	; 0x60
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80036ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b2:	4619      	mov	r1, r3
 80036b4:	483a      	ldr	r0, [pc, #232]	; (80037a0 <BSP_SDRAM_MspInit+0x1f8>)
 80036b6:	f000 ff8b 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80036ba:	2301      	movs	r3, #1
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80036be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c2:	4619      	mov	r1, r3
 80036c4:	4837      	ldr	r0, [pc, #220]	; (80037a4 <BSP_SDRAM_MspInit+0x1fc>)
 80036c6:	f000 ff83 	bl	80045d0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80036ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80036d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d4:	4619      	mov	r1, r3
 80036d6:	4834      	ldr	r0, [pc, #208]	; (80037a8 <BSP_SDRAM_MspInit+0x200>)
 80036d8:	f000 ff7a 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80036dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80036e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036e6:	4619      	mov	r1, r3
 80036e8:	4830      	ldr	r0, [pc, #192]	; (80037ac <BSP_SDRAM_MspInit+0x204>)
 80036ea:	f000 ff71 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80036ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80036f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f8:	4619      	mov	r1, r3
 80036fa:	482d      	ldr	r0, [pc, #180]	; (80037b0 <BSP_SDRAM_MspInit+0x208>)
 80036fc:	f000 ff68 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003700:	f248 1333 	movw	r3, #33075	; 0x8133
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800370a:	4619      	mov	r1, r3
 800370c:	4829      	ldr	r0, [pc, #164]	; (80037b4 <BSP_SDRAM_MspInit+0x20c>)
 800370e:	f000 ff5f 	bl	80045d0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003724:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800372c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003730:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003734:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003738:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800373c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800373e:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003740:	2200      	movs	r2, #0
 8003742:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003746:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800374a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 800374e:	2200      	movs	r2, #0
 8003750:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003754:	2203      	movs	r2, #3
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 800375a:	2200      	movs	r2, #0
 800375c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <BSP_SDRAM_MspInit+0x214>)
 8003768:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003776:	4810      	ldr	r0, [pc, #64]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 8003778:	f000 fb84 	bl	8003e84 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800377c:	480e      	ldr	r0, [pc, #56]	; (80037b8 <BSP_SDRAM_MspInit+0x210>)
 800377e:	f000 fad3 	bl	8003d28 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	210f      	movs	r1, #15
 8003786:	2038      	movs	r0, #56	; 0x38
 8003788:	f000 fa97 	bl	8003cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800378c:	2038      	movs	r0, #56	; 0x38
 800378e:	f000 fab0 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003792:	bf00      	nop
 8003794:	3740      	adds	r7, #64	; 0x40
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020400 	.word	0x40020400
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40020c00 	.word	0x40020c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40021400 	.word	0x40021400
 80037b4:	40021800 	.word	0x40021800
 80037b8:	200007b4 	.word	0x200007b4
 80037bc:	40026410 	.word	0x40026410

080037c0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	460a      	mov	r2, r1
 80037ca:	80fb      	strh	r3, [r7, #6]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <BSP_TS_Init+0x64>)
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <BSP_TS_Init+0x68>)
 80037dc:	88bb      	ldrh	r3, [r7, #4]
 80037de:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <BSP_TS_Init+0x6c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2082      	movs	r0, #130	; 0x82
 80037e6:	4798      	blx	r3
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	f640 0311 	movw	r3, #2065	; 0x811
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d104      	bne.n	80037fe <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <BSP_TS_Init+0x70>)
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <BSP_TS_Init+0x6c>)
 80037f8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <BSP_TS_Init+0x70>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2082      	movs	r0, #130	; 0x82
 800380c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <BSP_TS_Init+0x70>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2082      	movs	r0, #130	; 0x82
 8003816:	4798      	blx	r3
  }

  return ret;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000818 	.word	0x20000818
 8003828:	2000081a 	.word	0x2000081a
 800382c:	200002a0 	.word	0x200002a0
 8003830:	20000814 	.word	0x20000814

08003834 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <BSP_TS_ITGetStatus+0x14>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	2082      	movs	r0, #130	; 0x82
 8003840:	4798      	blx	r3
 8003842:	4603      	mov	r3, r0
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000814 	.word	0x20000814

0800384c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003854:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <BSP_TS_GetState+0x148>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2082      	movs	r0, #130	; 0x82
 800385c:	4798      	blx	r3
 800385e:	4603      	mov	r3, r0
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 808d 	beq.w	800398a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003870:	4b48      	ldr	r3, [pc, #288]	; (8003994 <BSP_TS_GetState+0x148>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f107 020c 	add.w	r2, r7, #12
 800387a:	f107 010e 	add.w	r1, r7, #14
 800387e:	2082      	movs	r0, #130	; 0x82
 8003880:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003882:	89bb      	ldrh	r3, [r7, #12]
 8003884:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003888:	b29b      	uxth	r3, r3
 800388a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800388c:	89bb      	ldrh	r3, [r7, #12]
 800388e:	4a42      	ldr	r2, [pc, #264]	; (8003998 <BSP_TS_GetState+0x14c>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003898:	8abb      	ldrh	r3, [r7, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	82bb      	strh	r3, [r7, #20]
 80038a2:	e008      	b.n	80038b6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80038a4:	4b3d      	ldr	r3, [pc, #244]	; (800399c <BSP_TS_GetState+0x150>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	8aba      	ldrh	r2, [r7, #20]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d903      	bls.n	80038b6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <BSP_TS_GetState+0x150>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80038b6:	8abb      	ldrh	r3, [r7, #20]
 80038b8:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80038ba:	89fb      	ldrh	r3, [r7, #14]
 80038bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d806      	bhi.n	80038d2 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80038c4:	89fb      	ldrh	r3, [r7, #14]
 80038c6:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80038ca:	330e      	adds	r3, #14
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	81fb      	strh	r3, [r7, #14]
 80038d0:	e005      	b.n	80038de <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80038d8:	3308      	adds	r3, #8
 80038da:	b29b      	uxth	r3, r3
 80038dc:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80038de:	89fb      	ldrh	r3, [r7, #14]
 80038e0:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <BSP_TS_GetState+0x154>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	08db      	lsrs	r3, r3, #3
 80038e8:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	82fb      	strh	r3, [r7, #22]
 80038f4:	e008      	b.n	8003908 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80038f6:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <BSP_TS_GetState+0x158>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	8afa      	ldrh	r2, [r7, #22]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d903      	bls.n	8003908 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <BSP_TS_GetState+0x158>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	3b01      	subs	r3, #1
 8003906:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003908:	8afb      	ldrh	r3, [r7, #22]
 800390a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	461a      	mov	r2, r3
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <BSP_TS_GetState+0x15c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d906      	bls.n	8003926 <BSP_TS_GetState+0xda>
 8003918:	89fa      	ldrh	r2, [r7, #14]
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <BSP_TS_GetState+0x15c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	e005      	b.n	8003932 <BSP_TS_GetState+0xe6>
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <BSP_TS_GetState+0x15c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	b29a      	uxth	r2, r3
 800392c:	89fb      	ldrh	r3, [r7, #14]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003934:	89bb      	ldrh	r3, [r7, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <BSP_TS_GetState+0x160>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d906      	bls.n	800394e <BSP_TS_GetState+0x102>
 8003940:	89ba      	ldrh	r2, [r7, #12]
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <BSP_TS_GetState+0x160>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	e005      	b.n	800395a <BSP_TS_GetState+0x10e>
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <BSP_TS_GetState+0x160>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	b29a      	uxth	r2, r3
 8003954:	89bb      	ldrh	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	b29b      	uxth	r3, r3
 800395a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800395c:	8a7a      	ldrh	r2, [r7, #18]
 800395e:	8a3b      	ldrh	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	2b05      	cmp	r3, #5
 8003964:	dd07      	ble.n	8003976 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003966:	89fb      	ldrh	r3, [r7, #14]
 8003968:	461a      	mov	r2, r3
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <BSP_TS_GetState+0x15c>)
 800396c:	601a      	str	r2, [r3, #0]
      _y = y; 
 800396e:	89bb      	ldrh	r3, [r7, #12]
 8003970:	461a      	mov	r2, r3
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <BSP_TS_GetState+0x160>)
 8003974:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <BSP_TS_GetState+0x15c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <BSP_TS_GetState+0x160>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	809a      	strh	r2, [r3, #4]
  }
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000814 	.word	0x20000814
 8003998:	ba2e8ba3 	.word	0xba2e8ba3
 800399c:	2000081a 	.word	0x2000081a
 80039a0:	88888889 	.word	0x88888889
 80039a4:	20000818 	.word	0x20000818
 80039a8:	2000081c 	.word	0x2000081c
 80039ac:	20000820 	.word	0x20000820

080039b0 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <BSP_TS_ITClear+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2082      	movs	r0, #130	; 0x82
 80039bc:	4798      	blx	r3
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000814 	.word	0x20000814

080039c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_Init+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <HAL_Init+0x40>)
 80039d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_Init+0x40>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_Init+0x40>)
 80039de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_Init+0x40>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <HAL_Init+0x40>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f0:	2003      	movs	r0, #3
 80039f2:	f000 f957 	bl	8003ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039f6:	200f      	movs	r0, #15
 80039f8:	f000 f810 	bl	8003a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039fc:	f000 f806 	bl	8003a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00

08003a0c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_InitTick+0x54>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_InitTick+0x58>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f967 	bl	8003d0e <HAL_SYSTICK_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e00e      	b.n	8003a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b0f      	cmp	r3, #15
 8003a4e:	d80a      	bhi.n	8003a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a50:	2200      	movs	r2, #0
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	f000 f92f 	bl	8003cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a5c:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <HAL_InitTick+0x5c>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000264 	.word	0x20000264
 8003a74:	200002f8 	.word	0x200002f8
 8003a78:	200002f4 	.word	0x200002f4

08003a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_IncTick+0x20>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_IncTick+0x24>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_IncTick+0x24>)
 8003a8e:	6013      	str	r3, [r2, #0]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	200002f8 	.word	0x200002f8
 8003aa0:	20000824 	.word	0x20000824

08003aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_GetTick+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000824 	.word	0x20000824

08003abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac4:	f7ff ffee 	bl	8003aa4 <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d005      	beq.n	8003ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_Delay+0x44>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ae2:	bf00      	nop
 8003ae4:	f7ff ffde 	bl	8003aa4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d8f7      	bhi.n	8003ae4 <HAL_Delay+0x28>
  {
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200002f8 	.word	0x200002f8

08003b04 <__NVIC_SetPriorityGrouping>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4907      	ldr	r1, [pc, #28]	; (8003ba0 <__NVIC_EnableIRQ+0x38>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db0a      	blt.n	8003bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	490c      	ldr	r1, [pc, #48]	; (8003bf0 <__NVIC_SetPriority+0x4c>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	0112      	lsls	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bcc:	e00a      	b.n	8003be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <__NVIC_SetPriority+0x50>)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	761a      	strb	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000e100 	.word	0xe000e100
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf28      	it	cs
 8003c16:	2304      	movcs	r3, #4
 8003c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <NVIC_EncodePriority+0x30>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3b03      	subs	r3, #3
 8003c26:	e000      	b.n	8003c2a <NVIC_EncodePriority+0x32>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	4313      	orrs	r3, r2
         );
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c70:	d301      	bcc.n	8003c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <SysTick_Config+0x40>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7e:	210f      	movs	r1, #15
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f7ff ff8e 	bl	8003ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <SysTick_Config+0x40>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8e:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <SysTick_Config+0x40>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	e000e010 	.word	0xe000e010

08003ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff29 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ccc:	f7ff ff3e 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff ff8e 	bl	8003bf8 <NVIC_EncodePriority>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff5d 	bl	8003ba4 <__NVIC_SetPriority>
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff31 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ffa2 	bl	8003c60 <SysTick_Config>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d34:	f7ff feb6 	bl	8003aa4 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e099      	b.n	8003e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d64:	e00f      	b.n	8003d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d66:	f7ff fe9d 	bl	8003aa4 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d908      	bls.n	8003d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e078      	b.n	8003e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e8      	bne.n	8003d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_DMA_Init+0x158>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d107      	bne.n	8003df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	4313      	orrs	r3, r2
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d117      	bne.n	8003e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8bd 	bl	8003fac <DMA_CheckFifoParam>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e46:	2301      	movs	r3, #1
 8003e48:	e016      	b.n	8003e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f874 	bl	8003f40 <DMA_CalcBaseAndBitshift>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	223f      	movs	r2, #63	; 0x3f
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	f010803f 	.word	0xf010803f

08003e84 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e050      	b.n	8003f38 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e048      	b.n	8003f38 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2221      	movs	r2, #33	; 0x21
 8003ee4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f82a 	bl	8003f40 <DMA_CalcBaseAndBitshift>
 8003eec:	4603      	mov	r3, r0
 8003eee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	223f      	movs	r2, #63	; 0x3f
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	3b10      	subs	r3, #16
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d909      	bls.n	8003f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f80:	e007      	b.n	8003f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	aaaaaaab 	.word	0xaaaaaaab
 8003fa8:	0800b2e8 	.word	0x0800b2e8

08003fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11f      	bne.n	8004006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d856      	bhi.n	800407a <DMA_CheckFifoParam+0xce>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <DMA_CheckFifoParam+0x28>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	0800407b 	.word	0x0800407b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d046      	beq.n	800407e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e043      	b.n	800407e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffe:	d140      	bne.n	8004082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004004:	e03d      	b.n	8004082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d121      	bne.n	8004054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d837      	bhi.n	8004086 <DMA_CheckFifoParam+0xda>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <DMA_CheckFifoParam+0x70>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004033 	.word	0x08004033
 8004024:	0800402d 	.word	0x0800402d
 8004028:	08004045 	.word	0x08004045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e030      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d025      	beq.n	800408a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e022      	b.n	800408a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800404c:	d11f      	bne.n	800408e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004052:	e01c      	b.n	800408e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d903      	bls.n	8004062 <DMA_CheckFifoParam+0xb6>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d003      	beq.n	8004068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004060:	e018      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      break;
 8004066:	e015      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00e      	beq.n	8004092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e00b      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 800407a:	bf00      	nop
 800407c:	e00a      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
 8004080:	e008      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
 8004084:	e006      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
 8004088:	e004      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;   
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004092:	bf00      	nop
    }
  } 
  
  return status; 
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop

080040a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e03b      	b.n	800412e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f833 	bl	8004136 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	f023 0107 	bic.w	r1, r3, #7
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800410e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68d1      	ldr	r1, [r2, #12]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	430b      	orrs	r3, r1
 800411c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af02      	add	r7, sp, #8
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_DMA2D_Start+0x1c>
 8004162:	2302      	movs	r3, #2
 8004164:	e018      	b.n	8004198 <HAL_DMA2D_Start+0x4e>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f989 	bl	8004498 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d056      	beq.n	800426a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80041bc:	f7ff fc72 	bl	8003aa4 <HAL_GetTick>
 80041c0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80041c2:	e04b      	b.n	800425c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d023      	beq.n	800421e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	f043 0202 	orr.w	r2, r3, #2
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2221      	movs	r2, #33	; 0x21
 8004208:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2204      	movs	r2, #4
 800420e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0a5      	b.n	800436a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d01a      	beq.n	800425c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004226:	f7ff fc3d 	bl	8003aa4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <HAL_DMA2D_PollForTransfer+0x9c>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2203      	movs	r2, #3
 800424c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e086      	b.n	800436a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ac      	beq.n	80041c4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d061      	beq.n	8004350 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800428c:	f7ff fc0a 	bl	8003aa4 <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004292:	e056      	b.n	8004342 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02e      	beq.n	8004304 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	f043 0201 	orr.w	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2229      	movs	r2, #41	; 0x29
 80042ee:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e032      	b.n	800436a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d01a      	beq.n	8004342 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800430c:	f7ff fbca 	bl	8003aa4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <HAL_DMA2D_PollForTransfer+0x182>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2203      	movs	r2, #3
 8004332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e013      	b.n	800436a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0a1      	beq.n	8004294 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2212      	movs	r2, #18
 8004356:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_DMA2D_ConfigLayer+0x20>
 8004390:	2302      	movs	r3, #2
 8004392:	e079      	b.n	8004488 <HAL_DMA2D_ConfigLayer+0x114>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	3318      	adds	r3, #24
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80043be:	4b35      	ldr	r3, [pc, #212]	; (8004494 <HAL_DMA2D_ConfigLayer+0x120>)
 80043c0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	d003      	beq.n	80043d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d107      	bne.n	80043e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e005      	b.n	80043ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d120      	bne.n	8004436 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	ea02 0103 	and.w	r1, r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	430a      	orrs	r2, r1
 800440a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b0a      	cmp	r3, #10
 800441c:	d003      	beq.n	8004426 <HAL_DMA2D_ConfigLayer+0xb2>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b09      	cmp	r3, #9
 8004424:	d127      	bne.n	8004476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
 8004434:	e01f      	b.n	8004476 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	43db      	mvns	r3, r3
 8004440:	ea02 0103 	and.w	r1, r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	430a      	orrs	r2, r1
 800444c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b0a      	cmp	r3, #10
 800445e:	d003      	beq.n	8004468 <HAL_DMA2D_ConfigLayer+0xf4>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b09      	cmp	r3, #9
 8004466:	d106      	bne.n	8004476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004474:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	ff03000f 	.word	0xff03000f

08004498 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004498:	b480      	push	{r7}
 800449a:	b08b      	sub	sp, #44	; 0x2c
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	041a      	lsls	r2, r3, #16
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d0:	d174      	bne.n	80045bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d108      	bne.n	800450a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	4313      	orrs	r3, r2
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e053      	b.n	80045b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d106      	bne.n	8004520 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4313      	orrs	r3, r2
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	e048      	b.n	80045b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d111      	bne.n	800454c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	0cdb      	lsrs	r3, r3, #19
 800452c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	0a9b      	lsrs	r3, r3, #10
 8004532:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	08db      	lsrs	r3, r3, #3
 8004538:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	02db      	lsls	r3, r3, #11
 8004542:	4313      	orrs	r3, r2
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	e032      	b.n	80045b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d117      	bne.n	8004584 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	0fdb      	lsrs	r3, r3, #31
 8004558:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	0cdb      	lsrs	r3, r3, #19
 800455e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	0adb      	lsrs	r3, r3, #11
 8004564:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	08db      	lsrs	r3, r3, #3
 800456a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	431a      	orrs	r2, r3
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	03db      	lsls	r3, r3, #15
 800457a:	4313      	orrs	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	e016      	b.n	80045b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	0f1b      	lsrs	r3, r3, #28
 8004588:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	0d1b      	lsrs	r3, r3, #20
 800458e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	0b1b      	lsrs	r3, r3, #12
 8004594:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	011a      	lsls	r2, r3, #4
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	431a      	orrs	r2, r3
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	031b      	lsls	r3, r3, #12
 80045aa:	4313      	orrs	r3, r2
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80045ba:	e003      	b.n	80045c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	60da      	str	r2, [r3, #12]
}
 80045c4:	bf00      	nop
 80045c6:	372c      	adds	r7, #44	; 0x2c
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e177      	b.n	80048dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045ec:	2201      	movs	r2, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	f040 8166 	bne.w	80048d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d00b      	beq.n	800462a <HAL_GPIO_Init+0x5a>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d007      	beq.n	800462a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800461e:	2b11      	cmp	r3, #17
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b12      	cmp	r3, #18
 8004628:	d130      	bne.n	800468c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	2203      	movs	r2, #3
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004660:	2201      	movs	r2, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 0201 	and.w	r2, r3, #1
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0xfc>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b12      	cmp	r3, #18
 80046ca:	d123      	bne.n	8004714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	08da      	lsrs	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3208      	adds	r2, #8
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	220f      	movs	r2, #15
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	08da      	lsrs	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3208      	adds	r2, #8
 800470e:	69b9      	ldr	r1, [r7, #24]
 8004710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	2203      	movs	r2, #3
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0203 	and.w	r2, r3, #3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80c0 	beq.w	80048d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4a65      	ldr	r2, [pc, #404]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004764:	6453      	str	r3, [r2, #68]	; 0x44
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004772:	4a61      	ldr	r2, [pc, #388]	; (80048f8 <HAL_GPIO_Init+0x328>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a58      	ldr	r2, [pc, #352]	; (80048fc <HAL_GPIO_Init+0x32c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d037      	beq.n	800480e <HAL_GPIO_Init+0x23e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a57      	ldr	r2, [pc, #348]	; (8004900 <HAL_GPIO_Init+0x330>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_GPIO_Init+0x23a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a56      	ldr	r2, [pc, #344]	; (8004904 <HAL_GPIO_Init+0x334>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <HAL_GPIO_Init+0x236>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a55      	ldr	r2, [pc, #340]	; (8004908 <HAL_GPIO_Init+0x338>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d025      	beq.n	8004802 <HAL_GPIO_Init+0x232>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a54      	ldr	r2, [pc, #336]	; (800490c <HAL_GPIO_Init+0x33c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <HAL_GPIO_Init+0x22e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a53      	ldr	r2, [pc, #332]	; (8004910 <HAL_GPIO_Init+0x340>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x22a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a52      	ldr	r2, [pc, #328]	; (8004914 <HAL_GPIO_Init+0x344>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x226>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a51      	ldr	r2, [pc, #324]	; (8004918 <HAL_GPIO_Init+0x348>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x222>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a50      	ldr	r2, [pc, #320]	; (800491c <HAL_GPIO_Init+0x34c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x21e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4f      	ldr	r2, [pc, #316]	; (8004920 <HAL_GPIO_Init+0x350>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x21a>
 80047e6:	2309      	movs	r3, #9
 80047e8:	e012      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047ea:	230a      	movs	r3, #10
 80047ec:	e010      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047ee:	2308      	movs	r3, #8
 80047f0:	e00e      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e00c      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047f6:	2306      	movs	r3, #6
 80047f8:	e00a      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047fa:	2305      	movs	r3, #5
 80047fc:	e008      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047fe:	2304      	movs	r3, #4
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x240>
 8004802:	2303      	movs	r3, #3
 8004804:	e004      	b.n	8004810 <HAL_GPIO_Init+0x240>
 8004806:	2302      	movs	r3, #2
 8004808:	e002      	b.n	8004810 <HAL_GPIO_Init+0x240>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_GPIO_Init+0x240>
 800480e:	2300      	movs	r3, #0
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f002 0203 	and.w	r2, r2, #3
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4093      	lsls	r3, r2
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004820:	4935      	ldr	r1, [pc, #212]	; (80048f8 <HAL_GPIO_Init+0x328>)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800482e:	4b3d      	ldr	r3, [pc, #244]	; (8004924 <HAL_GPIO_Init+0x354>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004852:	4a34      	ldr	r2, [pc, #208]	; (8004924 <HAL_GPIO_Init+0x354>)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004858:	4b32      	ldr	r3, [pc, #200]	; (8004924 <HAL_GPIO_Init+0x354>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <HAL_GPIO_Init+0x354>)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004882:	4b28      	ldr	r3, [pc, #160]	; (8004924 <HAL_GPIO_Init+0x354>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048a6:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <HAL_GPIO_Init+0x354>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048ac:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_GPIO_Init+0x354>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048d0:	4a14      	ldr	r2, [pc, #80]	; (8004924 <HAL_GPIO_Init+0x354>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	f67f ae84 	bls.w	80045ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3724      	adds	r7, #36	; 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40013800 	.word	0x40013800
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020400 	.word	0x40020400
 8004904:	40020800 	.word	0x40020800
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40021000 	.word	0x40021000
 8004910:	40021400 	.word	0x40021400
 8004914:	40021800 	.word	0x40021800
 8004918:	40021c00 	.word	0x40021c00
 800491c:	40022000 	.word	0x40022000
 8004920:	40022400 	.word	0x40022400
 8004924:	40013c00 	.word	0x40013c00

08004928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
 8004944:	e001      	b.n	800494a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004974:	e003      	b.n	800497e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	401a      	ands	r2, r3
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d104      	bne.n	80049ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	041a      	lsls	r2, r3, #16
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80049ac:	e002      	b.n	80049b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e12b      	b.n	8004c2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f95d 	bl	8004ca6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	; 0x24
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a24:	f001 ff1a 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8004a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4a81      	ldr	r2, [pc, #516]	; (8004c34 <HAL_I2C_Init+0x274>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d807      	bhi.n	8004a44 <HAL_I2C_Init+0x84>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a80      	ldr	r2, [pc, #512]	; (8004c38 <HAL_I2C_Init+0x278>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	bf94      	ite	ls
 8004a3c:	2301      	movls	r3, #1
 8004a3e:	2300      	movhi	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e006      	b.n	8004a52 <HAL_I2C_Init+0x92>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a7d      	ldr	r2, [pc, #500]	; (8004c3c <HAL_I2C_Init+0x27c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	bf94      	ite	ls
 8004a4c:	2301      	movls	r3, #1
 8004a4e:	2300      	movhi	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0e7      	b.n	8004c2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a78      	ldr	r2, [pc, #480]	; (8004c40 <HAL_I2C_Init+0x280>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	0c9b      	lsrs	r3, r3, #18
 8004a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a6a      	ldr	r2, [pc, #424]	; (8004c34 <HAL_I2C_Init+0x274>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d802      	bhi.n	8004a94 <HAL_I2C_Init+0xd4>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3301      	adds	r3, #1
 8004a92:	e009      	b.n	8004aa8 <HAL_I2C_Init+0xe8>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	4a69      	ldr	r2, [pc, #420]	; (8004c44 <HAL_I2C_Init+0x284>)
 8004aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	495c      	ldr	r1, [pc, #368]	; (8004c34 <HAL_I2C_Init+0x274>)
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	d819      	bhi.n	8004afc <HAL_I2C_Init+0x13c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1e59      	subs	r1, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004adc:	400b      	ands	r3, r1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_I2C_Init+0x138>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1e59      	subs	r1, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af6:	e051      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004af8:	2304      	movs	r3, #4
 8004afa:	e04f      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d111      	bne.n	8004b28 <HAL_I2C_Init+0x168>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1e58      	subs	r0, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	440b      	add	r3, r1
 8004b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e012      	b.n	8004b4e <HAL_I2C_Init+0x18e>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e58      	subs	r0, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	0099      	lsls	r1, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Init+0x196>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e022      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10e      	bne.n	8004b7c <HAL_I2C_Init+0x1bc>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1e58      	subs	r0, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	440b      	add	r3, r1
 8004b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7a:	e00f      	b.n	8004b9c <HAL_I2C_Init+0x1dc>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1e58      	subs	r0, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	0099      	lsls	r1, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	6809      	ldr	r1, [r1, #0]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69da      	ldr	r2, [r3, #28]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6911      	ldr	r1, [r2, #16]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68d2      	ldr	r2, [r2, #12]
 8004bd6:	4311      	orrs	r1, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	000186a0 	.word	0x000186a0
 8004c38:	001e847f 	.word	0x001e847f
 8004c3c:	003d08ff 	.word	0x003d08ff
 8004c40:	431bde83 	.word	0x431bde83
 8004c44:	10624dd3 	.word	0x10624dd3

08004c48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e021      	b.n	8004c9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2224      	movs	r2, #36	; 0x24
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f821 	bl	8004cba <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	817b      	strh	r3, [r7, #10]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	813b      	strh	r3, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cea:	f7fe fedb 	bl	8003aa4 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	f040 80d9 	bne.w	8004eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2319      	movs	r3, #25
 8004d04:	2201      	movs	r2, #1
 8004d06:	496d      	ldr	r1, [pc, #436]	; (8004ebc <HAL_I2C_Mem_Write+0x1ec>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fc89 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0cc      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_I2C_Mem_Write+0x56>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0c5      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d007      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2221      	movs	r2, #33	; 0x21
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2240      	movs	r2, #64	; 0x40
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d8e:	88f8      	ldrh	r0, [r7, #6]
 8004d90:	893a      	ldrh	r2, [r7, #8]
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fac4 	bl	800532c <I2C_RequestMemoryWrite>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d052      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e081      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fd0a 	bl	80057cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06b      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d11b      	bne.n	8004e50 <HAL_I2C_Mem_Write+0x180>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1aa      	bne.n	8004dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fcf6 	bl	800584e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d107      	bne.n	8004e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e016      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00100002 	.word	0x00100002
 8004ec0:	ffff0000 	.word	0xffff0000

08004ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	; 0x30
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ede:	f7fe fde1 	bl	8003aa4 <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	f040 8208 	bne.w	8005302 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2319      	movs	r3, #25
 8004ef8:	2201      	movs	r2, #1
 8004efa:	497b      	ldr	r1, [pc, #492]	; (80050e8 <HAL_I2C_Mem_Read+0x224>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fb8f 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e1fb      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Mem_Read+0x56>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e1f4      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d007      	beq.n	8004f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2222      	movs	r2, #34	; 0x22
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2240      	movs	r2, #64	; 0x40
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	; (80050ec <HAL_I2C_Mem_Read+0x228>)
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f82:	88f8      	ldrh	r0, [r7, #6]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4603      	mov	r3, r0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa5e 	bl	8005454 <I2C_RequestMemoryRead>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e1b0      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d113      	bne.n	8004fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004faa:	2300      	movs	r3, #0
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e184      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11b      	bne.n	8005012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e164      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	2b02      	cmp	r3, #2
 8005018:	d11b      	bne.n	8005052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	e144      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005068:	e138      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b03      	cmp	r3, #3
 8005070:	f200 80f1 	bhi.w	8005256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	2b01      	cmp	r3, #1
 800507a:	d123      	bne.n	80050c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fc25 	bl	80058d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e139      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050c2:	e10b      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d14e      	bne.n	800516a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	2200      	movs	r2, #0
 80050d4:	4906      	ldr	r1, [pc, #24]	; (80050f0 <HAL_I2C_Mem_Read+0x22c>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 faa2 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e10e      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
 80050e6:	bf00      	nop
 80050e8:	00100002 	.word	0x00100002
 80050ec:	ffff0000 	.word	0xffff0000
 80050f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005168:	e0b8      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2200      	movs	r2, #0
 8005172:	4966      	ldr	r1, [pc, #408]	; (800530c <HAL_I2C_Mem_Read+0x448>)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fa53 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0bf      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	2200      	movs	r2, #0
 80051ce:	494f      	ldr	r1, [pc, #316]	; (800530c <HAL_I2C_Mem_Read+0x448>)
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fa25 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e091      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005254:	e042      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fb38 	bl	80058d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e04c      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d118      	bne.n	80052dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f47f aec2 	bne.w	800506a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e000      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	3728      	adds	r7, #40	; 0x28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	00010004 	.word	0x00010004

08005310 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	4608      	mov	r0, r1
 8005336:	4611      	mov	r1, r2
 8005338:	461a      	mov	r2, r3
 800533a:	4603      	mov	r3, r0
 800533c:	817b      	strh	r3, [r7, #10]
 800533e:	460b      	mov	r3, r1
 8005340:	813b      	strh	r3, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	2200      	movs	r2, #0
 800535e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f95c 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00c      	beq.n	8005388 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005382:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e05f      	b.n	8005448 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005388:	897b      	ldrh	r3, [r7, #10]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005396:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	6a3a      	ldr	r2, [r7, #32]
 800539c:	492c      	ldr	r1, [pc, #176]	; (8005450 <I2C_RequestMemoryWrite+0x124>)
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f995 	bl	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e04c      	b.n	8005448 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c6:	6a39      	ldr	r1, [r7, #32]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f9ff 	bl	80057cc <I2C_WaitOnTXEFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d107      	bne.n	80053ec <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e02b      	b.n	8005448 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053f6:	893b      	ldrh	r3, [r7, #8]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	611a      	str	r2, [r3, #16]
 8005400:	e021      	b.n	8005446 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005402:	893b      	ldrh	r3, [r7, #8]
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	b29b      	uxth	r3, r3
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f9d9 	bl	80057cc <I2C_WaitOnTXEFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b04      	cmp	r3, #4
 8005426:	d107      	bne.n	8005438 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005436:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e005      	b.n	8005448 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800543c:	893b      	ldrh	r3, [r7, #8]
 800543e:	b2da      	uxtb	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	00010002 	.word	0x00010002

08005454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4603      	mov	r3, r0
 8005464:	817b      	strh	r3, [r7, #10]
 8005466:	460b      	mov	r3, r1
 8005468:	813b      	strh	r3, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800547c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	2200      	movs	r2, #0
 8005496:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f8c0 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e0a9      	b.n	8005614 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054c0:	897b      	ldrh	r3, [r7, #10]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	6a3a      	ldr	r2, [r7, #32]
 80054d4:	4951      	ldr	r1, [pc, #324]	; (800561c <I2C_RequestMemoryRead+0x1c8>)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f8f9 	bl	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e096      	b.n	8005614 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	6a39      	ldr	r1, [r7, #32]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f963 	bl	80057cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	2b04      	cmp	r3, #4
 8005512:	d107      	bne.n	8005524 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005522:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e075      	b.n	8005614 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d105      	bne.n	800553a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800552e:	893b      	ldrh	r3, [r7, #8]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	611a      	str	r2, [r3, #16]
 8005538:	e021      	b.n	800557e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800553a:	893b      	ldrh	r3, [r7, #8]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	b29b      	uxth	r3, r3
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554a:	6a39      	ldr	r1, [r7, #32]
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f93d 	bl	80057cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2b04      	cmp	r3, #4
 800555e:	d107      	bne.n	8005570 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e04f      	b.n	8005614 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005574:	893b      	ldrh	r3, [r7, #8]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	6a39      	ldr	r1, [r7, #32]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f922 	bl	80057cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b04      	cmp	r3, #4
 8005594:	d107      	bne.n	80055a6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e034      	b.n	8005614 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f82a 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e013      	b.n	8005614 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055ec:	897b      	ldrh	r3, [r7, #10]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	4906      	ldr	r1, [pc, #24]	; (800561c <I2C_RequestMemoryRead+0x1c8>)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f863 	bl	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	00010002 	.word	0x00010002

08005620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005630:	e025      	b.n	800567e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d021      	beq.n	800567e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563a:	f7fe fa33 	bl	8003aa4 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d302      	bcc.n	8005650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d116      	bne.n	800567e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e023      	b.n	80056c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	0c1b      	lsrs	r3, r3, #16
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d10d      	bne.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	43da      	mvns	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	bf0c      	ite	eq
 800569a:	2301      	moveq	r3, #1
 800569c:	2300      	movne	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	e00c      	b.n	80056be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	43da      	mvns	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d0b6      	beq.n	8005632 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056dc:	e051      	b.n	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d123      	bne.n	8005736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005706:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f043 0204 	orr.w	r2, r3, #4
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e046      	b.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d021      	beq.n	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573e:	f7fe f9b1 	bl	8003aa4 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	429a      	cmp	r2, r3
 800574c:	d302      	bcc.n	8005754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d116      	bne.n	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e020      	b.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d10c      	bne.n	80057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	43da      	mvns	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	e00b      	b.n	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	43da      	mvns	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4013      	ands	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d18d      	bne.n	80056de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d8:	e02d      	b.n	8005836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f8ce 	bl	800597c <I2C_IsAcknowledgeFailed>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e02d      	b.n	8005846 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d021      	beq.n	8005836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7fe f957 	bl	8003aa4 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d116      	bne.n	8005836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f043 0220 	orr.w	r2, r3, #32
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e007      	b.n	8005846 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005840:	2b80      	cmp	r3, #128	; 0x80
 8005842:	d1ca      	bne.n	80057da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800585a:	e02d      	b.n	80058b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f88d 	bl	800597c <I2C_IsAcknowledgeFailed>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e02d      	b.n	80058c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d021      	beq.n	80058b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005874:	f7fe f916 	bl	8003aa4 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f043 0220 	orr.w	r2, r3, #32
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e007      	b.n	80058c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d1ca      	bne.n	800585c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058dc:	e042      	b.n	8005964 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d119      	bne.n	8005920 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0210 	mvn.w	r2, #16
 80058f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e029      	b.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005920:	f7fe f8c0 	bl	8003aa4 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d116      	bne.n	8005964 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e007      	b.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d1b5      	bne.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005992:	d11b      	bne.n	80059cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800599c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f043 0204 	orr.w	r2, r3, #4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e0bf      	b.n	8005b6e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8ba 	bl	8005b7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a1e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6999      	ldr	r1, [r3, #24]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a34:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6899      	ldr	r1, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b4a      	ldr	r3, [pc, #296]	; (8005b78 <HAL_LTDC_Init+0x19c>)
 8005a50:	400b      	ands	r3, r1
 8005a52:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6899      	ldr	r1, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68d9      	ldr	r1, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b3e      	ldr	r3, [pc, #248]	; (8005b78 <HAL_LTDC_Init+0x19c>)
 8005a7e:	400b      	ands	r3, r1
 8005a80:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68d9      	ldr	r1, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6919      	ldr	r1, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4b33      	ldr	r3, [pc, #204]	; (8005b78 <HAL_LTDC_Init+0x19c>)
 8005aac:	400b      	ands	r3, r1
 8005aae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6919      	ldr	r1, [r3, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6959      	ldr	r1, [r3, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <HAL_LTDC_Init+0x19c>)
 8005ada:	400b      	ands	r3, r1
 8005adc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6959      	ldr	r1, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b0c:	041b      	lsls	r3, r3, #16
 8005b0e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0206 	orr.w	r2, r2, #6
 8005b4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	f000f800 	.word	0xf000f800

08005b7c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b90:	b5b0      	push	{r4, r5, r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_LTDC_ConfigLayer+0x1a>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e02c      	b.n	8005c04 <HAL_LTDC_ConfigLayer+0x74>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2134      	movs	r1, #52	; 0x34
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f83b 	bl	8005c60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bdb0      	pop	{r4, r5, r7, pc}

08005c0c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_LTDC_EnableDither+0x16>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e016      	b.n	8005c50 <HAL_LTDC_EnableDither+0x44>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <HAL_LTDC_EnableDither+0x50>)
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	4a09      	ldr	r2, [pc, #36]	; (8005c5c <HAL_LTDC_EnableDither+0x50>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c3c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40016800 	.word	0x40016800

08005c60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b089      	sub	sp, #36	; 0x24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	0c1b      	lsrs	r3, r3, #16
 8005c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7c:	4413      	add	r3, r2
 8005c7e:	041b      	lsls	r3, r3, #16
 8005c80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	01db      	lsls	r3, r3, #7
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3384      	adds	r3, #132	; 0x84
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	4611      	mov	r1, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	01d2      	lsls	r2, r2, #7
 8005c9c:	440a      	add	r2, r1
 8005c9e:	3284      	adds	r2, #132	; 0x84
 8005ca0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ca4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb6:	4413      	add	r3, r2
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	01db      	lsls	r3, r3, #7
 8005cc4:	440b      	add	r3, r1
 8005cc6:	3384      	adds	r3, #132	; 0x84
 8005cc8:	4619      	mov	r1, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cde:	4413      	add	r3, r2
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	01db      	lsls	r3, r3, #7
 8005cee:	4413      	add	r3, r2
 8005cf0:	3384      	adds	r3, #132	; 0x84
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	01d2      	lsls	r2, r2, #7
 8005cfe:	440a      	add	r2, r1
 8005d00:	3284      	adds	r2, #132	; 0x84
 8005d02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d16:	4413      	add	r3, r2
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	01db      	lsls	r3, r3, #7
 8005d24:	440b      	add	r3, r1
 8005d26:	3384      	adds	r3, #132	; 0x84
 8005d28:	4619      	mov	r1, r3
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	01db      	lsls	r3, r3, #7
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3384      	adds	r3, #132	; 0x84
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	4611      	mov	r1, r2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	01d2      	lsls	r2, r2, #7
 8005d4a:	440a      	add	r2, r1
 8005d4c:	3284      	adds	r2, #132	; 0x84
 8005d4e:	f023 0307 	bic.w	r3, r3, #7
 8005d52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	01db      	lsls	r3, r3, #7
 8005d5e:	4413      	add	r3, r2
 8005d60:	3384      	adds	r3, #132	; 0x84
 8005d62:	461a      	mov	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	061b      	lsls	r3, r3, #24
 8005d84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	01db      	lsls	r3, r3, #7
 8005d90:	4413      	add	r3, r2
 8005d92:	3384      	adds	r3, #132	; 0x84
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	01db      	lsls	r3, r3, #7
 8005da0:	4413      	add	r3, r2
 8005da2:	3384      	adds	r3, #132	; 0x84
 8005da4:	461a      	mov	r2, r3
 8005da6:	2300      	movs	r3, #0
 8005da8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005db0:	461a      	mov	r2, r3
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	01db      	lsls	r3, r3, #7
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3384      	adds	r3, #132	; 0x84
 8005dc8:	4619      	mov	r1, r3
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	01db      	lsls	r3, r3, #7
 8005dda:	4413      	add	r3, r2
 8005ddc:	3384      	adds	r3, #132	; 0x84
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	4611      	mov	r1, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	01d2      	lsls	r2, r2, #7
 8005dea:	440a      	add	r2, r1
 8005dec:	3284      	adds	r2, #132	; 0x84
 8005dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005df2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	01db      	lsls	r3, r3, #7
 8005dfe:	4413      	add	r3, r2
 8005e00:	3384      	adds	r3, #132	; 0x84
 8005e02:	461a      	mov	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	01db      	lsls	r3, r3, #7
 8005e14:	4413      	add	r3, r2
 8005e16:	3384      	adds	r3, #132	; 0x84
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	01d2      	lsls	r2, r2, #7
 8005e24:	440a      	add	r2, r1
 8005e26:	3284      	adds	r2, #132	; 0x84
 8005e28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e2c:	f023 0307 	bic.w	r3, r3, #7
 8005e30:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	69da      	ldr	r2, [r3, #28]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	6809      	ldr	r1, [r1, #0]
 8005e3e:	4608      	mov	r0, r1
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	01c9      	lsls	r1, r1, #7
 8005e44:	4401      	add	r1, r0
 8005e46:	3184      	adds	r1, #132	; 0x84
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	01db      	lsls	r3, r3, #7
 8005e56:	4413      	add	r3, r2
 8005e58:	3384      	adds	r3, #132	; 0x84
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	01db      	lsls	r3, r3, #7
 8005e66:	4413      	add	r3, r2
 8005e68:	3384      	adds	r3, #132	; 0x84
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	01db      	lsls	r3, r3, #7
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3384      	adds	r3, #132	; 0x84
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005e8e:	2304      	movs	r3, #4
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	e01b      	b.n	8005ecc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d102      	bne.n	8005ea2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	e014      	b.n	8005ecc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d00b      	beq.n	8005ec2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d007      	beq.n	8005ec2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d003      	beq.n	8005ec2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ebe:	2b07      	cmp	r3, #7
 8005ec0:	d102      	bne.n	8005ec8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e001      	b.n	8005ecc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	01db      	lsls	r3, r3, #7
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3384      	adds	r3, #132	; 0x84
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	01d2      	lsls	r2, r2, #7
 8005ee6:	440a      	add	r2, r1
 8005ee8:	3284      	adds	r2, #132	; 0x84
 8005eea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	041a      	lsls	r2, r3, #16
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	1acb      	subs	r3, r1, r3
 8005f06:	69f9      	ldr	r1, [r7, #28]
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	3303      	adds	r3, #3
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	6809      	ldr	r1, [r1, #0]
 8005f12:	4608      	mov	r0, r1
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	01c9      	lsls	r1, r1, #7
 8005f18:	4401      	add	r1, r0
 8005f1a:	3184      	adds	r1, #132	; 0x84
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	01db      	lsls	r3, r3, #7
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3384      	adds	r3, #132	; 0x84
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	4611      	mov	r1, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	01d2      	lsls	r2, r2, #7
 8005f3a:	440a      	add	r2, r1
 8005f3c:	3284      	adds	r2, #132	; 0x84
 8005f3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	01db      	lsls	r3, r3, #7
 8005f52:	4413      	add	r3, r2
 8005f54:	3384      	adds	r3, #132	; 0x84
 8005f56:	461a      	mov	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	01db      	lsls	r3, r3, #7
 8005f68:	4413      	add	r3, r2
 8005f6a:	3384      	adds	r3, #132	; 0x84
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	4611      	mov	r1, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	01d2      	lsls	r2, r2, #7
 8005f78:	440a      	add	r2, r1
 8005f7a:	3284      	adds	r2, #132	; 0x84
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6013      	str	r3, [r2, #0]
}
 8005f82:	bf00      	nop
 8005f84:	3724      	adds	r7, #36	; 0x24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e25e      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d075      	beq.n	800609a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fae:	4b88      	ldr	r3, [pc, #544]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d00c      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fba:	4b85      	ldr	r3, [pc, #532]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d112      	bne.n	8005fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc6:	4b82      	ldr	r3, [pc, #520]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fd2:	d10b      	bne.n	8005fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd4:	4b7e      	ldr	r3, [pc, #504]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05b      	beq.n	8006098 <HAL_RCC_OscConfig+0x108>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d157      	bne.n	8006098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e239      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff4:	d106      	bne.n	8006004 <HAL_RCC_OscConfig+0x74>
 8005ff6:	4b76      	ldr	r3, [pc, #472]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a75      	ldr	r2, [pc, #468]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e01d      	b.n	8006040 <HAL_RCC_OscConfig+0xb0>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800600c:	d10c      	bne.n	8006028 <HAL_RCC_OscConfig+0x98>
 800600e:	4b70      	ldr	r3, [pc, #448]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a6f      	ldr	r2, [pc, #444]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	4b6d      	ldr	r3, [pc, #436]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a6c      	ldr	r2, [pc, #432]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	e00b      	b.n	8006040 <HAL_RCC_OscConfig+0xb0>
 8006028:	4b69      	ldr	r3, [pc, #420]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a68      	ldr	r2, [pc, #416]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800602e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	4b66      	ldr	r3, [pc, #408]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a65      	ldr	r2, [pc, #404]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800603a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fd fd2c 	bl	8003aa4 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006050:	f7fd fd28 	bl	8003aa4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	; 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e1fe      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006062:	4b5b      	ldr	r3, [pc, #364]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0xc0>
 800606e:	e014      	b.n	800609a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006070:	f7fd fd18 	bl	8003aa4 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006078:	f7fd fd14 	bl	8003aa4 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b64      	cmp	r3, #100	; 0x64
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e1ea      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608a:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0xe8>
 8006096:	e000      	b.n	800609a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d063      	beq.n	800616e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060a6:	4b4a      	ldr	r3, [pc, #296]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060b2:	4b47      	ldr	r3, [pc, #284]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d11c      	bne.n	80060f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060be:	4b44      	ldr	r3, [pc, #272]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d116      	bne.n	80060f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ca:	4b41      	ldr	r3, [pc, #260]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_RCC_OscConfig+0x152>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e1be      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e2:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4937      	ldr	r1, [pc, #220]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060f6:	e03a      	b.n	800616e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006100:	4b34      	ldr	r3, [pc, #208]	; (80061d4 <HAL_RCC_OscConfig+0x244>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fd fccd 	bl	8003aa4 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610e:	f7fd fcc9 	bl	8003aa4 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e19f      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4925      	ldr	r1, [pc, #148]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]
 8006140:	e015      	b.n	800616e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <HAL_RCC_OscConfig+0x244>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fd fcac 	bl	8003aa4 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006150:	f7fd fca8 	bl	8003aa4 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e17e      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006162:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d036      	beq.n	80061e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d016      	beq.n	80061b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_RCC_OscConfig+0x248>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fd fc8c 	bl	8003aa4 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006190:	f7fd fc88 	bl	8003aa4 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e15e      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_OscConfig+0x240>)
 80061a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0x200>
 80061ae:	e01b      	b.n	80061e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <HAL_RCC_OscConfig+0x248>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b6:	f7fd fc75 	bl	8003aa4 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	e00e      	b.n	80061dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061be:	f7fd fc71 	bl	8003aa4 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d907      	bls.n	80061dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e147      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	42470000 	.word	0x42470000
 80061d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061dc:	4b88      	ldr	r3, [pc, #544]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80061de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1ea      	bne.n	80061be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8097 	beq.w	8006324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fa:	4b81      	ldr	r3, [pc, #516]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10f      	bne.n	8006226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	4b7d      	ldr	r3, [pc, #500]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	4a7c      	ldr	r2, [pc, #496]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006214:	6413      	str	r3, [r2, #64]	; 0x40
 8006216:	4b7a      	ldr	r3, [pc, #488]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006226:	4b77      	ldr	r3, [pc, #476]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622e:	2b00      	cmp	r3, #0
 8006230:	d118      	bne.n	8006264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006232:	4b74      	ldr	r3, [pc, #464]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a73      	ldr	r2, [pc, #460]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 8006238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800623e:	f7fd fc31 	bl	8003aa4 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006246:	f7fd fc2d 	bl	8003aa4 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e103      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006258:	4b6a      	ldr	r3, [pc, #424]	; (8006404 <HAL_RCC_OscConfig+0x474>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d106      	bne.n	800627a <HAL_RCC_OscConfig+0x2ea>
 800626c:	4b64      	ldr	r3, [pc, #400]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4a63      	ldr	r2, [pc, #396]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6713      	str	r3, [r2, #112]	; 0x70
 8006278:	e01c      	b.n	80062b4 <HAL_RCC_OscConfig+0x324>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b05      	cmp	r3, #5
 8006280:	d10c      	bne.n	800629c <HAL_RCC_OscConfig+0x30c>
 8006282:	4b5f      	ldr	r3, [pc, #380]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a5e      	ldr	r2, [pc, #376]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006288:	f043 0304 	orr.w	r3, r3, #4
 800628c:	6713      	str	r3, [r2, #112]	; 0x70
 800628e:	4b5c      	ldr	r3, [pc, #368]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a5b      	ldr	r2, [pc, #364]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6713      	str	r3, [r2, #112]	; 0x70
 800629a:	e00b      	b.n	80062b4 <HAL_RCC_OscConfig+0x324>
 800629c:	4b58      	ldr	r3, [pc, #352]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a57      	ldr	r2, [pc, #348]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	4b55      	ldr	r3, [pc, #340]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	4a54      	ldr	r2, [pc, #336]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062ae:	f023 0304 	bic.w	r3, r3, #4
 80062b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d015      	beq.n	80062e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fd fbf2 	bl	8003aa4 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c2:	e00a      	b.n	80062da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c4:	f7fd fbee 	bl	8003aa4 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e0c2      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062da:	4b49      	ldr	r3, [pc, #292]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ee      	beq.n	80062c4 <HAL_RCC_OscConfig+0x334>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e8:	f7fd fbdc 	bl	8003aa4 <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f0:	f7fd fbd8 	bl	8003aa4 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e0ac      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006306:	4b3e      	ldr	r3, [pc, #248]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1ee      	bne.n	80062f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d105      	bne.n	8006324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006318:	4b39      	ldr	r3, [pc, #228]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	4a38      	ldr	r2, [pc, #224]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 800631e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8098 	beq.w	800645e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800632e:	4b34      	ldr	r3, [pc, #208]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b08      	cmp	r3, #8
 8006338:	d05c      	beq.n	80063f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d141      	bne.n	80063c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006342:	4b31      	ldr	r3, [pc, #196]	; (8006408 <HAL_RCC_OscConfig+0x478>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fd fbac 	bl	8003aa4 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006350:	f7fd fba8 	bl	8003aa4 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e07e      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	4b27      	ldr	r3, [pc, #156]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	019b      	lsls	r3, r3, #6
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	3b01      	subs	r3, #1
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	491b      	ldr	r1, [pc, #108]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <HAL_RCC_OscConfig+0x478>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639e:	f7fd fb81 	bl	8003aa4 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a6:	f7fd fb7d 	bl	8003aa4 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e053      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b8:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <HAL_RCC_OscConfig+0x416>
 80063c4:	e04b      	b.n	800645e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <HAL_RCC_OscConfig+0x478>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063cc:	f7fd fb6a 	bl	8003aa4 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d4:	f7fd fb66 	bl	8003aa4 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e03c      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCC_OscConfig+0x470>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x444>
 80063f2:	e034      	b.n	800645e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d107      	bne.n	800640c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e02f      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
 8006400:	40023800 	.word	0x40023800
 8006404:	40007000 	.word	0x40007000
 8006408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800640c:	4b16      	ldr	r3, [pc, #88]	; (8006468 <HAL_RCC_OscConfig+0x4d8>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d11c      	bne.n	800645a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642a:	429a      	cmp	r2, r3
 800642c:	d115      	bne.n	800645a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006434:	4013      	ands	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800643a:	4293      	cmp	r3, r2
 800643c:	d10d      	bne.n	800645a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d106      	bne.n	800645a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006456:	429a      	cmp	r2, r3
 8006458:	d001      	beq.n	800645e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40023800 	.word	0x40023800

0800646c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0cc      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006480:	4b68      	ldr	r3, [pc, #416]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d90c      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b65      	ldr	r3, [pc, #404]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b63      	ldr	r3, [pc, #396]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b8      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064c0:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4a58      	ldr	r2, [pc, #352]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d8:	4b53      	ldr	r3, [pc, #332]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a52      	ldr	r2, [pc, #328]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e4:	4b50      	ldr	r3, [pc, #320]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	494d      	ldr	r1, [pc, #308]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d044      	beq.n	800658c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	4b47      	ldr	r3, [pc, #284]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d119      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e07f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d003      	beq.n	800652a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006526:	2b03      	cmp	r3, #3
 8006528:	d107      	bne.n	800653a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652a:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e06f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800653a:	4b3b      	ldr	r3, [pc, #236]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e067      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800654a:	4b37      	ldr	r3, [pc, #220]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4934      	ldr	r1, [pc, #208]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800655c:	f7fd faa2 	bl	8003aa4 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	e00a      	b.n	800657a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006564:	f7fd fa9e 	bl	8003aa4 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e04f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 020c 	and.w	r2, r3, #12
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d1eb      	bne.n	8006564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800658c:	4b25      	ldr	r3, [pc, #148]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d20c      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b22      	ldr	r3, [pc, #136]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a2:	4b20      	ldr	r3, [pc, #128]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e032      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c0:	4b19      	ldr	r3, [pc, #100]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4916      	ldr	r1, [pc, #88]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	490e      	ldr	r1, [pc, #56]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065f2:	f000 f821 	bl	8006638 <HAL_RCC_GetSysClockFreq>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	490a      	ldr	r1, [pc, #40]	; (800662c <HAL_RCC_ClockConfig+0x1c0>)
 8006604:	5ccb      	ldrb	r3, [r1, r3]
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	4a09      	ldr	r2, [pc, #36]	; (8006630 <HAL_RCC_ClockConfig+0x1c4>)
 800660c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <HAL_RCC_ClockConfig+0x1c8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fd fa02 	bl	8003a1c <HAL_InitTick>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40023c00 	.word	0x40023c00
 8006628:	40023800 	.word	0x40023800
 800662c:	080087c0 	.word	0x080087c0
 8006630:	20000264 	.word	0x20000264
 8006634:	200002f4 	.word	0x200002f4

08006638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800663c:	b094      	sub	sp, #80	; 0x50
 800663e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	647b      	str	r3, [r7, #68]	; 0x44
 8006644:	2300      	movs	r3, #0
 8006646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006648:	2300      	movs	r3, #0
 800664a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006650:	4b79      	ldr	r3, [pc, #484]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	2b08      	cmp	r3, #8
 800665a:	d00d      	beq.n	8006678 <HAL_RCC_GetSysClockFreq+0x40>
 800665c:	2b08      	cmp	r3, #8
 800665e:	f200 80e1 	bhi.w	8006824 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x34>
 8006666:	2b04      	cmp	r3, #4
 8006668:	d003      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x3a>
 800666a:	e0db      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800666c:	4b73      	ldr	r3, [pc, #460]	; (800683c <HAL_RCC_GetSysClockFreq+0x204>)
 800666e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006670:	e0db      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006672:	4b73      	ldr	r3, [pc, #460]	; (8006840 <HAL_RCC_GetSysClockFreq+0x208>)
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006676:	e0d8      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006678:	4b6f      	ldr	r3, [pc, #444]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006682:	4b6d      	ldr	r3, [pc, #436]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d063      	beq.n	8006756 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668e:	4b6a      	ldr	r3, [pc, #424]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	099b      	lsrs	r3, r3, #6
 8006694:	2200      	movs	r2, #0
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38
 8006698:	63fa      	str	r2, [r7, #60]	; 0x3c
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
 80066a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066aa:	4622      	mov	r2, r4
 80066ac:	462b      	mov	r3, r5
 80066ae:	f04f 0000 	mov.w	r0, #0
 80066b2:	f04f 0100 	mov.w	r1, #0
 80066b6:	0159      	lsls	r1, r3, #5
 80066b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066bc:	0150      	lsls	r0, r2, #5
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4621      	mov	r1, r4
 80066c4:	1a51      	subs	r1, r2, r1
 80066c6:	6139      	str	r1, [r7, #16]
 80066c8:	4629      	mov	r1, r5
 80066ca:	eb63 0301 	sbc.w	r3, r3, r1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066dc:	4659      	mov	r1, fp
 80066de:	018b      	lsls	r3, r1, #6
 80066e0:	4651      	mov	r1, sl
 80066e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066e6:	4651      	mov	r1, sl
 80066e8:	018a      	lsls	r2, r1, #6
 80066ea:	4651      	mov	r1, sl
 80066ec:	ebb2 0801 	subs.w	r8, r2, r1
 80066f0:	4659      	mov	r1, fp
 80066f2:	eb63 0901 	sbc.w	r9, r3, r1
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800670a:	4690      	mov	r8, r2
 800670c:	4699      	mov	r9, r3
 800670e:	4623      	mov	r3, r4
 8006710:	eb18 0303 	adds.w	r3, r8, r3
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	462b      	mov	r3, r5
 8006718:	eb49 0303 	adc.w	r3, r9, r3
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800672a:	4629      	mov	r1, r5
 800672c:	024b      	lsls	r3, r1, #9
 800672e:	4621      	mov	r1, r4
 8006730:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006734:	4621      	mov	r1, r4
 8006736:	024a      	lsls	r2, r1, #9
 8006738:	4610      	mov	r0, r2
 800673a:	4619      	mov	r1, r3
 800673c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673e:	2200      	movs	r2, #0
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006748:	f7f9 fda2 	bl	8000290 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4613      	mov	r3, r2
 8006752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006754:	e058      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006756:	4b38      	ldr	r3, [pc, #224]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	099b      	lsrs	r3, r3, #6
 800675c:	2200      	movs	r2, #0
 800675e:	4618      	mov	r0, r3
 8006760:	4611      	mov	r1, r2
 8006762:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	2300      	movs	r3, #0
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
 800676c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	0159      	lsls	r1, r3, #5
 800677e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006782:	0150      	lsls	r0, r2, #5
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4641      	mov	r1, r8
 800678a:	ebb2 0a01 	subs.w	sl, r2, r1
 800678e:	4649      	mov	r1, r9
 8006790:	eb63 0b01 	sbc.w	fp, r3, r1
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067a8:	ebb2 040a 	subs.w	r4, r2, sl
 80067ac:	eb63 050b 	sbc.w	r5, r3, fp
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	00eb      	lsls	r3, r5, #3
 80067ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067be:	00e2      	lsls	r2, r4, #3
 80067c0:	4614      	mov	r4, r2
 80067c2:	461d      	mov	r5, r3
 80067c4:	4643      	mov	r3, r8
 80067c6:	18e3      	adds	r3, r4, r3
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	464b      	mov	r3, r9
 80067cc:	eb45 0303 	adc.w	r3, r5, r3
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067de:	4629      	mov	r1, r5
 80067e0:	028b      	lsls	r3, r1, #10
 80067e2:	4621      	mov	r1, r4
 80067e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067e8:	4621      	mov	r1, r4
 80067ea:	028a      	lsls	r2, r1, #10
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f2:	2200      	movs	r2, #0
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	61fa      	str	r2, [r7, #28]
 80067f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067fc:	f7f9 fd48 	bl	8000290 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4613      	mov	r3, r2
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	3301      	adds	r3, #1
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800681a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006822:	e002      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_RCC_GetSysClockFreq+0x204>)
 8006826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800682a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800682c:	4618      	mov	r0, r3
 800682e:	3750      	adds	r7, #80	; 0x50
 8006830:	46bd      	mov	sp, r7
 8006832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800
 800683c:	00f42400 	.word	0x00f42400
 8006840:	007a1200 	.word	0x007a1200

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000264 	.word	0x20000264

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006860:	f7ff fff0 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006864:	4602      	mov	r2, r0
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	0a9b      	lsrs	r3, r3, #10
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4903      	ldr	r1, [pc, #12]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006872:	5ccb      	ldrb	r3, [r1, r3]
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40023800 	.word	0x40023800
 8006880:	080087d0 	.word	0x080087d0

08006884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d075      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068b8:	4b91      	ldr	r3, [pc, #580]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068be:	f7fd f8f1 	bl	8003aa4 <HAL_GetTick>
 80068c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068c4:	e008      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068c6:	f7fd f8ed 	bl	8003aa4 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e189      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068d8:	4b8a      	ldr	r3, [pc, #552]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1f0      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d009      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	019a      	lsls	r2, r3, #6
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	071b      	lsls	r3, r3, #28
 80068fc:	4981      	ldr	r1, [pc, #516]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01f      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006910:	4b7c      	ldr	r3, [pc, #496]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006916:	0f1b      	lsrs	r3, r3, #28
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	019a      	lsls	r2, r3, #6
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	431a      	orrs	r2, r3
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	071b      	lsls	r3, r3, #28
 8006930:	4974      	ldr	r1, [pc, #464]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006938:	4b72      	ldr	r3, [pc, #456]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800693a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800693e:	f023 021f 	bic.w	r2, r3, #31
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	3b01      	subs	r3, #1
 8006948:	496e      	ldr	r1, [pc, #440]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00d      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	019a      	lsls	r2, r3, #6
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	061b      	lsls	r3, r3, #24
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	071b      	lsls	r3, r3, #28
 8006970:	4964      	ldr	r1, [pc, #400]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006978:	4b61      	ldr	r3, [pc, #388]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800697e:	f7fd f891 	bl	8003aa4 <HAL_GetTick>
 8006982:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006984:	e008      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006986:	f7fd f88d 	bl	8003aa4 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e129      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006998:	4b5a      	ldr	r3, [pc, #360]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0f0      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d079      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069bc:	4b52      	ldr	r3, [pc, #328]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069c2:	f7fd f86f 	bl	8003aa4 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80069ca:	f7fd f86b 	bl	8003aa4 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e107      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069dc:	4b49      	ldr	r3, [pc, #292]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e8:	d0ef      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d020      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80069f6:	4b43      	ldr	r3, [pc, #268]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	0f1b      	lsrs	r3, r3, #28
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	019a      	lsls	r2, r3, #6
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	061b      	lsls	r3, r3, #24
 8006a10:	431a      	orrs	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	071b      	lsls	r3, r3, #28
 8006a16:	493b      	ldr	r1, [pc, #236]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a1e:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	4934      	ldr	r1, [pc, #208]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01e      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a44:	4b2f      	ldr	r3, [pc, #188]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4a:	0e1b      	lsrs	r3, r3, #24
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	019a      	lsls	r2, r3, #6
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	061b      	lsls	r3, r3, #24
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	071b      	lsls	r3, r3, #28
 8006a64:	4927      	ldr	r1, [pc, #156]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006a6c:	4b25      	ldr	r3, [pc, #148]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	4922      	ldr	r1, [pc, #136]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a82:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a88:	f7fd f80c 	bl	8003aa4 <HAL_GetTick>
 8006a8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a90:	f7fd f808 	bl	8003aa4 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e0a4      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006aa2:	4b18      	ldr	r3, [pc, #96]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aae:	d1ef      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 808b 	beq.w	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	4a0f      	ldr	r2, [pc, #60]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006acc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ace:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ae6:	f7fc ffdd 	bl	8003aa4 <HAL_GetTick>
 8006aea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006aec:	e010      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006aee:	f7fc ffd9 	bl	8003aa4 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d909      	bls.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e075      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006b00:	42470068 	.word	0x42470068
 8006b04:	40023800 	.word	0x40023800
 8006b08:	42470070 	.word	0x42470070
 8006b0c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b10:	4b38      	ldr	r3, [pc, #224]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0e8      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b1c:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d02f      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d028      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b3a:	4b2f      	ldr	r3, [pc, #188]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b44:	4b2d      	ldr	r3, [pc, #180]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b4a:	4b2c      	ldr	r3, [pc, #176]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b50:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b56:	4b28      	ldr	r3, [pc, #160]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d114      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b62:	f7fc ff9f 	bl	8003aa4 <HAL_GetTick>
 8006b66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b68:	e00a      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fc ff9b 	bl	8003aa4 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e035      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b80:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0ee      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b98:	d10d      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006b9a:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bae:	4912      	ldr	r1, [pc, #72]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	608b      	str	r3, [r1, #8]
 8006bb4:	e005      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bc0:	6093      	str	r3, [r2, #8]
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bce:	490a      	ldr	r1, [pc, #40]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006be8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40007000 	.word	0x40007000
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	42470e40 	.word	0x42470e40
 8006c00:	424711e0 	.word	0x424711e0

08006c04 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e025      	b.n	8006c64 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f81d 	bl	8006c6c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f000 ff0f 	bl	8007a68 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	461a      	mov	r2, r3
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	f000 ff7a 	bl	8007b4e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d101      	bne.n	8006c9c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e018      	b.n	8006cce <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 ffcd 	bl	8007c4c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d104      	bne.n	8006cc4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2205      	movs	r2, #5
 8006cbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006cc2:	e003      	b.n	8006ccc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d101      	bne.n	8006cf0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006cec:	2302      	movs	r3, #2
 8006cee:	e00e      	b.n	8006d0e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 ffe0 	bl	8007cc4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e05d      	b.n	8006de4 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f87d 	bl	8006e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	ea42 0103 	orr.w	r1, r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	f003 0104 	and.w	r1, r3, #4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db8:	d104      	bne.n	8006dc4 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006dc2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e01a      	b.n	8006e34 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e14:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f81a 	bl	8006e50 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_SPI_Transmit+0x22>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e140      	b.n	8007108 <HAL_SPI_Transmit+0x2a4>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e8e:	f7fc fe09 	bl	8003aa4 <HAL_GetTick>
 8006e92:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d002      	beq.n	8006eaa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ea8:	e125      	b.n	80070f6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Transmit+0x52>
 8006eb0:	88fb      	ldrh	r3, [r7, #6]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eba:	e11c      	b.n	80070f6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	88fa      	ldrh	r2, [r7, #6]
 8006ed4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	88fa      	ldrh	r2, [r7, #6]
 8006eda:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f02:	d107      	bne.n	8006f14 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f12:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1c:	d10f      	bne.n	8006f3e <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f3c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d007      	beq.n	8006f5c <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f64:	d14b      	bne.n	8006ffe <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_SPI_Transmit+0x110>
 8006f6e:	8afb      	ldrh	r3, [r7, #22]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d13e      	bne.n	8006ff2 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	1c9a      	adds	r2, r3, #2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f98:	e02b      	b.n	8006ff2 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d112      	bne.n	8006fce <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fcc:	e011      	b.n	8006ff2 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fce:	f7fc fd69 	bl	8003aa4 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d803      	bhi.n	8006fe6 <HAL_SPI_Transmit+0x182>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d102      	bne.n	8006fec <HAL_SPI_Transmit+0x188>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ff0:	e081      	b.n	80070f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1ce      	bne.n	8006f9a <HAL_SPI_Transmit+0x136>
 8006ffc:	e04c      	b.n	8007098 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_SPI_Transmit+0x1a8>
 8007006:	8afb      	ldrh	r3, [r7, #22]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d140      	bne.n	800708e <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007032:	e02c      	b.n	800708e <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d113      	bne.n	800706a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	86da      	strh	r2, [r3, #54]	; 0x36
 8007068:	e011      	b.n	800708e <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800706a:	f7fc fd1b 	bl	8003aa4 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d803      	bhi.n	8007082 <HAL_SPI_Transmit+0x21e>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d102      	bne.n	8007088 <HAL_SPI_Transmit+0x224>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800708c:	e033      	b.n	80070f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1cd      	bne.n	8007034 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a0:	d107      	bne.n	80070b2 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070b0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fc94 	bl	80079e4 <SPI_EndRxTxTransaction>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	77fb      	strb	r3, [r7, #31]
 80070f2:	e000      	b.n	80070f6 <HAL_SPI_Transmit+0x292>
  }

error:
 80070f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007106:	7ffb      	ldrb	r3, [r7, #31]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3720      	adds	r7, #32
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800712c:	d112      	bne.n	8007154 <HAL_SPI_Receive+0x44>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10e      	bne.n	8007154 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2204      	movs	r2, #4
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 f95f 	bl	800740e <HAL_SPI_TransmitReceive>
 8007150:	4603      	mov	r3, r0
 8007152:	e158      	b.n	8007406 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_SPI_Receive+0x52>
 800715e:	2302      	movs	r3, #2
 8007160:	e151      	b.n	8007406 <HAL_SPI_Receive+0x2f6>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800716a:	f7fc fc9b 	bl	8003aa4 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d002      	beq.n	8007182 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800717c:	2302      	movs	r3, #2
 800717e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007180:	e138      	b.n	80073f4 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_SPI_Receive+0x7e>
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007192:	e12f      	b.n	80073f4 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2204      	movs	r2, #4
 8007198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	88fa      	ldrh	r2, [r7, #6]
 80071b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071da:	d116      	bne.n	800720a <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071fa:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007212:	d107      	bne.n	8007224 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007222:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d007      	beq.n	8007242 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007240:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d162      	bne.n	8007310 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800724a:	e02e      	b.n	80072aa <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d115      	bne.n	8007286 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f103 020c 	add.w	r2, r3, #12
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	7812      	ldrb	r2, [r2, #0]
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007284:	e011      	b.n	80072aa <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007286:	f7fc fc0d 	bl	8003aa4 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d803      	bhi.n	800729e <HAL_SPI_Receive+0x18e>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d102      	bne.n	80072a4 <HAL_SPI_Receive+0x194>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d102      	bne.n	80072aa <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072a8:	e0a4      	b.n	80073f4 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1cb      	bne.n	800724c <HAL_SPI_Receive+0x13c>
 80072b4:	e031      	b.n	800731a <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d113      	bne.n	80072ec <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	b292      	uxth	r2, r2
 80072d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	1c9a      	adds	r2, r3, #2
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072ea:	e011      	b.n	8007310 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ec:	f7fc fbda 	bl	8003aa4 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d803      	bhi.n	8007304 <HAL_SPI_Receive+0x1f4>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007302:	d102      	bne.n	800730a <HAL_SPI_Receive+0x1fa>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800730e:	e071      	b.n	80073f4 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1cd      	bne.n	80072b6 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007322:	d142      	bne.n	80073aa <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007332:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2201      	movs	r2, #1
 800733c:	2101      	movs	r1, #1
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fa81 	bl	8007846 <SPI_WaitFlagStateUntilTimeout>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	75fb      	strb	r3, [r7, #23]
      goto error;
 800734e:	e051      	b.n	80073f4 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007358:	d107      	bne.n	800736a <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	b292      	uxth	r2, r2
 8007366:	801a      	strh	r2, [r3, #0]
 8007368:	e008      	b.n	800737c <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f103 020c 	add.w	r2, r3, #12
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	7812      	ldrb	r2, [r2, #0]
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2201      	movs	r2, #1
 8007384:	2101      	movs	r1, #1
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fa5d 	bl	8007846 <SPI_WaitFlagStateUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	f043 0202 	orr.w	r2, r3, #2
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	75fb      	strb	r3, [r7, #23]
      goto error;
 80073a2:	e027      	b.n	80073f4 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 fab3 	bl	800791a <SPI_EndRxTransaction>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b10      	cmp	r3, #16
 80073cc:	d10a      	bne.n	80073e4 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	f043 0202 	orr.w	r2, r3, #2
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80073e2:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
 80073f0:	e000      	b.n	80073f4 <HAL_SPI_Receive+0x2e4>
  }

error :
 80073f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b08e      	sub	sp, #56	; 0x38
 8007412:	af02      	add	r7, sp, #8
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800741c:	2301      	movs	r3, #1
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x26>
 8007430:	2302      	movs	r3, #2
 8007432:	e1f6      	b.n	8007822 <HAL_SPI_TransmitReceive+0x414>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800743c:	f7fc fb32 	bl	8003aa4 <HAL_GetTick>
 8007440:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007452:	887b      	ldrh	r3, [r7, #2]
 8007454:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800745a:	2b01      	cmp	r3, #1
 800745c:	d00f      	beq.n	800747e <HAL_SPI_TransmitReceive+0x70>
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007464:	d107      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x68>
 800746e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007472:	2b04      	cmp	r3, #4
 8007474:	d003      	beq.n	800747e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007476:	2302      	movs	r3, #2
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800747c:	e1c7      	b.n	800780e <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x82>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x82>
 800748a:	887b      	ldrh	r3, [r7, #2]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007496:	e1ba      	b.n	800780e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d003      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2205      	movs	r2, #5
 80074a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	887a      	ldrh	r2, [r7, #2]
 80074bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	887a      	ldrh	r2, [r7, #2]
 80074c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	887a      	ldrh	r2, [r7, #2]
 80074ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	887a      	ldrh	r2, [r7, #2]
 80074d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ea:	d10f      	bne.n	800750c <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800750a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d007      	beq.n	800752a <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007532:	f040 808b 	bne.w	800764c <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_SPI_TransmitReceive+0x136>
 800753e:	8b7b      	ldrh	r3, [r7, #26]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d178      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	881a      	ldrh	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	1c9a      	adds	r2, r3, #2
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007568:	e065      	b.n	8007636 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	d12d      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x1c6>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d028      	beq.n	80075d4 <HAL_SPI_TransmitReceive+0x1c6>
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d125      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	881a      	ldrh	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	1c9a      	adds	r2, r3, #2
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10c      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x1c6>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c2:	d107      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075d2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d119      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x208>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d014      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	b292      	uxth	r2, r2
 80075f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	1c9a      	adds	r2, r3, #2
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007612:	2301      	movs	r3, #1
 8007614:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007616:	f7fc fa45 	bl	8003aa4 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007622:	429a      	cmp	r2, r3
 8007624:	d807      	bhi.n	8007636 <HAL_SPI_TransmitReceive+0x228>
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d003      	beq.n	8007636 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007634:	e0eb      	b.n	800780e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d194      	bne.n	800756a <HAL_SPI_TransmitReceive+0x15c>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d18f      	bne.n	800756a <HAL_SPI_TransmitReceive+0x15c>
 800764a:	e08e      	b.n	800776a <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_SPI_TransmitReceive+0x24c>
 8007654:	8b7b      	ldrh	r3, [r7, #26]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d17d      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007680:	e069      	b.n	8007756 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b02      	cmp	r3, #2
 800768e:	d12e      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x2e0>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d029      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x2e0>
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d126      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10c      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x2e0>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076dc:	d107      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076ec:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d119      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x322>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d014      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800772c:	2301      	movs	r3, #1
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007730:	f7fc f9b8 	bl	8003aa4 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773c:	429a      	cmp	r2, r3
 800773e:	d803      	bhi.n	8007748 <HAL_SPI_TransmitReceive+0x33a>
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d102      	bne.n	800774e <HAL_SPI_TransmitReceive+0x340>
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007754:	e05b      	b.n	800780e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d190      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x274>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d18b      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007772:	d117      	bne.n	80077a4 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	2201      	movs	r2, #1
 800777c:	2101      	movs	r1, #1
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f861 	bl	8007846 <SPI_WaitFlagStateUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778e:	f043 0202 	orr.w	r2, r3, #2
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800779c:	e037      	b.n	800780e <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d10d      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b6:	f043 0202 	orr.w	r2, r3, #2
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80077c6:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f906 	bl	80079e4 <SPI_EndRxTxTransaction>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d006      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80077ea:	e010      	b.n	800780e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	e000      	b.n	800780e <HAL_SPI_TransmitReceive+0x400>
  }

error :
 800780c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800781e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007822:	4618      	mov	r0, r3
 8007824:	3730      	adds	r7, #48	; 0x30
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007838:	b2db      	uxtb	r3, r3
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4613      	mov	r3, r2
 8007854:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007856:	e04c      	b.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	d048      	beq.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007860:	f7fc f920 	bl	8003aa4 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d902      	bls.n	8007876 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d13d      	bne.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800788e:	d111      	bne.n	80078b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007898:	d004      	beq.n	80078a4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a2:	d107      	bne.n	80078b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078bc:	d10f      	bne.n	80078de <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e00f      	b.n	8007912 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4013      	ands	r3, r2
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	bf0c      	ite	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	2300      	movne	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	429a      	cmp	r2, r3
 800790e:	d1a3      	bne.n	8007858 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b086      	sub	sp, #24
 800791e:	af02      	add	r7, sp, #8
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800792e:	d111      	bne.n	8007954 <SPI_EndRxTransaction+0x3a>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007938:	d004      	beq.n	8007944 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007942:	d107      	bne.n	8007954 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007952:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800795c:	d12a      	bne.n	80079b4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007966:	d012      	beq.n	800798e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	2180      	movs	r1, #128	; 0x80
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff ff67 	bl	8007846 <SPI_WaitFlagStateUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d02d      	beq.n	80079da <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007982:	f043 0220 	orr.w	r2, r3, #32
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e026      	b.n	80079dc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2200      	movs	r2, #0
 8007996:	2101      	movs	r1, #1
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff ff54 	bl	8007846 <SPI_WaitFlagStateUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a8:	f043 0220 	orr.w	r2, r3, #32
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e013      	b.n	80079dc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2200      	movs	r2, #0
 80079bc:	2101      	movs	r1, #1
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff ff41 	bl	8007846 <SPI_WaitFlagStateUntilTimeout>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	f043 0220 	orr.w	r2, r3, #32
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e000      	b.n	80079dc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80079f0:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <SPI_EndRxTxTransaction+0x7c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1b      	ldr	r2, [pc, #108]	; (8007a64 <SPI_EndRxTxTransaction+0x80>)
 80079f6:	fba2 2303 	umull	r2, r3, r2, r3
 80079fa:	0d5b      	lsrs	r3, r3, #21
 80079fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0e:	d112      	bne.n	8007a36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	2180      	movs	r1, #128	; 0x80
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff ff13 	bl	8007846 <SPI_WaitFlagStateUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d016      	beq.n	8007a54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e00f      	b.n	8007a56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4c:	2b80      	cmp	r3, #128	; 0x80
 8007a4e:	d0f2      	beq.n	8007a36 <SPI_EndRxTxTransaction+0x52>
 8007a50:	e000      	b.n	8007a54 <SPI_EndRxTxTransaction+0x70>
        break;
 8007a52:	bf00      	nop
  }

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000264 	.word	0x20000264
 8007a64:	165e9f81 	.word	0x165e9f81

08007a68 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d029      	beq.n	8007ad6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a92:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a9c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007aa2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007aa8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007aae:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007ab4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007aba:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007ac0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007ac6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e034      	b.n	8007b40 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ae2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007aec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007af2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b0a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b14:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007b1a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007b20:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007b26:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007b2c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b087      	sub	sp, #28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d02e      	beq.n	8007bc6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b74:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b84:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b8e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b98:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ba2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007bac:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	609a      	str	r2, [r3, #8]
 8007bc4:	e03b      	b.n	8007c3e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bd6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007be8:	4313      	orrs	r3, r2
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007bfc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007c0c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007c16:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007c20:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c68:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007c72:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007c84:	f7fb ff0e 	bl	8003aa4 <HAL_GetTick>
 8007c88:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007c8a:	e010      	b.n	8007cae <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d00c      	beq.n	8007cae <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <FMC_SDRAM_SendCommand+0x5e>
 8007c9a:	f7fb ff03 	bl	8003aa4 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d201      	bcs.n	8007cae <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e006      	b.n	8007cbc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d0e8      	beq.n	8007c8c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695a      	ldr	r2, [r3, #20]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <sniprintf>:
 8007cec:	b40c      	push	{r2, r3}
 8007cee:	b530      	push	{r4, r5, lr}
 8007cf0:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <sniprintf+0x64>)
 8007cf2:	1e0c      	subs	r4, r1, #0
 8007cf4:	681d      	ldr	r5, [r3, #0]
 8007cf6:	b09d      	sub	sp, #116	; 0x74
 8007cf8:	da08      	bge.n	8007d0c <sniprintf+0x20>
 8007cfa:	238b      	movs	r3, #139	; 0x8b
 8007cfc:	602b      	str	r3, [r5, #0]
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	b01d      	add	sp, #116	; 0x74
 8007d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d08:	b002      	add	sp, #8
 8007d0a:	4770      	bx	lr
 8007d0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d14:	bf14      	ite	ne
 8007d16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d1a:	4623      	moveq	r3, r4
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	9307      	str	r3, [sp, #28]
 8007d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d24:	9002      	str	r0, [sp, #8]
 8007d26:	9006      	str	r0, [sp, #24]
 8007d28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d2e:	ab21      	add	r3, sp, #132	; 0x84
 8007d30:	a902      	add	r1, sp, #8
 8007d32:	4628      	mov	r0, r5
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f000 f98d 	bl	8008054 <_svfiprintf_r>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	bfbc      	itt	lt
 8007d3e:	238b      	movlt	r3, #139	; 0x8b
 8007d40:	602b      	strlt	r3, [r5, #0]
 8007d42:	2c00      	cmp	r4, #0
 8007d44:	d0dd      	beq.n	8007d02 <sniprintf+0x16>
 8007d46:	9b02      	ldr	r3, [sp, #8]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e7d9      	b.n	8007d02 <sniprintf+0x16>
 8007d4e:	bf00      	nop
 8007d50:	20000348 	.word	0x20000348

08007d54 <memset>:
 8007d54:	4402      	add	r2, r0
 8007d56:	4603      	mov	r3, r0
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d100      	bne.n	8007d5e <memset+0xa>
 8007d5c:	4770      	bx	lr
 8007d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d62:	e7f9      	b.n	8007d58 <memset+0x4>

08007d64 <__libc_init_array>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4d0d      	ldr	r5, [pc, #52]	; (8007d9c <__libc_init_array+0x38>)
 8007d68:	4c0d      	ldr	r4, [pc, #52]	; (8007da0 <__libc_init_array+0x3c>)
 8007d6a:	1b64      	subs	r4, r4, r5
 8007d6c:	10a4      	asrs	r4, r4, #2
 8007d6e:	2600      	movs	r6, #0
 8007d70:	42a6      	cmp	r6, r4
 8007d72:	d109      	bne.n	8007d88 <__libc_init_array+0x24>
 8007d74:	4d0b      	ldr	r5, [pc, #44]	; (8007da4 <__libc_init_array+0x40>)
 8007d76:	4c0c      	ldr	r4, [pc, #48]	; (8007da8 <__libc_init_array+0x44>)
 8007d78:	f000 fc78 	bl	800866c <_init>
 8007d7c:	1b64      	subs	r4, r4, r5
 8007d7e:	10a4      	asrs	r4, r4, #2
 8007d80:	2600      	movs	r6, #0
 8007d82:	42a6      	cmp	r6, r4
 8007d84:	d105      	bne.n	8007d92 <__libc_init_array+0x2e>
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8c:	4798      	blx	r3
 8007d8e:	3601      	adds	r6, #1
 8007d90:	e7ee      	b.n	8007d70 <__libc_init_array+0xc>
 8007d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d96:	4798      	blx	r3
 8007d98:	3601      	adds	r6, #1
 8007d9a:	e7f2      	b.n	8007d82 <__libc_init_array+0x1e>
 8007d9c:	0800b32c 	.word	0x0800b32c
 8007da0:	0800b32c 	.word	0x0800b32c
 8007da4:	0800b32c 	.word	0x0800b32c
 8007da8:	0800b330 	.word	0x0800b330

08007dac <__retarget_lock_acquire_recursive>:
 8007dac:	4770      	bx	lr

08007dae <__retarget_lock_release_recursive>:
 8007dae:	4770      	bx	lr

08007db0 <_free_r>:
 8007db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d044      	beq.n	8007e40 <_free_r+0x90>
 8007db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dba:	9001      	str	r0, [sp, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8007dc2:	bfb8      	it	lt
 8007dc4:	18e4      	addlt	r4, r4, r3
 8007dc6:	f000 f8df 	bl	8007f88 <__malloc_lock>
 8007dca:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <_free_r+0x94>)
 8007dcc:	9801      	ldr	r0, [sp, #4]
 8007dce:	6813      	ldr	r3, [r2, #0]
 8007dd0:	b933      	cbnz	r3, 8007de0 <_free_r+0x30>
 8007dd2:	6063      	str	r3, [r4, #4]
 8007dd4:	6014      	str	r4, [r2, #0]
 8007dd6:	b003      	add	sp, #12
 8007dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ddc:	f000 b8da 	b.w	8007f94 <__malloc_unlock>
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	d908      	bls.n	8007df6 <_free_r+0x46>
 8007de4:	6825      	ldr	r5, [r4, #0]
 8007de6:	1961      	adds	r1, r4, r5
 8007de8:	428b      	cmp	r3, r1
 8007dea:	bf01      	itttt	eq
 8007dec:	6819      	ldreq	r1, [r3, #0]
 8007dee:	685b      	ldreq	r3, [r3, #4]
 8007df0:	1949      	addeq	r1, r1, r5
 8007df2:	6021      	streq	r1, [r4, #0]
 8007df4:	e7ed      	b.n	8007dd2 <_free_r+0x22>
 8007df6:	461a      	mov	r2, r3
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	b10b      	cbz	r3, 8007e00 <_free_r+0x50>
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d9fa      	bls.n	8007df6 <_free_r+0x46>
 8007e00:	6811      	ldr	r1, [r2, #0]
 8007e02:	1855      	adds	r5, r2, r1
 8007e04:	42a5      	cmp	r5, r4
 8007e06:	d10b      	bne.n	8007e20 <_free_r+0x70>
 8007e08:	6824      	ldr	r4, [r4, #0]
 8007e0a:	4421      	add	r1, r4
 8007e0c:	1854      	adds	r4, r2, r1
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	6011      	str	r1, [r2, #0]
 8007e12:	d1e0      	bne.n	8007dd6 <_free_r+0x26>
 8007e14:	681c      	ldr	r4, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	6053      	str	r3, [r2, #4]
 8007e1a:	440c      	add	r4, r1
 8007e1c:	6014      	str	r4, [r2, #0]
 8007e1e:	e7da      	b.n	8007dd6 <_free_r+0x26>
 8007e20:	d902      	bls.n	8007e28 <_free_r+0x78>
 8007e22:	230c      	movs	r3, #12
 8007e24:	6003      	str	r3, [r0, #0]
 8007e26:	e7d6      	b.n	8007dd6 <_free_r+0x26>
 8007e28:	6825      	ldr	r5, [r4, #0]
 8007e2a:	1961      	adds	r1, r4, r5
 8007e2c:	428b      	cmp	r3, r1
 8007e2e:	bf04      	itt	eq
 8007e30:	6819      	ldreq	r1, [r3, #0]
 8007e32:	685b      	ldreq	r3, [r3, #4]
 8007e34:	6063      	str	r3, [r4, #4]
 8007e36:	bf04      	itt	eq
 8007e38:	1949      	addeq	r1, r1, r5
 8007e3a:	6021      	streq	r1, [r4, #0]
 8007e3c:	6054      	str	r4, [r2, #4]
 8007e3e:	e7ca      	b.n	8007dd6 <_free_r+0x26>
 8007e40:	b003      	add	sp, #12
 8007e42:	bd30      	pop	{r4, r5, pc}
 8007e44:	20000968 	.word	0x20000968

08007e48 <sbrk_aligned>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4e0e      	ldr	r6, [pc, #56]	; (8007e84 <sbrk_aligned+0x3c>)
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	6831      	ldr	r1, [r6, #0]
 8007e50:	4605      	mov	r5, r0
 8007e52:	b911      	cbnz	r1, 8007e5a <sbrk_aligned+0x12>
 8007e54:	f000 fba6 	bl	80085a4 <_sbrk_r>
 8007e58:	6030      	str	r0, [r6, #0]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 fba1 	bl	80085a4 <_sbrk_r>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d00a      	beq.n	8007e7c <sbrk_aligned+0x34>
 8007e66:	1cc4      	adds	r4, r0, #3
 8007e68:	f024 0403 	bic.w	r4, r4, #3
 8007e6c:	42a0      	cmp	r0, r4
 8007e6e:	d007      	beq.n	8007e80 <sbrk_aligned+0x38>
 8007e70:	1a21      	subs	r1, r4, r0
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 fb96 	bl	80085a4 <_sbrk_r>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d101      	bne.n	8007e80 <sbrk_aligned+0x38>
 8007e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8007e80:	4620      	mov	r0, r4
 8007e82:	bd70      	pop	{r4, r5, r6, pc}
 8007e84:	2000096c 	.word	0x2000096c

08007e88 <_malloc_r>:
 8007e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	1ccd      	adds	r5, r1, #3
 8007e8e:	f025 0503 	bic.w	r5, r5, #3
 8007e92:	3508      	adds	r5, #8
 8007e94:	2d0c      	cmp	r5, #12
 8007e96:	bf38      	it	cc
 8007e98:	250c      	movcc	r5, #12
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	db01      	blt.n	8007ea4 <_malloc_r+0x1c>
 8007ea0:	42a9      	cmp	r1, r5
 8007ea2:	d905      	bls.n	8007eb0 <_malloc_r+0x28>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	4630      	mov	r0, r6
 8007eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f84 <_malloc_r+0xfc>
 8007eb4:	f000 f868 	bl	8007f88 <__malloc_lock>
 8007eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ebc:	461c      	mov	r4, r3
 8007ebe:	bb5c      	cbnz	r4, 8007f18 <_malloc_r+0x90>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f7ff ffc0 	bl	8007e48 <sbrk_aligned>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	4604      	mov	r4, r0
 8007ecc:	d155      	bne.n	8007f7a <_malloc_r+0xf2>
 8007ece:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed2:	4626      	mov	r6, r4
 8007ed4:	2e00      	cmp	r6, #0
 8007ed6:	d145      	bne.n	8007f64 <_malloc_r+0xdc>
 8007ed8:	2c00      	cmp	r4, #0
 8007eda:	d048      	beq.n	8007f6e <_malloc_r+0xe6>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	eb04 0903 	add.w	r9, r4, r3
 8007ee6:	f000 fb5d 	bl	80085a4 <_sbrk_r>
 8007eea:	4581      	cmp	r9, r0
 8007eec:	d13f      	bne.n	8007f6e <_malloc_r+0xe6>
 8007eee:	6821      	ldr	r1, [r4, #0]
 8007ef0:	1a6d      	subs	r5, r5, r1
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff ffa7 	bl	8007e48 <sbrk_aligned>
 8007efa:	3001      	adds	r0, #1
 8007efc:	d037      	beq.n	8007f6e <_malloc_r+0xe6>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	442b      	add	r3, r5
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	f8d8 3000 	ldr.w	r3, [r8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d038      	beq.n	8007f7e <_malloc_r+0xf6>
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	42a2      	cmp	r2, r4
 8007f10:	d12b      	bne.n	8007f6a <_malloc_r+0xe2>
 8007f12:	2200      	movs	r2, #0
 8007f14:	605a      	str	r2, [r3, #4]
 8007f16:	e00f      	b.n	8007f38 <_malloc_r+0xb0>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	1b52      	subs	r2, r2, r5
 8007f1c:	d41f      	bmi.n	8007f5e <_malloc_r+0xd6>
 8007f1e:	2a0b      	cmp	r2, #11
 8007f20:	d917      	bls.n	8007f52 <_malloc_r+0xca>
 8007f22:	1961      	adds	r1, r4, r5
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	6025      	str	r5, [r4, #0]
 8007f28:	bf18      	it	ne
 8007f2a:	6059      	strne	r1, [r3, #4]
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	bf08      	it	eq
 8007f30:	f8c8 1000 	streq.w	r1, [r8]
 8007f34:	5162      	str	r2, [r4, r5]
 8007f36:	604b      	str	r3, [r1, #4]
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f104 060b 	add.w	r6, r4, #11
 8007f3e:	f000 f829 	bl	8007f94 <__malloc_unlock>
 8007f42:	f026 0607 	bic.w	r6, r6, #7
 8007f46:	1d23      	adds	r3, r4, #4
 8007f48:	1af2      	subs	r2, r6, r3
 8007f4a:	d0ae      	beq.n	8007eaa <_malloc_r+0x22>
 8007f4c:	1b9b      	subs	r3, r3, r6
 8007f4e:	50a3      	str	r3, [r4, r2]
 8007f50:	e7ab      	b.n	8007eaa <_malloc_r+0x22>
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	6862      	ldr	r2, [r4, #4]
 8007f56:	d1dd      	bne.n	8007f14 <_malloc_r+0x8c>
 8007f58:	f8c8 2000 	str.w	r2, [r8]
 8007f5c:	e7ec      	b.n	8007f38 <_malloc_r+0xb0>
 8007f5e:	4623      	mov	r3, r4
 8007f60:	6864      	ldr	r4, [r4, #4]
 8007f62:	e7ac      	b.n	8007ebe <_malloc_r+0x36>
 8007f64:	4634      	mov	r4, r6
 8007f66:	6876      	ldr	r6, [r6, #4]
 8007f68:	e7b4      	b.n	8007ed4 <_malloc_r+0x4c>
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	e7cc      	b.n	8007f08 <_malloc_r+0x80>
 8007f6e:	230c      	movs	r3, #12
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	4638      	mov	r0, r7
 8007f74:	f000 f80e 	bl	8007f94 <__malloc_unlock>
 8007f78:	e797      	b.n	8007eaa <_malloc_r+0x22>
 8007f7a:	6025      	str	r5, [r4, #0]
 8007f7c:	e7dc      	b.n	8007f38 <_malloc_r+0xb0>
 8007f7e:	605b      	str	r3, [r3, #4]
 8007f80:	deff      	udf	#255	; 0xff
 8007f82:	bf00      	nop
 8007f84:	20000968 	.word	0x20000968

08007f88 <__malloc_lock>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__malloc_lock+0x8>)
 8007f8a:	f7ff bf0f 	b.w	8007dac <__retarget_lock_acquire_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20000964 	.word	0x20000964

08007f94 <__malloc_unlock>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__malloc_unlock+0x8>)
 8007f96:	f7ff bf0a 	b.w	8007dae <__retarget_lock_release_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20000964 	.word	0x20000964

08007fa0 <__ssputs_r>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	688e      	ldr	r6, [r1, #8]
 8007fa6:	461f      	mov	r7, r3
 8007fa8:	42be      	cmp	r6, r7
 8007faa:	680b      	ldr	r3, [r1, #0]
 8007fac:	4682      	mov	sl, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	4690      	mov	r8, r2
 8007fb2:	d82c      	bhi.n	800800e <__ssputs_r+0x6e>
 8007fb4:	898a      	ldrh	r2, [r1, #12]
 8007fb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fba:	d026      	beq.n	800800a <__ssputs_r+0x6a>
 8007fbc:	6965      	ldr	r5, [r4, #20]
 8007fbe:	6909      	ldr	r1, [r1, #16]
 8007fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fc4:	eba3 0901 	sub.w	r9, r3, r1
 8007fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fcc:	1c7b      	adds	r3, r7, #1
 8007fce:	444b      	add	r3, r9
 8007fd0:	106d      	asrs	r5, r5, #1
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	bf38      	it	cc
 8007fd6:	461d      	movcc	r5, r3
 8007fd8:	0553      	lsls	r3, r2, #21
 8007fda:	d527      	bpl.n	800802c <__ssputs_r+0x8c>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f7ff ff53 	bl	8007e88 <_malloc_r>
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	b360      	cbz	r0, 8008040 <__ssputs_r+0xa0>
 8007fe6:	6921      	ldr	r1, [r4, #16]
 8007fe8:	464a      	mov	r2, r9
 8007fea:	f000 faeb 	bl	80085c4 <memcpy>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	6126      	str	r6, [r4, #16]
 8007ffc:	6165      	str	r5, [r4, #20]
 8007ffe:	444e      	add	r6, r9
 8008000:	eba5 0509 	sub.w	r5, r5, r9
 8008004:	6026      	str	r6, [r4, #0]
 8008006:	60a5      	str	r5, [r4, #8]
 8008008:	463e      	mov	r6, r7
 800800a:	42be      	cmp	r6, r7
 800800c:	d900      	bls.n	8008010 <__ssputs_r+0x70>
 800800e:	463e      	mov	r6, r7
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	4632      	mov	r2, r6
 8008014:	4641      	mov	r1, r8
 8008016:	f000 faab 	bl	8008570 <memmove>
 800801a:	68a3      	ldr	r3, [r4, #8]
 800801c:	1b9b      	subs	r3, r3, r6
 800801e:	60a3      	str	r3, [r4, #8]
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	4433      	add	r3, r6
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	2000      	movs	r0, #0
 8008028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802c:	462a      	mov	r2, r5
 800802e:	f000 fad7 	bl	80085e0 <_realloc_r>
 8008032:	4606      	mov	r6, r0
 8008034:	2800      	cmp	r0, #0
 8008036:	d1e0      	bne.n	8007ffa <__ssputs_r+0x5a>
 8008038:	6921      	ldr	r1, [r4, #16]
 800803a:	4650      	mov	r0, sl
 800803c:	f7ff feb8 	bl	8007db0 <_free_r>
 8008040:	230c      	movs	r3, #12
 8008042:	f8ca 3000 	str.w	r3, [sl]
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295
 8008052:	e7e9      	b.n	8008028 <__ssputs_r+0x88>

08008054 <_svfiprintf_r>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	4698      	mov	r8, r3
 800805a:	898b      	ldrh	r3, [r1, #12]
 800805c:	061b      	lsls	r3, r3, #24
 800805e:	b09d      	sub	sp, #116	; 0x74
 8008060:	4607      	mov	r7, r0
 8008062:	460d      	mov	r5, r1
 8008064:	4614      	mov	r4, r2
 8008066:	d50e      	bpl.n	8008086 <_svfiprintf_r+0x32>
 8008068:	690b      	ldr	r3, [r1, #16]
 800806a:	b963      	cbnz	r3, 8008086 <_svfiprintf_r+0x32>
 800806c:	2140      	movs	r1, #64	; 0x40
 800806e:	f7ff ff0b 	bl	8007e88 <_malloc_r>
 8008072:	6028      	str	r0, [r5, #0]
 8008074:	6128      	str	r0, [r5, #16]
 8008076:	b920      	cbnz	r0, 8008082 <_svfiprintf_r+0x2e>
 8008078:	230c      	movs	r3, #12
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	e0d0      	b.n	8008224 <_svfiprintf_r+0x1d0>
 8008082:	2340      	movs	r3, #64	; 0x40
 8008084:	616b      	str	r3, [r5, #20]
 8008086:	2300      	movs	r3, #0
 8008088:	9309      	str	r3, [sp, #36]	; 0x24
 800808a:	2320      	movs	r3, #32
 800808c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008090:	f8cd 800c 	str.w	r8, [sp, #12]
 8008094:	2330      	movs	r3, #48	; 0x30
 8008096:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800823c <_svfiprintf_r+0x1e8>
 800809a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800809e:	f04f 0901 	mov.w	r9, #1
 80080a2:	4623      	mov	r3, r4
 80080a4:	469a      	mov	sl, r3
 80080a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080aa:	b10a      	cbz	r2, 80080b0 <_svfiprintf_r+0x5c>
 80080ac:	2a25      	cmp	r2, #37	; 0x25
 80080ae:	d1f9      	bne.n	80080a4 <_svfiprintf_r+0x50>
 80080b0:	ebba 0b04 	subs.w	fp, sl, r4
 80080b4:	d00b      	beq.n	80080ce <_svfiprintf_r+0x7a>
 80080b6:	465b      	mov	r3, fp
 80080b8:	4622      	mov	r2, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	4638      	mov	r0, r7
 80080be:	f7ff ff6f 	bl	8007fa0 <__ssputs_r>
 80080c2:	3001      	adds	r0, #1
 80080c4:	f000 80a9 	beq.w	800821a <_svfiprintf_r+0x1c6>
 80080c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ca:	445a      	add	r2, fp
 80080cc:	9209      	str	r2, [sp, #36]	; 0x24
 80080ce:	f89a 3000 	ldrb.w	r3, [sl]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 80a1 	beq.w	800821a <_svfiprintf_r+0x1c6>
 80080d8:	2300      	movs	r3, #0
 80080da:	f04f 32ff 	mov.w	r2, #4294967295
 80080de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e2:	f10a 0a01 	add.w	sl, sl, #1
 80080e6:	9304      	str	r3, [sp, #16]
 80080e8:	9307      	str	r3, [sp, #28]
 80080ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ee:	931a      	str	r3, [sp, #104]	; 0x68
 80080f0:	4654      	mov	r4, sl
 80080f2:	2205      	movs	r2, #5
 80080f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f8:	4850      	ldr	r0, [pc, #320]	; (800823c <_svfiprintf_r+0x1e8>)
 80080fa:	f7f8 f879 	bl	80001f0 <memchr>
 80080fe:	9a04      	ldr	r2, [sp, #16]
 8008100:	b9d8      	cbnz	r0, 800813a <_svfiprintf_r+0xe6>
 8008102:	06d0      	lsls	r0, r2, #27
 8008104:	bf44      	itt	mi
 8008106:	2320      	movmi	r3, #32
 8008108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800810c:	0711      	lsls	r1, r2, #28
 800810e:	bf44      	itt	mi
 8008110:	232b      	movmi	r3, #43	; 0x2b
 8008112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008116:	f89a 3000 	ldrb.w	r3, [sl]
 800811a:	2b2a      	cmp	r3, #42	; 0x2a
 800811c:	d015      	beq.n	800814a <_svfiprintf_r+0xf6>
 800811e:	9a07      	ldr	r2, [sp, #28]
 8008120:	4654      	mov	r4, sl
 8008122:	2000      	movs	r0, #0
 8008124:	f04f 0c0a 	mov.w	ip, #10
 8008128:	4621      	mov	r1, r4
 800812a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800812e:	3b30      	subs	r3, #48	; 0x30
 8008130:	2b09      	cmp	r3, #9
 8008132:	d94d      	bls.n	80081d0 <_svfiprintf_r+0x17c>
 8008134:	b1b0      	cbz	r0, 8008164 <_svfiprintf_r+0x110>
 8008136:	9207      	str	r2, [sp, #28]
 8008138:	e014      	b.n	8008164 <_svfiprintf_r+0x110>
 800813a:	eba0 0308 	sub.w	r3, r0, r8
 800813e:	fa09 f303 	lsl.w	r3, r9, r3
 8008142:	4313      	orrs	r3, r2
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	46a2      	mov	sl, r4
 8008148:	e7d2      	b.n	80080f0 <_svfiprintf_r+0x9c>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	1d19      	adds	r1, r3, #4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	9103      	str	r1, [sp, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	bfbb      	ittet	lt
 8008156:	425b      	neglt	r3, r3
 8008158:	f042 0202 	orrlt.w	r2, r2, #2
 800815c:	9307      	strge	r3, [sp, #28]
 800815e:	9307      	strlt	r3, [sp, #28]
 8008160:	bfb8      	it	lt
 8008162:	9204      	strlt	r2, [sp, #16]
 8008164:	7823      	ldrb	r3, [r4, #0]
 8008166:	2b2e      	cmp	r3, #46	; 0x2e
 8008168:	d10c      	bne.n	8008184 <_svfiprintf_r+0x130>
 800816a:	7863      	ldrb	r3, [r4, #1]
 800816c:	2b2a      	cmp	r3, #42	; 0x2a
 800816e:	d134      	bne.n	80081da <_svfiprintf_r+0x186>
 8008170:	9b03      	ldr	r3, [sp, #12]
 8008172:	1d1a      	adds	r2, r3, #4
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	9203      	str	r2, [sp, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	bfb8      	it	lt
 800817c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008180:	3402      	adds	r4, #2
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800824c <_svfiprintf_r+0x1f8>
 8008188:	7821      	ldrb	r1, [r4, #0]
 800818a:	2203      	movs	r2, #3
 800818c:	4650      	mov	r0, sl
 800818e:	f7f8 f82f 	bl	80001f0 <memchr>
 8008192:	b138      	cbz	r0, 80081a4 <_svfiprintf_r+0x150>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	eba0 000a 	sub.w	r0, r0, sl
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	4082      	lsls	r2, r0
 800819e:	4313      	orrs	r3, r2
 80081a0:	3401      	adds	r4, #1
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	4825      	ldr	r0, [pc, #148]	; (8008240 <_svfiprintf_r+0x1ec>)
 80081aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ae:	2206      	movs	r2, #6
 80081b0:	f7f8 f81e 	bl	80001f0 <memchr>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d038      	beq.n	800822a <_svfiprintf_r+0x1d6>
 80081b8:	4b22      	ldr	r3, [pc, #136]	; (8008244 <_svfiprintf_r+0x1f0>)
 80081ba:	bb1b      	cbnz	r3, 8008204 <_svfiprintf_r+0x1b0>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	3307      	adds	r3, #7
 80081c0:	f023 0307 	bic.w	r3, r3, #7
 80081c4:	3308      	adds	r3, #8
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	4433      	add	r3, r6
 80081cc:	9309      	str	r3, [sp, #36]	; 0x24
 80081ce:	e768      	b.n	80080a2 <_svfiprintf_r+0x4e>
 80081d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d4:	460c      	mov	r4, r1
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7a6      	b.n	8008128 <_svfiprintf_r+0xd4>
 80081da:	2300      	movs	r3, #0
 80081dc:	3401      	adds	r4, #1
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	4619      	mov	r1, r3
 80081e2:	f04f 0c0a 	mov.w	ip, #10
 80081e6:	4620      	mov	r0, r4
 80081e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ec:	3a30      	subs	r2, #48	; 0x30
 80081ee:	2a09      	cmp	r2, #9
 80081f0:	d903      	bls.n	80081fa <_svfiprintf_r+0x1a6>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0c6      	beq.n	8008184 <_svfiprintf_r+0x130>
 80081f6:	9105      	str	r1, [sp, #20]
 80081f8:	e7c4      	b.n	8008184 <_svfiprintf_r+0x130>
 80081fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80081fe:	4604      	mov	r4, r0
 8008200:	2301      	movs	r3, #1
 8008202:	e7f0      	b.n	80081e6 <_svfiprintf_r+0x192>
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	462a      	mov	r2, r5
 800820a:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <_svfiprintf_r+0x1f4>)
 800820c:	a904      	add	r1, sp, #16
 800820e:	4638      	mov	r0, r7
 8008210:	f3af 8000 	nop.w
 8008214:	1c42      	adds	r2, r0, #1
 8008216:	4606      	mov	r6, r0
 8008218:	d1d6      	bne.n	80081c8 <_svfiprintf_r+0x174>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	065b      	lsls	r3, r3, #25
 800821e:	f53f af2d 	bmi.w	800807c <_svfiprintf_r+0x28>
 8008222:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008224:	b01d      	add	sp, #116	; 0x74
 8008226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822a:	ab03      	add	r3, sp, #12
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	462a      	mov	r2, r5
 8008230:	4b05      	ldr	r3, [pc, #20]	; (8008248 <_svfiprintf_r+0x1f4>)
 8008232:	a904      	add	r1, sp, #16
 8008234:	4638      	mov	r0, r7
 8008236:	f000 f879 	bl	800832c <_printf_i>
 800823a:	e7eb      	b.n	8008214 <_svfiprintf_r+0x1c0>
 800823c:	0800b2f0 	.word	0x0800b2f0
 8008240:	0800b2fa 	.word	0x0800b2fa
 8008244:	00000000 	.word	0x00000000
 8008248:	08007fa1 	.word	0x08007fa1
 800824c:	0800b2f6 	.word	0x0800b2f6

08008250 <_printf_common>:
 8008250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	4616      	mov	r6, r2
 8008256:	4699      	mov	r9, r3
 8008258:	688a      	ldr	r2, [r1, #8]
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008260:	4293      	cmp	r3, r2
 8008262:	bfb8      	it	lt
 8008264:	4613      	movlt	r3, r2
 8008266:	6033      	str	r3, [r6, #0]
 8008268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800826c:	4607      	mov	r7, r0
 800826e:	460c      	mov	r4, r1
 8008270:	b10a      	cbz	r2, 8008276 <_printf_common+0x26>
 8008272:	3301      	adds	r3, #1
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	0699      	lsls	r1, r3, #26
 800827a:	bf42      	ittt	mi
 800827c:	6833      	ldrmi	r3, [r6, #0]
 800827e:	3302      	addmi	r3, #2
 8008280:	6033      	strmi	r3, [r6, #0]
 8008282:	6825      	ldr	r5, [r4, #0]
 8008284:	f015 0506 	ands.w	r5, r5, #6
 8008288:	d106      	bne.n	8008298 <_printf_common+0x48>
 800828a:	f104 0a19 	add.w	sl, r4, #25
 800828e:	68e3      	ldr	r3, [r4, #12]
 8008290:	6832      	ldr	r2, [r6, #0]
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	42ab      	cmp	r3, r5
 8008296:	dc26      	bgt.n	80082e6 <_printf_common+0x96>
 8008298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800829c:	1e13      	subs	r3, r2, #0
 800829e:	6822      	ldr	r2, [r4, #0]
 80082a0:	bf18      	it	ne
 80082a2:	2301      	movne	r3, #1
 80082a4:	0692      	lsls	r2, r2, #26
 80082a6:	d42b      	bmi.n	8008300 <_printf_common+0xb0>
 80082a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ac:	4649      	mov	r1, r9
 80082ae:	4638      	mov	r0, r7
 80082b0:	47c0      	blx	r8
 80082b2:	3001      	adds	r0, #1
 80082b4:	d01e      	beq.n	80082f4 <_printf_common+0xa4>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	6922      	ldr	r2, [r4, #16]
 80082ba:	f003 0306 	and.w	r3, r3, #6
 80082be:	2b04      	cmp	r3, #4
 80082c0:	bf02      	ittt	eq
 80082c2:	68e5      	ldreq	r5, [r4, #12]
 80082c4:	6833      	ldreq	r3, [r6, #0]
 80082c6:	1aed      	subeq	r5, r5, r3
 80082c8:	68a3      	ldr	r3, [r4, #8]
 80082ca:	bf0c      	ite	eq
 80082cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082d0:	2500      	movne	r5, #0
 80082d2:	4293      	cmp	r3, r2
 80082d4:	bfc4      	itt	gt
 80082d6:	1a9b      	subgt	r3, r3, r2
 80082d8:	18ed      	addgt	r5, r5, r3
 80082da:	2600      	movs	r6, #0
 80082dc:	341a      	adds	r4, #26
 80082de:	42b5      	cmp	r5, r6
 80082e0:	d11a      	bne.n	8008318 <_printf_common+0xc8>
 80082e2:	2000      	movs	r0, #0
 80082e4:	e008      	b.n	80082f8 <_printf_common+0xa8>
 80082e6:	2301      	movs	r3, #1
 80082e8:	4652      	mov	r2, sl
 80082ea:	4649      	mov	r1, r9
 80082ec:	4638      	mov	r0, r7
 80082ee:	47c0      	blx	r8
 80082f0:	3001      	adds	r0, #1
 80082f2:	d103      	bne.n	80082fc <_printf_common+0xac>
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fc:	3501      	adds	r5, #1
 80082fe:	e7c6      	b.n	800828e <_printf_common+0x3e>
 8008300:	18e1      	adds	r1, r4, r3
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	2030      	movs	r0, #48	; 0x30
 8008306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800830a:	4422      	add	r2, r4
 800830c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008314:	3302      	adds	r3, #2
 8008316:	e7c7      	b.n	80082a8 <_printf_common+0x58>
 8008318:	2301      	movs	r3, #1
 800831a:	4622      	mov	r2, r4
 800831c:	4649      	mov	r1, r9
 800831e:	4638      	mov	r0, r7
 8008320:	47c0      	blx	r8
 8008322:	3001      	adds	r0, #1
 8008324:	d0e6      	beq.n	80082f4 <_printf_common+0xa4>
 8008326:	3601      	adds	r6, #1
 8008328:	e7d9      	b.n	80082de <_printf_common+0x8e>
	...

0800832c <_printf_i>:
 800832c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	7e0f      	ldrb	r7, [r1, #24]
 8008332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008334:	2f78      	cmp	r7, #120	; 0x78
 8008336:	4691      	mov	r9, r2
 8008338:	4680      	mov	r8, r0
 800833a:	460c      	mov	r4, r1
 800833c:	469a      	mov	sl, r3
 800833e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008342:	d807      	bhi.n	8008354 <_printf_i+0x28>
 8008344:	2f62      	cmp	r7, #98	; 0x62
 8008346:	d80a      	bhi.n	800835e <_printf_i+0x32>
 8008348:	2f00      	cmp	r7, #0
 800834a:	f000 80d4 	beq.w	80084f6 <_printf_i+0x1ca>
 800834e:	2f58      	cmp	r7, #88	; 0x58
 8008350:	f000 80c0 	beq.w	80084d4 <_printf_i+0x1a8>
 8008354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800835c:	e03a      	b.n	80083d4 <_printf_i+0xa8>
 800835e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008362:	2b15      	cmp	r3, #21
 8008364:	d8f6      	bhi.n	8008354 <_printf_i+0x28>
 8008366:	a101      	add	r1, pc, #4	; (adr r1, 800836c <_printf_i+0x40>)
 8008368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800836c:	080083c5 	.word	0x080083c5
 8008370:	080083d9 	.word	0x080083d9
 8008374:	08008355 	.word	0x08008355
 8008378:	08008355 	.word	0x08008355
 800837c:	08008355 	.word	0x08008355
 8008380:	08008355 	.word	0x08008355
 8008384:	080083d9 	.word	0x080083d9
 8008388:	08008355 	.word	0x08008355
 800838c:	08008355 	.word	0x08008355
 8008390:	08008355 	.word	0x08008355
 8008394:	08008355 	.word	0x08008355
 8008398:	080084dd 	.word	0x080084dd
 800839c:	08008405 	.word	0x08008405
 80083a0:	08008497 	.word	0x08008497
 80083a4:	08008355 	.word	0x08008355
 80083a8:	08008355 	.word	0x08008355
 80083ac:	080084ff 	.word	0x080084ff
 80083b0:	08008355 	.word	0x08008355
 80083b4:	08008405 	.word	0x08008405
 80083b8:	08008355 	.word	0x08008355
 80083bc:	08008355 	.word	0x08008355
 80083c0:	0800849f 	.word	0x0800849f
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	1d1a      	adds	r2, r3, #4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	602a      	str	r2, [r5, #0]
 80083cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083d4:	2301      	movs	r3, #1
 80083d6:	e09f      	b.n	8008518 <_printf_i+0x1ec>
 80083d8:	6820      	ldr	r0, [r4, #0]
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	0607      	lsls	r7, r0, #24
 80083de:	f103 0104 	add.w	r1, r3, #4
 80083e2:	6029      	str	r1, [r5, #0]
 80083e4:	d501      	bpl.n	80083ea <_printf_i+0xbe>
 80083e6:	681e      	ldr	r6, [r3, #0]
 80083e8:	e003      	b.n	80083f2 <_printf_i+0xc6>
 80083ea:	0646      	lsls	r6, r0, #25
 80083ec:	d5fb      	bpl.n	80083e6 <_printf_i+0xba>
 80083ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083f2:	2e00      	cmp	r6, #0
 80083f4:	da03      	bge.n	80083fe <_printf_i+0xd2>
 80083f6:	232d      	movs	r3, #45	; 0x2d
 80083f8:	4276      	negs	r6, r6
 80083fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083fe:	485a      	ldr	r0, [pc, #360]	; (8008568 <_printf_i+0x23c>)
 8008400:	230a      	movs	r3, #10
 8008402:	e012      	b.n	800842a <_printf_i+0xfe>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	6820      	ldr	r0, [r4, #0]
 8008408:	1d19      	adds	r1, r3, #4
 800840a:	6029      	str	r1, [r5, #0]
 800840c:	0605      	lsls	r5, r0, #24
 800840e:	d501      	bpl.n	8008414 <_printf_i+0xe8>
 8008410:	681e      	ldr	r6, [r3, #0]
 8008412:	e002      	b.n	800841a <_printf_i+0xee>
 8008414:	0641      	lsls	r1, r0, #25
 8008416:	d5fb      	bpl.n	8008410 <_printf_i+0xe4>
 8008418:	881e      	ldrh	r6, [r3, #0]
 800841a:	4853      	ldr	r0, [pc, #332]	; (8008568 <_printf_i+0x23c>)
 800841c:	2f6f      	cmp	r7, #111	; 0x6f
 800841e:	bf0c      	ite	eq
 8008420:	2308      	moveq	r3, #8
 8008422:	230a      	movne	r3, #10
 8008424:	2100      	movs	r1, #0
 8008426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800842a:	6865      	ldr	r5, [r4, #4]
 800842c:	60a5      	str	r5, [r4, #8]
 800842e:	2d00      	cmp	r5, #0
 8008430:	bfa2      	ittt	ge
 8008432:	6821      	ldrge	r1, [r4, #0]
 8008434:	f021 0104 	bicge.w	r1, r1, #4
 8008438:	6021      	strge	r1, [r4, #0]
 800843a:	b90e      	cbnz	r6, 8008440 <_printf_i+0x114>
 800843c:	2d00      	cmp	r5, #0
 800843e:	d04b      	beq.n	80084d8 <_printf_i+0x1ac>
 8008440:	4615      	mov	r5, r2
 8008442:	fbb6 f1f3 	udiv	r1, r6, r3
 8008446:	fb03 6711 	mls	r7, r3, r1, r6
 800844a:	5dc7      	ldrb	r7, [r0, r7]
 800844c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008450:	4637      	mov	r7, r6
 8008452:	42bb      	cmp	r3, r7
 8008454:	460e      	mov	r6, r1
 8008456:	d9f4      	bls.n	8008442 <_printf_i+0x116>
 8008458:	2b08      	cmp	r3, #8
 800845a:	d10b      	bne.n	8008474 <_printf_i+0x148>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	07de      	lsls	r6, r3, #31
 8008460:	d508      	bpl.n	8008474 <_printf_i+0x148>
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	6861      	ldr	r1, [r4, #4]
 8008466:	4299      	cmp	r1, r3
 8008468:	bfde      	ittt	le
 800846a:	2330      	movle	r3, #48	; 0x30
 800846c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008470:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008474:	1b52      	subs	r2, r2, r5
 8008476:	6122      	str	r2, [r4, #16]
 8008478:	f8cd a000 	str.w	sl, [sp]
 800847c:	464b      	mov	r3, r9
 800847e:	aa03      	add	r2, sp, #12
 8008480:	4621      	mov	r1, r4
 8008482:	4640      	mov	r0, r8
 8008484:	f7ff fee4 	bl	8008250 <_printf_common>
 8008488:	3001      	adds	r0, #1
 800848a:	d14a      	bne.n	8008522 <_printf_i+0x1f6>
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	b004      	add	sp, #16
 8008492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	f043 0320 	orr.w	r3, r3, #32
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	4833      	ldr	r0, [pc, #204]	; (800856c <_printf_i+0x240>)
 80084a0:	2778      	movs	r7, #120	; 0x78
 80084a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	6829      	ldr	r1, [r5, #0]
 80084aa:	061f      	lsls	r7, r3, #24
 80084ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80084b0:	d402      	bmi.n	80084b8 <_printf_i+0x18c>
 80084b2:	065f      	lsls	r7, r3, #25
 80084b4:	bf48      	it	mi
 80084b6:	b2b6      	uxthmi	r6, r6
 80084b8:	07df      	lsls	r7, r3, #31
 80084ba:	bf48      	it	mi
 80084bc:	f043 0320 	orrmi.w	r3, r3, #32
 80084c0:	6029      	str	r1, [r5, #0]
 80084c2:	bf48      	it	mi
 80084c4:	6023      	strmi	r3, [r4, #0]
 80084c6:	b91e      	cbnz	r6, 80084d0 <_printf_i+0x1a4>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	f023 0320 	bic.w	r3, r3, #32
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	2310      	movs	r3, #16
 80084d2:	e7a7      	b.n	8008424 <_printf_i+0xf8>
 80084d4:	4824      	ldr	r0, [pc, #144]	; (8008568 <_printf_i+0x23c>)
 80084d6:	e7e4      	b.n	80084a2 <_printf_i+0x176>
 80084d8:	4615      	mov	r5, r2
 80084da:	e7bd      	b.n	8008458 <_printf_i+0x12c>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	6826      	ldr	r6, [r4, #0]
 80084e0:	6961      	ldr	r1, [r4, #20]
 80084e2:	1d18      	adds	r0, r3, #4
 80084e4:	6028      	str	r0, [r5, #0]
 80084e6:	0635      	lsls	r5, r6, #24
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	d501      	bpl.n	80084f0 <_printf_i+0x1c4>
 80084ec:	6019      	str	r1, [r3, #0]
 80084ee:	e002      	b.n	80084f6 <_printf_i+0x1ca>
 80084f0:	0670      	lsls	r0, r6, #25
 80084f2:	d5fb      	bpl.n	80084ec <_printf_i+0x1c0>
 80084f4:	8019      	strh	r1, [r3, #0]
 80084f6:	2300      	movs	r3, #0
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	4615      	mov	r5, r2
 80084fc:	e7bc      	b.n	8008478 <_printf_i+0x14c>
 80084fe:	682b      	ldr	r3, [r5, #0]
 8008500:	1d1a      	adds	r2, r3, #4
 8008502:	602a      	str	r2, [r5, #0]
 8008504:	681d      	ldr	r5, [r3, #0]
 8008506:	6862      	ldr	r2, [r4, #4]
 8008508:	2100      	movs	r1, #0
 800850a:	4628      	mov	r0, r5
 800850c:	f7f7 fe70 	bl	80001f0 <memchr>
 8008510:	b108      	cbz	r0, 8008516 <_printf_i+0x1ea>
 8008512:	1b40      	subs	r0, r0, r5
 8008514:	6060      	str	r0, [r4, #4]
 8008516:	6863      	ldr	r3, [r4, #4]
 8008518:	6123      	str	r3, [r4, #16]
 800851a:	2300      	movs	r3, #0
 800851c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008520:	e7aa      	b.n	8008478 <_printf_i+0x14c>
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	462a      	mov	r2, r5
 8008526:	4649      	mov	r1, r9
 8008528:	4640      	mov	r0, r8
 800852a:	47d0      	blx	sl
 800852c:	3001      	adds	r0, #1
 800852e:	d0ad      	beq.n	800848c <_printf_i+0x160>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	079b      	lsls	r3, r3, #30
 8008534:	d413      	bmi.n	800855e <_printf_i+0x232>
 8008536:	68e0      	ldr	r0, [r4, #12]
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	4298      	cmp	r0, r3
 800853c:	bfb8      	it	lt
 800853e:	4618      	movlt	r0, r3
 8008540:	e7a6      	b.n	8008490 <_printf_i+0x164>
 8008542:	2301      	movs	r3, #1
 8008544:	4632      	mov	r2, r6
 8008546:	4649      	mov	r1, r9
 8008548:	4640      	mov	r0, r8
 800854a:	47d0      	blx	sl
 800854c:	3001      	adds	r0, #1
 800854e:	d09d      	beq.n	800848c <_printf_i+0x160>
 8008550:	3501      	adds	r5, #1
 8008552:	68e3      	ldr	r3, [r4, #12]
 8008554:	9903      	ldr	r1, [sp, #12]
 8008556:	1a5b      	subs	r3, r3, r1
 8008558:	42ab      	cmp	r3, r5
 800855a:	dcf2      	bgt.n	8008542 <_printf_i+0x216>
 800855c:	e7eb      	b.n	8008536 <_printf_i+0x20a>
 800855e:	2500      	movs	r5, #0
 8008560:	f104 0619 	add.w	r6, r4, #25
 8008564:	e7f5      	b.n	8008552 <_printf_i+0x226>
 8008566:	bf00      	nop
 8008568:	0800b301 	.word	0x0800b301
 800856c:	0800b312 	.word	0x0800b312

08008570 <memmove>:
 8008570:	4288      	cmp	r0, r1
 8008572:	b510      	push	{r4, lr}
 8008574:	eb01 0402 	add.w	r4, r1, r2
 8008578:	d902      	bls.n	8008580 <memmove+0x10>
 800857a:	4284      	cmp	r4, r0
 800857c:	4623      	mov	r3, r4
 800857e:	d807      	bhi.n	8008590 <memmove+0x20>
 8008580:	1e43      	subs	r3, r0, #1
 8008582:	42a1      	cmp	r1, r4
 8008584:	d008      	beq.n	8008598 <memmove+0x28>
 8008586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800858a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800858e:	e7f8      	b.n	8008582 <memmove+0x12>
 8008590:	4402      	add	r2, r0
 8008592:	4601      	mov	r1, r0
 8008594:	428a      	cmp	r2, r1
 8008596:	d100      	bne.n	800859a <memmove+0x2a>
 8008598:	bd10      	pop	{r4, pc}
 800859a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800859e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085a2:	e7f7      	b.n	8008594 <memmove+0x24>

080085a4 <_sbrk_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4d06      	ldr	r5, [pc, #24]	; (80085c0 <_sbrk_r+0x1c>)
 80085a8:	2300      	movs	r3, #0
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	602b      	str	r3, [r5, #0]
 80085b0:	f000 f84e 	bl	8008650 <_sbrk>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_sbrk_r+0x1a>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_sbrk_r+0x1a>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	20000960 	.word	0x20000960

080085c4 <memcpy>:
 80085c4:	440a      	add	r2, r1
 80085c6:	4291      	cmp	r1, r2
 80085c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085cc:	d100      	bne.n	80085d0 <memcpy+0xc>
 80085ce:	4770      	bx	lr
 80085d0:	b510      	push	{r4, lr}
 80085d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085da:	4291      	cmp	r1, r2
 80085dc:	d1f9      	bne.n	80085d2 <memcpy+0xe>
 80085de:	bd10      	pop	{r4, pc}

080085e0 <_realloc_r>:
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	4680      	mov	r8, r0
 80085e6:	4614      	mov	r4, r2
 80085e8:	460e      	mov	r6, r1
 80085ea:	b921      	cbnz	r1, 80085f6 <_realloc_r+0x16>
 80085ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	4611      	mov	r1, r2
 80085f2:	f7ff bc49 	b.w	8007e88 <_malloc_r>
 80085f6:	b92a      	cbnz	r2, 8008604 <_realloc_r+0x24>
 80085f8:	f7ff fbda 	bl	8007db0 <_free_r>
 80085fc:	4625      	mov	r5, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	f000 f81b 	bl	800863e <_malloc_usable_size_r>
 8008608:	4284      	cmp	r4, r0
 800860a:	4607      	mov	r7, r0
 800860c:	d802      	bhi.n	8008614 <_realloc_r+0x34>
 800860e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008612:	d812      	bhi.n	800863a <_realloc_r+0x5a>
 8008614:	4621      	mov	r1, r4
 8008616:	4640      	mov	r0, r8
 8008618:	f7ff fc36 	bl	8007e88 <_malloc_r>
 800861c:	4605      	mov	r5, r0
 800861e:	2800      	cmp	r0, #0
 8008620:	d0ed      	beq.n	80085fe <_realloc_r+0x1e>
 8008622:	42bc      	cmp	r4, r7
 8008624:	4622      	mov	r2, r4
 8008626:	4631      	mov	r1, r6
 8008628:	bf28      	it	cs
 800862a:	463a      	movcs	r2, r7
 800862c:	f7ff ffca 	bl	80085c4 <memcpy>
 8008630:	4631      	mov	r1, r6
 8008632:	4640      	mov	r0, r8
 8008634:	f7ff fbbc 	bl	8007db0 <_free_r>
 8008638:	e7e1      	b.n	80085fe <_realloc_r+0x1e>
 800863a:	4635      	mov	r5, r6
 800863c:	e7df      	b.n	80085fe <_realloc_r+0x1e>

0800863e <_malloc_usable_size_r>:
 800863e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008642:	1f18      	subs	r0, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	bfbc      	itt	lt
 8008648:	580b      	ldrlt	r3, [r1, r0]
 800864a:	18c0      	addlt	r0, r0, r3
 800864c:	4770      	bx	lr
	...

08008650 <_sbrk>:
 8008650:	4a04      	ldr	r2, [pc, #16]	; (8008664 <_sbrk+0x14>)
 8008652:	6811      	ldr	r1, [r2, #0]
 8008654:	4603      	mov	r3, r0
 8008656:	b909      	cbnz	r1, 800865c <_sbrk+0xc>
 8008658:	4903      	ldr	r1, [pc, #12]	; (8008668 <_sbrk+0x18>)
 800865a:	6011      	str	r1, [r2, #0]
 800865c:	6810      	ldr	r0, [r2, #0]
 800865e:	4403      	add	r3, r0
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	4770      	bx	lr
 8008664:	20000970 	.word	0x20000970
 8008668:	20000978 	.word	0x20000978

0800866c <_init>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr

08008678 <_fini>:
 8008678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867a:	bf00      	nop
 800867c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867e:	bc08      	pop	{r3}
 8008680:	469e      	mov	lr, r3
 8008682:	4770      	bx	lr
