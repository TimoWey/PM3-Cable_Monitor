
Cable_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009afc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000170d4  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020d80  08020d80  000403c8  2**0
                  CONTENTS
  4 .ARM          00000008  08020d80  08020d80  00030d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020d88  08020d88  000403c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020d88  08020d88  00030d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020d8c  08020d8c  00030d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08020d90  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  200003c8  08021158  000403c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  08021158  00040c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  000403f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167fd  00000000  00000000  000404a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ef4  00000000  00000000  00056ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  0005aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f91  00000000  00000000  0005c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bae  00000000  00000000  0005d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a28d  00000000  00000000  00083c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df9b7  00000000  00000000  0009dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c80  00000000  00000000  0017d894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00183514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000330c  00000000  00000000  00183590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  0018689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003c8 	.word	0x200003c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009c94 	.word	0x08009c94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003cc 	.word	0x200003cc
 80001ec:	08009c94 	.word	0x08009c94

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <GPIO_Init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
	GPIOE-> OSPEEDR |= 0x400;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);*/

	// Initialize the GPIO pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOE_CLK_ENABLE(); // Enable the GPIO E clock
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <GPIO_Init+0x84>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <GPIO_Init+0x84>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <GPIO_Init+0x84>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

	// Configure PE3 in input mode
	GPIO_InitStruct.Pin = PIN_PE3;
 800066e:	2308      	movs	r3, #8
 8000670:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000676:	2302      	movs	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <GPIO_Init+0x88>)
 8000680:	f004 f962 	bl	8004948 <HAL_GPIO_Init>

	// Configure PE5 in output push-pull mode
	GPIO_InitStruct.Pin = PIN_PE5;
 8000684:	2320      	movs	r3, #32
 8000686:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <GPIO_Init+0x88>)
 800069a:	f004 f955 	bl	8004948 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2120      	movs	r1, #32
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <GPIO_Init+0x88>)
 80006a4:	f004 fb14 	bl	8004cd0 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 80006a8:	e002      	b.n	80006b0 <GPIO_Init+0x64>
	{
	  HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f003 fbc2 	bl	8003e34 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 80006b0:	2108      	movs	r1, #8
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <GPIO_Init+0x88>)
 80006b4:	f004 faf4 	bl	8004ca0 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d0f5      	beq.n	80006aa <GPIO_Init+0x5e>
	}
	HAL_Delay(3000);
 80006be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c2:	f003 fbb7 	bl	8003e34 <HAL_Delay>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40021000 	.word	0x40021000

080006d8 <calculate_freq_and_signalstrength>:
 * @param Channel The channel number.
 * @param samples Pointer to the input samples array.
 * @param given_frequency The given frequency.
 * @return FFT structure containing the main frequency and signal strength.
 */
FFT calculate_freq_and_signalstrength(uint8_t Channel, uint32_t* samples, uint8_t given_frequency) {
 80006d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006dc:	ed2d 8b02 	vpush	{d8}
 80006e0:	b09f      	sub	sp, #124	; 0x7c
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	6139      	str	r1, [r7, #16]
 80006e8:	75fb      	strb	r3, [r7, #23]
 80006ea:	4613      	mov	r3, r2
 80006ec:	75bb      	strb	r3, [r7, #22]
 80006ee:	466b      	mov	r3, sp
 80006f0:	461e      	mov	r6, r3
    // Perform FFT using CMSIS-DSP library
    uint8_t buffer_size = MEAS_get_num_of_samples();
 80006f2:	f000 fca7 	bl	8001044 <MEAS_get_num_of_samples>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    const uint32_t fft_size = buffer_size;
 80006fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000700:	66bb      	str	r3, [r7, #104]	; 0x68
    // Convert the samples to the specific channel
    float32_t input_samples[buffer_size];
 8000702:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8000706:	460b      	mov	r3, r1
 8000708:	3b01      	subs	r3, #1
 800070a:	667b      	str	r3, [r7, #100]	; 0x64
 800070c:	b2cb      	uxtb	r3, r1
 800070e:	2200      	movs	r2, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	0143      	lsls	r3, r0, #5
 8000720:	6838      	ldr	r0, [r7, #0]
 8000722:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	0142      	lsls	r2, r0, #5
 800072a:	b2cb      	uxtb	r3, r1
 800072c:	2200      	movs	r2, #0
 800072e:	469a      	mov	sl, r3
 8000730:	4693      	mov	fp, r2
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800073e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000742:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000746:	460b      	mov	r3, r1
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	3307      	adds	r3, #7
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	ebad 0d03 	sub.w	sp, sp, r3
 8000754:	466b      	mov	r3, sp
 8000756:	3303      	adds	r3, #3
 8000758:	089b      	lsrs	r3, r3, #2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint32_t i = 0; i < fft_size; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	677b      	str	r3, [r7, #116]	; 0x74
 8000762:	e01a      	b.n	800079a <calculate_freq_and_signalstrength+0xc2>
        input_samples[i] = (float32_t)samples[i * MEAS_get_num_of_chan() + (Channel - 1)];
 8000764:	f000 fc66 	bl	8001034 <MEAS_get_num_of_chan>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800076e:	fb03 f202 	mul.w	r2, r3, r2
 8000772:	7dfb      	ldrb	r3, [r7, #23]
 8000774:	4413      	add	r3, r2
 8000776:	3b01      	subs	r3, #1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	4413      	add	r3, r2
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800078a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < fft_size; i++) {
 8000794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000796:	3301      	adds	r3, #1
 8000798:	677b      	str	r3, [r7, #116]	; 0x74
 800079a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800079c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3e0      	bcc.n	8000764 <calculate_freq_and_signalstrength+0x8c>
    }
    
    // remove DC component
    for (uint32_t i = 0; i < fft_size; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	673b      	str	r3, [r7, #112]	; 0x70
 80007a6:	e012      	b.n	80007ce <calculate_freq_and_signalstrength+0xf6>
        input_samples[i] -= 2047.5;
 80007a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	edd3 7a00 	vldr	s15, [r3]
 80007b4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8000908 <calculate_freq_and_signalstrength+0x230>
 80007b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < fft_size; i++) {
 80007c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007ca:	3301      	adds	r3, #1
 80007cc:	673b      	str	r3, [r7, #112]	; 0x70
 80007ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80007d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3e8      	bcc.n	80007a8 <calculate_freq_and_signalstrength+0xd0>
    }

    // Create an array for the FFT output
    float32_t fft_complex_output[2*buffer_size];
 80007d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80007da:	0059      	lsls	r1, r3, #1
 80007dc:	1e4b      	subs	r3, r1, #1
 80007de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007e0:	460a      	mov	r2, r1
 80007e2:	2300      	movs	r3, #0
 80007e4:	4690      	mov	r8, r2
 80007e6:	4699      	mov	r9, r3
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80007f4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80007f8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80007fc:	460a      	mov	r2, r1
 80007fe:	2300      	movs	r3, #0
 8000800:	4614      	mov	r4, r2
 8000802:	461d      	mov	r5, r3
 8000804:	f04f 0200 	mov.w	r2, #0
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	016b      	lsls	r3, r5, #5
 800080e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000812:	0162      	lsls	r2, r4, #5
 8000814:	460b      	mov	r3, r1
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	3307      	adds	r3, #7
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	ebad 0d03 	sub.w	sp, sp, r3
 8000822:	466b      	mov	r3, sp
 8000824:	3303      	adds	r3, #3
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	65bb      	str	r3, [r7, #88]	; 0x58

    // Create an instance of the FFT structure
    arm_rfft_fast_instance_f32 fft_struct;

    // Initialize the FFT structure
    arm_rfft_fast_init_f32(&fft_struct, fft_size);
 800082c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800082e:	b29a      	uxth	r2, r3
 8000830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f007 fc7c 	bl	8008134 <arm_rfft_fast_init_f32>

    // Perform the FFT on the input samples
    arm_rfft_fast_f32(&fft_struct, input_samples, fft_complex_output, 0);
 800083c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000840:	2300      	movs	r3, #0
 8000842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000844:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000846:	f007 fcf7 	bl	8008238 <arm_rfft_fast_f32>

    // Calculate magnitude of complex numbers
    arm_cmplx_mag_f32(fft_complex_output, fft_complex_output, fft_size / 2);
 800084a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	461a      	mov	r2, r3
 8000850:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000852:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000854:	f008 f95c 	bl	8008b10 <arm_cmplx_mag_f32>

    //calculate the index of the given frequency
    uint32_t index = (uint32_t)given_frequency * fft_size / MEAS_get_samp_freq();
 8000858:	7dbb      	ldrb	r3, [r7, #22]
 800085a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800085c:	fb02 f403 	mul.w	r4, r2, r3
 8000860:	f000 fbf8 	bl	8001054 <MEAS_get_samp_freq>
 8000864:	4603      	mov	r3, r0
 8000866:	fbb4 f3f3 	udiv	r3, r4, r3
 800086a:	657b      	str	r3, [r7, #84]	; 0x54

    //calculate the signal strength
    float signal_strength = 2* fft_complex_output[index] / fft_size;
 800086c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800086e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800087c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800087e:	ee07 3a90 	vmov	s15, r3
 8000882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800088a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // Find the index of the maximum magnitude in the first half of the array
    uint32_t maxIndex;
    float32_t maxValue;
    arm_max_f32(fft_complex_output, fft_size / 2, &maxValue, &maxIndex);
 800088e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000890:	0859      	lsrs	r1, r3, #1
 8000892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000896:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800089a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800089c:	f007 fbe2 	bl	8008064 <arm_max_f32>

    // Calculate the main frequency
    float main_frequency = (float)maxIndex * ((float)MEAS_get_samp_freq()) / fft_size;
 80008a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008aa:	f000 fbd3 	bl	8001054 <MEAS_get_samp_freq>
 80008ae:	4603      	mov	r3, r0
 80008b0:	ee07 3a90 	vmov	s15, r3
 80008b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b8:	ee68 6a27 	vmul.f32	s13, s16, s15
 80008bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Create an instance of the FFT structure
    FFT fft;

    // return the calculated values
    fft.main_freq = main_frequency;
 80008ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008d0:	61fb      	str	r3, [r7, #28]
    fft.signal_strength = signal_strength;
 80008d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008d4:	623b      	str	r3, [r7, #32]
    return fft;
 80008d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008da:	f107 021c 	add.w	r2, r7, #28
 80008de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80008e6:	46b5      	mov	sp, r6
 80008e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008ec:	ee07 2a10 	vmov	s14, r2
 80008f0:	ee07 3a90 	vmov	s15, r3
}
 80008f4:	eeb0 0a47 	vmov.f32	s0, s14
 80008f8:	eef0 0a67 	vmov.f32	s1, s15
 80008fc:	377c      	adds	r7, #124	; 0x7c
 80008fe:	46bd      	mov	sp, r7
 8000900:	ecbd 8b02 	vpop	{d8}
 8000904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000908:	44fff000 	.word	0x44fff000

0800090c <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 800090c:	b598      	push	{r3, r4, r7, lr}
 800090e:	af00      	add	r7, sp, #0
    HAL_Init();  // Initialize the system
 8000910:	f003 fa16 	bl	8003d40 <HAL_Init>

    SystemClock_Config();  // Configure system clocks
 8000914:	f000 f850 	bl	80009b8 <SystemClock_Config>

    GPIO_Init();  // Init PE5 and set it to HIGH
 8000918:	f7ff fe98 	bl	800064c <GPIO_Init>

#ifdef FLIPPED_LCD
    BSP_LCD_Init_Flipped();  // Initialize the LCD for flipped orientation
#else
    BSP_LCD_Init();  // Initialize the LCD display
 800091c:	f002 f966 	bl	8002bec <BSP_LCD_Init>
#endif
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000920:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000924:	2001      	movs	r0, #1
 8000926:	f002 f9e3 	bl	8002cf0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800092a:	2001      	movs	r0, #1
 800092c:	f002 fa44 	bl	8002db8 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 8000930:	f002 fd14 	bl	800335c <BSP_LCD_DisplayOn>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f002 fa9a 	bl	8002e70 <BSP_LCD_Clear>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());  // Touchscreen
 800093c:	f002 f9c0 	bl	8002cc0 <BSP_LCD_GetXSize>
 8000940:	4603      	mov	r3, r0
 8000942:	b29c      	uxth	r4, r3
 8000944:	f002 f9c8 	bl	8002cd8 <BSP_LCD_GetYSize>
 8000948:	4603      	mov	r3, r0
 800094a:	b29b      	uxth	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	4620      	mov	r0, r4
 8000950:	f003 f8f2 	bl	8003b38 <BSP_TS_Init>
    /* Uncomment next line to enable touchscreen interrupt */
    // BSP_TS_ITConfig();					// Enable
    // Touchscreen interrupt

    PB_init();       // Initialize the user pushbutton
 8000954:	f001 f846 	bl	80019e4 <PB_init>
    PB_enableIRQ();  // Enable interrupt on user pushbutton
 8000958:	f001 f864 	bl	8001a24 <PB_enableIRQ>

    BSP_LED_Init(LED3);  // Toggles in while loop
 800095c:	2000      	movs	r0, #0
 800095e:	f001 fd61 	bl	8002424 <BSP_LED_Init>
    BSP_LED_Init(LED4);  // Is toggled by user button
 8000962:	2001      	movs	r0, #1
 8000964:	f001 fd5e 	bl	8002424 <BSP_LED_Init>

    // MENU_hint();						// Show hint at
    // startup MENU_draw(0,3);						// Draw
    // the menu
    DISP_info_screen(MENU_HOME);
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fdc5 	bl	80014f8 <DISP_info_screen>

    gyro_disable();  // Disable gyro, use those analog inputs
 800096e:	f000 f8a1 	bl	8000ab4 <gyro_disable>

    MEAS_GPIO_analog_init();         // Configure GPIOs in analog mode
 8000972:	f000 f989 	bl	8000c88 <MEAS_GPIO_analog_init>
    MEAS_timer_init();               // Configure the timer
 8000976:	f000 fa09 	bl	8000d8c <MEAS_timer_init>
    OUTPUT_MEAS_timer_init();        // Configure the timer for output
 800097a:	f000 fb75 	bl	8001068 <OUTPUT_MEAS_timer_init>
                                     /* Clear the display */
    BSP_LCD_Clear(LCD_COLOR_BLACK);  // Clear display
 800097e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000982:	f002 fa75 	bl	8002e70 <BSP_LCD_Clear>

    /* Infinite while loop */
    while (1) {                // Infinitely loop in main function
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 8000986:	2000      	movs	r0, #0
 8000988:	f001 fda0 	bl	80024cc <BSP_LED_Toggle>
                        BSP_LED_Off(LED4);
                }
        }*/

        // Check if Device should power off (PE3)
        if (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET) {
 800098c:	2108      	movs	r1, #8
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <main+0xa8>)
 8000990:	f004 f986 	bl	8004ca0 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d108      	bne.n	80009ac <main+0xa0>
            // Set PE5 low
            HAL_GPIO_WritePin(GPIOE, PIN_PE5, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2120      	movs	r1, #32
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <main+0xa8>)
 80009a0:	f004 f996 	bl	8004cd0 <HAL_GPIO_WritePin>
            // Delay for 3 seconds
            HAL_Delay(3000);
 80009a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009a8:	f003 fa44 	bl	8003e34 <HAL_Delay>

        // DISP_info_screen();

        // MENU_main();					// Check for user input

        HAL_Delay(100);  // Wait or sleep
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f003 fa41 	bl	8003e34 <HAL_Delay>
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 80009b2:	e7e8      	b.n	8000986 <main+0x7a>
 80009b4:	40021000 	.word	0x40021000

080009b8 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0a0      	sub	sp, #128	; 0x80
 80009bc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f008 fcb0 	bl	800932c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2230      	movs	r2, #48	; 0x30
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f008 fca1 	bl	800932c <memset>
    /* Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <SystemClock_Config+0xf0>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <SystemClock_Config+0xf0>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <SystemClock_Config+0xf0>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <SystemClock_Config+0xf4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a27      	ldr	r2, [pc, #156]	; (8000aac <SystemClock_Config+0xf4>)
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xf4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
    /* Initialize High Speed External Oscillator and PLL circuits */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a34:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000a36:	2308      	movs	r3, #8
 8000a38:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000a3a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3e:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a44:	2307      	movs	r3, #7
 8000a46:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 fc5b 	bl	8006308 <HAL_RCC_OscConfig>
    /* Initialize gates and clock dividers for CPU, AHB and APB busses */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000a52:	230f      	movs	r3, #15
 8000a54:	63fb      	str	r3, [r7, #60]	; 0x3c
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000a6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a6e:	2105      	movs	r1, #5
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 feb7 	bl	80067e4 <HAL_RCC_ClockConfig>
    /* Initialize PLL and clock divider for the LCD */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a76:	2308      	movs	r3, #8
 8000a78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a7a:	23c0      	movs	r3, #192	; 0xc0
 8000a7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f006 f8b5 	bl	8006bfc <HAL_RCCEx_PeriphCLKConfig>
    /* Set clock prescaler for ADCs */
    ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <SystemClock_Config+0xf8>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <SystemClock_Config+0xf8>)
 8000a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a9c:	6053      	str	r3, [r2, #4]
}
 8000a9e:	bf00      	nop
 8000aa0:	3780      	adds	r7, #128	; 0x80
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000
 8000ab0:	40012300 	.word	0x40012300

08000ab4 <gyro_disable>:
 * which is done with the code below.
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <gyro_disable+0xb4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <gyro_disable+0xb4>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <gyro_disable+0xb4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
    /* Disable PC1 and PF8 first */
    GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;        // Reset mode for PC1
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <gyro_disable+0xb8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a24      	ldr	r2, [pc, #144]	; (8000b6c <gyro_disable+0xb8>)
 8000adc:	f023 030c 	bic.w	r3, r3, #12
 8000ae0:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;  // Set PC1 as output
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <gyro_disable+0xb8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <gyro_disable+0xb8>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6013      	str	r3, [r2, #0]
    GPIOC->BSRR |= GPIO_BSRR_BR1;  // Set GYRO (CS) to 0 for a short time
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <gyro_disable+0xb8>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <gyro_disable+0xb8>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6193      	str	r3, [r2, #24]
    HAL_Delay(10);                 // Wait some time
 8000afa:	200a      	movs	r0, #10
 8000afc:	f003 f99a 	bl	8003e34 <HAL_Delay>
    GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;  // Analog PC1 = ADC123_IN11
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <gyro_disable+0xb8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <gyro_disable+0xb8>)
 8000b06:	f043 030c 	orr.w	r3, r3, #12
 8000b0a:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <gyro_disable+0xb4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <gyro_disable+0xb4>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <gyro_disable+0xb4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]
    GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;  // Reset speed of PF8
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <gyro_disable+0xbc>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <gyro_disable+0xbc>)
 8000b2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000b32:	6093      	str	r3, [r2, #8]
    GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;  // Reset alternate function of PF8
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <gyro_disable+0xbc>)
 8000b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <gyro_disable+0xbc>)
 8000b3a:	f023 030f 	bic.w	r3, r3, #15
 8000b3e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;   // Reset pulup/down of PF8
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <gyro_disable+0xbc>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <gyro_disable+0xbc>)
 8000b46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000b4a:	60d3      	str	r3, [r2, #12]
    HAL_Delay(10);                           // Wait some time
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f003 f971 	bl	8003e34 <HAL_Delay>
    GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos;  // Analog mode PF8 = ADC3_IN4
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <gyro_disable+0xbc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <gyro_disable+0xbc>)
 8000b58:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40021400 	.word	0x40021400

08000b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db0b      	blt.n	8000b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 021f 	and.w	r2, r3, #31
 8000b8c:	4907      	ldr	r1, [pc, #28]	; (8000bac <__NVIC_EnableIRQ+0x38>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db12      	blt.n	8000be8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	490a      	ldr	r1, [pc, #40]	; (8000bf4 <__NVIC_DisableIRQ+0x44>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	3320      	adds	r3, #32
 8000bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bdc:	f3bf 8f4f 	dsb	sy
}
 8000be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000be2:	f3bf 8f6f 	isb	sy
}
 8000be6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0c      	blt.n	8000c24 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_ClearPendingIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	3360      	adds	r3, #96	; 0x60
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <MEAS_GPIO_analog_init>:
 * - ADC3_IN4 = GPIO PF6 (Pad left)
 * - ADC123_IN13 = GPIO PC3 (Pad right)
 * - ADC3_IN6 = GPIO PF8 (Hall sensor Left)
 * - ADC123_IN11 = GPIO PC1 (Hall sensor Right)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MEAS_GPIO_analog_init+0x7c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <MEAS_GPIO_analog_init+0x7c>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MEAS_GPIO_analog_init+0x7c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0320 	and.w	r3, r3, #32
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);  // Analog PF6 = ADC3_IN4
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MEAS_GPIO_analog_init+0x80>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <MEAS_GPIO_analog_init+0x80>)
 8000cb0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000cb4:	6013      	str	r3, [r2, #0]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER8_Pos);  // Analog PF8 = ADC3_IN6
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MEAS_GPIO_analog_init+0x80>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <MEAS_GPIO_analog_init+0x80>)
 8000cbc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000cc0:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MEAS_GPIO_analog_init+0x7c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <MEAS_GPIO_analog_init+0x7c>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MEAS_GPIO_analog_init+0x7c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);  // Analog PC3 = ADC3_IN13
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MEAS_GPIO_analog_init+0x84>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <MEAS_GPIO_analog_init+0x84>)
 8000ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ce8:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER1_Pos);  // Analog PC1 = ADC3_IN11
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MEAS_GPIO_analog_init+0x84>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <MEAS_GPIO_analog_init+0x84>)
 8000cf0:	f043 030c 	orr.w	r3, r3, #12
 8000cf4:	6013      	str	r3, [r2, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40021400 	.word	0x40021400
 8000d0c:	40020800 	.word	0x40020800

08000d10 <MEAS_ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void MEAS_ADC_reset(void) {
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
    RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;   // Reset ADCs
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MEAS_ADC_reset+0x38>)
 8000d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <MEAS_ADC_reset+0x38>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6253      	str	r3, [r2, #36]	; 0x24
    RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;  // Release reset of ADCs
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MEAS_ADC_reset+0x38>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <MEAS_ADC_reset+0x38>)
 8000d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2a:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->CR1 &= ~TIM_CR1_CEN;              // Disable timer
 8000d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <MEAS_Buffer_reset>:
/** ***************************************************************************
 * @brief Resets the buffer and the flag (data ready for new measurement)
 * @param[in] channels	input channels
 * @param[in] buffer	buffer pointer
 *****************************************************************************/
static void MEAS_Buffer_reset(uint8_t channels, uint32_t* buffer) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
    /* Clear buffer and flag */
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e008      	b.n	8000d70 <MEAS_Buffer_reset+0x24>
        buffer[i] = 0;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	019b      	lsls	r3, r3, #6
 8000d74:	461a      	mov	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d3f0      	bcc.n	8000d5e <MEAS_Buffer_reset+0x12>
    }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <MEAS_timer_init>:
/** ***************************************************************************
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();  // Enable Clock for TIM2
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MEAS_timer_init+0x50>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <MEAS_timer_init+0x50>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MEAS_timer_init+0x50>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
    TIM2->PSC = TIM_PRESCALE;     // Prescaler for clock freq. = 1MHz
 8000dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db2:	f243 3244 	movw	r2, #13124	; 0x3344
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = TIM_TOP;          // Auto reload = counter top value
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbc:	2209      	movs	r2, #9
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR2 |= TIM_CR2_MMS_1;   // TRGO on update
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6053      	str	r3, [r2, #4]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40023800 	.word	0x40023800

08000de0 <MEAS_ADC3_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC3_IN4 = GPIO PF6 (Pad Right), ADC3_IN13 = GPIO PC3
 *(Pad Left), ADC_IN6 = GPIO PF8 (HS-Right), ADC3_IN11 = GPIO PC1 (HS-Left)
 *****************************************************************************/
void MEAS_ADC3_scan_init(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
    __HAL_RCC_ADC3_CLK_ENABLE();               // Enable Clock for ADC3
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <MEAS_ADC3_scan_init+0x138>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a4a      	ldr	r2, [pc, #296]	; (8000f18 <MEAS_ADC3_scan_init+0x138>)
 8000df0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <MEAS_ADC3_scan_init+0x138>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
    ADC3->SQR1 |= (3UL << ADC_SQR1_L_Pos);     // Convert 4 inputs (4-1)
 8000e02:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	4a45      	ldr	r2, [pc, #276]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);   // Input 4 = first conversion
 8000e0e:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e12:	4a42      	ldr	r2, [pc, #264]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (13UL << ADC_SQR3_SQ2_Pos);  // Input 13 = second conversion
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1e:	4a3f      	ldr	r2, [pc, #252]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e20:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 8000e24:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (6UL << ADC_SQR3_SQ3_Pos);   // Input 6 = third conversion
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e2c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000e30:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (11UL << ADC_SQR3_SQ4_Pos);  // Input 11 = fourth conversion
 8000e32:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e36:	4a39      	ldr	r2, [pc, #228]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e38:	f443 23b0 	orr.w	r3, r3, #360448	; 0x58000
 8000e3c:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->CR1 |= ADC_CR1_SCAN;                 // Enable scan mode
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a36      	ldr	r2, [pc, #216]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6053      	str	r3, [r2, #4]
    ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);   // En. ext. trigger on rising e.
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4a33      	ldr	r2, [pc, #204]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);  // Timer 2 TRGO event
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	4a30      	ldr	r2, [pc, #192]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e5c:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000e60:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= ADC_CR2_DMA;                  // Enable DMA mode
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <MEAS_ADC3_scan_init+0x13c>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	6093      	str	r3, [r2, #8]
    __HAL_RCC_DMA2_CLK_ENABLE();               // Enable Clock for DMA2
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <MEAS_ADC3_scan_init+0x138>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <MEAS_ADC3_scan_init+0x138>)
 8000e78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <MEAS_ADC3_scan_init+0x138>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
    DMA2_Stream1->CR &= ~DMA_SxCR_EN;          // Disable the DMA stream 1
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a24      	ldr	r2, [pc, #144]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 8000e96:	bf00      	nop
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f9      	bne.n	8000e98 <MEAS_ADC3_scan_init+0xb8>
        ;
    }                                 // Wait for DMA to finish
    DMA2->LIFCR |= DMA_LIFCR_CTCIF1;  // Clear transfer complete interrupt fl.
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MEAS_ADC3_scan_init+0x144>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <MEAS_ADC3_scan_init+0x144>)
 8000eaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eae:	6093      	str	r3, [r2, #8]
    DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);  // Select channel 2
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eba:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PL_1;                // Priority high
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec6:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;  // Memory data size = 32 bit
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;  // Peripheral data size = 32 bit
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000eda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ede:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MINC;     // Increment memory address pointer
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_TCIE;     // Transfer complete interrupt enable
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->NDTR =
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efe:	605a      	str	r2, [r3, #4]
        INPUT_COUNT * ADC_NUMS;  // Number of data items to transfer
    DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;     // Peripheral register address
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <MEAS_ADC3_scan_init+0x148>)
 8000f04:	609a      	str	r2, [r3, #8]
    DMA2_Stream1->M0AR = (uint32_t)ADC_samples;  // Buffer memory loc. address
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MEAS_ADC3_scan_init+0x140>)
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <MEAS_ADC3_scan_init+0x14c>)
 8000f0a:	60da      	str	r2, [r3, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40012200 	.word	0x40012200
 8000f20:	40026428 	.word	0x40026428
 8000f24:	40026400 	.word	0x40026400
 8000f28:	4001224c 	.word	0x4001224c
 8000f2c:	200003e8 	.word	0x200003e8

08000f30 <MEAS_ADC3_scan_start>:

/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void MEAS_ADC3_scan_start(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    DMA2_Stream1->CR |= DMA_SxCR_EN;          // Enable DMA
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MEAS_ADC3_scan_start+0x3c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <MEAS_ADC3_scan_start+0x3c>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 8000f40:	2039      	movs	r0, #57	; 0x39
 8000f42:	f7ff fe59 	bl	8000bf8 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream1_IRQn);  // Enable DMA interrupt in the NVIC
 8000f46:	2039      	movs	r0, #57	; 0x39
 8000f48:	f7ff fe14 	bl	8000b74 <__NVIC_EnableIRQ>
    ADC3->CR2 |= ADC_CR2_ADON;          // Enable ADC3
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MEAS_ADC3_scan_start+0x40>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <MEAS_ADC3_scan_start+0x40>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6093      	str	r3, [r2, #8]
    TIM2->CR1 |= TIM_CR1_CEN;           // Enable timer
 8000f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40026428 	.word	0x40026428
 8000f70:	40012200 	.word	0x40012200

08000f74 <DMA2_Stream1_IRQHandler>:
 * @brief Interrupt handler for DMA2 Stream1
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF1) {  // Stream1 transfer compl. interrupt f.
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <DMA2_Stream1_IRQHandler+0x78>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d031      	beq.n	8000fe8 <DMA2_Stream1_IRQHandler+0x74>
        NVIC_DisableIRQ(
 8000f84:	2039      	movs	r0, #57	; 0x39
 8000f86:	f7ff fe13 	bl	8000bb0 <__NVIC_DisableIRQ>
            DMA2_Stream1_IRQn);  // Disable DMA interrupt in the NVIC
        NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 8000f8a:	2039      	movs	r0, #57	; 0x39
 8000f8c:	f7ff fe34 	bl	8000bf8 <__NVIC_ClearPendingIRQ>
        DMA2_Stream1->CR &= ~DMA_SxCR_EN;         // Disable the DMA
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <DMA2_Stream1_IRQHandler+0x7c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <DMA2_Stream1_IRQHandler+0x7c>)
 8000f96:	f023 0301 	bic.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]
        while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 8000f9c:	bf00      	nop
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <DMA2_Stream1_IRQHandler+0x7c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f9      	bne.n	8000f9e <DMA2_Stream1_IRQHandler+0x2a>
            ;
        }  // Wait for DMA to finish
        DMA2->LIFCR |=
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <DMA2_Stream1_IRQHandler+0x78>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <DMA2_Stream1_IRQHandler+0x78>)
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb4:	6093      	str	r3, [r2, #8]
            DMA_LIFCR_CTCIF1;        // Clear transfer complete interrupt fl.
        TIM2->CR1 &= ~TIM_CR1_CEN;   // Disable timer
 8000fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]
        ADC3->CR2 &= ~ADC_CR2_ADON;  // Disable ADC3
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <DMA2_Stream1_IRQHandler+0x80>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <DMA2_Stream1_IRQHandler+0x80>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6093      	str	r3, [r2, #8]
        ADC3->CR2 &= ~ADC_CR2_DMA;   // Disable DMA mode
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <DMA2_Stream1_IRQHandler+0x80>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <DMA2_Stream1_IRQHandler+0x80>)
 8000fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fdc:	6093      	str	r3, [r2, #8]
        // copy data from DMA buffer to ADC_samples
        MEAS_ADC_reset();
 8000fde:	f7ff fe97 	bl	8000d10 <MEAS_ADC_reset>
        MEAS_data_ready = true;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <DMA2_Stream1_IRQHandler+0x84>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40026400 	.word	0x40026400
 8000ff0:	40026428 	.word	0x40026428
 8000ff4:	40012200 	.word	0x40012200
 8000ff8:	200003e4 	.word	0x200003e4

08000ffc <MEAS_start_measure>:
 * @return ADC samples pointer
 *
 * @note The result is stored alternated e.g. every 4th is together.
 *****************************************************************************/
// Start the measurement procedure
uint32_t* MEAS_start_measure(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    MEAS_Buffer_reset(INPUT_COUNT, ADC_samples);
 8001000:	490a      	ldr	r1, [pc, #40]	; (800102c <MEAS_start_measure+0x30>)
 8001002:	2004      	movs	r0, #4
 8001004:	f7ff fea2 	bl	8000d4c <MEAS_Buffer_reset>
    MEAS_ADC3_scan_init();
 8001008:	f7ff feea 	bl	8000de0 <MEAS_ADC3_scan_init>
    MEAS_ADC3_scan_start();
 800100c:	f7ff ff90 	bl	8000f30 <MEAS_ADC3_scan_start>
    while (!MEAS_data_ready)
 8001010:	bf00      	nop
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MEAS_start_measure+0x34>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f8      	bne.n	8001012 <MEAS_start_measure+0x16>
        ;  // Wait for data
    MEAS_data_ready = false;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <MEAS_start_measure+0x34>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

    return ADC_samples;
 8001026:	4b01      	ldr	r3, [pc, #4]	; (800102c <MEAS_start_measure+0x30>)
}
 8001028:	4618      	mov	r0, r3
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200003e8 	.word	0x200003e8
 8001030:	200003e4 	.word	0x200003e4

08001034 <MEAS_get_num_of_chan>:
/** ***************************************************************************
 * @brief Get the number of channels
 * @return Number of channels
 *****************************************************************************/
uint8_t MEAS_get_num_of_chan(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	return INPUT_COUNT;
 8001038:	2304      	movs	r3, #4
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <MEAS_get_num_of_samples>:
/** ***************************************************************************
 * @brief Get the number of samples
 * @return Number of samples
 *****************************************************************************/
uint8_t MEAS_get_num_of_samples(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	return ADC_NUMS;
 8001048:	2340      	movs	r3, #64	; 0x40
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <MEAS_get_samp_freq>:
/** ***************************************************************************
 * @brief Get the sampling frequency
 * @return Sampling frequency
 *****************************************************************************/
uint16_t MEAS_get_samp_freq(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	return ADC_FS;
 8001058:	f44f 7320 	mov.w	r3, #640	; 0x280
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <OUTPUT_MEAS_timer_init>:
 * This function enables the clock for timer 3, sets the prescaler to 16000,
 * sets the auto reload register to 100, enables the update interrupt,
 * enables timer 3, and enables the timer 3 interrupt.
 * This timer is used to trigger the data output to the display every 800ms.
 */
void OUTPUT_MEAS_timer_init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // enable clock for timer 3
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <OUTPUT_MEAS_timer_init+0x4c>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <OUTPUT_MEAS_timer_init+0x4c>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
    TIM3->PSC = 16000 - 1;               // set prescaler to 16000
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <OUTPUT_MEAS_timer_init+0x50>)
 800107a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 800 - 1;                 // set auto reload register to 800
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <OUTPUT_MEAS_timer_init+0x50>)
 8001082:	f240 321f 	movw	r2, #799	; 0x31f
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->DIER |= TIM_DIER_UIE;          // enable update interrupt
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <OUTPUT_MEAS_timer_init+0x50>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <OUTPUT_MEAS_timer_init+0x50>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN;            // enable timer 3
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <OUTPUT_MEAS_timer_init+0x50>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <OUTPUT_MEAS_timer_init+0x50>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM3_IRQn, 3);
 80010a0:	2103      	movs	r1, #3
 80010a2:	201d      	movs	r0, #29
 80010a4:	f7ff fdc6 	bl	8000c34 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);  // enable timer 3 interrupt
 80010a8:	201d      	movs	r0, #29
 80010aa:	f7ff fd63 	bl	8000b74 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40000400 	.word	0x40000400

080010bc <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/

void MEAS_show_data(void) {
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b099      	sub	sp, #100	; 0x64
 80010c0:	af02      	add	r7, sp, #8
    const uint8_t ADC_RES = 12;
 80010c2:	230c      	movs	r3, #12
 80010c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    // Define Samples variable and start measurement
    uint32_t* Samples = MEAS_start_measure();
 80010c8:	f7ff ff98 	bl	8000ffc <MEAS_start_measure>
 80010cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    /* Calculate the factor to scale the values to the display */
    const uint32_t Y_OFFSET = 100;
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
    const uint32_t X_SIZE = 240;
 80010d2:	23f0      	movs	r3, #240	; 0xf0
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
    const uint32_t f = (1 << ADC_RES) / Y_OFFSET + 1;  // Scaling factor
 80010d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80010da:	2201      	movs	r2, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t data;
    uint32_t data_last;
    /* Clear the display */

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80010ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010f0:	f001 fe72 	bl	8002dd8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 80010f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	3301      	adds	r3, #1
 80010fe:	b29b      	uxth	r3, r3
 8001100:	2100      	movs	r1, #0
 8001102:	2000      	movs	r0, #0
 8001104:	f002 f8a8 	bl	8003258 <BSP_LCD_FillRect>
    /* Write first 4 samples as numbers */

    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001108:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800110c:	f001 fe7c 	bl	8002e08 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f001 fe60 	bl	8002dd8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font12);
 8001118:	48a8      	ldr	r0, [pc, #672]	; (80013bc <MEAS_show_data+0x300>)
 800111a:	f001 fe8f 	bl	8002e3c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"ADC Resolution: 12 bit",
 800111e:	2301      	movs	r3, #1
 8001120:	4aa7      	ldr	r2, [pc, #668]	; (80013c0 <MEAS_show_data+0x304>)
 8001122:	2150      	movs	r1, #80	; 0x50
 8001124:	2000      	movs	r0, #0
 8001126:	f001 ff0f 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Peak Values and frequency", CENTER_MODE);
 800112a:	2301      	movs	r3, #1
 800112c:	4aa5      	ldr	r2, [pc, #660]	; (80013c4 <MEAS_show_data+0x308>)
 800112e:	2164      	movs	r1, #100	; 0x64
 8001130:	2000      	movs	r0, #0
 8001132:	f001 ff09 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 120, (uint8_t*)"of Channels 1 to 4:", CENTER_MODE);
 8001136:	2301      	movs	r3, #1
 8001138:	4aa3      	ldr	r2, [pc, #652]	; (80013c8 <MEAS_show_data+0x30c>)
 800113a:	2178      	movs	r1, #120	; 0x78
 800113c:	2000      	movs	r0, #0
 800113e:	f001 ff03 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 260, (uint8_t*)"(without VGND -> peak - 2048)",
 8001142:	2301      	movs	r3, #1
 8001144:	4aa1      	ldr	r2, [pc, #644]	; (80013cc <MEAS_show_data+0x310>)
 8001146:	f44f 7182 	mov.w	r1, #260	; 0x104
 800114a:	2000      	movs	r0, #0
 800114c:	f001 fefc 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font20);
 8001150:	489f      	ldr	r0, [pc, #636]	; (80013d0 <MEAS_show_data+0x314>)
 8001152:	f001 fe73 	bl	8002e3c <BSP_LCD_SetFont>
    char text[32];
	// Calculate the frequency of channel 1
	FFT fft = calculate_freq_and_signalstrength(1, Samples, 50);
 8001156:	2232      	movs	r2, #50	; 0x32
 8001158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fabc 	bl	80006d8 <calculate_freq_and_signalstrength>
 8001160:	eeb0 7a40 	vmov.f32	s14, s0
 8001164:	eef0 7a60 	vmov.f32	s15, s1
 8001168:	ed87 7a01 	vstr	s14, [r7, #4]
 800116c:	edc7 7a02 	vstr	s15, [r7, #8]
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8001170:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8001174:	f001 fe30 	bl	8002dd8 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C1:%4d f:%3d HZ ", (int)(fft.signal_strength), (int)(fft.main_freq));
 8001178:	edd7 7a02 	vldr	s15, [r7, #8]
 800117c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001180:	edd7 7a01 	vldr	s15, [r7, #4]
 8001184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001188:	ee17 3a90 	vmov	r3, s15
 800118c:	f107 000c 	add.w	r0, r7, #12
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	ee17 3a10 	vmov	r3, s14
 8001196:	4a8f      	ldr	r2, [pc, #572]	; (80013d4 <MEAS_show_data+0x318>)
 8001198:	2128      	movs	r1, #40	; 0x28
 800119a:	f008 f893 	bl	80092c4 <sniprintf>
    // snprintf(text, 15, "C1 %4d", (int)(Samples[0]));
    BSP_LCD_DisplayStringAt(0, 140, (uint8_t*)text, LEFT_MODE);
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	2303      	movs	r3, #3
 80011a4:	218c      	movs	r1, #140	; 0x8c
 80011a6:	2000      	movs	r0, #0
 80011a8:	f001 fece 	bl	8002f48 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 2
	fft = calculate_freq_and_signalstrength(2, Samples, 50);
 80011ac:	2232      	movs	r2, #50	; 0x32
 80011ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011b0:	2002      	movs	r0, #2
 80011b2:	f7ff fa91 	bl	80006d8 <calculate_freq_and_signalstrength>
 80011b6:	eeb0 7a40 	vmov.f32	s14, s0
 80011ba:	eef0 7a60 	vmov.f32	s15, s1
 80011be:	ed87 7a01 	vstr	s14, [r7, #4]
 80011c2:	edc7 7a02 	vstr	s15, [r7, #8]
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80011c6:	4884      	ldr	r0, [pc, #528]	; (80013d8 <MEAS_show_data+0x31c>)
 80011c8:	f001 fe06 	bl	8002dd8 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C2:%4d f:%3d HZ ", (int)(fft.signal_strength), (int)(fft.main_freq));
 80011cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80011d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011dc:	ee17 3a90 	vmov	r3, s15
 80011e0:	f107 000c 	add.w	r0, r7, #12
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	ee17 3a10 	vmov	r3, s14
 80011ea:	4a7c      	ldr	r2, [pc, #496]	; (80013dc <MEAS_show_data+0x320>)
 80011ec:	2128      	movs	r1, #40	; 0x28
 80011ee:	f008 f869 	bl	80092c4 <sniprintf>
    // snprintf(text, 15, "C2 %4d", (int)(Samples[1]));
    BSP_LCD_DisplayStringAt(0, 170, (uint8_t*)text, LEFT_MODE);
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	2303      	movs	r3, #3
 80011f8:	21aa      	movs	r1, #170	; 0xaa
 80011fa:	2000      	movs	r0, #0
 80011fc:	f001 fea4 	bl	8002f48 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 3
	fft = calculate_freq_and_signalstrength(3, Samples, 50);
 8001200:	2232      	movs	r2, #50	; 0x32
 8001202:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001204:	2003      	movs	r0, #3
 8001206:	f7ff fa67 	bl	80006d8 <calculate_freq_and_signalstrength>
 800120a:	eeb0 7a40 	vmov.f32	s14, s0
 800120e:	eef0 7a60 	vmov.f32	s15, s1
 8001212:	ed87 7a01 	vstr	s14, [r7, #4]
 8001216:	edc7 7a02 	vstr	s15, [r7, #8]
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800121a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800121e:	f001 fddb 	bl	8002dd8 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C3:%4d f:%3d HZ ", (int)(fft.signal_strength), (int)(fft.main_freq));
 8001222:	edd7 7a02 	vldr	s15, [r7, #8]
 8001226:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800122a:	edd7 7a01 	vldr	s15, [r7, #4]
 800122e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001232:	ee17 3a90 	vmov	r3, s15
 8001236:	f107 000c 	add.w	r0, r7, #12
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	ee17 3a10 	vmov	r3, s14
 8001240:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <MEAS_show_data+0x324>)
 8001242:	2128      	movs	r1, #40	; 0x28
 8001244:	f008 f83e 	bl	80092c4 <sniprintf>
    // snprintf(text, 15, "C3 %4d", (int)(Samples[2]));
    BSP_LCD_DisplayStringAt(0, 200, (uint8_t*)text, LEFT_MODE);
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	2303      	movs	r3, #3
 800124e:	21c8      	movs	r1, #200	; 0xc8
 8001250:	2000      	movs	r0, #0
 8001252:	f001 fe79 	bl	8002f48 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 4
	fft = calculate_freq_and_signalstrength(3, Samples, 50);
 8001256:	2232      	movs	r2, #50	; 0x32
 8001258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800125a:	2003      	movs	r0, #3
 800125c:	f7ff fa3c 	bl	80006d8 <calculate_freq_and_signalstrength>
 8001260:	eeb0 7a40 	vmov.f32	s14, s0
 8001264:	eef0 7a60 	vmov.f32	s15, s1
 8001268:	ed87 7a01 	vstr	s14, [r7, #4]
 800126c:	edc7 7a02 	vstr	s15, [r7, #8]
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001270:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001274:	f001 fdb0 	bl	8002dd8 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C4:%4d f:%3d HZ ", (int)(fft.signal_strength), (int)(fft.main_freq));
 8001278:	edd7 7a02 	vldr	s15, [r7, #8]
 800127c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001288:	ee17 3a90 	vmov	r3, s15
 800128c:	f107 000c 	add.w	r0, r7, #12
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	ee17 3a10 	vmov	r3, s14
 8001296:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <MEAS_show_data+0x328>)
 8001298:	2128      	movs	r1, #40	; 0x28
 800129a:	f008 f813 	bl	80092c4 <sniprintf>
    // snprintf(text, 15, "C4 %4d", (int)(Samples[3]));
    BSP_LCD_DisplayStringAt(0, 230, (uint8_t*)text, LEFT_MODE);
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	2303      	movs	r3, #3
 80012a4:	21e6      	movs	r1, #230	; 0xe6
 80012a6:	2000      	movs	r0, #0
 80012a8:	f001 fe4e 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    /* Draw the  values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80012ac:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80012b0:	f001 fd92 	bl	8002dd8 <BSP_LCD_SetTextColor>
    data = Samples[0] / f;
 80012b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	657b      	str	r3, [r7, #84]	; 0x54
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	653b      	str	r3, [r7, #80]	; 0x50
 80012c4:	e02b      	b.n	800131e <MEAS_show_data+0x262>
        data_last = data;
 80012c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        data = (Samples[4 * i]) / f;
 80012ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012d0:	4413      	add	r3, r2
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	657b      	str	r3, [r7, #84]	; 0x54
        if (data > Y_OFFSET) {
 80012dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d901      	bls.n	80012e8 <MEAS_show_data+0x22c>
            data = Y_OFFSET;
 80012e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e6:	657b      	str	r3, [r7, #84]	; 0x54
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 80012e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	b298      	uxth	r0, r3
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b299      	uxth	r1, r3
 80012fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001300:	b29b      	uxth	r3, r3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	b29c      	uxth	r4, r3
 8001306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001308:	b29a      	uxth	r2, r3
 800130a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800130c:	b29b      	uxth	r3, r3
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	4622      	mov	r2, r4
 8001314:	f001 fed6 	bl	80030c4 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800131a:	3301      	adds	r3, #1
 800131c:	653b      	str	r3, [r7, #80]	; 0x50
 800131e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001320:	2b3f      	cmp	r3, #63	; 0x3f
 8001322:	d9d0      	bls.n	80012c6 <MEAS_show_data+0x20a>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 2 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001324:	482c      	ldr	r0, [pc, #176]	; (80013d8 <MEAS_show_data+0x31c>)
 8001326:	f001 fd57 	bl	8002dd8 <BSP_LCD_SetTextColor>
    data = Samples[1] / f;
 800132a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800132c:	3304      	adds	r3, #4
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	657b      	str	r3, [r7, #84]	; 0x54
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800133c:	e02c      	b.n	8001398 <MEAS_show_data+0x2dc>
        data_last = data;
 800133e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
        data = (Samples[4 * i + 1]) / f;
 8001342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	3304      	adds	r3, #4
 8001348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800134a:	4413      	add	r3, r2
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	657b      	str	r3, [r7, #84]	; 0x54
        if (data > Y_OFFSET) {
 8001356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135a:	429a      	cmp	r2, r3
 800135c:	d901      	bls.n	8001362 <MEAS_show_data+0x2a6>
            data = Y_OFFSET;
 800135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001360:	657b      	str	r3, [r7, #84]	; 0x54
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001364:	3b01      	subs	r3, #1
 8001366:	b29b      	uxth	r3, r3
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	b298      	uxth	r0, r3
 800136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136e:	b29a      	uxth	r2, r3
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	b29b      	uxth	r3, r3
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b299      	uxth	r1, r3
 8001378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137a:	b29b      	uxth	r3, r3
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	b29c      	uxth	r4, r3
 8001380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001382:	b29a      	uxth	r2, r3
 8001384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001386:	b29b      	uxth	r3, r3
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	4622      	mov	r2, r4
 800138e:	f001 fe99 	bl	80030c4 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001394:	3301      	adds	r3, #1
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800139a:	2b3f      	cmp	r3, #63	; 0x3f
 800139c:	d9cf      	bls.n	800133e <MEAS_show_data+0x282>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 3 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800139e:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80013a2:	f001 fd19 	bl	8002dd8 <BSP_LCD_SetTextColor>
    data = Samples[2] / f;
 80013a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013a8:	3308      	adds	r3, #8
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	657b      	str	r3, [r7, #84]	; 0x54
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80013b8:	e043      	b.n	8001442 <MEAS_show_data+0x386>
 80013ba:	bf00      	nop
 80013bc:	20000364 	.word	0x20000364
 80013c0:	08009cac 	.word	0x08009cac
 80013c4:	08009cc4 	.word	0x08009cc4
 80013c8:	08009ce0 	.word	0x08009ce0
 80013cc:	08009cf4 	.word	0x08009cf4
 80013d0:	20000354 	.word	0x20000354
 80013d4:	08009d14 	.word	0x08009d14
 80013d8:	ffff0000 	.word	0xffff0000
 80013dc:	08009d28 	.word	0x08009d28
 80013e0:	08009d3c 	.word	0x08009d3c
 80013e4:	08009d50 	.word	0x08009d50
        data_last = data;
 80013e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        data = (Samples[4 * i + 2]) / f;
 80013ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	3308      	adds	r3, #8
 80013f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013f4:	4413      	add	r3, r2
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	657b      	str	r3, [r7, #84]	; 0x54
        if (data > Y_OFFSET) {
 8001400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001404:	429a      	cmp	r2, r3
 8001406:	d901      	bls.n	800140c <MEAS_show_data+0x350>
            data = Y_OFFSET;
 8001408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140a:	657b      	str	r3, [r7, #84]	; 0x54
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 800140c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800140e:	3b01      	subs	r3, #1
 8001410:	b29b      	uxth	r3, r3
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	b298      	uxth	r0, r3
 8001416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001418:	b29a      	uxth	r2, r3
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	b29b      	uxth	r3, r3
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	b299      	uxth	r1, r3
 8001422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001424:	b29b      	uxth	r3, r3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	b29c      	uxth	r4, r3
 800142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142c:	b29a      	uxth	r2, r3
 800142e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001430:	b29b      	uxth	r3, r3
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b29b      	uxth	r3, r3
 8001436:	4622      	mov	r2, r4
 8001438:	f001 fe44 	bl	80030c4 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143e:	3301      	adds	r3, #1
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
 8001442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001444:	2b3f      	cmp	r3, #63	; 0x3f
 8001446:	d9cf      	bls.n	80013e8 <MEAS_show_data+0x32c>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 4 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001448:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800144c:	f001 fcc4 	bl	8002dd8 <BSP_LCD_SetTextColor>
    data = Samples[3] / f;
 8001450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001452:	330c      	adds	r3, #12
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	657b      	str	r3, [r7, #84]	; 0x54
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800145e:	2300      	movs	r3, #0
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
 8001462:	e02c      	b.n	80014be <MEAS_show_data+0x402>
        data_last = data;
 8001464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
        data = (Samples[4 * i + 3]) / f;
 8001468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	330c      	adds	r3, #12
 800146e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001470:	4413      	add	r3, r2
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	657b      	str	r3, [r7, #84]	; 0x54
        if (data > Y_OFFSET) {
 800147c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800147e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001480:	429a      	cmp	r2, r3
 8001482:	d901      	bls.n	8001488 <MEAS_show_data+0x3cc>
            data = Y_OFFSET;
 8001484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001486:	657b      	str	r3, [r7, #84]	; 0x54
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148a:	3b01      	subs	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	b298      	uxth	r0, r3
 8001492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001494:	b29a      	uxth	r2, r3
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001498:	b29b      	uxth	r3, r3
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	b299      	uxth	r1, r3
 800149e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	b29c      	uxth	r4, r3
 80014a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4622      	mov	r2, r4
 80014b4:	f001 fe06 	bl	80030c4 <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80014b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ba:	3301      	adds	r3, #1
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
 80014be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c0:	2b3f      	cmp	r3, #63	; 0x3f
 80014c2:	d9cf      	bls.n	8001464 <MEAS_show_data+0x3a8>
                         Y_OFFSET - data);
    }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	375c      	adds	r7, #92	; 0x5c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop

080014d0 <TIM3_IRQHandler>:
 *
 * This function is called when the update interrupt flag of TIM3 is set.
 * It clears the update interrupt flag and calls the MEAS_show_data() function
 * to output data to the display.
 */
void TIM3_IRQHandler(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {  // check if update interrupt flag is set
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <TIM3_IRQHandler+0x24>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <TIM3_IRQHandler+0x20>
        TIM3->SR &= ~TIM_SR_UIF;  // clear update interrupt flag
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <TIM3_IRQHandler+0x24>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <TIM3_IRQHandler+0x24>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6113      	str	r3, [r2, #16]
        MEAS_show_data();         // output data to display
 80014ec:	f7ff fde6 	bl	80010bc <MEAS_show_data>
    }
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40000400 	.word	0x40000400

080014f8 <DISP_info_screen>:
 * @brief Displays the info screen
 * @param[in] type	Actual menu type
 *
 * Displays the title and information on each screen.
 *****************************************************************************/
void DISP_info_screen(MENU_type_t type) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_Clear(LCD_COLOR_WHITE);  // Clear display
 8001502:	f04f 30ff 	mov.w	r0, #4294967295
 8001506:	f001 fcb3 	bl	8002e70 <BSP_LCD_Clear>
    MENU_draw(type);                 // Draw the home menu
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f85f 	bl	80015d0 <MENU_draw>

    switch (type) {
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b07      	cmp	r3, #7
 8001516:	d847      	bhi.n	80015a8 <DISP_info_screen+0xb0>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <DISP_info_screen+0x28>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001541 	.word	0x08001541
 8001524:	08001555 	.word	0x08001555
 8001528:	08001563 	.word	0x08001563
 800152c:	08001571 	.word	0x08001571
 8001530:	0800157f 	.word	0x0800157f
 8001534:	0800158d 	.word	0x0800158d
 8001538:	0800159b 	.word	0x0800159b
 800153c:	0800154f 	.word	0x0800154f
        case MENU_HOME:
            /* Show info home */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: HOME", LEFT_MODE);
 8001540:	2303      	movs	r3, #3
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <DISP_info_screen+0xbc>)
 8001544:	213c      	movs	r1, #60	; 0x3c
 8001546:	2005      	movs	r0, #5
 8001548:	f001 fcfe 	bl	8002f48 <BSP_LCD_DisplayStringAt>
            break;
 800154c:	e02d      	b.n	80015aa <DISP_info_screen+0xb2>

        case MENU_INFO:
            /* Show info info */
            MENU_Info();
 800154e:	f000 f903 	bl	8001758 <MENU_Info>
            break;
 8001552:	e02a      	b.n	80015aa <DISP_info_screen+0xb2>

        case MENU_M:
            /* Show measurement menu */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Measurement",
 8001554:	2303      	movs	r3, #3
 8001556:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <DISP_info_screen+0xc0>)
 8001558:	213c      	movs	r1, #60	; 0x3c
 800155a:	2005      	movs	r0, #5
 800155c:	f001 fcf4 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);

            
            // MENU_Measurements();
            break;
 8001560:	e023      	b.n	80015aa <DISP_info_screen+0xb2>

        case MENU_M_SI:
            /* Show info single meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. Single",
 8001562:	2303      	movs	r3, #3
 8001564:	4a15      	ldr	r2, [pc, #84]	; (80015bc <DISP_info_screen+0xc4>)
 8001566:	213c      	movs	r1, #60	; 0x3c
 8001568:	2005      	movs	r0, #5
 800156a:	f001 fced 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Single Meas.");
            break;
 800156e:	e01c      	b.n	80015aa <DISP_info_screen+0xb2>
        case MENU_M_AC:
            /* Show info accurate meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. acc",
 8001570:	2303      	movs	r3, #3
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <DISP_info_screen+0xc8>)
 8001574:	213c      	movs	r1, #60	; 0x3c
 8001576:	2005      	movs	r0, #5
 8001578:	f001 fce6 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Accurate Meas.");
            break;
 800157c:	e015      	b.n	80015aa <DISP_info_screen+0xb2>
        case MENU_CALI:
            /* Show info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: calibration",
 800157e:	2303      	movs	r3, #3
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <DISP_info_screen+0xcc>)
 8001582:	213c      	movs	r1, #60	; 0x3c
 8001584:	2005      	movs	r0, #5
 8001586:	f001 fcdf 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // MENU_Calibrations();
            // DISP_info_calibration();
            break;
 800158a:	e00e      	b.n	80015aa <DISP_info_screen+0xb2>
        case MENU_C_CO:
            /* Show coil info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali coil",
 800158c:	2303      	movs	r3, #3
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <DISP_info_screen+0xd0>)
 8001590:	213c      	movs	r1, #60	; 0x3c
 8001592:	2005      	movs	r0, #5
 8001594:	f001 fcd8 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_coil();
            break;
 8001598:	e007      	b.n	80015aa <DISP_info_screen+0xb2>
        case MENU_C_PA:
            /* Show pad info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali pad",
 800159a:	2303      	movs	r3, #3
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <DISP_info_screen+0xd4>)
 800159e:	213c      	movs	r1, #60	; 0x3c
 80015a0:	2005      	movs	r0, #5
 80015a2:	f001 fcd1 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_pad();
            break;
 80015a6:	e000      	b.n	80015aa <DISP_info_screen+0xb2>
        default:
            /* Should never occur */
            break;
 80015a8:	bf00      	nop
    }
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	08009d64 	.word	0x08009d64
 80015b8:	08009d70 	.word	0x08009d70
 80015bc:	08009d84 	.word	0x08009d84
 80015c0:	08009d98 	.word	0x08009d98
 80015c4:	08009da8 	.word	0x08009da8
 80015c8:	08009dbc 	.word	0x08009dbc
 80015cc:	08009dcc 	.word	0x08009dcc

080015d0 <MENU_draw>:
 *
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(MENU_type_t type) {
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_SetFont(MENU_FONT);
 80015da:	485c      	ldr	r0, [pc, #368]	; (800174c <MENU_draw+0x17c>)
 80015dc:	f001 fc2e 	bl	8002e3c <BSP_LCD_SetFont>
    uint32_t x, y, m, w, h, offset;
    y = MENU_Y;
 80015e0:	f001 fb7a 	bl	8002cd8 <BSP_LCD_GetYSize>
 80015e4:	4603      	mov	r3, r0
 80015e6:	3b28      	subs	r3, #40	; 0x28
 80015e8:	61fb      	str	r3, [r7, #28]
    m = MENU_MARGIN;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    w = BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM;
 80015ee:	f001 fb67 	bl	8002cc0 <BSP_LCD_GetXSize>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a56      	ldr	r2, [pc, #344]	; (8001750 <MENU_draw+0x180>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
    h = MENU_HEIGHT;
 80015fe:	2328      	movs	r3, #40	; 0x28
 8001600:	613b      	str	r3, [r7, #16]
    offset = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    if (type < MENU_NUM_OF_DIFF_MENU) {
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d804      	bhi.n	8001616 <MENU_draw+0x46>
        offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the menu
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
 800161a:	e08e      	b.n	800173a <MENU_draw+0x16a>
        x = i * w;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
        BSP_LCD_SetTextColor(MENU_entry[i + offset].back_color);
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	441a      	add	r2, r3
 800162c:	4949      	ldr	r1, [pc, #292]	; (8001754 <MENU_draw+0x184>)
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3324      	adds	r3, #36	; 0x24
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f001 fbcb 	bl	8002dd8 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(x + m, y + m, w - 2 * m, h - 2 * m);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	b29a      	uxth	r2, r3
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4413      	add	r3, r2
 800164c:	b298      	uxth	r0, r3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	b29a      	uxth	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	b299      	uxth	r1, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	b29a      	uxth	r2, r3
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	b29b      	uxth	r3, r3
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b29c      	uxth	r4, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	b29a      	uxth	r2, r3
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	b29b      	uxth	r3, r3
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	b29b      	uxth	r3, r3
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	4622      	mov	r2, r4
 800167c:	f001 fdec 	bl	8003258 <BSP_LCD_FillRect>
        BSP_LCD_SetBackColor(MENU_entry[i + offset].back_color);
 8001680:	6a3a      	ldr	r2, [r7, #32]
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	441a      	add	r2, r3
 8001686:	4933      	ldr	r1, [pc, #204]	; (8001754 <MENU_draw+0x184>)
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	3324      	adds	r3, #36	; 0x24
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fbb6 	bl	8002e08 <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(MENU_entry[i + offset].text_color);
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	441a      	add	r2, r3
 80016a2:	492c      	ldr	r1, [pc, #176]	; (8001754 <MENU_draw+0x184>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3320      	adds	r3, #32
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fb90 	bl	8002dd8 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	0052      	lsls	r2, r2, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b298      	uxth	r0, r3
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	0052      	lsls	r2, r2, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line1,
 80016e0:	6a3a      	ldr	r2, [r7, #32]
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	441a      	add	r2, r3
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4a19      	ldr	r2, [pc, #100]	; (8001754 <MENU_draw+0x184>)
 80016f0:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 80016f2:	2303      	movs	r3, #3
 80016f4:	f001 fc28 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                                LEFT_MODE);
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	0052      	lsls	r2, r2, #1
 8001700:	4413      	add	r3, r2
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4413      	add	r3, r2
 800170a:	b298      	uxth	r0, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4413      	add	r3, r2
 8001718:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line2,
 800171a:	6a3a      	ldr	r2, [r7, #32]
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	441a      	add	r2, r3
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	3310      	adds	r3, #16
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <MENU_draw+0x184>)
 800172c:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 800172e:	2303      	movs	r3, #3
 8001730:	f001 fc0a 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	3301      	adds	r3, #1
 8001738:	623b      	str	r3, [r7, #32]
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	2b02      	cmp	r3, #2
 800173e:	f67f af6d 	bls.w	800161c <MENU_draw+0x4c>
                                LEFT_MODE);
    }
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	372c      	adds	r7, #44	; 0x2c
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	20000364 	.word	0x20000364
 8001750:	aaaaaaab 	.word	0xaaaaaaab
 8001754:	20000004 	.word	0x20000004

08001758 <MENU_Info>:

/** ***************************************************************************
 * @brief Show some information about the Cable-Monitor.
 *
 *****************************************************************************/
void MENU_Info(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f001 fb52 	bl	8002e08 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001764:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001768:	f001 fb36 	bl	8002dd8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800176c:	4829      	ldr	r0, [pc, #164]	; (8001814 <MENU_Info+0xbc>)
 800176e:	f001 fb65 	bl	8002e3c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Cable-Monitor", CENTER_MODE);
 8001772:	2301      	movs	r3, #1
 8001774:	4a28      	ldr	r2, [pc, #160]	; (8001818 <MENU_Info+0xc0>)
 8001776:	210a      	movs	r1, #10
 8001778:	2000      	movs	r0, #0
 800177a:	f001 fbe5 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font12);
 800177e:	4827      	ldr	r0, [pc, #156]	; (800181c <MENU_Info+0xc4>)
 8001780:	f001 fb5c 	bl	8002e3c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"by Alejandro & Timo",
 8001784:	2301      	movs	r3, #1
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <MENU_Info+0xc8>)
 8001788:	211e      	movs	r1, #30
 800178a:	2000      	movs	r0, #0
 800178c:	f001 fbdc 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
 8001790:	4824      	ldr	r0, [pc, #144]	; (8001824 <MENU_Info+0xcc>)
 8001792:	f001 fb53 	bl	8002e3c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"1. Touch a menu item", LEFT_MODE);
 8001796:	2303      	movs	r3, #3
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <MENU_Info+0xd0>)
 800179a:	213c      	movs	r1, #60	; 0x3c
 800179c:	2005      	movs	r0, #5
 800179e:	f001 fbd3 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 80, (uint8_t*)"to start a cable", LEFT_MODE);
 80017a2:	2303      	movs	r3, #3
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <MENU_Info+0xd4>)
 80017a6:	2150      	movs	r1, #80	; 0x50
 80017a8:	2005      	movs	r0, #5
 80017aa:	f001 fbcd 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 100, (uint8_t*)"measurement:", LEFT_MODE);
 80017ae:	2303      	movs	r3, #3
 80017b0:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <MENU_Info+0xd8>)
 80017b2:	2164      	movs	r1, #100	; 0x64
 80017b4:	2005      	movs	r0, #5
 80017b6:	f001 fbc7 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 120, (uint8_t*)"Single or Accurate.", LEFT_MODE);
 80017ba:	2303      	movs	r3, #3
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <MENU_Info+0xdc>)
 80017be:	2178      	movs	r1, #120	; 0x78
 80017c0:	2005      	movs	r0, #5
 80017c2:	f001 fbc1 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 150, (uint8_t*)"Version: 01.00", LEFT_MODE);
 80017c6:	2303      	movs	r3, #3
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <MENU_Info+0xe0>)
 80017ca:	2196      	movs	r1, #150	; 0x96
 80017cc:	2005      	movs	r0, #5
 80017ce:	f001 fbbb 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 170, (uint8_t*)"Data: 17.12.2023", LEFT_MODE);
 80017d2:	2303      	movs	r3, #3
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <MENU_Info+0xe4>)
 80017d6:	21aa      	movs	r1, #170	; 0xaa
 80017d8:	2005      	movs	r0, #5
 80017da:	f001 fbb5 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 190, (uint8_t*)"Authors: Horvat, Wey",
 80017de:	2303      	movs	r3, #3
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <MENU_Info+0xe8>)
 80017e2:	21be      	movs	r1, #190	; 0xbe
 80017e4:	2005      	movs	r0, #5
 80017e6:	f001 fbaf 	bl	8002f48 <BSP_LCD_DisplayStringAt>
                            LEFT_MODE);
    BSP_LCD_DisplayStringAt(5, 210, (uint8_t*)"Modul: ET.PM3 ZHAW", LEFT_MODE);
 80017ea:	2303      	movs	r3, #3
 80017ec:	4a15      	ldr	r2, [pc, #84]	; (8001844 <MENU_Info+0xec>)
 80017ee:	21d2      	movs	r1, #210	; 0xd2
 80017f0:	2005      	movs	r0, #5
 80017f2:	f001 fba9 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 230, (uint8_t*)"Lecturers: Matic &", LEFT_MODE);
 80017f6:	2303      	movs	r3, #3
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <MENU_Info+0xf0>)
 80017fa:	21e6      	movs	r1, #230	; 0xe6
 80017fc:	2005      	movs	r0, #5
 80017fe:	f001 fba3 	bl	8002f48 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 250, (uint8_t*)"Ehrensperger", LEFT_MODE);
 8001802:	2303      	movs	r3, #3
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <MENU_Info+0xf4>)
 8001806:	21fa      	movs	r1, #250	; 0xfa
 8001808:	2005      	movs	r0, #5
 800180a:	f001 fb9d 	bl	8002f48 <BSP_LCD_DisplayStringAt>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000034c 	.word	0x2000034c
 8001818:	08009ddc 	.word	0x08009ddc
 800181c:	20000364 	.word	0x20000364
 8001820:	08009dec 	.word	0x08009dec
 8001824:	2000035c 	.word	0x2000035c
 8001828:	08009e00 	.word	0x08009e00
 800182c:	08009e18 	.word	0x08009e18
 8001830:	08009e2c 	.word	0x08009e2c
 8001834:	08009e3c 	.word	0x08009e3c
 8001838:	08009e50 	.word	0x08009e50
 800183c:	08009e60 	.word	0x08009e60
 8001840:	08009e74 	.word	0x08009e74
 8001844:	08009e8c 	.word	0x08009e8c
 8001848:	08009ea0 	.word	0x08009ea0
 800184c:	08009eb4 	.word	0x08009eb4

08001850 <MENU_check_transition>:
 * the variable MENU_transition is set to the touched item.
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
static void MENU_check_transition(MENU_type_t type) {
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
    static MENU_item_t item_old = MENU_NONE;
    static MENU_item_t item_new = MENU_NONE;
    static TS_StateTypeDef TS_State;  // State of the touch controller
    uint32_t offset = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
    BSP_TS_GetState(&TS_State);  // Get the state
 800185e:	482d      	ldr	r0, [pc, #180]	; (8001914 <MENU_check_transition+0xc4>)
 8001860:	f002 f9b0 	bl	8003bc4 <BSP_TS_GetState>
#ifdef EVAL_REV_E
    /* Evalboard revision E (blue) has an inverted y-axis in the touch
     * controller */
    TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;  // Invert the y-axis
 8001864:	f001 fa38 	bl	8002cd8 <BSP_LCD_GetYSize>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <MENU_check_transition+0xc4>)
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <MENU_check_transition+0xc4>)
 8001876:	809a      	strh	r2, [r3, #4]
#endif
    if (TS_State.TouchDetected) {  // If a touch was detected
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MENU_check_transition+0xc4>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d045      	beq.n	800190c <MENU_check_transition+0xbc>
        /* Do only if last transition not pending anymore */
        if (MENU_NONE == MENU_transition) {
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MENU_check_transition+0xc8>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b15      	cmp	r3, #21
 8001886:	d141      	bne.n	800190c <MENU_check_transition+0xbc>
            item_old = item_new;  // Store old item
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <MENU_check_transition+0xcc>)
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MENU_check_transition+0xd0>)
 800188e:	701a      	strb	r2, [r3, #0]
            /* If touched within the menu bar? */
            if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8001890:	f001 fa22 	bl	8002cd8 <BSP_LCD_GetYSize>
 8001894:	4603      	mov	r3, r0
 8001896:	3b28      	subs	r3, #40	; 0x28
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <MENU_check_transition+0xc4>)
 800189a:	8892      	ldrh	r2, [r2, #4]
 800189c:	4293      	cmp	r3, r2
 800189e:	d235      	bcs.n	800190c <MENU_check_transition+0xbc>
 80018a0:	f001 fa1a 	bl	8002cd8 <BSP_LCD_GetYSize>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <MENU_check_transition+0xc4>)
 80018a8:	8892      	ldrh	r2, [r2, #4]
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d92e      	bls.n	800190c <MENU_check_transition+0xbc>
                if (type < MENU_NUM_OF_DIFF_MENU) {
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d804      	bhi.n	80018be <MENU_check_transition+0x6e>
                    offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
                                                            // menu
                }
                item_new = (TS_State.X  // Calculate new item
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MENU_check_transition+0xc4>)
 80018c0:	885b      	ldrh	r3, [r3, #2]
 80018c2:	461c      	mov	r4, r3
                            / (BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM)) +
 80018c4:	f001 f9fc 	bl	8002cc0 <BSP_LCD_GetXSize>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <MENU_check_transition+0xd4>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b2da      	uxtb	r2, r3
                item_new = (TS_State.X  // Calculate new item
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MENU_check_transition+0xcc>)
 80018e2:	701a      	strb	r2, [r3, #0]
                           offset;
                if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <MENU_check_transition+0xcc>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b11      	cmp	r3, #17
 80018ea:	d902      	bls.n	80018f2 <MENU_check_transition+0xa2>
                    item_new = MENU_NONE;  // Out of bounds
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MENU_check_transition+0xcc>)
 80018ee:	2215      	movs	r2, #21
 80018f0:	701a      	strb	r2, [r3, #0]
                }
                if (item_new == item_old) {  // 2 times the same menu item
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MENU_check_transition+0xcc>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MENU_check_transition+0xd0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d106      	bne.n	800190c <MENU_check_transition+0xbc>
                    item_new = MENU_NONE;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <MENU_check_transition+0xcc>)
 8001900:	2215      	movs	r2, #21
 8001902:	701a      	strb	r2, [r3, #0]
                    MENU_transition = item_old;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MENU_check_transition+0xd0>)
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <MENU_check_transition+0xc8>)
 800190a:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	200007e8 	.word	0x200007e8
 8001918:	20000000 	.word	0x20000000
 800191c:	200002d4 	.word	0x200002d4
 8001920:	200002d5 	.word	0x200002d5
 8001924:	aaaaaaab 	.word	0xaaaaaaab

08001928 <EXTI15_10_IRQHandler>:
 * @n Call MENU_check_transition() from the while loop in main for polling.
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR15) {   // Check if interrupt on touchscreen
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <EXTI15_10_IRQHandler+0x40>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d015      	beq.n	8001964 <EXTI15_10_IRQHandler+0x3c>
        EXTI->PR |= EXTI_PR_PR15;    // Clear pending interrupt on line 15
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <EXTI15_10_IRQHandler+0x40>)
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <EXTI15_10_IRQHandler+0x40>)
 800193e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001942:	6153      	str	r3, [r2, #20]
        if (BSP_TS_ITGetStatus()) {  // Get interrupt status
 8001944:	f002 f932 	bl	8003bac <BSP_TS_ITGetStatus>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <EXTI15_10_IRQHandler+0x30>
            BSP_TS_ITClear();        // Clear touchscreen controller int.
 800194e:	f002 f9eb 	bl	8003d28 <BSP_TS_ITClear>
            MENU_check_transition(MENU_NONE);
 8001952:	2015      	movs	r0, #21
 8001954:	f7ff ff7c 	bl	8001850 <MENU_check_transition>
        }
        EXTI->PR |= EXTI_PR_PR15;  // Clear pending interrupt on line 15
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <EXTI15_10_IRQHandler+0x40>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	4a02      	ldr	r2, [pc, #8]	; (8001968 <EXTI15_10_IRQHandler+0x40>)
 800195e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001962:	6153      	str	r3, [r2, #20]
    }
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40013c00 	.word	0x40013c00

0800196c <__NVIC_EnableIRQ>:
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_ClearPendingIRQ>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0c      	blt.n	80019d4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_ClearPendingIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	3360      	adds	r3, #96	; 0x60
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <PB_init+0x38>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <PB_init+0x38>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <PB_init+0x38>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <PB_init+0x3c>)
 8001a08:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <PB_init+0x3c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <PB_enableIRQ+0x58>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <PB_enableIRQ+0x58>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <PB_enableIRQ+0x58>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <PB_enableIRQ+0x5c>)
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <PB_enableIRQ+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <PB_enableIRQ+0x60>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <PB_enableIRQ+0x60>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <PB_enableIRQ+0x60>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <PB_enableIRQ+0x60>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001a66:	2006      	movs	r0, #6
 8001a68:	f7ff ff9e 	bl	80019a8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001a6c:	2006      	movs	r0, #6
 8001a6e:	f7ff ff7d 	bl	800196c <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <EXTI0_IRQHandler+0x2c>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <EXTI0_IRQHandler+0x2c>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <EXTI0_IRQHandler+0x2c>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <EXTI0_IRQHandler+0x30>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
	}
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40013c00 	.word	0x40013c00
 8001ab8:	200007f0 	.word	0x200007f0

08001abc <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001b10:	f002 f970 	bl	8003df4 <HAL_IncTick>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <SystemInit+0x60>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <SystemInit+0x60>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <SystemInit+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <SystemInit+0x64>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <SystemInit+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <SystemInit+0x64>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <SystemInit+0x64>)
 8001b44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <SystemInit+0x64>)
 8001b50:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <SystemInit+0x68>)
 8001b52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <SystemInit+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <SystemInit+0x64>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SystemInit+0x60>)
 8001b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6c:	609a      	str	r2, [r3, #8]
#endif
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	24003010 	.word	0x24003010

08001b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bbc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b8a:	e003      	b.n	8001b94 <LoopCopyDataInit>

08001b8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b92:	3104      	adds	r1, #4

08001b94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b9c:	d3f6      	bcc.n	8001b8c <CopyDataInit>
  ldr  r2, =_sbss
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ba0:	e002      	b.n	8001ba8 <LoopFillZerobss>

08001ba2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ba2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba4:	f842 3b04 	str.w	r3, [r2], #4

08001ba8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001baa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bac:	d3f9      	bcc.n	8001ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bae:	f7ff ffb3 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f007 fbc3 	bl	800933c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb6:	f7fe fea9 	bl	800090c <main>
  bx  lr    
 8001bba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bbc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001bc0:	08020d90 	.word	0x08020d90
  ldr  r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bc8:	200003c8 	.word	0x200003c8
  ldr  r2, =_sbss
 8001bcc:	200003c8 	.word	0x200003c8
  ldr  r3, = _ebss
 8001bd0:	20000c04 	.word	0x20000c04

08001bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC_IRQHandler>

08001bd6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001bda:	f000 feb9 	bl	8002950 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001bde:	20ca      	movs	r0, #202	; 0xca
 8001be0:	f000 f95d 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001be4:	20c3      	movs	r0, #195	; 0xc3
 8001be6:	f000 f967 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001bea:	2008      	movs	r0, #8
 8001bec:	f000 f964 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001bf0:	2050      	movs	r0, #80	; 0x50
 8001bf2:	f000 f961 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001bf6:	20cf      	movs	r0, #207	; 0xcf
 8001bf8:	f000 f951 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 f95b 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001c02:	20c1      	movs	r0, #193	; 0xc1
 8001c04:	f000 f958 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001c08:	2030      	movs	r0, #48	; 0x30
 8001c0a:	f000 f955 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001c0e:	20ed      	movs	r0, #237	; 0xed
 8001c10:	f000 f945 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f000 f94f 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	f000 f94c 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001c20:	2012      	movs	r0, #18
 8001c22:	f000 f949 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001c26:	2081      	movs	r0, #129	; 0x81
 8001c28:	f000 f946 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001c2c:	20e8      	movs	r0, #232	; 0xe8
 8001c2e:	f000 f936 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001c32:	2085      	movs	r0, #133	; 0x85
 8001c34:	f000 f940 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 f93d 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001c3e:	2078      	movs	r0, #120	; 0x78
 8001c40:	f000 f93a 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001c44:	20cb      	movs	r0, #203	; 0xcb
 8001c46:	f000 f92a 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001c4a:	2039      	movs	r0, #57	; 0x39
 8001c4c:	f000 f934 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001c50:	202c      	movs	r0, #44	; 0x2c
 8001c52:	f000 f931 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 f92e 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001c5c:	2034      	movs	r0, #52	; 0x34
 8001c5e:	f000 f92b 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001c62:	2002      	movs	r0, #2
 8001c64:	f000 f928 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001c68:	20f7      	movs	r0, #247	; 0xf7
 8001c6a:	f000 f918 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001c6e:	2020      	movs	r0, #32
 8001c70:	f000 f922 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001c74:	20ea      	movs	r0, #234	; 0xea
 8001c76:	f000 f912 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f91c 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 f919 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001c86:	20b1      	movs	r0, #177	; 0xb1
 8001c88:	f000 f909 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 f913 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c92:	201b      	movs	r0, #27
 8001c94:	f000 f910 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001c98:	20b6      	movs	r0, #182	; 0xb6
 8001c9a:	f000 f900 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f000 f90a 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001ca4:	20a2      	movs	r0, #162	; 0xa2
 8001ca6:	f000 f907 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001caa:	20c0      	movs	r0, #192	; 0xc0
 8001cac:	f000 f8f7 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001cb0:	2010      	movs	r0, #16
 8001cb2:	f000 f901 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001cb6:	20c1      	movs	r0, #193	; 0xc1
 8001cb8:	f000 f8f1 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f000 f8fb 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001cc2:	20c5      	movs	r0, #197	; 0xc5
 8001cc4:	f000 f8eb 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001cc8:	2045      	movs	r0, #69	; 0x45
 8001cca:	f000 f8f5 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001cce:	2015      	movs	r0, #21
 8001cd0:	f000 f8f2 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001cd4:	20c7      	movs	r0, #199	; 0xc7
 8001cd6:	f000 f8e2 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001cda:	2090      	movs	r0, #144	; 0x90
 8001cdc:	f000 f8ec 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001ce0:	2036      	movs	r0, #54	; 0x36
 8001ce2:	f000 f8dc 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001ce6:	20c8      	movs	r0, #200	; 0xc8
 8001ce8:	f000 f8e6 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001cec:	20f2      	movs	r0, #242	; 0xf2
 8001cee:	f000 f8d6 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f8e0 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001cf8:	20b0      	movs	r0, #176	; 0xb0
 8001cfa:	f000 f8d0 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001cfe:	20c2      	movs	r0, #194	; 0xc2
 8001d00:	f000 f8da 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d04:	20b6      	movs	r0, #182	; 0xb6
 8001d06:	f000 f8ca 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d0a:	200a      	movs	r0, #10
 8001d0c:	f000 f8d4 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001d10:	20a7      	movs	r0, #167	; 0xa7
 8001d12:	f000 f8d1 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001d16:	2027      	movs	r0, #39	; 0x27
 8001d18:	f000 f8ce 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001d1c:	2004      	movs	r0, #4
 8001d1e:	f000 f8cb 	bl	8001eb8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001d22:	202a      	movs	r0, #42	; 0x2a
 8001d24:	f000 f8bb 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 f8c5 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f8c2 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f000 f8bf 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001d3a:	20ef      	movs	r0, #239	; 0xef
 8001d3c:	f000 f8bc 	bl	8001eb8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001d40:	202b      	movs	r0, #43	; 0x2b
 8001d42:	f000 f8ac 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f8b6 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f8b3 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f000 f8b0 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001d58:	203f      	movs	r0, #63	; 0x3f
 8001d5a:	f000 f8ad 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001d5e:	20f6      	movs	r0, #246	; 0xf6
 8001d60:	f000 f89d 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f000 f8a7 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f8a4 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001d70:	2006      	movs	r0, #6
 8001d72:	f000 f8a1 	bl	8001eb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001d76:	202c      	movs	r0, #44	; 0x2c
 8001d78:	f000 f891 	bl	8001e9e <ili9341_WriteReg>
  LCD_Delay(200);
 8001d7c:	20c8      	movs	r0, #200	; 0xc8
 8001d7e:	f000 fed5 	bl	8002b2c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001d82:	2026      	movs	r0, #38	; 0x26
 8001d84:	f000 f88b 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f000 f895 	bl	8001eb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001d8e:	20e0      	movs	r0, #224	; 0xe0
 8001d90:	f000 f885 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001d94:	200f      	movs	r0, #15
 8001d96:	f000 f88f 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001d9a:	2029      	movs	r0, #41	; 0x29
 8001d9c:	f000 f88c 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001da0:	2024      	movs	r0, #36	; 0x24
 8001da2:	f000 f889 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001da6:	200c      	movs	r0, #12
 8001da8:	f000 f886 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001dac:	200e      	movs	r0, #14
 8001dae:	f000 f883 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001db2:	2009      	movs	r0, #9
 8001db4:	f000 f880 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001db8:	204e      	movs	r0, #78	; 0x4e
 8001dba:	f000 f87d 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001dbe:	2078      	movs	r0, #120	; 0x78
 8001dc0:	f000 f87a 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001dc4:	203c      	movs	r0, #60	; 0x3c
 8001dc6:	f000 f877 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001dca:	2009      	movs	r0, #9
 8001dcc:	f000 f874 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001dd0:	2013      	movs	r0, #19
 8001dd2:	f000 f871 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001dd6:	2005      	movs	r0, #5
 8001dd8:	f000 f86e 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001ddc:	2017      	movs	r0, #23
 8001dde:	f000 f86b 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001de2:	2011      	movs	r0, #17
 8001de4:	f000 f868 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f000 f865 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001dee:	20e1      	movs	r0, #225	; 0xe1
 8001df0:	f000 f855 	bl	8001e9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f85f 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001dfa:	2016      	movs	r0, #22
 8001dfc:	f000 f85c 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001e00:	201b      	movs	r0, #27
 8001e02:	f000 f859 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e06:	2004      	movs	r0, #4
 8001e08:	f000 f856 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001e0c:	2011      	movs	r0, #17
 8001e0e:	f000 f853 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001e12:	2007      	movs	r0, #7
 8001e14:	f000 f850 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001e18:	2031      	movs	r0, #49	; 0x31
 8001e1a:	f000 f84d 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001e1e:	2033      	movs	r0, #51	; 0x33
 8001e20:	f000 f84a 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001e24:	2042      	movs	r0, #66	; 0x42
 8001e26:	f000 f847 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e2a:	2005      	movs	r0, #5
 8001e2c:	f000 f844 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e30:	200c      	movs	r0, #12
 8001e32:	f000 f841 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001e36:	200a      	movs	r0, #10
 8001e38:	f000 f83e 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001e3c:	2028      	movs	r0, #40	; 0x28
 8001e3e:	f000 f83b 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001e42:	202f      	movs	r0, #47	; 0x2f
 8001e44:	f000 f838 	bl	8001eb8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001e48:	200f      	movs	r0, #15
 8001e4a:	f000 f835 	bl	8001eb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001e4e:	2011      	movs	r0, #17
 8001e50:	f000 f825 	bl	8001e9e <ili9341_WriteReg>
  LCD_Delay(200);
 8001e54:	20c8      	movs	r0, #200	; 0xc8
 8001e56:	f000 fe69 	bl	8002b2c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e5a:	2029      	movs	r0, #41	; 0x29
 8001e5c:	f000 f81f 	bl	8001e9e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001e60:	202c      	movs	r0, #44	; 0x2c
 8001e62:	f000 f81c 	bl	8001e9e <ili9341_WriteReg>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001e6e:	f000 fd6f 	bl	8002950 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001e72:	2103      	movs	r1, #3
 8001e74:	20d3      	movs	r0, #211	; 0xd3
 8001e76:	f000 f82c 	bl	8001ed2 <ili9341_ReadData>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29b      	uxth	r3, r3
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e86:	2029      	movs	r0, #41	; 0x29
 8001e88:	f000 f809 	bl	8001e9e <ili9341_WriteReg>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001e94:	2028      	movs	r0, #40	; 0x28
 8001e96:	f000 f802 	bl	8001e9e <ili9341_WriteReg>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fdea 	bl	8002a84 <LCD_IO_WriteReg>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fdbb 	bl	8002a40 <LCD_IO_WriteData>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	460a      	mov	r2, r1
 8001edc:	80fb      	strh	r3, [r7, #6]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001ee2:	797a      	ldrb	r2, [r7, #5]
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fded 	bl	8002ac8 <LCD_IO_ReadData>
 8001eee:	4603      	mov	r3, r0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001efc:	23f0      	movs	r3, #240	; 0xf0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001f0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fa59 	bl	80023e0 <stmpe811_GetInstance>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	d112      	bne.n	8001f5e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 fa51 	bl	80023e0 <stmpe811_GetInstance>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d80a      	bhi.n	8001f5e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	88fa      	ldrh	r2, [r7, #6]
 8001f4c:	b2d1      	uxtb	r1, r2
 8001f4e:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <stmpe811_Init+0x4c>)
 8001f50:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001f52:	f000 fdf6 	bl	8002b42 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f807 	bl	8001f6c <stmpe811_Reset>
    }
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200007f4 	.word	0x200007f4

08001f6c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fdeb 	bl	8002b5a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001f84:	200a      	movs	r0, #10
 8001f86:	f000 fe25 	bl	8002bd4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2103      	movs	r1, #3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fde1 	bl	8002b5a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f000 fe1b 	bl	8002bd4 <IOE_Delay>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001fa6:	b590      	push	{r4, r7, lr}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001fb0:	f000 fdc7 	bl	8002b42 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fde0 	bl	8002b80 <IOE_Read>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fdd7 	bl	8002b80 <IOE_Read>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001fd6:	4323      	orrs	r3, r4
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	b29b      	uxth	r3, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}

08001fe4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2109      	movs	r1, #9
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fdc1 	bl	8002b80 <IOE_Read>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	2109      	movs	r1, #9
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fda1 	bl	8002b5a <IOE_Write>
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2109      	movs	r1, #9
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fda3 	bl	8002b80 <IOE_Read>
 800203a:	4603      	mov	r3, r0
 800203c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	2109      	movs	r1, #9
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd83 	bl	8002b5a <IOE_Write>
    
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	460a      	mov	r2, r1
 8002066:	80fb      	strh	r3, [r7, #6]
 8002068:	4613      	mov	r3, r2
 800206a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	210a      	movs	r1, #10
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fd82 	bl	8002b80 <IOE_Read>
 800207c:	4603      	mov	r3, r0
 800207e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	797b      	ldrb	r3, [r7, #5]
 8002084:	4313      	orrs	r3, r2
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	210a      	movs	r1, #10
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fd62 	bl	8002b5a <IOE_Write>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	460a      	mov	r2, r1
 80020a8:	80fb      	strh	r3, [r7, #6]
 80020aa:	4613      	mov	r3, r2
 80020ac:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	210a      	movs	r1, #10
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fd61 	bl	8002b80 <IOE_Read>
 80020be:	4603      	mov	r3, r0
 80020c0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80020c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	b25a      	sxtb	r2, r3
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4013      	ands	r3, r2
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	210a      	movs	r1, #10
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fd3c 	bl	8002b5a <IOE_Write>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	460a      	mov	r2, r1
 80020f4:	80fb      	strh	r3, [r7, #6]
 80020f6:	4613      	mov	r3, r2
 80020f8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	210b      	movs	r1, #11
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fd3d 	bl	8002b80 <IOE_Read>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	4013      	ands	r3, r2
 800210e:	b2db      	uxtb	r3, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	460a      	mov	r2, r1
 8002122:	80fb      	strh	r3, [r7, #6]
 8002124:	4613      	mov	r3, r2
 8002126:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	797a      	ldrb	r2, [r7, #5]
 800212e:	210b      	movs	r1, #11
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fd12 	bl	8002b5a <IOE_Write>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	6039      	str	r1, [r7, #0]
 8002148:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2117      	movs	r1, #23
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fd13 	bl	8002b80 <IOE_Read>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b25b      	sxtb	r3, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	b25a      	sxtb	r2, r3
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4013      	ands	r3, r2
 800216c:	b25b      	sxtb	r3, r3
 800216e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	2117      	movs	r1, #23
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fcee 	bl	8002b5a <IOE_Write>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2104      	movs	r1, #4
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fcf2 	bl	8002b80 <IOE_Read>
 800219c:	4603      	mov	r3, r0
 800219e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	f023 0304 	bic.w	r3, r3, #4
 80021a6:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	2104      	movs	r1, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fcd2 	bl	8002b5a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	21f0      	movs	r1, #240	; 0xf0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ffbf 	bl	800213e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	2104      	movs	r1, #4
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fcc2 	bl	8002b5a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2249      	movs	r2, #73	; 0x49
 80021dc:	2120      	movs	r1, #32
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fcbb 	bl	8002b5a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80021e4:	2002      	movs	r0, #2
 80021e6:	f000 fcf5 	bl	8002bd4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2201      	movs	r2, #1
 80021f0:	2121      	movs	r1, #33	; 0x21
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fcb1 	bl	8002b5a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	229a      	movs	r2, #154	; 0x9a
 80021fe:	2141      	movs	r1, #65	; 0x41
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fcaa 	bl	8002b5a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2201      	movs	r2, #1
 800220c:	214a      	movs	r1, #74	; 0x4a
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fca3 	bl	8002b5a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2201      	movs	r2, #1
 800221a:	214b      	movs	r1, #75	; 0x4b
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fc9c 	bl	8002b5a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2200      	movs	r2, #0
 8002228:	214b      	movs	r1, #75	; 0x4b
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fc95 	bl	8002b5a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2201      	movs	r2, #1
 8002236:	2156      	movs	r1, #86	; 0x56
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fc8e 	bl	8002b5a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2201      	movs	r2, #1
 8002244:	2158      	movs	r1, #88	; 0x58
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fc87 	bl	8002b5a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2201      	movs	r2, #1
 8002252:	2140      	movs	r1, #64	; 0x40
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fc80 	bl	8002b5a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	210b      	movs	r1, #11
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fc79 	bl	8002b5a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002268:	2002      	movs	r0, #2
 800226a:	f000 fcb3 	bl	8002bd4 <IOE_Delay>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2140      	movs	r1, #64	; 0x40
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fc78 	bl	8002b80 <IOE_Read>
 8002290:	4603      	mov	r3, r0
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b80      	cmp	r3, #128	; 0x80
 8002298:	bf0c      	ite	eq
 800229a:	2301      	moveq	r3, #1
 800229c:	2300      	movne	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	214c      	movs	r1, #76	; 0x4c
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fc66 	bl	8002b80 <IOE_Read>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e00d      	b.n	80022dc <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2201      	movs	r2, #1
 80022c6:	214b      	movs	r1, #75	; 0x4b
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fc46 	bl	8002b5a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	214b      	movs	r1, #75	; 0x4b
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fc3f 	bl	8002b5a <IOE_Write>
  }
  
  return ret;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80022f4:	89fb      	ldrh	r3, [r7, #14]
 80022f6:	b2d8      	uxtb	r0, r3
 80022f8:	f107 0210 	add.w	r2, r7, #16
 80022fc:	2304      	movs	r3, #4
 80022fe:	21d7      	movs	r1, #215	; 0xd7
 8002300:	f000 fc51 	bl	8002ba6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002304:	7c3b      	ldrb	r3, [r7, #16]
 8002306:	061a      	lsls	r2, r3, #24
 8002308:	7c7b      	ldrb	r3, [r7, #17]
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431a      	orrs	r2, r3
 800230e:	7cbb      	ldrb	r3, [r7, #18]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4313      	orrs	r3, r2
 8002314:	7cfa      	ldrb	r2, [r7, #19]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	0d1b      	lsrs	r3, r3, #20
 800231e:	b29a      	uxth	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	b29b      	uxth	r3, r3
 800232a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2201      	movs	r2, #1
 800233a:	214b      	movs	r1, #75	; 0x4b
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fc0c 	bl	8002b5a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2200      	movs	r2, #0
 8002348:	214b      	movs	r1, #75	; 0x4b
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fc05 	bl	8002b5a <IOE_Write>
}
 8002350:	bf00      	nop
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002362:	f000 fbf4 	bl	8002b4e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	211f      	movs	r1, #31
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe76 	bl	800205c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fe36 	bl	8001fe4 <stmpe811_EnableGlobalIT>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe47 	bl	8002020 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	211f      	movs	r1, #31
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe81 	bl	800209e <stmpe811_DisableITSource>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	211f      	movs	r1, #31
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fe99 	bl	80020ea <stmpe811_ReadGITStatus>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	211f      	movs	r1, #31
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fea1 	bl	8002118 <stmpe811_ClearGlobalIT>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e00b      	b.n	800240c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <stmpe811_GetInstance+0x40>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d101      	bne.n	8002406 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	e006      	b.n	8002414 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	3301      	adds	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d9f0      	bls.n	80023f4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002412:	23ff      	movs	r3, #255	; 0xff
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	200007f4 	.word	0x200007f4

08002424 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10e      	bne.n	8002452 <BSP_LED_Init+0x2e>
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <BSP_LED_Init+0x9c>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <BSP_LED_Init+0x9c>)
 800243e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002442:	6313      	str	r3, [r2, #48]	; 0x30
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <BSP_LED_Init+0x9c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	e010      	b.n	8002474 <BSP_LED_Init+0x50>
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10d      	bne.n	8002474 <BSP_LED_Init+0x50>
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <BSP_LED_Init+0x9c>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <BSP_LED_Init+0x9c>)
 8002462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002466:	6313      	str	r3, [r2, #48]	; 0x30
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <BSP_LED_Init+0x9c>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <BSP_LED_Init+0xa0>)
 8002478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002486:	2302      	movs	r3, #2
 8002488:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <BSP_LED_Init+0xa4>)
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	f107 0214 	add.w	r2, r7, #20
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fa55 	bl	8004948 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <BSP_LED_Init+0xa4>)
 80024a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <BSP_LED_Init+0xa0>)
 80024aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ae:	2200      	movs	r2, #0
 80024b0:	4619      	mov	r1, r3
 80024b2:	f002 fc0d 	bl	8004cd0 <HAL_GPIO_WritePin>
}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08009f04 	.word	0x08009f04
 80024c8:	2000033c 	.word	0x2000033c

080024cc <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <BSP_LED_Toggle+0x2c>)
 80024da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	4906      	ldr	r1, [pc, #24]	; (80024fc <BSP_LED_Toggle+0x30>)
 80024e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f002 fc0a 	bl	8004d02 <HAL_GPIO_TogglePin>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000033c 	.word	0x2000033c
 80024fc:	08009f04 	.word	0x08009f04

08002500 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a33      	ldr	r2, [pc, #204]	; (80025dc <I2Cx_MspInit+0xdc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d15f      	bne.n	80025d2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a31      	ldr	r2, [pc, #196]	; (80025e0 <I2Cx_MspInit+0xe0>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800254a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002550:	2312      	movs	r3, #18
 8002552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002558:	2302      	movs	r3, #2
 800255a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800255c:	2304      	movs	r3, #4
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4619      	mov	r1, r3
 8002566:	481f      	ldr	r0, [pc, #124]	; (80025e4 <I2Cx_MspInit+0xe4>)
 8002568:	f002 f9ee 	bl	8004948 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800256c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002570:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	481b      	ldr	r0, [pc, #108]	; (80025e8 <I2Cx_MspInit+0xe8>)
 800257a:	f002 f9e5 	bl	8004948 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002588:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <I2Cx_MspInit+0xe0>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <I2Cx_MspInit+0xe0>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <I2Cx_MspInit+0xe0>)
 80025a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <I2Cx_MspInit+0xe0>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <I2Cx_MspInit+0xe0>)
 80025ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025b0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	210f      	movs	r1, #15
 80025b6:	2048      	movs	r0, #72	; 0x48
 80025b8:	f001 fd3b 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80025bc:	2048      	movs	r0, #72	; 0x48
 80025be:	f001 fd54 	bl	800406a <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	210f      	movs	r1, #15
 80025c6:	2049      	movs	r0, #73	; 0x49
 80025c8:	f001 fd33 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80025cc:	2049      	movs	r0, #73	; 0x49
 80025ce:	f001 fd4c 	bl	800406a <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40005c00 	.word	0x40005c00
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020800 	.word	0x40020800

080025ec <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80025f0:	4814      	ldr	r0, [pc, #80]	; (8002644 <I2Cx_Init+0x58>)
 80025f2:	f003 f849 	bl	8005688 <HAL_I2C_GetState>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d121      	bne.n	8002640 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <I2Cx_Init+0x58>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <I2Cx_Init+0x5c>)
 8002600:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <I2Cx_Init+0x58>)
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <I2Cx_Init+0x60>)
 8002606:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <I2Cx_Init+0x58>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <I2Cx_Init+0x58>)
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <I2Cx_Init+0x58>)
 8002616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800261a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <I2Cx_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <I2Cx_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <I2Cx_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <I2Cx_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002634:	4803      	ldr	r0, [pc, #12]	; (8002644 <I2Cx_Init+0x58>)
 8002636:	f7ff ff63 	bl	8002500 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800263a:	4802      	ldr	r0, [pc, #8]	; (8002644 <I2Cx_Init+0x58>)
 800263c:	f002 fb7c 	bl	8004d38 <HAL_I2C_Init>
  }
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200007f8 	.word	0x200007f8
 8002648:	40005c00 	.word	0x40005c00
 800264c:	000186a0 	.word	0x000186a0

08002650 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <I2Cx_ITConfig+0x58>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <I2Cx_ITConfig+0x58>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <I2Cx_ITConfig+0x58>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002676:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002678:	2301      	movs	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <I2Cx_ITConfig+0x5c>)
 8002682:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <I2Cx_ITConfig+0x60>)
 800268a:	f002 f95d 	bl	8004948 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800268e:	2200      	movs	r2, #0
 8002690:	210f      	movs	r1, #15
 8002692:	2028      	movs	r0, #40	; 0x28
 8002694:	f001 fccd 	bl	8004032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002698:	2028      	movs	r0, #40	; 0x28
 800269a:	f001 fce6 	bl	800406a <HAL_NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	10210000 	.word	0x10210000
 80026b0:	40020000 	.word	0x40020000

080026b4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af04      	add	r7, sp, #16
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
 80026be:	460b      	mov	r3, r1
 80026c0:	71bb      	strb	r3, [r7, #6]
 80026c2:	4613      	mov	r3, r2
 80026c4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	b299      	uxth	r1, r3
 80026ce:	79bb      	ldrb	r3, [r7, #6]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <I2Cx_WriteData+0x4c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	2301      	movs	r3, #1
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	1d7b      	adds	r3, r7, #5
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	4808      	ldr	r0, [pc, #32]	; (8002704 <I2Cx_WriteData+0x50>)
 80026e4:	f002 fcb0 	bl	8005048 <HAL_I2C_Mem_Write>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80026f2:	f000 f863 	bl	80027bc <I2Cx_Error>
  }        
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000344 	.word	0x20000344
 8002704:	200007f8 	.word	0x200007f8

08002708 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af04      	add	r7, sp, #16
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	b299      	uxth	r1, r3
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <I2Cx_ReadData+0x50>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	2301      	movs	r3, #1
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	f107 030e 	add.w	r3, r7, #14
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2301      	movs	r3, #1
 800273a:	4808      	ldr	r0, [pc, #32]	; (800275c <I2Cx_ReadData+0x54>)
 800273c:	f002 fd7e 	bl	800523c <HAL_I2C_Mem_Read>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800274a:	f000 f837 	bl	80027bc <I2Cx_Error>
  
  }
  return value;
 800274e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000344 	.word	0x20000344
 800275c:	200007f8 	.word	0x200007f8

08002760 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af04      	add	r7, sp, #16
 8002766:	603a      	str	r2, [r7, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
 800276e:	460b      	mov	r3, r1
 8002770:	71bb      	strb	r3, [r7, #6]
 8002772:	4613      	mov	r3, r2
 8002774:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	b299      	uxth	r1, r3
 800277e:	79bb      	ldrb	r3, [r7, #6]
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <I2Cx_ReadBuffer+0x54>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	88bb      	ldrh	r3, [r7, #4]
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	4809      	ldr	r0, [pc, #36]	; (80027b8 <I2Cx_ReadBuffer+0x58>)
 8002794:	f002 fd52 	bl	800523c <HAL_I2C_Mem_Read>
 8002798:	4603      	mov	r3, r0
 800279a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e002      	b.n	80027ac <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80027a6:	f000 f809 	bl	80027bc <I2Cx_Error>

    return 1;
 80027aa:	2301      	movs	r3, #1
  }
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000344 	.word	0x20000344
 80027b8:	200007f8 	.word	0x200007f8

080027bc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80027c0:	4803      	ldr	r0, [pc, #12]	; (80027d0 <I2Cx_Error+0x14>)
 80027c2:	f002 fbfd 	bl	8004fc0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80027c6:	f7ff ff11 	bl	80025ec <I2Cx_Init>
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200007f8 	.word	0x200007f8

080027d4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80027d8:	4819      	ldr	r0, [pc, #100]	; (8002840 <SPIx_Init+0x6c>)
 80027da:	f005 f9e2 	bl	8007ba2 <HAL_SPI_GetState>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d12b      	bne.n	800283c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <SPIx_Init+0x6c>)
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <SPIx_Init+0x70>)
 80027e8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <SPIx_Init+0x6c>)
 80027ec:	2218      	movs	r2, #24
 80027ee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <SPIx_Init+0x6c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <SPIx_Init+0x6c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <SPIx_Init+0x6c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <SPIx_Init+0x6c>)
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <SPIx_Init+0x6c>)
 800280a:	2207      	movs	r2, #7
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <SPIx_Init+0x6c>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <SPIx_Init+0x6c>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <SPIx_Init+0x6c>)
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <SPIx_Init+0x6c>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SPIx_Init+0x6c>)
 800282a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800282e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <SPIx_Init+0x6c>)
 8002832:	f000 f853 	bl	80028dc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002836:	4802      	ldr	r0, [pc, #8]	; (8002840 <SPIx_Init+0x6c>)
 8002838:	f004 fc29 	bl	800708e <HAL_SPI_Init>
  } 
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	2000084c 	.word	0x2000084c
 8002844:	40015000 	.word	0x40015000

08002848 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	b29a      	uxth	r2, r3
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <SPIx_Read+0x38>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f107 0108 	add.w	r1, r7, #8
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <SPIx_Read+0x3c>)
 8002864:	f004 fe10 	bl	8007488 <HAL_SPI_Receive>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002872:	f000 f827 	bl	80028c4 <SPIx_Error>
  }
  
  return readvalue;
 8002876:	68bb      	ldr	r3, [r7, #8]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000348 	.word	0x20000348
 8002884:	2000084c 	.word	0x2000084c

08002888 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <SPIx_Write+0x34>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1db9      	adds	r1, r7, #6
 800289c:	2201      	movs	r2, #1
 800289e:	4808      	ldr	r0, [pc, #32]	; (80028c0 <SPIx_Write+0x38>)
 80028a0:	f004 fc9c 	bl	80071dc <HAL_SPI_Transmit>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80028ae:	f000 f809 	bl	80028c4 <SPIx_Error>
  }
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000348 	.word	0x20000348
 80028c0:	2000084c 	.word	0x2000084c

080028c4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <SPIx_Error+0x14>)
 80028ca:	f004 fc4b 	bl	8007164 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80028ce:	f7ff ff81 	bl	80027d4 <SPIx_Init>
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000084c 	.word	0x2000084c

080028dc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <SPIx_MspInit+0x6c>)
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <SPIx_MspInit+0x6c>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f2:	6453      	str	r3, [r2, #68]	; 0x44
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <SPIx_MspInit+0x6c>)
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <SPIx_MspInit+0x6c>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <SPIx_MspInit+0x6c>)
 800290a:	f043 0320 	orr.w	r3, r3, #32
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <SPIx_MspInit+0x6c>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800291c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002920:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002926:	2302      	movs	r3, #2
 8002928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800292a:	2301      	movs	r3, #1
 800292c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800292e:	2305      	movs	r3, #5
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <SPIx_MspInit+0x70>)
 800293a:	f002 f805 	bl	8004948 <HAL_GPIO_Init>
}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	40021400 	.word	0x40021400

08002950 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002956:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <LCD_IO_Init+0xe0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d164      	bne.n	8002a28 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800295e:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <LCD_IO_Init+0xe0>)
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <LCD_IO_Init+0xe4>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a31      	ldr	r2, [pc, #196]	; (8002a34 <LCD_IO_Init+0xe4>)
 800296e:	f043 0308 	orr.w	r3, r3, #8
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <LCD_IO_Init+0xe4>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002984:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800298e:	2302      	movs	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4619      	mov	r1, r3
 8002998:	4827      	ldr	r0, [pc, #156]	; (8002a38 <LCD_IO_Init+0xe8>)
 800299a:	f001 ffd5 	bl	8004948 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <LCD_IO_Init+0xe4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <LCD_IO_Init+0xe4>)
 80029a8:	f043 0308 	orr.w	r3, r3, #8
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <LCD_IO_Init+0xe4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80029ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029c8:	2302      	movs	r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4619      	mov	r1, r3
 80029d2:	4819      	ldr	r0, [pc, #100]	; (8002a38 <LCD_IO_Init+0xe8>)
 80029d4:	f001 ffb8 	bl	8004948 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <LCD_IO_Init+0xe4>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <LCD_IO_Init+0xe4>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6313      	str	r3, [r2, #48]	; 0x30
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <LCD_IO_Init+0xe4>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80029f4:	2304      	movs	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480c      	ldr	r0, [pc, #48]	; (8002a3c <LCD_IO_Init+0xec>)
 8002a0c:	f001 ff9c 	bl	8004948 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002a10:	2200      	movs	r2, #0
 8002a12:	2104      	movs	r1, #4
 8002a14:	4809      	ldr	r0, [pc, #36]	; (8002a3c <LCD_IO_Init+0xec>)
 8002a16:	f002 f95b 	bl	8004cd0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4807      	ldr	r0, [pc, #28]	; (8002a3c <LCD_IO_Init+0xec>)
 8002a20:	f002 f956 	bl	8004cd0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002a24:	f7ff fed6 	bl	80027d4 <SPIx_Init>
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	200008a4 	.word	0x200008a4
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40020800 	.word	0x40020800

08002a40 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a50:	480a      	ldr	r0, [pc, #40]	; (8002a7c <LCD_IO_WriteData+0x3c>)
 8002a52:	f002 f93d 	bl	8004cd0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002a56:	2200      	movs	r2, #0
 8002a58:	2104      	movs	r1, #4
 8002a5a:	4809      	ldr	r0, [pc, #36]	; (8002a80 <LCD_IO_WriteData+0x40>)
 8002a5c:	f002 f938 	bl	8004cd0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff10 	bl	8002888 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	4804      	ldr	r0, [pc, #16]	; (8002a80 <LCD_IO_WriteData+0x40>)
 8002a6e:	f002 f92f 	bl	8004cd0 <HAL_GPIO_WritePin>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40020800 	.word	0x40020800

08002a84 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a94:	480a      	ldr	r0, [pc, #40]	; (8002ac0 <LCD_IO_WriteReg+0x3c>)
 8002a96:	f002 f91b 	bl	8004cd0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <LCD_IO_WriteReg+0x40>)
 8002aa0:	f002 f916 	bl	8004cd0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff feed 	bl	8002888 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <LCD_IO_WriteReg+0x40>)
 8002ab4:	f002 f90c 	bl	8004cd0 <HAL_GPIO_WritePin>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40020c00 	.word	0x40020c00
 8002ac4:	40020800 	.word	0x40020800

08002ac8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	80fb      	strh	r3, [r7, #6]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002adc:	2200      	movs	r2, #0
 8002ade:	2104      	movs	r1, #4
 8002ae0:	4810      	ldr	r0, [pc, #64]	; (8002b24 <LCD_IO_ReadData+0x5c>)
 8002ae2:	f002 f8f5 	bl	8004cd0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aec:	480e      	ldr	r0, [pc, #56]	; (8002b28 <LCD_IO_ReadData+0x60>)
 8002aee:	f002 f8ef 	bl	8004cd0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fec7 	bl	8002888 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002afa:	797b      	ldrb	r3, [r7, #5]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fea3 	bl	8002848 <SPIx_Read>
 8002b02:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002b04:	2201      	movs	r2, #1
 8002b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <LCD_IO_ReadData+0x60>)
 8002b0c:	f002 f8e0 	bl	8004cd0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b10:	2201      	movs	r2, #1
 8002b12:	2104      	movs	r1, #4
 8002b14:	4803      	ldr	r0, [pc, #12]	; (8002b24 <LCD_IO_ReadData+0x5c>)
 8002b16:	f002 f8db 	bl	8004cd0 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00

08002b2c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f001 f97d 	bl	8003e34 <HAL_Delay>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002b46:	f7ff fd51 	bl	80025ec <I2Cx_Init>
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002b52:	f7ff fd7d 	bl	8002650 <I2Cx_ITConfig>
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	460b      	mov	r3, r1
 8002b66:	71bb      	strb	r3, [r7, #6]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002b6c:	797a      	ldrb	r2, [r7, #5]
 8002b6e:	79b9      	ldrb	r1, [r7, #6]
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fd9e 	bl	80026b4 <I2Cx_WriteData>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	460a      	mov	r2, r1
 8002b8a:	71fb      	strb	r3, [r7, #7]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002b90:	79ba      	ldrb	r2, [r7, #6]
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fdb6 	bl	8002708 <I2Cx_ReadData>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	603a      	str	r2, [r7, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	71bb      	strb	r3, [r7, #6]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	79b9      	ldrb	r1, [r7, #6]
 8002bc0:	79f8      	ldrb	r0, [r7, #7]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	f7ff fdcc 	bl	8002760 <I2Cx_ReadBuffer>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	b29b      	uxth	r3, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f001 f929 	bl	8003e34 <HAL_Delay>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <BSP_LCD_Init+0xc0>)
 8002bf4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002bf8:	2209      	movs	r2, #9
 8002bfa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c04:	221d      	movs	r2, #29
 8002c06:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002c0e:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c10:	f240 120d 	movw	r2, #269	; 0x10d
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002c16:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c18:	f240 1243 	movw	r2, #323	; 0x143
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c20:	f240 1217 	movw	r2, #279	; 0x117
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c28:	f240 1247 	movw	r2, #327	; 0x147
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <BSP_LCD_Init+0xc4>)
 8002c48:	2208      	movs	r2, #8
 8002c4a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <BSP_LCD_Init+0xc4>)
 8002c4e:	22c0      	movs	r2, #192	; 0xc0
 8002c50:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <BSP_LCD_Init+0xc4>)
 8002c54:	2204      	movs	r2, #4
 8002c56:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <BSP_LCD_Init+0xc4>)
 8002c5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002c60:	4813      	ldr	r0, [pc, #76]	; (8002cb0 <BSP_LCD_Init+0xc4>)
 8002c62:	f003 ffcb 	bl	8006bfc <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002c7e:	f000 fb7d 	bl	800337c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <BSP_LCD_Init+0xbc>)
 8002c84:	f003 f866 	bl	8005d54 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <BSP_LCD_Init+0xc8>)
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <BSP_LCD_Init+0xcc>)
 8002c8c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <BSP_LCD_Init+0xc8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002c96:	f000 fd85 	bl	80037a4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c9a:	4808      	ldr	r0, [pc, #32]	; (8002cbc <BSP_LCD_Init+0xd0>)
 8002c9c:	f000 f8ce 	bl	8002e3c <BSP_LCD_SetFont>

  return LCD_OK;
 8002ca0:	2300      	movs	r3, #0
}  
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200008a8 	.word	0x200008a8
 8002cac:	40016800 	.word	0x40016800
 8002cb0:	20000990 	.word	0x20000990
 8002cb4:	200009dc 	.word	0x200009dc
 8002cb8:	200002dc 	.word	0x200002dc
 8002cbc:	2000034c 	.word	0x2000034c

08002cc0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <BSP_LCD_GetXSize+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	4798      	blx	r3
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200009dc 	.word	0x200009dc

08002cd8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <BSP_LCD_GetYSize+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4798      	blx	r3
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200009dc 	.word	0x200009dc

08002cf0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b090      	sub	sp, #64	; 0x40
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002d00:	f7ff ffde 	bl	8002cc0 <BSP_LCD_GetXSize>
 8002d04:	4603      	mov	r3, r0
 8002d06:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d0c:	f7ff ffe4 	bl	8002cd8 <BSP_LCD_GetYSize>
 8002d10:	4603      	mov	r3, r0
 8002d12:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002d1c:	23ff      	movs	r3, #255	; 0xff
 8002d1e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d3c:	2307      	movs	r3, #7
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002d40:	f7ff ffbe 	bl	8002cc0 <BSP_LCD_GetXSize>
 8002d44:	4603      	mov	r3, r0
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002d48:	f7ff ffc6 	bl	8002cd8 <BSP_LCD_GetYSize>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	4619      	mov	r1, r3
 8002d58:	4814      	ldr	r0, [pc, #80]	; (8002dac <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d5a:	f003 f8d5 	bl	8005f08 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	4913      	ldr	r1, [pc, #76]	; (8002db0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	490e      	ldr	r1, [pc, #56]	; (8002db0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3308      	adds	r3, #8
 8002d84:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002d86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	4909      	ldr	r1, [pc, #36]	; (8002db0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d9e:	f003 f8f1 	bl	8005f84 <HAL_LTDC_EnableDither>
}
 8002da2:	bf00      	nop
 8002da4:	3740      	adds	r7, #64	; 0x40
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200008a8 	.word	0x200008a8
 8002db0:	200009c4 	.word	0x200009c4
 8002db4:	2000034c 	.word	0x2000034c

08002db8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <BSP_LCD_SelectLayer+0x1c>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	200009c0 	.word	0x200009c0

08002dd8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <BSP_LCD_SetTextColor+0x28>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4907      	ldr	r1, [pc, #28]	; (8002e04 <BSP_LCD_SetTextColor+0x2c>)
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	200009c0 	.word	0x200009c0
 8002e04:	200009c4 	.word	0x200009c4

08002e08 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <BSP_LCD_SetBackColor+0x2c>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4908      	ldr	r1, [pc, #32]	; (8002e38 <BSP_LCD_SetBackColor+0x30>)
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3304      	adds	r3, #4
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	200009c0 	.word	0x200009c0
 8002e38:	200009c4 	.word	0x200009c4

08002e3c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <BSP_LCD_SetFont+0x2c>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4908      	ldr	r1, [pc, #32]	; (8002e6c <BSP_LCD_SetFont+0x30>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3308      	adds	r3, #8
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	200009c0 	.word	0x200009c0
 8002e6c:	200009c4 	.word	0x200009c4

08002e70 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <BSP_LCD_Clear+0x48>)
 8002e7a:	681c      	ldr	r4, [r3, #0]
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <BSP_LCD_Clear+0x48>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <BSP_LCD_Clear+0x4c>)
 8002e82:	2134      	movs	r1, #52	; 0x34
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461e      	mov	r6, r3
 8002e90:	f7ff ff16 	bl	8002cc0 <BSP_LCD_GetXSize>
 8002e94:	4605      	mov	r5, r0
 8002e96:	f7ff ff1f 	bl	8002cd8 <BSP_LCD_GetYSize>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	462a      	mov	r2, r5
 8002ea8:	4631      	mov	r1, r6
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f000 fc42 	bl	8003734 <FillBuffer>
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb8:	200009c0 	.word	0x200009c0
 8002ebc:	200008a8 	.word	0x200008a8

08002ec0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	80bb      	strh	r3, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <BSP_LCD_DisplayChar+0x80>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	491b      	ldr	r1, [pc, #108]	; (8002f44 <BSP_LCD_DisplayChar+0x84>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <BSP_LCD_DisplayChar+0x80>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4c14      	ldr	r4, [pc, #80]	; (8002f44 <BSP_LCD_DisplayChar+0x84>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4423      	add	r3, r4
 8002efe:	3308      	adds	r3, #8
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f04:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <BSP_LCD_DisplayChar+0x80>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4c0d      	ldr	r4, [pc, #52]	; (8002f44 <BSP_LCD_DisplayChar+0x84>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4423      	add	r3, r4
 8002f18:	3308      	adds	r3, #8
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	889b      	ldrh	r3, [r3, #4]
 8002f1e:	3307      	adds	r3, #7
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da00      	bge.n	8002f26 <BSP_LCD_DisplayChar+0x66>
 8002f24:	3307      	adds	r3, #7
 8002f26:	10db      	asrs	r3, r3, #3
 8002f28:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f2c:	18ca      	adds	r2, r1, r3
 8002f2e:	88b9      	ldrh	r1, [r7, #4]
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fb44 	bl	80035c0 <DrawChar>
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}
 8002f40:	200009c0 	.word	0x200009c0
 8002f44:	200009c4 	.word	0x200009c4

08002f48 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60ba      	str	r2, [r7, #8]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	81fb      	strh	r3, [r7, #14]
 8002f56:	460b      	mov	r3, r1
 8002f58:	81bb      	strh	r3, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	83fb      	strh	r3, [r7, #30]
 8002f62:	2300      	movs	r3, #0
 8002f64:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002f72:	e002      	b.n	8002f7a <BSP_LCD_DisplayStringAt+0x32>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	3301      	adds	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	617a      	str	r2, [r7, #20]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f6      	bne.n	8002f74 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f86:	f7ff fe9b 	bl	8002cc0 <BSP_LCD_GetXSize>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <BSP_LCD_DisplayStringAt+0x174>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	484b      	ldr	r0, [pc, #300]	; (80030c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	889b      	ldrh	r3, [r3, #4]
 8002fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d01c      	beq.n	8002fe8 <BSP_LCD_DisplayStringAt+0xa0>
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	dc33      	bgt.n	800301a <BSP_LCD_DisplayStringAt+0xd2>
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d002      	beq.n	8002fbc <BSP_LCD_DisplayStringAt+0x74>
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d019      	beq.n	8002fee <BSP_LCD_DisplayStringAt+0xa6>
 8002fba:	e02e      	b.n	800301a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	1ad1      	subs	r1, r2, r3
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <BSP_LCD_DisplayStringAt+0x174>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	483e      	ldr	r0, [pc, #248]	; (80030c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4403      	add	r3, r0
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	889b      	ldrh	r3, [r3, #4]
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	83fb      	strh	r3, [r7, #30]
      break;
 8002fe6:	e01b      	b.n	8003020 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
 8002fea:	83fb      	strh	r3, [r7, #30]
      break;
 8002fec:	e018      	b.n	8003020 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b299      	uxth	r1, r3
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <BSP_LCD_DisplayStringAt+0x174>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4831      	ldr	r0, [pc, #196]	; (80030c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4403      	add	r3, r0
 8003006:	3308      	adds	r3, #8
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	889b      	ldrh	r3, [r3, #4]
 800300c:	fb11 f303 	smulbb	r3, r1, r3
 8003010:	b29a      	uxth	r2, r3
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	4413      	add	r3, r2
 8003016:	83fb      	strh	r3, [r7, #30]
      break;
 8003018:	e002      	b.n	8003020 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800301a:	89fb      	ldrh	r3, [r7, #14]
 800301c:	83fb      	strh	r3, [r7, #30]
      break;
 800301e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003020:	e01a      	b.n	8003058 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	89b9      	ldrh	r1, [r7, #12]
 8003028:	8bfb      	ldrh	r3, [r7, #30]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff48 	bl	8002ec0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003030:	4b22      	ldr	r3, [pc, #136]	; (80030bc <BSP_LCD_DisplayStringAt+0x174>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4922      	ldr	r1, [pc, #136]	; (80030c0 <BSP_LCD_DisplayStringAt+0x178>)
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3308      	adds	r3, #8
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	889a      	ldrh	r2, [r3, #4]
 8003046:	8bfb      	ldrh	r3, [r7, #30]
 8003048:	4413      	add	r3, r2
 800304a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3301      	adds	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
    i++;
 8003052:	8bbb      	ldrh	r3, [r7, #28]
 8003054:	3301      	adds	r3, #1
 8003056:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2dc      	uxtb	r4, r3
 8003066:	f7ff fe2b 	bl	8002cc0 <BSP_LCD_GetXSize>
 800306a:	8bb9      	ldrh	r1, [r7, #28]
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <BSP_LCD_DisplayStringAt+0x174>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4d13      	ldr	r5, [pc, #76]	; (80030c0 <BSP_LCD_DisplayStringAt+0x178>)
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	442b      	add	r3, r5
 800307c:	3308      	adds	r3, #8
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	889b      	ldrh	r3, [r3, #4]
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	1ac3      	subs	r3, r0, r3
 8003088:	b299      	uxth	r1, r3
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <BSP_LCD_DisplayStringAt+0x174>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	480c      	ldr	r0, [pc, #48]	; (80030c0 <BSP_LCD_DisplayStringAt+0x178>)
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4403      	add	r3, r0
 800309a:	3308      	adds	r3, #8
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	889b      	ldrh	r3, [r3, #4]
 80030a0:	4299      	cmp	r1, r3
 80030a2:	bf2c      	ite	cs
 80030a4:	2301      	movcs	r3, #1
 80030a6:	2300      	movcc	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4023      	ands	r3, r4
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1b7      	bne.n	8003022 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80030b2:	bf00      	nop
 80030b4:	bf00      	nop
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bdb0      	pop	{r4, r5, r7, pc}
 80030bc:	200009c0 	.word	0x200009c0
 80030c0:	200009c4 	.word	0x200009c4

080030c4 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b08b      	sub	sp, #44	; 0x2c
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4604      	mov	r4, r0
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	80fb      	strh	r3, [r7, #6]
 80030d6:	4603      	mov	r3, r0
 80030d8:	80bb      	strh	r3, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	807b      	strh	r3, [r7, #2]
 80030de:	4613      	mov	r3, r2
 80030e0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80030e2:	2300      	movs	r3, #0
 80030e4:	823b      	strh	r3, [r7, #16]
 80030e6:	2300      	movs	r3, #0
 80030e8:	81fb      	strh	r3, [r7, #14]
 80030ea:	2300      	movs	r3, #0
 80030ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030ee:	2300      	movs	r3, #0
 80030f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80030f2:	2300      	movs	r3, #0
 80030f4:	847b      	strh	r3, [r7, #34]	; 0x22
 80030f6:	2300      	movs	r3, #0
 80030f8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80030fa:	2300      	movs	r3, #0
 80030fc:	83fb      	strh	r3, [r7, #30]
 80030fe:	2300      	movs	r3, #0
 8003100:	83bb      	strh	r3, [r7, #28]
 8003102:	2300      	movs	r3, #0
 8003104:	837b      	strh	r3, [r7, #26]
 8003106:	2300      	movs	r3, #0
 8003108:	833b      	strh	r3, [r7, #24]
 800310a:	2300      	movs	r3, #0
 800310c:	82fb      	strh	r3, [r7, #22]
 800310e:	2300      	movs	r3, #0
 8003110:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	bfb8      	it	lt
 8003120:	425b      	neglt	r3, r3
 8003122:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003124:	883a      	ldrh	r2, [r7, #0]
 8003126:	88bb      	ldrh	r3, [r7, #4]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	bfb8      	it	lt
 800312e:	425b      	neglt	r3, r3
 8003130:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	429a      	cmp	r2, r3
 8003140:	d304      	bcc.n	800314c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003146:	2301      	movs	r3, #1
 8003148:	843b      	strh	r3, [r7, #32]
 800314a:	e005      	b.n	8003158 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800314c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003150:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003156:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003158:	883a      	ldrh	r2, [r7, #0]
 800315a:	88bb      	ldrh	r3, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d304      	bcc.n	800316a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003160:	2301      	movs	r3, #1
 8003162:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003164:	2301      	movs	r3, #1
 8003166:	83bb      	strh	r3, [r7, #28]
 8003168:	e005      	b.n	8003176 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800316a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800316e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003174:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003176:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800317a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800317e:	429a      	cmp	r2, r3
 8003180:	db10      	blt.n	80031a4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003182:	2300      	movs	r3, #0
 8003184:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003186:	2300      	movs	r3, #0
 8003188:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800318a:	8a3b      	ldrh	r3, [r7, #16]
 800318c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800318e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003192:	0fda      	lsrs	r2, r3, #31
 8003194:	4413      	add	r3, r2
 8003196:	105b      	asrs	r3, r3, #1
 8003198:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800319a:	89fb      	ldrh	r3, [r7, #14]
 800319c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800319e:	8a3b      	ldrh	r3, [r7, #16]
 80031a0:	82bb      	strh	r3, [r7, #20]
 80031a2:	e00f      	b.n	80031c4 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80031a4:	2300      	movs	r3, #0
 80031a6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80031a8:	2300      	movs	r3, #0
 80031aa:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80031ac:	89fb      	ldrh	r3, [r7, #14]
 80031ae:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80031b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031b4:	0fda      	lsrs	r2, r3, #31
 80031b6:	4413      	add	r3, r2
 80031b8:	105b      	asrs	r3, r3, #1
 80031ba:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80031bc:	8a3b      	ldrh	r3, [r7, #16]
 80031be:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80031c0:	89fb      	ldrh	r3, [r7, #14]
 80031c2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	827b      	strh	r3, [r7, #18]
 80031c8:	e037      	b.n	800323a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80031ca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80031cc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <BSP_LCD_DrawLine+0x18c>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4c20      	ldr	r4, [pc, #128]	; (8003254 <BSP_LCD_DrawLine+0x190>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4423      	add	r3, r4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f000 f9a1 	bl	8003528 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80031e6:	8b3a      	ldrh	r2, [r7, #24]
 80031e8:	8afb      	ldrh	r3, [r7, #22]
 80031ea:	4413      	add	r3, r2
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80031f0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80031f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	db0e      	blt.n	800321a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 80031fc:	8b3a      	ldrh	r2, [r7, #24]
 80031fe:	8b7b      	ldrh	r3, [r7, #26]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	b29b      	uxth	r3, r3
 8003204:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800320a:	4413      	add	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003210:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003212:	8bfb      	ldrh	r3, [r7, #30]
 8003214:	4413      	add	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800321a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800321c:	8c3b      	ldrh	r3, [r7, #32]
 800321e:	4413      	add	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003224:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003226:	8bbb      	ldrh	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800322e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003232:	b29b      	uxth	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	827b      	strh	r3, [r7, #18]
 800323a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800323e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003242:	429a      	cmp	r2, r3
 8003244:	ddc1      	ble.n	80031ca <BSP_LCD_DrawLine+0x106>
  }
}
 8003246:	bf00      	nop
 8003248:	bf00      	nop
 800324a:	372c      	adds	r7, #44	; 0x2c
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}
 8003250:	200009c0 	.word	0x200009c0
 8003254:	200009c4 	.word	0x200009c4

08003258 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af02      	add	r7, sp, #8
 8003260:	4604      	mov	r4, r0
 8003262:	4608      	mov	r0, r1
 8003264:	4611      	mov	r1, r2
 8003266:	461a      	mov	r2, r3
 8003268:	4623      	mov	r3, r4
 800326a:	80fb      	strh	r3, [r7, #6]
 800326c:	4603      	mov	r3, r0
 800326e:	80bb      	strh	r3, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800327c:	4b33      	ldr	r3, [pc, #204]	; (800334c <BSP_LCD_FillRect+0xf4>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4933      	ldr	r1, [pc, #204]	; (8003350 <BSP_LCD_FillRect+0xf8>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fda2 	bl	8002dd8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003294:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <BSP_LCD_FillRect+0xfc>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <BSP_LCD_FillRect+0xf4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2d      	ldr	r2, [pc, #180]	; (8003358 <BSP_LCD_FillRect+0x100>)
 80032a2:	2134      	movs	r1, #52	; 0x34
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	335c      	adds	r3, #92	; 0x5c
 80032ac:	681c      	ldr	r4, [r3, #0]
 80032ae:	f7ff fd07 	bl	8002cc0 <BSP_LCD_GetXSize>
 80032b2:	4603      	mov	r3, r0
 80032b4:	425b      	negs	r3, r3
 80032b6:	88b9      	ldrh	r1, [r7, #4]
 80032b8:	883a      	ldrh	r2, [r7, #0]
 80032ba:	440a      	add	r2, r1
 80032bc:	fb02 f503 	mul.w	r5, r2, r3
 80032c0:	f7ff fcfe 	bl	8002cc0 <BSP_LCD_GetXSize>
 80032c4:	4606      	mov	r6, r0
 80032c6:	f7ff fd07 	bl	8002cd8 <BSP_LCD_GetYSize>
 80032ca:	4603      	mov	r3, r0
 80032cc:	fb06 f303 	mul.w	r3, r6, r3
 80032d0:	442b      	add	r3, r5
 80032d2:	88f9      	ldrh	r1, [r7, #6]
 80032d4:	887a      	ldrh	r2, [r7, #2]
 80032d6:	440a      	add	r2, r1
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4423      	add	r3, r4
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e013      	b.n	800330a <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <BSP_LCD_FillRect+0xf4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <BSP_LCD_FillRect+0x100>)
 80032e8:	2134      	movs	r1, #52	; 0x34
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	335c      	adds	r3, #92	; 0x5c
 80032f2:	681c      	ldr	r4, [r3, #0]
 80032f4:	f7ff fce4 	bl	8002cc0 <BSP_LCD_GetXSize>
 80032f8:	4602      	mov	r2, r0
 80032fa:	88bb      	ldrh	r3, [r7, #4]
 80032fc:	fb03 f202 	mul.w	r2, r3, r2
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4423      	add	r3, r4
 8003308:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <BSP_LCD_FillRect+0xf4>)
 800330c:	681c      	ldr	r4, [r3, #0]
 800330e:	68fd      	ldr	r5, [r7, #12]
 8003310:	887e      	ldrh	r6, [r7, #2]
 8003312:	f8b7 8000 	ldrh.w	r8, [r7]
 8003316:	f7ff fcd3 	bl	8002cc0 <BSP_LCD_GetXSize>
 800331a:	4602      	mov	r2, r0
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	1ad1      	subs	r1, r2, r3
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <BSP_LCD_FillRect+0xf4>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	480a      	ldr	r0, [pc, #40]	; (8003350 <BSP_LCD_FillRect+0xf8>)
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	9100      	str	r1, [sp, #0]
 8003336:	4643      	mov	r3, r8
 8003338:	4632      	mov	r2, r6
 800333a:	4629      	mov	r1, r5
 800333c:	4620      	mov	r0, r4
 800333e:	f000 f9f9 	bl	8003734 <FillBuffer>
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800334c:	200009c0 	.word	0x200009c0
 8003350:	200009c4 	.word	0x200009c4
 8003354:	200009e0 	.word	0x200009e0
 8003358:	200008a8 	.word	0x200008a8

0800335c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <BSP_LCD_DisplayOn+0x1c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800336a:	4b03      	ldr	r3, [pc, #12]	; (8003378 <BSP_LCD_DisplayOn+0x1c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4798      	blx	r3
  }
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200009dc 	.word	0x200009dc

0800337c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08e      	sub	sp, #56	; 0x38
 8003380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	4b61      	ldr	r3, [pc, #388]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a60      	ldr	r2, [pc, #384]	; (800350c <BSP_LCD_MspInit+0x190>)
 800338c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b5e      	ldr	r3, [pc, #376]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	4b5a      	ldr	r3, [pc, #360]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a59      	ldr	r2, [pc, #356]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b57      	ldr	r3, [pc, #348]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a52      	ldr	r2, [pc, #328]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b50      	ldr	r3, [pc, #320]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	4b4c      	ldr	r3, [pc, #304]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a4b      	ldr	r2, [pc, #300]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	4b45      	ldr	r3, [pc, #276]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a44      	ldr	r2, [pc, #272]	; (800350c <BSP_LCD_MspInit+0x190>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b42      	ldr	r3, [pc, #264]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b3e      	ldr	r3, [pc, #248]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a3d      	ldr	r2, [pc, #244]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a36      	ldr	r2, [pc, #216]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003434:	f043 0320 	orr.w	r3, r3, #32
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <BSP_LCD_MspInit+0x190>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	4b30      	ldr	r3, [pc, #192]	; (800350c <BSP_LCD_MspInit+0x190>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a2f      	ldr	r2, [pc, #188]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b2d      	ldr	r3, [pc, #180]	; (800350c <BSP_LCD_MspInit+0x190>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003462:	f641 0358 	movw	r3, #6232	; 0x1858
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003470:	2302      	movs	r3, #2
 8003472:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003474:	230e      	movs	r3, #14
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347c:	4619      	mov	r1, r3
 800347e:	4824      	ldr	r0, [pc, #144]	; (8003510 <BSP_LCD_MspInit+0x194>)
 8003480:	f001 fa62 	bl	8004948 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003484:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800348a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800348e:	4619      	mov	r1, r3
 8003490:	4820      	ldr	r0, [pc, #128]	; (8003514 <BSP_LCD_MspInit+0x198>)
 8003492:	f001 fa59 	bl	8004948 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003496:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800349c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a0:	4619      	mov	r1, r3
 80034a2:	481d      	ldr	r0, [pc, #116]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80034a4:	f001 fa50 	bl	8004948 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80034a8:	2348      	movs	r3, #72	; 0x48
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	4619      	mov	r1, r3
 80034b2:	481a      	ldr	r0, [pc, #104]	; (800351c <BSP_LCD_MspInit+0x1a0>)
 80034b4:	f001 fa48 	bl	8004948 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80034b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	4816      	ldr	r0, [pc, #88]	; (8003520 <BSP_LCD_MspInit+0x1a4>)
 80034c6:	f001 fa3f 	bl	8004948 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80034ca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4813      	ldr	r0, [pc, #76]	; (8003524 <BSP_LCD_MspInit+0x1a8>)
 80034d8:	f001 fa36 	bl	8004948 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80034dc:	2303      	movs	r3, #3
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80034e0:	2309      	movs	r3, #9
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e8:	4619      	mov	r1, r3
 80034ea:	480a      	ldr	r0, [pc, #40]	; (8003514 <BSP_LCD_MspInit+0x198>)
 80034ec:	f001 fa2c 	bl	8004948 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80034f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fa:	4619      	mov	r1, r3
 80034fc:	4809      	ldr	r0, [pc, #36]	; (8003524 <BSP_LCD_MspInit+0x1a8>)
 80034fe:	f001 fa23 	bl	8004948 <HAL_GPIO_Init>
}
 8003502:	bf00      	nop
 8003504:	3738      	adds	r7, #56	; 0x38
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	40020000 	.word	0x40020000
 8003514:	40020400 	.word	0x40020400
 8003518:	40020800 	.word	0x40020800
 800351c:	40020c00 	.word	0x40020c00
 8003520:	40021400 	.word	0x40021400
 8003524:	40021800 	.word	0x40021800

08003528 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003528:	b5b0      	push	{r4, r5, r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	603a      	str	r2, [r7, #0]
 8003532:	80fb      	strh	r3, [r7, #6]
 8003534:	460b      	mov	r3, r1
 8003536:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <BSP_LCD_DrawPixel+0x8c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01f      	beq.n	8003580 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <BSP_LCD_DrawPixel+0x90>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <BSP_LCD_DrawPixel+0x94>)
 8003546:	2134      	movs	r1, #52	; 0x34
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	335c      	adds	r3, #92	; 0x5c
 8003550:	681c      	ldr	r4, [r3, #0]
 8003552:	f7ff fbb5 	bl	8002cc0 <BSP_LCD_GetXSize>
 8003556:	4605      	mov	r5, r0
 8003558:	f7ff fbbe 	bl	8002cd8 <BSP_LCD_GetYSize>
 800355c:	4603      	mov	r3, r0
 800355e:	fb03 f205 	mul.w	r2, r3, r5
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	1ad5      	subs	r5, r2, r3
 8003566:	f7ff fbab 	bl	8002cc0 <BSP_LCD_GetXSize>
 800356a:	4602      	mov	r2, r0
 800356c:	88bb      	ldrh	r3, [r7, #4]
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	1aeb      	subs	r3, r5, r3
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4423      	add	r3, r4
 8003578:	461a      	mov	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800357e:	e015      	b.n	80035ac <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <BSP_LCD_DrawPixel+0x90>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <BSP_LCD_DrawPixel+0x94>)
 8003586:	2134      	movs	r1, #52	; 0x34
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	335c      	adds	r3, #92	; 0x5c
 8003590:	681c      	ldr	r4, [r3, #0]
 8003592:	88bd      	ldrh	r5, [r7, #4]
 8003594:	f7ff fb94 	bl	8002cc0 <BSP_LCD_GetXSize>
 8003598:	4603      	mov	r3, r0
 800359a:	fb03 f205 	mul.w	r2, r3, r5
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4423      	add	r3, r4
 80035a6:	461a      	mov	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bdb0      	pop	{r4, r5, r7, pc}
 80035b4:	200009e0 	.word	0x200009e0
 80035b8:	200009c0 	.word	0x200009c0
 80035bc:	200008a8 	.word	0x200008a8

080035c0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	603a      	str	r2, [r7, #0]
 80035ca:	80fb      	strh	r3, [r7, #6]
 80035cc:	460b      	mov	r3, r1
 80035ce:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80035dc:	4b53      	ldr	r3, [pc, #332]	; (800372c <DrawChar+0x16c>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4953      	ldr	r1, [pc, #332]	; (8003730 <DrawChar+0x170>)
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3308      	adds	r3, #8
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	88db      	ldrh	r3, [r3, #6]
 80035f2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80035f4:	4b4d      	ldr	r3, [pc, #308]	; (800372c <DrawChar+0x16c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	494d      	ldr	r1, [pc, #308]	; (8003730 <DrawChar+0x170>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3308      	adds	r3, #8
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	889b      	ldrh	r3, [r3, #4]
 800360a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800360c:	8a3b      	ldrh	r3, [r7, #16]
 800360e:	3307      	adds	r3, #7
 8003610:	2b00      	cmp	r3, #0
 8003612:	da00      	bge.n	8003616 <DrawChar+0x56>
 8003614:	3307      	adds	r3, #7
 8003616:	10db      	asrs	r3, r3, #3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	b2da      	uxtb	r2, r3
 800361e:	8a3b      	ldrh	r3, [r7, #16]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e076      	b.n	800371a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800362c:	8a3b      	ldrh	r3, [r7, #16]
 800362e:	3307      	adds	r3, #7
 8003630:	2b00      	cmp	r3, #0
 8003632:	da00      	bge.n	8003636 <DrawChar+0x76>
 8003634:	3307      	adds	r3, #7
 8003636:	10db      	asrs	r3, r3, #3
 8003638:	461a      	mov	r2, r3
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fb02 f303 	mul.w	r3, r2, r3
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	4413      	add	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003646:	8a3b      	ldrh	r3, [r7, #16]
 8003648:	3307      	adds	r3, #7
 800364a:	2b00      	cmp	r3, #0
 800364c:	da00      	bge.n	8003650 <DrawChar+0x90>
 800364e:	3307      	adds	r3, #7
 8003650:	10db      	asrs	r3, r3, #3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d002      	beq.n	800365c <DrawChar+0x9c>
 8003656:	2b02      	cmp	r3, #2
 8003658:	d004      	beq.n	8003664 <DrawChar+0xa4>
 800365a:	e00c      	b.n	8003676 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	617b      	str	r3, [r7, #20]
      break;
 8003662:	e016      	b.n	8003692 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	3201      	adds	r2, #1
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
      break;
 8003674:	e00d      	b.n	8003692 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	041a      	lsls	r2, r3, #16
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3301      	adds	r3, #1
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	4313      	orrs	r3, r2
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	3202      	adds	r2, #2
 800368a:	7812      	ldrb	r2, [r2, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
      break;
 8003690:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e036      	b.n	8003706 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003698:	8a3a      	ldrh	r2, [r7, #16]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	1ad2      	subs	r2, r2, r3
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	4413      	add	r3, r2
 80036a2:	3b01      	subs	r3, #1
 80036a4:	2201      	movs	r2, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d012      	beq.n	80036da <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	4413      	add	r3, r2
 80036bc:	b298      	uxth	r0, r3
 80036be:	4b1b      	ldr	r3, [pc, #108]	; (800372c <DrawChar+0x16c>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <DrawChar+0x170>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	4619      	mov	r1, r3
 80036d4:	f7ff ff28 	bl	8003528 <BSP_LCD_DrawPixel>
 80036d8:	e012      	b.n	8003700 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	4413      	add	r3, r2
 80036e2:	b298      	uxth	r0, r3
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <DrawChar+0x16c>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4911      	ldr	r1, [pc, #68]	; (8003730 <DrawChar+0x170>)
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	3304      	adds	r3, #4
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	88bb      	ldrh	r3, [r7, #4]
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7ff ff14 	bl	8003528 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	3301      	adds	r3, #1
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	8a3b      	ldrh	r3, [r7, #16]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3c4      	bcc.n	8003698 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800370e:	88bb      	ldrh	r3, [r7, #4]
 8003710:	3301      	adds	r3, #1
 8003712:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3301      	adds	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	8a7b      	ldrh	r3, [r7, #18]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	429a      	cmp	r2, r3
 8003720:	d384      	bcc.n	800362c <DrawChar+0x6c>
  }
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200009c0 	.word	0x200009c0
 8003730:	200009c4 	.word	0x200009c4

08003734 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003742:	4b16      	ldr	r3, [pc, #88]	; (800379c <FillBuffer+0x68>)
 8003744:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003748:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <FillBuffer+0x68>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003750:	4a12      	ldr	r2, [pc, #72]	; (800379c <FillBuffer+0x68>)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <FillBuffer+0x68>)
 8003758:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <FillBuffer+0x6c>)
 800375a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800375c:	480f      	ldr	r0, [pc, #60]	; (800379c <FillBuffer+0x68>)
 800375e:	f000 fe5d 	bl	800441c <HAL_DMA2D_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d115      	bne.n	8003794 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	480c      	ldr	r0, [pc, #48]	; (800379c <FillBuffer+0x68>)
 800376c:	f000 ffbe 	bl	80046ec <HAL_DMA2D_ConfigLayer>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10e      	bne.n	8003794 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69f9      	ldr	r1, [r7, #28]
 8003780:	4806      	ldr	r0, [pc, #24]	; (800379c <FillBuffer+0x68>)
 8003782:	f000 fe9e 	bl	80044c2 <HAL_DMA2D_Start>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800378c:	210a      	movs	r1, #10
 800378e:	4803      	ldr	r0, [pc, #12]	; (800379c <FillBuffer+0x68>)
 8003790:	f000 fec2 	bl	8004518 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000950 	.word	0x20000950
 80037a0:	4002b000 	.word	0x4002b000

080037a4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <BSP_SDRAM_Init+0xac>)
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <BSP_SDRAM_Init+0xb0>)
 80037ac:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80037ae:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 80037b0:	2202      	movs	r2, #2
 80037b2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80037b4:	4b28      	ldr	r3, [pc, #160]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 80037b6:	2207      	movs	r2, #7
 80037b8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 80037bc:	2204      	movs	r2, #4
 80037be:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 80037c2:	2207      	movs	r2, #7
 80037c4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 80037c8:	2202      	movs	r2, #2
 80037ca:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80037cc:	4b22      	ldr	r3, [pc, #136]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 80037ce:	2202      	movs	r2, #2
 80037d0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 80037d4:	2202      	movs	r2, #2
 80037d6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <BSP_SDRAM_Init+0xac>)
 80037da:	2201      	movs	r2, #1
 80037dc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <BSP_SDRAM_Init+0xac>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80037e4:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <BSP_SDRAM_Init+0xac>)
 80037e6:	2204      	movs	r2, #4
 80037e8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <BSP_SDRAM_Init+0xac>)
 80037ec:	2210      	movs	r2, #16
 80037ee:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <BSP_SDRAM_Init+0xac>)
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <BSP_SDRAM_Init+0xac>)
 80037f8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80037fc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80037fe:	4b14      	ldr	r3, [pc, #80]	; (8003850 <BSP_SDRAM_Init+0xac>)
 8003800:	2200      	movs	r2, #0
 8003802:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <BSP_SDRAM_Init+0xac>)
 8003806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800380a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <BSP_SDRAM_Init+0xac>)
 800380e:	2200      	movs	r2, #0
 8003810:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <BSP_SDRAM_Init+0xac>)
 8003814:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800381a:	2100      	movs	r1, #0
 800381c:	480c      	ldr	r0, [pc, #48]	; (8003850 <BSP_SDRAM_Init+0xac>)
 800381e:	f000 f87f 	bl	8003920 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003822:	490d      	ldr	r1, [pc, #52]	; (8003858 <BSP_SDRAM_Init+0xb4>)
 8003824:	480a      	ldr	r0, [pc, #40]	; (8003850 <BSP_SDRAM_Init+0xac>)
 8003826:	f003 fba9 	bl	8006f7c <HAL_SDRAM_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <BSP_SDRAM_Init+0xb8>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e002      	b.n	800383e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <BSP_SDRAM_Init+0xb8>)
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800383e:	f240 506a 	movw	r0, #1386	; 0x56a
 8003842:	f000 f80d 	bl	8003860 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <BSP_SDRAM_Init+0xb8>)
 8003848:	781b      	ldrb	r3, [r3, #0]
}
 800384a:	4618      	mov	r0, r3
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	200009e4 	.word	0x200009e4
 8003854:	a0000140 	.word	0xa0000140
 8003858:	20000a18 	.word	0x20000a18
 800385c:	2000036c 	.word	0x2000036c

08003860 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800386c:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003874:	2208      	movs	r2, #8
 8003876:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003878:	4b27      	ldr	r3, [pc, #156]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800387a:	2201      	movs	r2, #1
 800387c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003880:	2200      	movs	r2, #0
 8003882:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003888:	4923      	ldr	r1, [pc, #140]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388a:	4824      	ldr	r0, [pc, #144]	; (800391c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800388c:	f003 fbb4 	bl	8006ff8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003890:	2001      	movs	r0, #1
 8003892:	f000 facf 	bl	8003e34 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003896:	4b20      	ldr	r3, [pc, #128]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003898:	2202      	movs	r2, #2
 800389a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800389e:	2208      	movs	r2, #8
 80038a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80038ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b2:	4919      	ldr	r1, [pc, #100]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038b4:	4819      	ldr	r0, [pc, #100]	; (800391c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038b6:	f003 fb9f 	bl	8006ff8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80038ba:	4b17      	ldr	r3, [pc, #92]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038bc:	2203      	movs	r2, #3
 80038be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038c2:	2208      	movs	r2, #8
 80038c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038c8:	2204      	movs	r2, #4
 80038ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80038d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d6:	4910      	ldr	r1, [pc, #64]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038d8:	4810      	ldr	r0, [pc, #64]	; (800391c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038da:	f003 fb8d 	bl	8006ff8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80038de:	f44f 730c 	mov.w	r3, #560	; 0x230
 80038e2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038e6:	2204      	movs	r2, #4
 80038e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038ec:	2208      	movs	r2, #8
 80038ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a07      	ldr	r2, [pc, #28]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038fa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80038fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003900:	4905      	ldr	r1, [pc, #20]	; (8003918 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003902:	4806      	ldr	r0, [pc, #24]	; (800391c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003904:	f003 fb78 	bl	8006ff8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4804      	ldr	r0, [pc, #16]	; (800391c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800390c:	f003 fb9f 	bl	800704e <HAL_SDRAM_ProgramRefreshRate>
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000a34 	.word	0x20000a34
 800391c:	200009e4 	.word	0x200009e4

08003920 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b090      	sub	sp, #64	; 0x40
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80ec 	beq.w	8003b0a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
 8003936:	4b77      	ldr	r3, [pc, #476]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	4a76      	ldr	r2, [pc, #472]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6393      	str	r3, [r2, #56]	; 0x38
 8003942:	4b74      	ldr	r3, [pc, #464]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
 8003952:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a6f      	ldr	r2, [pc, #444]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	4b69      	ldr	r3, [pc, #420]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a68      	ldr	r2, [pc, #416]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	4b62      	ldr	r3, [pc, #392]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a61      	ldr	r2, [pc, #388]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	6313      	str	r3, [r2, #48]	; 0x30
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a5a      	ldr	r2, [pc, #360]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039ac:	f043 0308 	orr.w	r3, r3, #8
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a53      	ldr	r2, [pc, #332]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	4b4d      	ldr	r3, [pc, #308]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a4c      	ldr	r2, [pc, #304]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039e4:	f043 0320 	orr.w	r3, r3, #32
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a45      	ldr	r2, [pc, #276]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <BSP_SDRAM_MspInit+0x1f4>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003a12:	2302      	movs	r3, #2
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003a16:	2302      	movs	r3, #2
 8003a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003a1e:	230c      	movs	r3, #12
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003a22:	2360      	movs	r3, #96	; 0x60
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	483a      	ldr	r0, [pc, #232]	; (8003b18 <BSP_SDRAM_MspInit+0x1f8>)
 8003a2e:	f000 ff8b 	bl	8004948 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003a32:	2301      	movs	r3, #1
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4837      	ldr	r0, [pc, #220]	; (8003b1c <BSP_SDRAM_MspInit+0x1fc>)
 8003a3e:	f000 ff83 	bl	8004948 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003a42:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4834      	ldr	r0, [pc, #208]	; (8003b20 <BSP_SDRAM_MspInit+0x200>)
 8003a50:	f000 ff7a 	bl	8004948 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003a54:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4830      	ldr	r0, [pc, #192]	; (8003b24 <BSP_SDRAM_MspInit+0x204>)
 8003a62:	f000 ff71 	bl	8004948 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003a66:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a70:	4619      	mov	r1, r3
 8003a72:	482d      	ldr	r0, [pc, #180]	; (8003b28 <BSP_SDRAM_MspInit+0x208>)
 8003a74:	f000 ff68 	bl	8004948 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003a78:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a82:	4619      	mov	r1, r3
 8003a84:	4829      	ldr	r0, [pc, #164]	; (8003b2c <BSP_SDRAM_MspInit+0x20c>)
 8003a86:	f000 ff5f 	bl	8004948 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a96:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aac:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003ab0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ab4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003abc:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ac2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003acc:	2203      	movs	r2, #3
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ad0:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <BSP_SDRAM_MspInit+0x214>)
 8003ae0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae8:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003aee:	4810      	ldr	r0, [pc, #64]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003af0:	f000 fb84 	bl	80041fc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003af4:	480e      	ldr	r0, [pc, #56]	; (8003b30 <BSP_SDRAM_MspInit+0x210>)
 8003af6:	f000 fad3 	bl	80040a0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	210f      	movs	r1, #15
 8003afe:	2038      	movs	r0, #56	; 0x38
 8003b00:	f000 fa97 	bl	8004032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003b04:	2038      	movs	r0, #56	; 0x38
 8003b06:	f000 fab0 	bl	800406a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003b0a:	bf00      	nop
 8003b0c:	3740      	adds	r7, #64	; 0x40
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	40020c00 	.word	0x40020c00
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40021400 	.word	0x40021400
 8003b2c:	40021800 	.word	0x40021800
 8003b30:	20000a44 	.word	0x20000a44
 8003b34:	40026410 	.word	0x40026410

08003b38 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	460a      	mov	r2, r1
 8003b42:	80fb      	strh	r3, [r7, #6]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003b4c:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <BSP_TS_Init+0x64>)
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <BSP_TS_Init+0x68>)
 8003b54:	88bb      	ldrh	r3, [r7, #4]
 8003b56:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <BSP_TS_Init+0x6c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2082      	movs	r0, #130	; 0x82
 8003b5e:	4798      	blx	r3
 8003b60:	4603      	mov	r3, r0
 8003b62:	461a      	mov	r2, r3
 8003b64:	f640 0311 	movw	r3, #2065	; 0x811
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d104      	bne.n	8003b76 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <BSP_TS_Init+0x70>)
 8003b6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <BSP_TS_Init+0x6c>)
 8003b70:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <BSP_TS_Init+0x70>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2082      	movs	r0, #130	; 0x82
 8003b84:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <BSP_TS_Init+0x70>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2082      	movs	r0, #130	; 0x82
 8003b8e:	4798      	blx	r3
  }

  return ret;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000aa8 	.word	0x20000aa8
 8003ba0:	20000aaa 	.word	0x20000aaa
 8003ba4:	20000314 	.word	0x20000314
 8003ba8:	20000aa4 	.word	0x20000aa4

08003bac <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <BSP_TS_ITGetStatus+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	2082      	movs	r0, #130	; 0x82
 8003bb8:	4798      	blx	r3
 8003bba:	4603      	mov	r3, r0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000aa4 	.word	0x20000aa4

08003bc4 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003bcc:	4b4f      	ldr	r3, [pc, #316]	; (8003d0c <BSP_TS_GetState+0x148>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2082      	movs	r0, #130	; 0x82
 8003bd4:	4798      	blx	r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 808d 	beq.w	8003d02 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003be8:	4b48      	ldr	r3, [pc, #288]	; (8003d0c <BSP_TS_GetState+0x148>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f107 020c 	add.w	r2, r7, #12
 8003bf2:	f107 010e 	add.w	r1, r7, #14
 8003bf6:	2082      	movs	r0, #130	; 0x82
 8003bf8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003bfa:	89bb      	ldrh	r3, [r7, #12]
 8003bfc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003c04:	89bb      	ldrh	r3, [r7, #12]
 8003c06:	4a42      	ldr	r2, [pc, #264]	; (8003d10 <BSP_TS_GetState+0x14c>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003c10:	8abb      	ldrh	r3, [r7, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	82bb      	strh	r3, [r7, #20]
 8003c1a:	e008      	b.n	8003c2e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003c1c:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <BSP_TS_GetState+0x150>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	8aba      	ldrh	r2, [r7, #20]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d903      	bls.n	8003c2e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003c26:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <BSP_TS_GetState+0x150>)
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003c2e:	8abb      	ldrh	r3, [r7, #20]
 8003c30:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d806      	bhi.n	8003c4a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003c42:	330e      	adds	r3, #14
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	81fb      	strh	r3, [r7, #14]
 8003c48:	e005      	b.n	8003c56 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003c50:	3308      	adds	r3, #8
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003c56:	89fb      	ldrh	r3, [r7, #14]
 8003c58:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <BSP_TS_GetState+0x154>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	82fb      	strh	r3, [r7, #22]
 8003c6c:	e008      	b.n	8003c80 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003c6e:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <BSP_TS_GetState+0x158>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	8afa      	ldrh	r2, [r7, #22]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d903      	bls.n	8003c80 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003c78:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <BSP_TS_GetState+0x158>)
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003c80:	8afb      	ldrh	r3, [r7, #22]
 8003c82:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <BSP_TS_GetState+0x15c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d906      	bls.n	8003c9e <BSP_TS_GetState+0xda>
 8003c90:	89fa      	ldrh	r2, [r7, #14]
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <BSP_TS_GetState+0x15c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	e005      	b.n	8003caa <BSP_TS_GetState+0xe6>
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <BSP_TS_GetState+0x15c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	89fb      	ldrh	r3, [r7, #14]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003cac:	89bb      	ldrh	r3, [r7, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <BSP_TS_GetState+0x160>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d906      	bls.n	8003cc6 <BSP_TS_GetState+0x102>
 8003cb8:	89ba      	ldrh	r2, [r7, #12]
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <BSP_TS_GetState+0x160>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	e005      	b.n	8003cd2 <BSP_TS_GetState+0x10e>
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <BSP_TS_GetState+0x160>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	89bb      	ldrh	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003cd4:	8a7a      	ldrh	r2, [r7, #18]
 8003cd6:	8a3b      	ldrh	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	dd07      	ble.n	8003cee <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003cde:	89fb      	ldrh	r3, [r7, #14]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <BSP_TS_GetState+0x15c>)
 8003ce4:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003ce6:	89bb      	ldrh	r3, [r7, #12]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <BSP_TS_GetState+0x160>)
 8003cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <BSP_TS_GetState+0x15c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <BSP_TS_GetState+0x160>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	809a      	strh	r2, [r3, #4]
  }
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000aa4 	.word	0x20000aa4
 8003d10:	ba2e8ba3 	.word	0xba2e8ba3
 8003d14:	20000aaa 	.word	0x20000aaa
 8003d18:	88888889 	.word	0x88888889
 8003d1c:	20000aa8 	.word	0x20000aa8
 8003d20:	20000aac 	.word	0x20000aac
 8003d24:	20000ab0 	.word	0x20000ab0

08003d28 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <BSP_TS_ITClear+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	2082      	movs	r0, #130	; 0x82
 8003d34:	4798      	blx	r3
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000aa4 	.word	0x20000aa4

08003d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_Init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <HAL_Init+0x40>)
 8003d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_Init+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_Init+0x40>)
 8003d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_Init+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <HAL_Init+0x40>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d68:	2003      	movs	r0, #3
 8003d6a:	f000 f957 	bl	800401c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6e:	200f      	movs	r0, #15
 8003d70:	f000 f810 	bl	8003d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d74:	f000 f806 	bl	8003d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00

08003d84 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_InitTick+0x54>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_InitTick+0x58>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f967 	bl	8004086 <HAL_SYSTICK_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00e      	b.n	8003de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d80a      	bhi.n	8003dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f000 f92f 	bl	8004032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dd4:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <HAL_InitTick+0x5c>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	200002d8 	.word	0x200002d8
 8003dec:	20000374 	.word	0x20000374
 8003df0:	20000370 	.word	0x20000370

08003df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_IncTick+0x20>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_IncTick+0x24>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_IncTick+0x24>)
 8003e06:	6013      	str	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000374 	.word	0x20000374
 8003e18:	20000ab4 	.word	0x20000ab4

08003e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_GetTick+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000ab4 	.word	0x20000ab4

08003e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff ffee 	bl	8003e1c <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d005      	beq.n	8003e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <HAL_Delay+0x44>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e5a:	bf00      	nop
 8003e5c:	f7ff ffde 	bl	8003e1c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d8f7      	bhi.n	8003e5c <HAL_Delay+0x28>
  {
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000374 	.word	0x20000374

08003e7c <__NVIC_SetPriorityGrouping>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_GetPriorityGrouping>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <__NVIC_GetPriorityGrouping+0x18>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 0307 	and.w	r3, r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_EnableIRQ>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0b      	blt.n	8003f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4907      	ldr	r1, [pc, #28]	; (8003f18 <__NVIC_EnableIRQ+0x38>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_SetPriority>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	; (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	; (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	; 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe8:	d301      	bcc.n	8003fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00f      	b.n	800400e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <SysTick_Config+0x40>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	f7ff ff8e 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <SysTick_Config+0x40>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <SysTick_Config+0x40>)
 8004008:	2207      	movs	r2, #7
 800400a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	e000e010 	.word	0xe000e010

0800401c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff29 	bl	8003e7c <__NVIC_SetPriorityGrouping>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	4603      	mov	r3, r0
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004044:	f7ff ff3e 	bl	8003ec4 <__NVIC_GetPriorityGrouping>
 8004048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff ff8e 	bl	8003f70 <NVIC_EncodePriority>
 8004054:	4602      	mov	r2, r0
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff5d 	bl	8003f1c <__NVIC_SetPriority>
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff31 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffa2 	bl	8003fd8 <SysTick_Config>
 8004094:	4603      	mov	r3, r0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff feb6 	bl	8003e1c <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e099      	b.n	80041f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040dc:	e00f      	b.n	80040fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040de:	f7ff fe9d 	bl	8003e1c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d908      	bls.n	80040fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2203      	movs	r2, #3
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e078      	b.n	80041f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e8      	bne.n	80040de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <HAL_DMA_Init+0x158>)
 8004118:	4013      	ands	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b04      	cmp	r3, #4
 8004156:	d107      	bne.n	8004168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	4313      	orrs	r3, r2
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0307 	bic.w	r3, r3, #7
 800417e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b04      	cmp	r3, #4
 8004190:	d117      	bne.n	80041c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8bd 	bl	8004324 <DMA_CheckFifoParam>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2240      	movs	r2, #64	; 0x40
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041be:	2301      	movs	r3, #1
 80041c0:	e016      	b.n	80041f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f874 	bl	80042b8 <DMA_CalcBaseAndBitshift>
 80041d0:	4603      	mov	r3, r0
 80041d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	223f      	movs	r2, #63	; 0x3f
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	f010803f 	.word	0xf010803f

080041fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e050      	b.n	80042b0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d101      	bne.n	800421e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
 800421c:	e048      	b.n	80042b0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2221      	movs	r2, #33	; 0x21
 800425c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f82a 	bl	80042b8 <DMA_CalcBaseAndBitshift>
 8004264:	4603      	mov	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	223f      	movs	r2, #63	; 0x3f
 8004292:	409a      	lsls	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	3b10      	subs	r3, #16
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <DMA_CalcBaseAndBitshift+0x64>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <DMA_CalcBaseAndBitshift+0x68>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d909      	bls.n	80042fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	1d1a      	adds	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	; 0x58
 80042f8:	e007      	b.n	800430a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	aaaaaaab 	.word	0xaaaaaaab
 8004320:	0800d8ec 	.word	0x0800d8ec

08004324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11f      	bne.n	800437e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d856      	bhi.n	80043f2 <DMA_CheckFifoParam+0xce>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <DMA_CheckFifoParam+0x28>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800435d 	.word	0x0800435d
 8004350:	0800436f 	.word	0x0800436f
 8004354:	0800435d 	.word	0x0800435d
 8004358:	080043f3 	.word	0x080043f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d046      	beq.n	80043f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e043      	b.n	80043f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004376:	d140      	bne.n	80043fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437c:	e03d      	b.n	80043fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004386:	d121      	bne.n	80043cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d837      	bhi.n	80043fe <DMA_CheckFifoParam+0xda>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <DMA_CheckFifoParam+0x70>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043ab 	.word	0x080043ab
 800439c:	080043a5 	.word	0x080043a5
 80043a0:	080043bd 	.word	0x080043bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      break;
 80043a8:	e030      	b.n	800440c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d025      	beq.n	8004402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ba:	e022      	b.n	8004402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c4:	d11f      	bne.n	8004406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043ca:	e01c      	b.n	8004406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d903      	bls.n	80043da <DMA_CheckFifoParam+0xb6>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d003      	beq.n	80043e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043d8:	e018      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
      break;
 80043de:	e015      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00e      	beq.n	800440a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      break;
 80043f0:	e00b      	b.n	800440a <DMA_CheckFifoParam+0xe6>
      break;
 80043f2:	bf00      	nop
 80043f4:	e00a      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 80043f6:	bf00      	nop
 80043f8:	e008      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 80043fa:	bf00      	nop
 80043fc:	e006      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 80043fe:	bf00      	nop
 8004400:	e004      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;   
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 800440a:	bf00      	nop
    }
  } 
  
  return status; 
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop

0800441c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e03b      	b.n	80044a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f833 	bl	80044ae <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	f023 0107 	bic.w	r1, r3, #7
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68d1      	ldr	r1, [r2, #12]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	430b      	orrs	r3, r1
 8004494:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_DMA2D_Start+0x1c>
 80044da:	2302      	movs	r3, #2
 80044dc:	e018      	b.n	8004510 <HAL_DMA2D_Start+0x4e>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f989 	bl	8004810 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d056      	beq.n	80045e2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004534:	f7ff fc72 	bl	8003e1c <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800453a:	e04b      	b.n	80045d4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800454a:	2b00      	cmp	r3, #0
 800454c:	d023      	beq.n	8004596 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	f043 0202 	orr.w	r2, r3, #2
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	f043 0201 	orr.w	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2221      	movs	r2, #33	; 0x21
 8004580:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2204      	movs	r2, #4
 8004586:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0a5      	b.n	80046e2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d01a      	beq.n	80045d4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800459e:	f7ff fc3d 	bl	8003e1c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <HAL_DMA2D_PollForTransfer+0x9c>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e086      	b.n	80046e2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ac      	beq.n	800453c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d061      	beq.n	80046c8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004604:	f7ff fc0a 	bl	8003e1c <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800460a:	e056      	b.n	80046ba <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800461a:	2b00      	cmp	r3, #0
 800461c:	d02e      	beq.n	800467c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	f043 0204 	orr.w	r2, r3, #4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	f043 0202 	orr.w	r2, r3, #2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	f043 0201 	orr.w	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2229      	movs	r2, #41	; 0x29
 8004666:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2204      	movs	r2, #4
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d01a      	beq.n	80046ba <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004684:	f7ff fbca 	bl	8003e1c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d302      	bcc.n	800469a <HAL_DMA2D_PollForTransfer+0x182>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10f      	bne.n	80046ba <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e013      	b.n	80046e2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0a1      	beq.n	800460c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2212      	movs	r2, #18
 80046ce:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_DMA2D_ConfigLayer+0x20>
 8004708:	2302      	movs	r3, #2
 800470a:	e079      	b.n	8004800 <HAL_DMA2D_ConfigLayer+0x114>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	3318      	adds	r3, #24
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004736:	4b35      	ldr	r3, [pc, #212]	; (800480c <HAL_DMA2D_ConfigLayer+0x120>)
 8004738:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b0a      	cmp	r3, #10
 8004740:	d003      	beq.n	800474a <HAL_DMA2D_ConfigLayer+0x5e>
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b09      	cmp	r3, #9
 8004748:	d107      	bne.n	800475a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e005      	b.n	8004766 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	061b      	lsls	r3, r3, #24
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d120      	bne.n	80047ae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	43db      	mvns	r3, r3
 8004776:	ea02 0103 	and.w	r1, r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	430a      	orrs	r2, r1
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b0a      	cmp	r3, #10
 8004794:	d003      	beq.n	800479e <HAL_DMA2D_ConfigLayer+0xb2>
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b09      	cmp	r3, #9
 800479c:	d127      	bne.n	80047ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
 80047ac:	e01f      	b.n	80047ee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	ea02 0103 	and.w	r1, r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b0a      	cmp	r3, #10
 80047d6:	d003      	beq.n	80047e0 <HAL_DMA2D_ConfigLayer+0xf4>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b09      	cmp	r3, #9
 80047de:	d106      	bne.n	80047ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047ec:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	ff03000f 	.word	0xff03000f

08004810 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004810:	b480      	push	{r7}
 8004812:	b08b      	sub	sp, #44	; 0x2c
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	041a      	lsls	r2, r3, #16
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	431a      	orrs	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004848:	d174      	bne.n	8004934 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004850:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004858:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004860:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d108      	bne.n	8004882 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	431a      	orrs	r2, r3
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	4313      	orrs	r3, r2
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
 8004880:	e053      	b.n	800492a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d106      	bne.n	8004898 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4313      	orrs	r3, r2
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
 8004896:	e048      	b.n	800492a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d111      	bne.n	80048c4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	0cdb      	lsrs	r3, r3, #19
 80048a4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	0a9b      	lsrs	r3, r3, #10
 80048aa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	02db      	lsls	r3, r3, #11
 80048ba:	4313      	orrs	r3, r2
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	e032      	b.n	800492a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d117      	bne.n	80048fc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	0fdb      	lsrs	r3, r3, #31
 80048d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	0cdb      	lsrs	r3, r3, #19
 80048d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	0adb      	lsrs	r3, r3, #11
 80048dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	08db      	lsrs	r3, r3, #3
 80048e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	029b      	lsls	r3, r3, #10
 80048ec:	431a      	orrs	r2, r3
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	03db      	lsls	r3, r3, #15
 80048f2:	4313      	orrs	r3, r2
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e016      	b.n	800492a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	0f1b      	lsrs	r3, r3, #28
 8004900:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	0b1b      	lsrs	r3, r3, #12
 800490c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	011a      	lsls	r2, r3, #4
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	431a      	orrs	r2, r3
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	031b      	lsls	r3, r3, #12
 8004922:	4313      	orrs	r3, r2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004932:	e003      	b.n	800493c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	60da      	str	r2, [r3, #12]
}
 800493c:	bf00      	nop
 800493e:	372c      	adds	r7, #44	; 0x2c
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004948:	b480      	push	{r7}
 800494a:	b089      	sub	sp, #36	; 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	e177      	b.n	8004c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004964:	2201      	movs	r2, #1
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4013      	ands	r3, r2
 8004976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	429a      	cmp	r2, r3
 800497e:	f040 8166 	bne.w	8004c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d00b      	beq.n	80049a2 <HAL_GPIO_Init+0x5a>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d007      	beq.n	80049a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004996:	2b11      	cmp	r3, #17
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b12      	cmp	r3, #18
 80049a0:	d130      	bne.n	8004a04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	2203      	movs	r2, #3
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049d8:	2201      	movs	r2, #1
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 0201 	and.w	r2, r3, #1
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2203      	movs	r2, #3
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0xfc>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b12      	cmp	r3, #18
 8004a42:	d123      	bne.n	8004a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	08da      	lsrs	r2, r3, #3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3208      	adds	r2, #8
 8004a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	220f      	movs	r2, #15
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	08da      	lsrs	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3208      	adds	r2, #8
 8004a86:	69b9      	ldr	r1, [r7, #24]
 8004a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	2203      	movs	r2, #3
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0203 	and.w	r2, r3, #3
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80c0 	beq.w	8004c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b66      	ldr	r3, [pc, #408]	; (8004c6c <HAL_GPIO_Init+0x324>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	4a65      	ldr	r2, [pc, #404]	; (8004c6c <HAL_GPIO_Init+0x324>)
 8004ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004adc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ade:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <HAL_GPIO_Init+0x324>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aea:	4a61      	ldr	r2, [pc, #388]	; (8004c70 <HAL_GPIO_Init+0x328>)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	3302      	adds	r3, #2
 8004af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	220f      	movs	r2, #15
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a58      	ldr	r2, [pc, #352]	; (8004c74 <HAL_GPIO_Init+0x32c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d037      	beq.n	8004b86 <HAL_GPIO_Init+0x23e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_GPIO_Init+0x330>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d031      	beq.n	8004b82 <HAL_GPIO_Init+0x23a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a56      	ldr	r2, [pc, #344]	; (8004c7c <HAL_GPIO_Init+0x334>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d02b      	beq.n	8004b7e <HAL_GPIO_Init+0x236>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a55      	ldr	r2, [pc, #340]	; (8004c80 <HAL_GPIO_Init+0x338>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d025      	beq.n	8004b7a <HAL_GPIO_Init+0x232>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a54      	ldr	r2, [pc, #336]	; (8004c84 <HAL_GPIO_Init+0x33c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01f      	beq.n	8004b76 <HAL_GPIO_Init+0x22e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a53      	ldr	r2, [pc, #332]	; (8004c88 <HAL_GPIO_Init+0x340>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d019      	beq.n	8004b72 <HAL_GPIO_Init+0x22a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <HAL_GPIO_Init+0x344>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_GPIO_Init+0x226>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a51      	ldr	r2, [pc, #324]	; (8004c90 <HAL_GPIO_Init+0x348>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00d      	beq.n	8004b6a <HAL_GPIO_Init+0x222>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a50      	ldr	r2, [pc, #320]	; (8004c94 <HAL_GPIO_Init+0x34c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <HAL_GPIO_Init+0x21e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4f      	ldr	r2, [pc, #316]	; (8004c98 <HAL_GPIO_Init+0x350>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_GPIO_Init+0x21a>
 8004b5e:	2309      	movs	r3, #9
 8004b60:	e012      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b62:	230a      	movs	r3, #10
 8004b64:	e010      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b66:	2308      	movs	r3, #8
 8004b68:	e00e      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b6a:	2307      	movs	r3, #7
 8004b6c:	e00c      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b6e:	2306      	movs	r3, #6
 8004b70:	e00a      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b72:	2305      	movs	r3, #5
 8004b74:	e008      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b76:	2304      	movs	r3, #4
 8004b78:	e006      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e004      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b86:	2300      	movs	r3, #0
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	f002 0203 	and.w	r2, r2, #3
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	4093      	lsls	r3, r2
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b98:	4935      	ldr	r1, [pc, #212]	; (8004c70 <HAL_GPIO_Init+0x328>)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ba6:	4b3d      	ldr	r3, [pc, #244]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bca:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bf4:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bfa:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b0f      	cmp	r3, #15
 8004c58:	f67f ae84 	bls.w	8004964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	3724      	adds	r7, #36	; 0x24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40020000 	.word	0x40020000
 8004c78:	40020400 	.word	0x40020400
 8004c7c:	40020800 	.word	0x40020800
 8004c80:	40020c00 	.word	0x40020c00
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40021400 	.word	0x40021400
 8004c8c:	40021800 	.word	0x40021800
 8004c90:	40021c00 	.word	0x40021c00
 8004c94:	40022000 	.word	0x40022000
 8004c98:	40022400 	.word	0x40022400
 8004c9c:	40013c00 	.word	0x40013c00

08004ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	887b      	ldrh	r3, [r7, #2]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e001      	b.n	8004cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	807b      	strh	r3, [r7, #2]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ce0:	787b      	ldrb	r3, [r7, #1]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ce6:	887a      	ldrh	r2, [r7, #2]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cec:	e003      	b.n	8004cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cee:	887b      	ldrh	r3, [r7, #2]
 8004cf0:	041a      	lsls	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	619a      	str	r2, [r3, #24]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	401a      	ands	r2, r3
 8004d16:	887b      	ldrh	r3, [r7, #2]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d104      	bne.n	8004d26 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	041a      	lsls	r2, r3, #16
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d24:	e002      	b.n	8004d2c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d26:	887a      	ldrh	r2, [r7, #2]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	619a      	str	r2, [r3, #24]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e12b      	b.n	8004fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f95d 	bl	800501e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2224      	movs	r2, #36	; 0x24
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f001 ff1a 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 8004da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4a81      	ldr	r2, [pc, #516]	; (8004fac <HAL_I2C_Init+0x274>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d807      	bhi.n	8004dbc <HAL_I2C_Init+0x84>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a80      	ldr	r2, [pc, #512]	; (8004fb0 <HAL_I2C_Init+0x278>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	bf94      	ite	ls
 8004db4:	2301      	movls	r3, #1
 8004db6:	2300      	movhi	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e006      	b.n	8004dca <HAL_I2C_Init+0x92>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a7d      	ldr	r2, [pc, #500]	; (8004fb4 <HAL_I2C_Init+0x27c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	bf94      	ite	ls
 8004dc4:	2301      	movls	r3, #1
 8004dc6:	2300      	movhi	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0e7      	b.n	8004fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a78      	ldr	r2, [pc, #480]	; (8004fb8 <HAL_I2C_Init+0x280>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	0c9b      	lsrs	r3, r3, #18
 8004ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a6a      	ldr	r2, [pc, #424]	; (8004fac <HAL_I2C_Init+0x274>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d802      	bhi.n	8004e0c <HAL_I2C_Init+0xd4>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	e009      	b.n	8004e20 <HAL_I2C_Init+0xe8>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	4a69      	ldr	r2, [pc, #420]	; (8004fbc <HAL_I2C_Init+0x284>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	3301      	adds	r3, #1
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	495c      	ldr	r1, [pc, #368]	; (8004fac <HAL_I2C_Init+0x274>)
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	d819      	bhi.n	8004e74 <HAL_I2C_Init+0x13c>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1e59      	subs	r1, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e4e:	1c59      	adds	r1, r3, #1
 8004e50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e54:	400b      	ands	r3, r1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_I2C_Init+0x138>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1e59      	subs	r1, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e68:	3301      	adds	r3, #1
 8004e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6e:	e051      	b.n	8004f14 <HAL_I2C_Init+0x1dc>
 8004e70:	2304      	movs	r3, #4
 8004e72:	e04f      	b.n	8004f14 <HAL_I2C_Init+0x1dc>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d111      	bne.n	8004ea0 <HAL_I2C_Init+0x168>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	1e58      	subs	r0, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	440b      	add	r3, r1
 8004e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e012      	b.n	8004ec6 <HAL_I2C_Init+0x18e>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1e58      	subs	r0, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	0099      	lsls	r1, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Init+0x196>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e022      	b.n	8004f14 <HAL_I2C_Init+0x1dc>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_I2C_Init+0x1bc>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1e58      	subs	r0, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	440b      	add	r3, r1
 8004ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef2:	e00f      	b.n	8004f14 <HAL_I2C_Init+0x1dc>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1e58      	subs	r0, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	0099      	lsls	r1, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	6809      	ldr	r1, [r1, #0]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6911      	ldr	r1, [r2, #16]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	4311      	orrs	r1, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	000186a0 	.word	0x000186a0
 8004fb0:	001e847f 	.word	0x001e847f
 8004fb4:	003d08ff 	.word	0x003d08ff
 8004fb8:	431bde83 	.word	0x431bde83
 8004fbc:	10624dd3 	.word	0x10624dd3

08004fc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e021      	b.n	8005016 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f821 	bl	8005032 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	461a      	mov	r2, r3
 8005056:	4603      	mov	r3, r0
 8005058:	817b      	strh	r3, [r7, #10]
 800505a:	460b      	mov	r3, r1
 800505c:	813b      	strh	r3, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005062:	f7fe fedb 	bl	8003e1c <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b20      	cmp	r3, #32
 8005072:	f040 80d9 	bne.w	8005228 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	2319      	movs	r3, #25
 800507c:	2201      	movs	r2, #1
 800507e:	496d      	ldr	r1, [pc, #436]	; (8005234 <HAL_I2C_Mem_Write+0x1ec>)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fc89 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
 800508e:	e0cc      	b.n	800522a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_I2C_Mem_Write+0x56>
 800509a:	2302      	movs	r3, #2
 800509c:	e0c5      	b.n	800522a <HAL_I2C_Mem_Write+0x1e2>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d007      	beq.n	80050c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2221      	movs	r2, #33	; 0x21
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2240      	movs	r2, #64	; 0x40
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a3a      	ldr	r2, [r7, #32]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a4d      	ldr	r2, [pc, #308]	; (8005238 <HAL_I2C_Mem_Write+0x1f0>)
 8005104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005106:	88f8      	ldrh	r0, [r7, #6]
 8005108:	893a      	ldrh	r2, [r7, #8]
 800510a:	8979      	ldrh	r1, [r7, #10]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	4603      	mov	r3, r0
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fac4 	bl	80056a4 <I2C_RequestMemoryWrite>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d052      	beq.n	80051c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e081      	b.n	800522a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fd0a 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2b04      	cmp	r3, #4
 800513c:	d107      	bne.n	800514e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e06b      	b.n	800522a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b04      	cmp	r3, #4
 800518e:	d11b      	bne.n	80051c8 <HAL_I2C_Mem_Write+0x180>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	d017      	beq.n	80051c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1aa      	bne.n	8005126 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fcf6 	bl	8005bc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d107      	bne.n	80051f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e016      	b.n	800522a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	e000      	b.n	800522a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005228:	2302      	movs	r3, #2
  }
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	00100002 	.word	0x00100002
 8005238:	ffff0000 	.word	0xffff0000

0800523c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	; 0x30
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	4608      	mov	r0, r1
 8005246:	4611      	mov	r1, r2
 8005248:	461a      	mov	r2, r3
 800524a:	4603      	mov	r3, r0
 800524c:	817b      	strh	r3, [r7, #10]
 800524e:	460b      	mov	r3, r1
 8005250:	813b      	strh	r3, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005256:	f7fe fde1 	bl	8003e1c <HAL_GetTick>
 800525a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b20      	cmp	r3, #32
 8005266:	f040 8208 	bne.w	800567a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	2319      	movs	r3, #25
 8005270:	2201      	movs	r2, #1
 8005272:	497b      	ldr	r1, [pc, #492]	; (8005460 <HAL_I2C_Mem_Read+0x224>)
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fb8f 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
 8005282:	e1fb      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_I2C_Mem_Read+0x56>
 800528e:	2302      	movs	r3, #2
 8005290:	e1f4      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d007      	beq.n	80052b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2222      	movs	r2, #34	; 0x22
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2240      	movs	r2, #64	; 0x40
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a5b      	ldr	r2, [pc, #364]	; (8005464 <HAL_I2C_Mem_Read+0x228>)
 80052f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052fa:	88f8      	ldrh	r0, [r7, #6]
 80052fc:	893a      	ldrh	r2, [r7, #8]
 80052fe:	8979      	ldrh	r1, [r7, #10]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	4603      	mov	r3, r0
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fa5e 	bl	80057cc <I2C_RequestMemoryRead>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e1b0      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d113      	bne.n	800534a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e184      	b.n	8005654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	2b01      	cmp	r3, #1
 8005350:	d11b      	bne.n	800538a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e164      	b.n	8005654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	2b02      	cmp	r3, #2
 8005390:	d11b      	bne.n	80053ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	e144      	b.n	8005654 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053e0:	e138      	b.n	8005654 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	f200 80f1 	bhi.w	80055ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d123      	bne.n	800543c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fc25 	bl	8005c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e139      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800543a:	e10b      	b.n	8005654 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	2b02      	cmp	r3, #2
 8005442:	d14e      	bne.n	80054e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	2200      	movs	r2, #0
 800544c:	4906      	ldr	r1, [pc, #24]	; (8005468 <HAL_I2C_Mem_Read+0x22c>)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 faa2 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e10e      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
 800545e:	bf00      	nop
 8005460:	00100002 	.word	0x00100002
 8005464:	ffff0000 	.word	0xffff0000
 8005468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e0:	e0b8      	b.n	8005654 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2200      	movs	r2, #0
 80054ea:	4966      	ldr	r1, [pc, #408]	; (8005684 <HAL_I2C_Mem_Read+0x448>)
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fa53 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0bf      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	2200      	movs	r2, #0
 8005546:	494f      	ldr	r1, [pc, #316]	; (8005684 <HAL_I2C_Mem_Read+0x448>)
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fa25 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e091      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055cc:	e042      	b.n	8005654 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fb38 	bl	8005c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e04c      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d118      	bne.n	8005654 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	f47f aec2 	bne.w	80053e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	e000      	b.n	800567c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800567a:	2302      	movs	r3, #2
  }
}
 800567c:	4618      	mov	r0, r3
 800567e:	3728      	adds	r7, #40	; 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	00010004 	.word	0x00010004

08005688 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	b2db      	uxtb	r3, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	4608      	mov	r0, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	461a      	mov	r2, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	817b      	strh	r3, [r7, #10]
 80056b6:	460b      	mov	r3, r1
 80056b8:	813b      	strh	r3, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f95c 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00c      	beq.n	8005700 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e05f      	b.n	80057c0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005700:	897b      	ldrh	r3, [r7, #10]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800570e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	492c      	ldr	r1, [pc, #176]	; (80057c8 <I2C_RequestMemoryWrite+0x124>)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f995 	bl	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e04c      	b.n	80057c0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	6a39      	ldr	r1, [r7, #32]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f9ff 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00d      	beq.n	8005768 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	2b04      	cmp	r3, #4
 8005752:	d107      	bne.n	8005764 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005762:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e02b      	b.n	80057c0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d105      	bne.n	800577a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800576e:	893b      	ldrh	r3, [r7, #8]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	e021      	b.n	80057be <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800577a:	893b      	ldrh	r3, [r7, #8]
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	b29b      	uxth	r3, r3
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578a:	6a39      	ldr	r1, [r7, #32]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f9d9 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	2b04      	cmp	r3, #4
 800579e:	d107      	bne.n	80057b0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e005      	b.n	80057c0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b4:	893b      	ldrh	r3, [r7, #8]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	00010002 	.word	0x00010002

080057cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	461a      	mov	r2, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	817b      	strh	r3, [r7, #10]
 80057de:	460b      	mov	r3, r1
 80057e0:	813b      	strh	r3, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005804:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2200      	movs	r2, #0
 800580e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f8c0 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00c      	beq.n	8005838 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e0a9      	b.n	800598c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005838:	897b      	ldrh	r3, [r7, #10]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005846:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	4951      	ldr	r1, [pc, #324]	; (8005994 <I2C_RequestMemoryRead+0x1c8>)
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f8f9 	bl	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e096      	b.n	800598c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	6a39      	ldr	r1, [r7, #32]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f963 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	2b04      	cmp	r3, #4
 800588a:	d107      	bne.n	800589c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800589a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e075      	b.n	800598c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d105      	bne.n	80058b2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058a6:	893b      	ldrh	r3, [r7, #8]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	611a      	str	r2, [r3, #16]
 80058b0:	e021      	b.n	80058f6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058b2:	893b      	ldrh	r3, [r7, #8]
 80058b4:	0a1b      	lsrs	r3, r3, #8
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	6a39      	ldr	r1, [r7, #32]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f93d 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00d      	beq.n	80058ec <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d107      	bne.n	80058e8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e04f      	b.n	800598c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ec:	893b      	ldrh	r3, [r7, #8]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	6a39      	ldr	r1, [r7, #32]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f922 	bl	8005b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00d      	beq.n	8005922 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	2b04      	cmp	r3, #4
 800590c:	d107      	bne.n	800591e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e034      	b.n	800598c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	2200      	movs	r2, #0
 800593a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f82a 	bl	8005998 <I2C_WaitOnFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e013      	b.n	800598c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	4906      	ldr	r1, [pc, #24]	; (8005994 <I2C_RequestMemoryRead+0x1c8>)
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f863 	bl	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	00010002 	.word	0x00010002

08005998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a8:	e025      	b.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d021      	beq.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fe fa33 	bl	8003e1c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d116      	bne.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e023      	b.n	8005a3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10d      	bne.n	8005a1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	43da      	mvns	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf0c      	ite	eq
 8005a12:	2301      	moveq	r3, #1
 8005a14:	2300      	movne	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	e00c      	b.n	8005a36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d0b6      	beq.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a54:	e051      	b.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d123      	bne.n	8005aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0204 	orr.w	r2, r3, #4
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e046      	b.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d021      	beq.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab6:	f7fe f9b1 	bl	8003e1c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d302      	bcc.n	8005acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d116      	bne.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f043 0220 	orr.w	r2, r3, #32
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e020      	b.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10c      	bne.n	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	43da      	mvns	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	e00b      	b.n	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	43da      	mvns	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d18d      	bne.n	8005a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b50:	e02d      	b.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f8ce 	bl	8005cf4 <I2C_IsAcknowledgeFailed>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e02d      	b.n	8005bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d021      	beq.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6a:	f7fe f957 	bl	8003e1c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d116      	bne.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e007      	b.n	8005bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d1ca      	bne.n	8005b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd2:	e02d      	b.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f88d 	bl	8005cf4 <I2C_IsAcknowledgeFailed>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e02d      	b.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d021      	beq.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bec:	f7fe f916 	bl	8003e1c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d302      	bcc.n	8005c02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d116      	bne.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e007      	b.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d1ca      	bne.n	8005bd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c54:	e042      	b.n	8005cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d119      	bne.n	8005c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0210 	mvn.w	r2, #16
 8005c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e029      	b.n	8005cec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fe f8c0 	bl	8003e1c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d116      	bne.n	8005cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	f043 0220 	orr.w	r2, r3, #32
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e007      	b.n	8005cec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d1b5      	bne.n	8005c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0a:	d11b      	bne.n	8005d44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	f043 0204 	orr.w	r2, r3, #4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e0bf      	b.n	8005ee6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8ba 	bl	8005ef4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d96:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6999      	ldr	r1, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6899      	ldr	r1, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <HAL_LTDC_Init+0x19c>)
 8005dc8:	400b      	ands	r3, r1
 8005dca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6899      	ldr	r1, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68d9      	ldr	r1, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	4b3e      	ldr	r3, [pc, #248]	; (8005ef0 <HAL_LTDC_Init+0x19c>)
 8005df6:	400b      	ands	r3, r1
 8005df8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68d9      	ldr	r1, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6919      	ldr	r1, [r3, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <HAL_LTDC_Init+0x19c>)
 8005e24:	400b      	ands	r3, r1
 8005e26:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6919      	ldr	r1, [r3, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6959      	ldr	r1, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <HAL_LTDC_Init+0x19c>)
 8005e52:	400b      	ands	r3, r1
 8005e54:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	041b      	lsls	r3, r3, #16
 8005e5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6959      	ldr	r1, [r3, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0206 	orr.w	r2, r2, #6
 8005ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	f000f800 	.word	0xf000f800

08005ef4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f08:	b5b0      	push	{r4, r5, r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_LTDC_ConfigLayer+0x1a>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e02c      	b.n	8005f7c <HAL_LTDC_ConfigLayer+0x74>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2134      	movs	r1, #52	; 0x34
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f83b 	bl	8005fd8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2201      	movs	r2, #1
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bdb0      	pop	{r4, r5, r7, pc}

08005f84 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_LTDC_EnableDither+0x16>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e016      	b.n	8005fc8 <HAL_LTDC_EnableDither+0x44>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <HAL_LTDC_EnableDither+0x50>)
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <HAL_LTDC_EnableDither+0x50>)
 8005fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40016800 	.word	0x40016800

08005fd8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff4:	4413      	add	r3, r2
 8005ff6:	041b      	lsls	r3, r3, #16
 8005ff8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	01db      	lsls	r3, r3, #7
 8006004:	4413      	add	r3, r2
 8006006:	3384      	adds	r3, #132	; 0x84
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	4611      	mov	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	01d2      	lsls	r2, r2, #7
 8006014:	440a      	add	r2, r1
 8006016:	3284      	adds	r2, #132	; 0x84
 8006018:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800601c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	0c1b      	lsrs	r3, r3, #16
 800602a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602e:	4413      	add	r3, r2
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	01db      	lsls	r3, r3, #7
 800603c:	440b      	add	r3, r1
 800603e:	3384      	adds	r3, #132	; 0x84
 8006040:	4619      	mov	r1, r3
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006056:	4413      	add	r3, r2
 8006058:	041b      	lsls	r3, r3, #16
 800605a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	01db      	lsls	r3, r3, #7
 8006066:	4413      	add	r3, r2
 8006068:	3384      	adds	r3, #132	; 0x84
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	4611      	mov	r1, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	01d2      	lsls	r2, r2, #7
 8006076:	440a      	add	r2, r1
 8006078:	3284      	adds	r2, #132	; 0x84
 800607a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800607e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800608e:	4413      	add	r3, r2
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4619      	mov	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	440b      	add	r3, r1
 800609e:	3384      	adds	r3, #132	; 0x84
 80060a0:	4619      	mov	r1, r3
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	4413      	add	r3, r2
 80060b4:	3384      	adds	r3, #132	; 0x84
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	4611      	mov	r1, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	01d2      	lsls	r2, r2, #7
 80060c2:	440a      	add	r2, r1
 80060c4:	3284      	adds	r2, #132	; 0x84
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	01db      	lsls	r3, r3, #7
 80060d6:	4413      	add	r3, r2
 80060d8:	3384      	adds	r3, #132	; 0x84
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	061b      	lsls	r3, r3, #24
 80060fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	4413      	add	r3, r2
 800610a:	3384      	adds	r3, #132	; 0x84
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	01db      	lsls	r3, r3, #7
 8006118:	4413      	add	r3, r2
 800611a:	3384      	adds	r3, #132	; 0x84
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006128:	461a      	mov	r2, r3
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	431a      	orrs	r2, r3
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	01db      	lsls	r3, r3, #7
 800613c:	440b      	add	r3, r1
 800613e:	3384      	adds	r3, #132	; 0x84
 8006140:	4619      	mov	r1, r3
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	01db      	lsls	r3, r3, #7
 8006152:	4413      	add	r3, r2
 8006154:	3384      	adds	r3, #132	; 0x84
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	4611      	mov	r1, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	01d2      	lsls	r2, r2, #7
 8006162:	440a      	add	r2, r1
 8006164:	3284      	adds	r2, #132	; 0x84
 8006166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800616a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	01db      	lsls	r3, r3, #7
 8006176:	4413      	add	r3, r2
 8006178:	3384      	adds	r3, #132	; 0x84
 800617a:	461a      	mov	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	01db      	lsls	r3, r3, #7
 800618c:	4413      	add	r3, r2
 800618e:	3384      	adds	r3, #132	; 0x84
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	4611      	mov	r1, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	01d2      	lsls	r2, r2, #7
 800619c:	440a      	add	r2, r1
 800619e:	3284      	adds	r2, #132	; 0x84
 80061a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061a4:	f023 0307 	bic.w	r3, r3, #7
 80061a8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	6809      	ldr	r1, [r1, #0]
 80061b6:	4608      	mov	r0, r1
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	01c9      	lsls	r1, r1, #7
 80061bc:	4401      	add	r1, r0
 80061be:	3184      	adds	r1, #132	; 0x84
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	01db      	lsls	r3, r3, #7
 80061ce:	4413      	add	r3, r2
 80061d0:	3384      	adds	r3, #132	; 0x84
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	01db      	lsls	r3, r3, #7
 80061de:	4413      	add	r3, r2
 80061e0:	3384      	adds	r3, #132	; 0x84
 80061e2:	461a      	mov	r2, r3
 80061e4:	2300      	movs	r3, #0
 80061e6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	01db      	lsls	r3, r3, #7
 80061f2:	4413      	add	r3, r2
 80061f4:	3384      	adds	r3, #132	; 0x84
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006206:	2304      	movs	r3, #4
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	e01b      	b.n	8006244 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d102      	bne.n	800621a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006214:	2303      	movs	r3, #3
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e014      	b.n	8006244 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b04      	cmp	r3, #4
 8006220:	d00b      	beq.n	800623a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006226:	2b02      	cmp	r3, #2
 8006228:	d007      	beq.n	800623a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800622e:	2b03      	cmp	r3, #3
 8006230:	d003      	beq.n	800623a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006236:	2b07      	cmp	r3, #7
 8006238:	d102      	bne.n	8006240 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800623a:	2302      	movs	r3, #2
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	e001      	b.n	8006244 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006240:	2301      	movs	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	01db      	lsls	r3, r3, #7
 800624e:	4413      	add	r3, r2
 8006250:	3384      	adds	r3, #132	; 0x84
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	4611      	mov	r1, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	01d2      	lsls	r2, r2, #7
 800625e:	440a      	add	r2, r1
 8006260:	3284      	adds	r2, #132	; 0x84
 8006262:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006266:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	041a      	lsls	r2, r3, #16
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	1acb      	subs	r3, r1, r3
 800627e:	69f9      	ldr	r1, [r7, #28]
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	3303      	adds	r3, #3
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	6809      	ldr	r1, [r1, #0]
 800628a:	4608      	mov	r0, r1
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	01c9      	lsls	r1, r1, #7
 8006290:	4401      	add	r1, r0
 8006292:	3184      	adds	r1, #132	; 0x84
 8006294:	4313      	orrs	r3, r2
 8006296:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	01db      	lsls	r3, r3, #7
 80062a2:	4413      	add	r3, r2
 80062a4:	3384      	adds	r3, #132	; 0x84
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	4611      	mov	r1, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	01d2      	lsls	r2, r2, #7
 80062b2:	440a      	add	r2, r1
 80062b4:	3284      	adds	r2, #132	; 0x84
 80062b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	01db      	lsls	r3, r3, #7
 80062ca:	4413      	add	r3, r2
 80062cc:	3384      	adds	r3, #132	; 0x84
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	4413      	add	r3, r2
 80062e2:	3384      	adds	r3, #132	; 0x84
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	4611      	mov	r1, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	01d2      	lsls	r2, r2, #7
 80062f0:	440a      	add	r2, r1
 80062f2:	3284      	adds	r2, #132	; 0x84
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	6013      	str	r3, [r2, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3724      	adds	r7, #36	; 0x24
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e25e      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d075      	beq.n	8006412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006326:	4b88      	ldr	r3, [pc, #544]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
 800632e:	2b04      	cmp	r3, #4
 8006330:	d00c      	beq.n	800634c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006332:	4b85      	ldr	r3, [pc, #532]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800633a:	2b08      	cmp	r3, #8
 800633c:	d112      	bne.n	8006364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633e:	4b82      	ldr	r3, [pc, #520]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800634a:	d10b      	bne.n	8006364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800634c:	4b7e      	ldr	r3, [pc, #504]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d05b      	beq.n	8006410 <HAL_RCC_OscConfig+0x108>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d157      	bne.n	8006410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e239      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636c:	d106      	bne.n	800637c <HAL_RCC_OscConfig+0x74>
 800636e:	4b76      	ldr	r3, [pc, #472]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a75      	ldr	r2, [pc, #468]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e01d      	b.n	80063b8 <HAL_RCC_OscConfig+0xb0>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006384:	d10c      	bne.n	80063a0 <HAL_RCC_OscConfig+0x98>
 8006386:	4b70      	ldr	r3, [pc, #448]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a6f      	ldr	r2, [pc, #444]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 800638c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	4b6d      	ldr	r3, [pc, #436]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6c      	ldr	r2, [pc, #432]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	e00b      	b.n	80063b8 <HAL_RCC_OscConfig+0xb0>
 80063a0:	4b69      	ldr	r3, [pc, #420]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a68      	ldr	r2, [pc, #416]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80063a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	4b66      	ldr	r3, [pc, #408]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a65      	ldr	r2, [pc, #404]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80063b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d013      	beq.n	80063e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c0:	f7fd fd2c 	bl	8003e1c <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063c8:	f7fd fd28 	bl	8003e1c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b64      	cmp	r3, #100	; 0x64
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e1fe      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063da:	4b5b      	ldr	r3, [pc, #364]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCC_OscConfig+0xc0>
 80063e6:	e014      	b.n	8006412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fd fd18 	bl	8003e1c <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f0:	f7fd fd14 	bl	8003e1c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	; 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e1ea      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006402:	4b51      	ldr	r3, [pc, #324]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0xe8>
 800640e:	e000      	b.n	8006412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d063      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800641e:	4b4a      	ldr	r3, [pc, #296]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 030c 	and.w	r3, r3, #12
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800642a:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006432:	2b08      	cmp	r3, #8
 8006434:	d11c      	bne.n	8006470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006436:	4b44      	ldr	r3, [pc, #272]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d116      	bne.n	8006470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006442:	4b41      	ldr	r3, [pc, #260]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_RCC_OscConfig+0x152>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d001      	beq.n	800645a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e1be      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645a:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4937      	ldr	r1, [pc, #220]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 800646a:	4313      	orrs	r3, r2
 800646c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646e:	e03a      	b.n	80064e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d020      	beq.n	80064ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006478:	4b34      	ldr	r3, [pc, #208]	; (800654c <HAL_RCC_OscConfig+0x244>)
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647e:	f7fd fccd 	bl	8003e1c <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006486:	f7fd fcc9 	bl	8003e1c <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e19f      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006498:	4b2b      	ldr	r3, [pc, #172]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a4:	4b28      	ldr	r3, [pc, #160]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	4925      	ldr	r1, [pc, #148]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]
 80064b8:	e015      	b.n	80064e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <HAL_RCC_OscConfig+0x244>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c0:	f7fd fcac 	bl	8003e1c <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c8:	f7fd fca8 	bl	8003e1c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e17e      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064da:	4b1b      	ldr	r3, [pc, #108]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f0      	bne.n	80064c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d036      	beq.n	8006560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d016      	beq.n	8006528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064fa:	4b15      	ldr	r3, [pc, #84]	; (8006550 <HAL_RCC_OscConfig+0x248>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006500:	f7fd fc8c 	bl	8003e1c <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006508:	f7fd fc88 	bl	8003e1c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e15e      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800651a:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <HAL_RCC_OscConfig+0x240>)
 800651c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x200>
 8006526:	e01b      	b.n	8006560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <HAL_RCC_OscConfig+0x248>)
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652e:	f7fd fc75 	bl	8003e1c <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006534:	e00e      	b.n	8006554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006536:	f7fd fc71 	bl	8003e1c <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d907      	bls.n	8006554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e147      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
 8006548:	40023800 	.word	0x40023800
 800654c:	42470000 	.word	0x42470000
 8006550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006554:	4b88      	ldr	r3, [pc, #544]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ea      	bne.n	8006536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8097 	beq.w	800669c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006572:	4b81      	ldr	r3, [pc, #516]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10f      	bne.n	800659e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800657e:	2300      	movs	r3, #0
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	4b7d      	ldr	r3, [pc, #500]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	4a7c      	ldr	r2, [pc, #496]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658c:	6413      	str	r3, [r2, #64]	; 0x40
 800658e:	4b7a      	ldr	r3, [pc, #488]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659e:	4b77      	ldr	r3, [pc, #476]	; (800677c <HAL_RCC_OscConfig+0x474>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d118      	bne.n	80065dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065aa:	4b74      	ldr	r3, [pc, #464]	; (800677c <HAL_RCC_OscConfig+0x474>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a73      	ldr	r2, [pc, #460]	; (800677c <HAL_RCC_OscConfig+0x474>)
 80065b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065b6:	f7fd fc31 	bl	8003e1c <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065bc:	e008      	b.n	80065d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065be:	f7fd fc2d 	bl	8003e1c <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e103      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d0:	4b6a      	ldr	r3, [pc, #424]	; (800677c <HAL_RCC_OscConfig+0x474>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f0      	beq.n	80065be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d106      	bne.n	80065f2 <HAL_RCC_OscConfig+0x2ea>
 80065e4:	4b64      	ldr	r3, [pc, #400]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 80065e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e8:	4a63      	ldr	r2, [pc, #396]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	6713      	str	r3, [r2, #112]	; 0x70
 80065f0:	e01c      	b.n	800662c <HAL_RCC_OscConfig+0x324>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b05      	cmp	r3, #5
 80065f8:	d10c      	bne.n	8006614 <HAL_RCC_OscConfig+0x30c>
 80065fa:	4b5f      	ldr	r3, [pc, #380]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fe:	4a5e      	ldr	r2, [pc, #376]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006600:	f043 0304 	orr.w	r3, r3, #4
 8006604:	6713      	str	r3, [r2, #112]	; 0x70
 8006606:	4b5c      	ldr	r3, [pc, #368]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	4a5b      	ldr	r2, [pc, #364]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	6713      	str	r3, [r2, #112]	; 0x70
 8006612:	e00b      	b.n	800662c <HAL_RCC_OscConfig+0x324>
 8006614:	4b58      	ldr	r3, [pc, #352]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a57      	ldr	r2, [pc, #348]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
 8006620:	4b55      	ldr	r3, [pc, #340]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	4a54      	ldr	r2, [pc, #336]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006626:	f023 0304 	bic.w	r3, r3, #4
 800662a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d015      	beq.n	8006660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006634:	f7fd fbf2 	bl	8003e1c <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663a:	e00a      	b.n	8006652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800663c:	f7fd fbee 	bl	8003e1c <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	; 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e0c2      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006652:	4b49      	ldr	r3, [pc, #292]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0ee      	beq.n	800663c <HAL_RCC_OscConfig+0x334>
 800665e:	e014      	b.n	800668a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006660:	f7fd fbdc 	bl	8003e1c <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006666:	e00a      	b.n	800667e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fd fbd8 	bl	8003e1c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	; 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e0ac      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800667e:	4b3e      	ldr	r3, [pc, #248]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1ee      	bne.n	8006668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d105      	bne.n	800669c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006690:	4b39      	ldr	r3, [pc, #228]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	4a38      	ldr	r2, [pc, #224]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8098 	beq.w	80067d6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066a6:	4b34      	ldr	r3, [pc, #208]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d05c      	beq.n	800676c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d141      	bne.n	800673e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ba:	4b31      	ldr	r3, [pc, #196]	; (8006780 <HAL_RCC_OscConfig+0x478>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c0:	f7fd fbac 	bl	8003e1c <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c8:	f7fd fba8 	bl	8003e1c <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e07e      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066da:	4b27      	ldr	r3, [pc, #156]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	019b      	lsls	r3, r3, #6
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	3b01      	subs	r3, #1
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	061b      	lsls	r3, r3, #24
 800670a:	491b      	ldr	r1, [pc, #108]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 800670c:	4313      	orrs	r3, r2
 800670e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006710:	4b1b      	ldr	r3, [pc, #108]	; (8006780 <HAL_RCC_OscConfig+0x478>)
 8006712:	2201      	movs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006716:	f7fd fb81 	bl	8003e1c <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800671e:	f7fd fb7d 	bl	8003e1c <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e053      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006730:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0f0      	beq.n	800671e <HAL_RCC_OscConfig+0x416>
 800673c:	e04b      	b.n	80067d6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673e:	4b10      	ldr	r3, [pc, #64]	; (8006780 <HAL_RCC_OscConfig+0x478>)
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006744:	f7fd fb6a 	bl	8003e1c <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674c:	f7fd fb66 	bl	8003e1c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e03c      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_RCC_OscConfig+0x470>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f0      	bne.n	800674c <HAL_RCC_OscConfig+0x444>
 800676a:	e034      	b.n	80067d6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d107      	bne.n	8006784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e02f      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
 8006778:	40023800 	.word	0x40023800
 800677c:	40007000 	.word	0x40007000
 8006780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006784:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <HAL_RCC_OscConfig+0x4d8>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	429a      	cmp	r2, r3
 8006796:	d11c      	bne.n	80067d2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d115      	bne.n	80067d2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067ac:	4013      	ands	r3, r2
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10d      	bne.n	80067d2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d106      	bne.n	80067d2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d001      	beq.n	80067d6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40023800 	.word	0x40023800

080067e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0cc      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067f8:	4b68      	ldr	r3, [pc, #416]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d90c      	bls.n	8006820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b65      	ldr	r3, [pc, #404]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800680e:	4b63      	ldr	r3, [pc, #396]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0b8      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006838:	4b59      	ldr	r3, [pc, #356]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	4a58      	ldr	r2, [pc, #352]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006850:	4b53      	ldr	r3, [pc, #332]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a52      	ldr	r2, [pc, #328]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800685a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800685c:	4b50      	ldr	r3, [pc, #320]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	494d      	ldr	r1, [pc, #308]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d044      	beq.n	8006904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d107      	bne.n	8006892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006882:	4b47      	ldr	r3, [pc, #284]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d119      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e07f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d107      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b2:	4b3b      	ldr	r3, [pc, #236]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e067      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c2:	4b37      	ldr	r3, [pc, #220]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 0203 	bic.w	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4934      	ldr	r1, [pc, #208]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068d4:	f7fd faa2 	bl	8003e1c <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068dc:	f7fd fa9e 	bl	8003e1c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e04f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 020c 	and.w	r2, r3, #12
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	429a      	cmp	r2, r3
 8006902:	d1eb      	bne.n	80068dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006904:	4b25      	ldr	r3, [pc, #148]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d20c      	bcs.n	800692c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b22      	ldr	r3, [pc, #136]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800691a:	4b20      	ldr	r3, [pc, #128]	; (800699c <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 030f 	and.w	r3, r3, #15
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e032      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006938:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4916      	ldr	r1, [pc, #88]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	490e      	ldr	r1, [pc, #56]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800696a:	f000 f821 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 800696e:	4602      	mov	r2, r0
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	490a      	ldr	r1, [pc, #40]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 800697c:	5ccb      	ldrb	r3, [r1, r3]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <HAL_RCC_ClockConfig+0x1c8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7fd fa02 	bl	8003d94 <HAL_InitTick>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40023c00 	.word	0x40023c00
 80069a0:	40023800 	.word	0x40023800
 80069a4:	08009eec 	.word	0x08009eec
 80069a8:	200002d8 	.word	0x200002d8
 80069ac:	20000370 	.word	0x20000370

080069b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b094      	sub	sp, #80	; 0x50
 80069b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	647b      	str	r3, [r7, #68]	; 0x44
 80069bc:	2300      	movs	r3, #0
 80069be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c0:	2300      	movs	r3, #0
 80069c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069c8:	4b79      	ldr	r3, [pc, #484]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d00d      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x40>
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 80e1 	bhi.w	8006b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x34>
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d003      	beq.n	80069ea <HAL_RCC_GetSysClockFreq+0x3a>
 80069e2:	e0db      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069e4:	4b73      	ldr	r3, [pc, #460]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80069e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80069e8:	e0db      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ea:	4b73      	ldr	r3, [pc, #460]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80069ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069ee:	e0d8      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f0:	4b6f      	ldr	r3, [pc, #444]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069fa:	4b6d      	ldr	r3, [pc, #436]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d063      	beq.n	8006ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a06:	4b6a      	ldr	r3, [pc, #424]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	099b      	lsrs	r3, r3, #6
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a18:	633b      	str	r3, [r7, #48]	; 0x30
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	f04f 0000 	mov.w	r0, #0
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	0159      	lsls	r1, r3, #5
 8006a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a34:	0150      	lsls	r0, r2, #5
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	1a51      	subs	r1, r2, r1
 8006a3e:	6139      	str	r1, [r7, #16]
 8006a40:	4629      	mov	r1, r5
 8006a42:	eb63 0301 	sbc.w	r3, r3, r1
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a54:	4659      	mov	r1, fp
 8006a56:	018b      	lsls	r3, r1, #6
 8006a58:	4651      	mov	r1, sl
 8006a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a5e:	4651      	mov	r1, sl
 8006a60:	018a      	lsls	r2, r1, #6
 8006a62:	4651      	mov	r1, sl
 8006a64:	ebb2 0801 	subs.w	r8, r2, r1
 8006a68:	4659      	mov	r1, fp
 8006a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a82:	4690      	mov	r8, r2
 8006a84:	4699      	mov	r9, r3
 8006a86:	4623      	mov	r3, r4
 8006a88:	eb18 0303 	adds.w	r3, r8, r3
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	462b      	mov	r3, r5
 8006a90:	eb49 0303 	adc.w	r3, r9, r3
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	024b      	lsls	r3, r1, #9
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006aac:	4621      	mov	r1, r4
 8006aae:	024a      	lsls	r2, r1, #9
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ac0:	f7f9 fc46 	bl	8000350 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4613      	mov	r3, r2
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006acc:	e058      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ace:	4b38      	ldr	r3, [pc, #224]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	099b      	lsrs	r3, r3, #6
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	4611      	mov	r1, r2
 8006ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	f04f 0000 	mov.w	r0, #0
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	0159      	lsls	r1, r3, #5
 8006af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006afa:	0150      	lsls	r0, r2, #5
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4641      	mov	r1, r8
 8006b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b06:	4649      	mov	r1, r9
 8006b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b20:	ebb2 040a 	subs.w	r4, r2, sl
 8006b24:	eb63 050b 	sbc.w	r5, r3, fp
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	00eb      	lsls	r3, r5, #3
 8006b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b36:	00e2      	lsls	r2, r4, #3
 8006b38:	4614      	mov	r4, r2
 8006b3a:	461d      	mov	r5, r3
 8006b3c:	4643      	mov	r3, r8
 8006b3e:	18e3      	adds	r3, r4, r3
 8006b40:	603b      	str	r3, [r7, #0]
 8006b42:	464b      	mov	r3, r9
 8006b44:	eb45 0303 	adc.w	r3, r5, r3
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b56:	4629      	mov	r1, r5
 8006b58:	028b      	lsls	r3, r1, #10
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b60:	4621      	mov	r1, r4
 8006b62:	028a      	lsls	r2, r1, #10
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	61fa      	str	r2, [r7, #28]
 8006b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b74:	f7f9 fbec 	bl	8000350 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3750      	adds	r7, #80	; 0x50
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bae:	bf00      	nop
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	00f42400 	.word	0x00f42400
 8006bb8:	007a1200 	.word	0x007a1200

08006bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	200002d8 	.word	0x200002d8

08006bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bd8:	f7ff fff0 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0a9b      	lsrs	r3, r3, #10
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4903      	ldr	r1, [pc, #12]	; (8006bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	08009efc 	.word	0x08009efc

08006bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d075      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c30:	4b91      	ldr	r3, [pc, #580]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c36:	f7fd f8f1 	bl	8003e1c <HAL_GetTick>
 8006c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c3c:	e008      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c3e:	f7fd f8ed 	bl	8003e1c <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e189      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c50:	4b8a      	ldr	r3, [pc, #552]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1f0      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	019a      	lsls	r2, r3, #6
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	071b      	lsls	r3, r3, #28
 8006c74:	4981      	ldr	r1, [pc, #516]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01f      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c88:	4b7c      	ldr	r3, [pc, #496]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8e:	0f1b      	lsrs	r3, r3, #28
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	019a      	lsls	r2, r3, #6
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	071b      	lsls	r3, r3, #28
 8006ca8:	4974      	ldr	r1, [pc, #464]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006cb0:	4b72      	ldr	r3, [pc, #456]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb6:	f023 021f 	bic.w	r2, r3, #31
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	496e      	ldr	r1, [pc, #440]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00d      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	019a      	lsls	r2, r3, #6
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	061b      	lsls	r3, r3, #24
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	071b      	lsls	r3, r3, #28
 8006ce8:	4964      	ldr	r1, [pc, #400]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cf0:	4b61      	ldr	r3, [pc, #388]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cf6:	f7fd f891 	bl	8003e1c <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cfe:	f7fd f88d 	bl	8003e1c <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e129      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d10:	4b5a      	ldr	r3, [pc, #360]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0f0      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d079      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d34:	4b52      	ldr	r3, [pc, #328]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d3a:	f7fd f86f 	bl	8003e1c <HAL_GetTick>
 8006d3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d40:	e008      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d42:	f7fd f86b 	bl	8003e1c <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d901      	bls.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e107      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d54:	4b49      	ldr	r3, [pc, #292]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d60:	d0ef      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d020      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d6e:	4b43      	ldr	r3, [pc, #268]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d74:	0f1b      	lsrs	r3, r3, #28
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	019a      	lsls	r2, r3, #6
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	061b      	lsls	r3, r3, #24
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	071b      	lsls	r3, r3, #28
 8006d8e:	493b      	ldr	r1, [pc, #236]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d96:	4b39      	ldr	r3, [pc, #228]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	4934      	ldr	r1, [pc, #208]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01e      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dbc:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	0e1b      	lsrs	r3, r3, #24
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	019a      	lsls	r2, r3, #6
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	061b      	lsls	r3, r3, #24
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	071b      	lsls	r3, r3, #28
 8006ddc:	4927      	ldr	r1, [pc, #156]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006de4:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	4922      	ldr	r1, [pc, #136]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dfa:	4b21      	ldr	r3, [pc, #132]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e00:	f7fd f80c 	bl	8003e1c <HAL_GetTick>
 8006e04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e06:	e008      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e08:	f7fd f808 	bl	8003e1c <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e0a4      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e1a:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e26:	d1ef      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 808b 	beq.w	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	4b10      	ldr	r3, [pc, #64]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	4a0f      	ldr	r2, [pc, #60]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e44:	6413      	str	r3, [r2, #64]	; 0x40
 8006e46:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a0b      	ldr	r2, [pc, #44]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e5e:	f7fc ffdd 	bl	8003e1c <HAL_GetTick>
 8006e62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e64:	e010      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e66:	f7fc ffd9 	bl	8003e1c <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d909      	bls.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e075      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006e78:	42470068 	.word	0x42470068
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	42470070 	.word	0x42470070
 8006e84:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e88:	4b38      	ldr	r3, [pc, #224]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0e8      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e94:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02f      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d028      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eb2:	4b2f      	ldr	r3, [pc, #188]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ebc:	4b2d      	ldr	r3, [pc, #180]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ec2:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ec8:	4a29      	ldr	r2, [pc, #164]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ece:	4b28      	ldr	r3, [pc, #160]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d114      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006eda:	f7fc ff9f 	bl	8003e1c <HAL_GetTick>
 8006ede:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee2:	f7fc ff9b 	bl	8003e1c <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e035      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0ee      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f10:	d10d      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006f12:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f26:	4912      	ldr	r1, [pc, #72]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	608b      	str	r3, [r1, #8]
 8006f2c:	e005      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	4a0f      	ldr	r2, [pc, #60]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f38:	6093      	str	r3, [r2, #8]
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f46:	490a      	ldr	r1, [pc, #40]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006f5e:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006f60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40007000 	.word	0x40007000
 8006f70:	40023800 	.word	0x40023800
 8006f74:	42470e40 	.word	0x42470e40
 8006f78:	424711e0 	.word	0x424711e0

08006f7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e025      	b.n	8006fdc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d106      	bne.n	8006faa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f81d 	bl	8006fe4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f000 ff0f 	bl	8007de0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	f000 ff7a 	bl	8007ec6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d101      	bne.n	8007014 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007010:	2302      	movs	r3, #2
 8007012:	e018      	b.n	8007046 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 ffcd 	bl	8007fc4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d104      	bne.n	800703c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2205      	movs	r2, #5
 8007036:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800703a:	e003      	b.n	8007044 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d101      	bne.n	8007068 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
 8007066:	e00e      	b.n	8007086 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 ffe0 	bl	800803c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e05d      	b.n	800715c <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f87d 	bl	80071b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	ea42 0103 	orr.w	r1, r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	f003 0104 	and.w	r1, r3, #4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007130:	d104      	bne.n	800713c <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800713a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69da      	ldr	r2, [r3, #28]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800714a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e01a      	b.n	80071ac <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f81a 	bl	80071c8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_SPI_Transmit+0x22>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e140      	b.n	8007480 <HAL_SPI_Transmit+0x2a4>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007206:	f7fc fe09 	bl	8003e1c <HAL_GetTick>
 800720a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d002      	beq.n	8007222 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800721c:	2302      	movs	r3, #2
 800721e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007220:	e125      	b.n	800746e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_SPI_Transmit+0x52>
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007232:	e11c      	b.n	800746e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2203      	movs	r2, #3
 8007238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	88fa      	ldrh	r2, [r7, #6]
 800724c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800727a:	d107      	bne.n	800728c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800728a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007294:	d10f      	bne.n	80072b6 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d007      	beq.n	80072d4 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072dc:	d14b      	bne.n	8007376 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_SPI_Transmit+0x110>
 80072e6:	8afb      	ldrh	r3, [r7, #22]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d13e      	bne.n	800736a <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	1c9a      	adds	r2, r3, #2
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007310:	e02b      	b.n	800736a <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b02      	cmp	r3, #2
 800731e:	d112      	bne.n	8007346 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	881a      	ldrh	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	1c9a      	adds	r2, r3, #2
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	86da      	strh	r2, [r3, #54]	; 0x36
 8007344:	e011      	b.n	800736a <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007346:	f7fc fd69 	bl	8003e1c <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d803      	bhi.n	800735e <HAL_SPI_Transmit+0x182>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735c:	d102      	bne.n	8007364 <HAL_SPI_Transmit+0x188>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007368:	e081      	b.n	800746e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1ce      	bne.n	8007312 <HAL_SPI_Transmit+0x136>
 8007374:	e04c      	b.n	8007410 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <HAL_SPI_Transmit+0x1a8>
 800737e:	8afb      	ldrh	r3, [r7, #22]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d140      	bne.n	8007406 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	7812      	ldrb	r2, [r2, #0]
 8007390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073aa:	e02c      	b.n	8007406 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d113      	bne.n	80073e2 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	330c      	adds	r3, #12
 80073c4:	7812      	ldrb	r2, [r2, #0]
 80073c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	86da      	strh	r2, [r3, #54]	; 0x36
 80073e0:	e011      	b.n	8007406 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073e2:	f7fc fd1b 	bl	8003e1c <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d803      	bhi.n	80073fa <HAL_SPI_Transmit+0x21e>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d102      	bne.n	8007400 <HAL_SPI_Transmit+0x224>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007404:	e033      	b.n	800746e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1cd      	bne.n	80073ac <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007418:	d107      	bne.n	800742a <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007428:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fc94 	bl	8007d5c <SPI_EndRxTxTransaction>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	77fb      	strb	r3, [r7, #31]
 800746a:	e000      	b.n	800746e <HAL_SPI_Transmit+0x292>
  }

error:
 800746c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800747e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af02      	add	r7, sp, #8
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a4:	d112      	bne.n	80074cc <HAL_SPI_Receive+0x44>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10e      	bne.n	80074cc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2204      	movs	r2, #4
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f95f 	bl	8007786 <HAL_SPI_TransmitReceive>
 80074c8:	4603      	mov	r3, r0
 80074ca:	e158      	b.n	800777e <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_SPI_Receive+0x52>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e151      	b.n	800777e <HAL_SPI_Receive+0x2f6>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074e2:	f7fc fc9b 	bl	8003e1c <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d002      	beq.n	80074fa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
 80074f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074f8:	e138      	b.n	800776c <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_SPI_Receive+0x7e>
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	75fb      	strb	r3, [r7, #23]
    goto error;
 800750a:	e12f      	b.n	800776c <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2204      	movs	r2, #4
 8007510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	88fa      	ldrh	r2, [r7, #6]
 8007524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007552:	d116      	bne.n	8007582 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007572:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758a:	d107      	bne.n	800759c <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800759a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b40      	cmp	r3, #64	; 0x40
 80075a8:	d007      	beq.n	80075ba <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d162      	bne.n	8007688 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075c2:	e02e      	b.n	8007622 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d115      	bne.n	80075fe <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f103 020c 	add.w	r2, r3, #12
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075fc:	e011      	b.n	8007622 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075fe:	f7fc fc0d 	bl	8003e1c <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d803      	bhi.n	8007616 <HAL_SPI_Receive+0x18e>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d102      	bne.n	800761c <HAL_SPI_Receive+0x194>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007620:	e0a4      	b.n	800776c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1cb      	bne.n	80075c4 <HAL_SPI_Receive+0x13c>
 800762c:	e031      	b.n	8007692 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b01      	cmp	r3, #1
 800763a:	d113      	bne.n	8007664 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	b292      	uxth	r2, r2
 8007648:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	1c9a      	adds	r2, r3, #2
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007662:	e011      	b.n	8007688 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007664:	f7fc fbda 	bl	8003e1c <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d803      	bhi.n	800767c <HAL_SPI_Receive+0x1f4>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d102      	bne.n	8007682 <HAL_SPI_Receive+0x1fa>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007686:	e071      	b.n	800776c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1cd      	bne.n	800762e <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800769a:	d142      	bne.n	8007722 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076aa:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2201      	movs	r2, #1
 80076b4:	2101      	movs	r1, #1
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fa81 	bl	8007bbe <SPI_WaitFlagStateUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	75fb      	strb	r3, [r7, #23]
      goto error;
 80076c6:	e051      	b.n	800776c <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d0:	d107      	bne.n	80076e2 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	b292      	uxth	r2, r2
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e008      	b.n	80076f4 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f103 020c 	add.w	r2, r3, #12
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2201      	movs	r2, #1
 80076fc:	2101      	movs	r1, #1
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fa5d 	bl	8007bbe <SPI_WaitFlagStateUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d008      	beq.n	800771c <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	f043 0202 	orr.w	r2, r3, #2
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	75fb      	strb	r3, [r7, #23]
      goto error;
 800771a:	e027      	b.n	800776c <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fab3 	bl	8007c92 <SPI_EndRxTransaction>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b10      	cmp	r3, #16
 8007744:	d10a      	bne.n	800775c <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	f043 0202 	orr.w	r2, r3, #2
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800775a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
 8007768:	e000      	b.n	800776c <HAL_SPI_Receive+0x2e4>
  }

error :
 800776a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b08e      	sub	sp, #56	; 0x38
 800778a:	af02      	add	r7, sp, #8
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007794:	2301      	movs	r3, #1
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x26>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e1f6      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x414>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077b4:	f7fc fb32 	bl	8003e1c <HAL_GetTick>
 80077b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d00f      	beq.n	80077f6 <HAL_SPI_TransmitReceive+0x70>
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077dc:	d107      	bne.n	80077ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <HAL_SPI_TransmitReceive+0x68>
 80077e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d003      	beq.n	80077f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077ee:	2302      	movs	r3, #2
 80077f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077f4:	e1c7      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <HAL_SPI_TransmitReceive+0x82>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_SPI_TransmitReceive+0x82>
 8007802:	887b      	ldrh	r3, [r7, #2]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800780e:	e1ba      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b04      	cmp	r3, #4
 800781a:	d003      	beq.n	8007824 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2205      	movs	r2, #5
 8007820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	887a      	ldrh	r2, [r7, #2]
 8007834:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	887a      	ldrh	r2, [r7, #2]
 800783a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	887a      	ldrh	r2, [r7, #2]
 8007846:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	887a      	ldrh	r2, [r7, #2]
 800784c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007862:	d10f      	bne.n	8007884 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007882:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d007      	beq.n	80078a2 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078aa:	f040 808b 	bne.w	80079c4 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <HAL_SPI_TransmitReceive+0x136>
 80078b6:	8b7b      	ldrh	r3, [r7, #26]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d178      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c0:	881a      	ldrh	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	1c9a      	adds	r2, r3, #2
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e0:	e065      	b.n	80079ae <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d12d      	bne.n	800794c <HAL_SPI_TransmitReceive+0x1c6>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d028      	beq.n	800794c <HAL_SPI_TransmitReceive+0x1c6>
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d125      	bne.n	800794c <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	881a      	ldrh	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007910:	1c9a      	adds	r2, r3, #2
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800792c:	b29b      	uxth	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <HAL_SPI_TransmitReceive+0x1c6>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793a:	d107      	bne.n	800794c <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800794a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d119      	bne.n	800798e <HAL_SPI_TransmitReceive+0x208>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d014      	beq.n	800798e <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	b292      	uxth	r2, r2
 8007970:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800798a:	2301      	movs	r3, #1
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800798e:	f7fc fa45 	bl	8003e1c <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800799a:	429a      	cmp	r2, r3
 800799c:	d807      	bhi.n	80079ae <HAL_SPI_TransmitReceive+0x228>
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d003      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079ac:	e0eb      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d194      	bne.n	80078e2 <HAL_SPI_TransmitReceive+0x15c>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d18f      	bne.n	80078e2 <HAL_SPI_TransmitReceive+0x15c>
 80079c2:	e08e      	b.n	8007ae2 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <HAL_SPI_TransmitReceive+0x24c>
 80079cc:	8b7b      	ldrh	r3, [r7, #26]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d17d      	bne.n	8007ace <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	330c      	adds	r3, #12
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079f8:	e069      	b.n	8007ace <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d12e      	bne.n	8007a66 <HAL_SPI_TransmitReceive+0x2e0>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d029      	beq.n	8007a66 <HAL_SPI_TransmitReceive+0x2e0>
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d126      	bne.n	8007a66 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	7812      	ldrb	r2, [r2, #0]
 8007a24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10c      	bne.n	8007a66 <HAL_SPI_TransmitReceive+0x2e0>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a54:	d107      	bne.n	8007a66 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a64:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d119      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x322>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d014      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aa8:	f7fc f9b8 	bl	8003e1c <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d803      	bhi.n	8007ac0 <HAL_SPI_TransmitReceive+0x33a>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	d102      	bne.n	8007ac6 <HAL_SPI_TransmitReceive+0x340>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d103      	bne.n	8007ace <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007acc:	e05b      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d190      	bne.n	80079fa <HAL_SPI_TransmitReceive+0x274>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d18b      	bne.n	80079fa <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aea:	d117      	bne.n	8007b1c <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	2201      	movs	r2, #1
 8007af4:	2101      	movs	r1, #1
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f861 	bl	8007bbe <SPI_WaitFlagStateUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b06:	f043 0202 	orr.w	r2, r3, #2
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007b14:	e037      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b10      	cmp	r3, #16
 8007b28:	d10d      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2e:	f043 0202 	orr.w	r2, r3, #2
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007b3e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f906 	bl	8007d5c <SPI_EndRxTxTransaction>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d006      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b62:	e010      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10b      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	e000      	b.n	8007b86 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8007b84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3730      	adds	r7, #48	; 0x30
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bb0:	b2db      	uxtb	r3, r3
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	603b      	str	r3, [r7, #0]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bce:	e04c      	b.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd6:	d048      	beq.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007bd8:	f7fc f920 	bl	8003e1c <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d902      	bls.n	8007bee <SPI_WaitFlagStateUntilTimeout+0x30>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d13d      	bne.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c06:	d111      	bne.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c10:	d004      	beq.n	8007c1c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c1a:	d107      	bne.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c34:	d10f      	bne.n	8007c56 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e00f      	b.n	8007c8a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4013      	ands	r3, r2
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	bf0c      	ite	eq
 8007c7a:	2301      	moveq	r3, #1
 8007c7c:	2300      	movne	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d1a3      	bne.n	8007bd0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af02      	add	r7, sp, #8
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca6:	d111      	bne.n	8007ccc <SPI_EndRxTransaction+0x3a>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb0:	d004      	beq.n	8007cbc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cba:	d107      	bne.n	8007ccc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cd4:	d12a      	bne.n	8007d2c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cde:	d012      	beq.n	8007d06 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2180      	movs	r1, #128	; 0x80
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff ff67 	bl	8007bbe <SPI_WaitFlagStateUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d02d      	beq.n	8007d52 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e026      	b.n	8007d54 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2101      	movs	r1, #1
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff ff54 	bl	8007bbe <SPI_WaitFlagStateUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01a      	beq.n	8007d52 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d20:	f043 0220 	orr.w	r2, r3, #32
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e013      	b.n	8007d54 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2200      	movs	r2, #0
 8007d34:	2101      	movs	r1, #1
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff ff41 	bl	8007bbe <SPI_WaitFlagStateUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	f043 0220 	orr.w	r2, r3, #32
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e000      	b.n	8007d54 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d68:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <SPI_EndRxTxTransaction+0x7c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <SPI_EndRxTxTransaction+0x80>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	0d5b      	lsrs	r3, r3, #21
 8007d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d86:	d112      	bne.n	8007dae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2180      	movs	r1, #128	; 0x80
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ff13 	bl	8007bbe <SPI_WaitFlagStateUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d016      	beq.n	8007dcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	f043 0220 	orr.w	r2, r3, #32
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e00f      	b.n	8007dce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc4:	2b80      	cmp	r3, #128	; 0x80
 8007dc6:	d0f2      	beq.n	8007dae <SPI_EndRxTxTransaction+0x52>
 8007dc8:	e000      	b.n	8007dcc <SPI_EndRxTxTransaction+0x70>
        break;
 8007dca:	bf00      	nop
  }

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200002d8 	.word	0x200002d8
 8007ddc:	165e9f81 	.word	0x165e9f81

08007de0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d029      	beq.n	8007e4e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e0a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e14:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007e1a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007e20:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007e26:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007e2c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007e32:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007e38:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007e3e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	e034      	b.n	8007eb8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e5a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e64:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007e6a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e82:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e8c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007e92:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007e98:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007e9e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007ea4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b087      	sub	sp, #28
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d02e      	beq.n	8007f3e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007eec:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007efc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007f06:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007f10:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f1a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007f24:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	609a      	str	r2, [r3, #8]
 8007f3c:	e03b      	b.n	8007fb6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f4e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f60:	4313      	orrs	r3, r2
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f74:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f84:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007f8e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007f98:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007fe0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007fea:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007ffc:	f7fb ff0e 	bl	8003e1c <HAL_GetTick>
 8008000:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008002:	e010      	b.n	8008026 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d00c      	beq.n	8008026 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <FMC_SDRAM_SendCommand+0x5e>
 8008012:	f7fb ff03 	bl	8003e1c <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d201      	bcs.n	8008026 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e006      	b.n	8008034 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b20      	cmp	r3, #32
 8008030:	d0e8      	beq.n	8008004 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <arm_max_f32>:
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	1e4f      	subs	r7, r1, #1
 800806a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800806e:	f100 0e04 	add.w	lr, r0, #4
 8008072:	edd0 7a00 	vldr	s15, [r0]
 8008076:	d058      	beq.n	800812a <arm_max_f32+0xc6>
 8008078:	3014      	adds	r0, #20
 800807a:	46c4      	mov	ip, r8
 800807c:	2604      	movs	r6, #4
 800807e:	2400      	movs	r4, #0
 8008080:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008084:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008088:	ed10 7a02 	vldr	s14, [r0, #-8]
 800808c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008090:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008098:	bfc8      	it	gt
 800809a:	eef0 7a46 	vmovgt.f32	s15, s12
 800809e:	f1a6 0503 	sub.w	r5, r6, #3
 80080a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80080a6:	bfc8      	it	gt
 80080a8:	462c      	movgt	r4, r5
 80080aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ae:	bf48      	it	mi
 80080b0:	eef0 7a66 	vmovmi.f32	s15, s13
 80080b4:	f1a6 0502 	sub.w	r5, r6, #2
 80080b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080bc:	bf48      	it	mi
 80080be:	462c      	movmi	r4, r5
 80080c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c4:	bf48      	it	mi
 80080c6:	eef0 7a47 	vmovmi.f32	s15, s14
 80080ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80080ce:	eef4 7ae5 	vcmpe.f32	s15, s11
 80080d2:	bf48      	it	mi
 80080d4:	462c      	movmi	r4, r5
 80080d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080da:	bf48      	it	mi
 80080dc:	4634      	movmi	r4, r6
 80080de:	bf48      	it	mi
 80080e0:	eef0 7a65 	vmovmi.f32	s15, s11
 80080e4:	f1bc 0c01 	subs.w	ip, ip, #1
 80080e8:	f100 0010 	add.w	r0, r0, #16
 80080ec:	f106 0604 	add.w	r6, r6, #4
 80080f0:	d1c6      	bne.n	8008080 <arm_max_f32+0x1c>
 80080f2:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80080f6:	f017 0003 	ands.w	r0, r7, #3
 80080fa:	d018      	beq.n	800812e <arm_max_f32+0xca>
 80080fc:	1a08      	subs	r0, r1, r0
 80080fe:	ecbe 7a01 	vldmia	lr!, {s14}
 8008102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810a:	bfc8      	it	gt
 800810c:	4604      	movgt	r4, r0
 800810e:	f100 0001 	add.w	r0, r0, #1
 8008112:	bfd8      	it	le
 8008114:	eeb0 7a67 	vmovle.f32	s14, s15
 8008118:	4281      	cmp	r1, r0
 800811a:	eef0 7a47 	vmov.f32	s15, s14
 800811e:	d1ee      	bne.n	80080fe <arm_max_f32+0x9a>
 8008120:	ed82 7a00 	vstr	s14, [r2]
 8008124:	601c      	str	r4, [r3, #0]
 8008126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812a:	4644      	mov	r4, r8
 800812c:	e7e3      	b.n	80080f6 <arm_max_f32+0x92>
 800812e:	eeb0 7a67 	vmov.f32	s14, s15
 8008132:	e7f5      	b.n	8008120 <arm_max_f32+0xbc>

08008134 <arm_rfft_fast_init_f32>:
 8008134:	084b      	lsrs	r3, r1, #1
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	b410      	push	{r4}
 800813a:	8201      	strh	r1, [r0, #16]
 800813c:	8003      	strh	r3, [r0, #0]
 800813e:	d046      	beq.n	80081ce <arm_rfft_fast_init_f32+0x9a>
 8008140:	d916      	bls.n	8008170 <arm_rfft_fast_init_f32+0x3c>
 8008142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008146:	d03c      	beq.n	80081c2 <arm_rfft_fast_init_f32+0x8e>
 8008148:	d928      	bls.n	800819c <arm_rfft_fast_init_f32+0x68>
 800814a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814e:	d01f      	beq.n	8008190 <arm_rfft_fast_init_f32+0x5c>
 8008150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008154:	d112      	bne.n	800817c <arm_rfft_fast_init_f32+0x48>
 8008156:	4920      	ldr	r1, [pc, #128]	; (80081d8 <arm_rfft_fast_init_f32+0xa4>)
 8008158:	4a20      	ldr	r2, [pc, #128]	; (80081dc <arm_rfft_fast_init_f32+0xa8>)
 800815a:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <arm_rfft_fast_init_f32+0xac>)
 800815c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008160:	8184      	strh	r4, [r0, #12]
 8008162:	6081      	str	r1, [r0, #8]
 8008164:	6042      	str	r2, [r0, #4]
 8008166:	6143      	str	r3, [r0, #20]
 8008168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816c:	2000      	movs	r0, #0
 800816e:	4770      	bx	lr
 8008170:	2b20      	cmp	r3, #32
 8008172:	d01c      	beq.n	80081ae <arm_rfft_fast_init_f32+0x7a>
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d006      	beq.n	8008186 <arm_rfft_fast_init_f32+0x52>
 8008178:	2b10      	cmp	r3, #16
 800817a:	d01d      	beq.n	80081b8 <arm_rfft_fast_init_f32+0x84>
 800817c:	f04f 30ff 	mov.w	r0, #4294967295
 8008180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	2438      	movs	r4, #56	; 0x38
 8008188:	4916      	ldr	r1, [pc, #88]	; (80081e4 <arm_rfft_fast_init_f32+0xb0>)
 800818a:	4a17      	ldr	r2, [pc, #92]	; (80081e8 <arm_rfft_fast_init_f32+0xb4>)
 800818c:	4b17      	ldr	r3, [pc, #92]	; (80081ec <arm_rfft_fast_init_f32+0xb8>)
 800818e:	e7e7      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 8008190:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008194:	4916      	ldr	r1, [pc, #88]	; (80081f0 <arm_rfft_fast_init_f32+0xbc>)
 8008196:	4a17      	ldr	r2, [pc, #92]	; (80081f4 <arm_rfft_fast_init_f32+0xc0>)
 8008198:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <arm_rfft_fast_init_f32+0xc4>)
 800819a:	e7e1      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 800819c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a0:	d1ec      	bne.n	800817c <arm_rfft_fast_init_f32+0x48>
 80081a2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80081a6:	4915      	ldr	r1, [pc, #84]	; (80081fc <arm_rfft_fast_init_f32+0xc8>)
 80081a8:	4a15      	ldr	r2, [pc, #84]	; (8008200 <arm_rfft_fast_init_f32+0xcc>)
 80081aa:	4b16      	ldr	r3, [pc, #88]	; (8008204 <arm_rfft_fast_init_f32+0xd0>)
 80081ac:	e7d8      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081ae:	2430      	movs	r4, #48	; 0x30
 80081b0:	4915      	ldr	r1, [pc, #84]	; (8008208 <arm_rfft_fast_init_f32+0xd4>)
 80081b2:	4a16      	ldr	r2, [pc, #88]	; (800820c <arm_rfft_fast_init_f32+0xd8>)
 80081b4:	4b16      	ldr	r3, [pc, #88]	; (8008210 <arm_rfft_fast_init_f32+0xdc>)
 80081b6:	e7d3      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081b8:	2414      	movs	r4, #20
 80081ba:	4916      	ldr	r1, [pc, #88]	; (8008214 <arm_rfft_fast_init_f32+0xe0>)
 80081bc:	4a16      	ldr	r2, [pc, #88]	; (8008218 <arm_rfft_fast_init_f32+0xe4>)
 80081be:	4b17      	ldr	r3, [pc, #92]	; (800821c <arm_rfft_fast_init_f32+0xe8>)
 80081c0:	e7ce      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081c2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80081c6:	4916      	ldr	r1, [pc, #88]	; (8008220 <arm_rfft_fast_init_f32+0xec>)
 80081c8:	4a16      	ldr	r2, [pc, #88]	; (8008224 <arm_rfft_fast_init_f32+0xf0>)
 80081ca:	4b17      	ldr	r3, [pc, #92]	; (8008228 <arm_rfft_fast_init_f32+0xf4>)
 80081cc:	e7c8      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081ce:	24d0      	movs	r4, #208	; 0xd0
 80081d0:	4916      	ldr	r1, [pc, #88]	; (800822c <arm_rfft_fast_init_f32+0xf8>)
 80081d2:	4a17      	ldr	r2, [pc, #92]	; (8008230 <arm_rfft_fast_init_f32+0xfc>)
 80081d4:	4b17      	ldr	r3, [pc, #92]	; (8008234 <arm_rfft_fast_init_f32+0x100>)
 80081d6:	e7c3      	b.n	8008160 <arm_rfft_fast_init_f32+0x2c>
 80081d8:	0801c6fc 	.word	0x0801c6fc
 80081dc:	0800d8f4 	.word	0x0800d8f4
 80081e0:	08013a64 	.word	0x08013a64
 80081e4:	080119f4 	.word	0x080119f4
 80081e8:	0801e4bc 	.word	0x0801e4bc
 80081ec:	080209ac 	.word	0x080209ac
 80081f0:	0801a3e4 	.word	0x0801a3e4
 80081f4:	080182e4 	.word	0x080182e4
 80081f8:	08011a64 	.word	0x08011a64
 80081fc:	0802063c 	.word	0x0802063c
 8008200:	08017a64 	.word	0x08017a64
 8008204:	0801e6bc 	.word	0x0801e6bc
 8008208:	0801b29c 	.word	0x0801b29c
 800820c:	0801a2e4 	.word	0x0801a2e4
 8008210:	080118f4 	.word	0x080118f4
 8008214:	0801b1f4 	.word	0x0801b1f4
 8008218:	08018264 	.word	0x08018264
 800821c:	0801b21c 	.word	0x0801b21c
 8008220:	0801eebc 	.word	0x0801eebc
 8008224:	0801b6fc 	.word	0x0801b6fc
 8008228:	0801f23c 	.word	0x0801f23c
 800822c:	08020bac 	.word	0x08020bac
 8008230:	0801b2fc 	.word	0x0801b2fc
 8008234:	0802023c 	.word	0x0802023c

08008238 <arm_rfft_fast_f32>:
 8008238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823c:	8a06      	ldrh	r6, [r0, #16]
 800823e:	0876      	lsrs	r6, r6, #1
 8008240:	4607      	mov	r7, r0
 8008242:	4615      	mov	r5, r2
 8008244:	8006      	strh	r6, [r0, #0]
 8008246:	460c      	mov	r4, r1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d15c      	bne.n	8008306 <arm_rfft_fast_f32+0xce>
 800824c:	461a      	mov	r2, r3
 800824e:	2301      	movs	r3, #1
 8008250:	f000 fbe4 	bl	8008a1c <arm_cfft_f32>
 8008254:	edd4 7a00 	vldr	s15, [r4]
 8008258:	ed94 7a01 	vldr	s14, [r4, #4]
 800825c:	883e      	ldrh	r6, [r7, #0]
 800825e:	6978      	ldr	r0, [r7, #20]
 8008260:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008264:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008268:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800826c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008274:	3e01      	subs	r6, #1
 8008276:	ee26 7a83 	vmul.f32	s14, s13, s6
 800827a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800827e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8008282:	ed85 7a00 	vstr	s14, [r5]
 8008286:	edc5 7a01 	vstr	s15, [r5, #4]
 800828a:	3010      	adds	r0, #16
 800828c:	f105 0210 	add.w	r2, r5, #16
 8008290:	3b08      	subs	r3, #8
 8008292:	f104 0110 	add.w	r1, r4, #16
 8008296:	ed93 7a02 	vldr	s14, [r3, #8]
 800829a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800829e:	ed10 6a02 	vldr	s12, [r0, #-8]
 80082a2:	edd3 3a03 	vldr	s7, [r3, #12]
 80082a6:	ed11 5a01 	vldr	s10, [r1, #-4]
 80082aa:	ed50 5a01 	vldr	s11, [r0, #-4]
 80082ae:	ee77 7a66 	vsub.f32	s15, s14, s13
 80082b2:	ee77 4a26 	vadd.f32	s9, s14, s13
 80082b6:	ee33 4a85 	vadd.f32	s8, s7, s10
 80082ba:	ee66 6a27 	vmul.f32	s13, s12, s15
 80082be:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80082c2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80082c6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80082ca:	ee77 7a05 	vadd.f32	s15, s14, s10
 80082ce:	ee26 6a04 	vmul.f32	s12, s12, s8
 80082d2:	ee65 5a84 	vmul.f32	s11, s11, s8
 80082d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80082da:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80082de:	ee67 7a83 	vmul.f32	s15, s15, s6
 80082e2:	ee27 7a03 	vmul.f32	s14, s14, s6
 80082e6:	3e01      	subs	r6, #1
 80082e8:	ed02 7a02 	vstr	s14, [r2, #-8]
 80082ec:	ed42 7a01 	vstr	s15, [r2, #-4]
 80082f0:	f1a3 0308 	sub.w	r3, r3, #8
 80082f4:	f101 0108 	add.w	r1, r1, #8
 80082f8:	f100 0008 	add.w	r0, r0, #8
 80082fc:	f102 0208 	add.w	r2, r2, #8
 8008300:	d1c9      	bne.n	8008296 <arm_rfft_fast_f32+0x5e>
 8008302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008306:	edd1 7a00 	vldr	s15, [r1]
 800830a:	edd1 6a01 	vldr	s13, [r1, #4]
 800830e:	6941      	ldr	r1, [r0, #20]
 8008310:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008314:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008318:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800831c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008320:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008324:	3e01      	subs	r6, #1
 8008326:	ed82 7a00 	vstr	s14, [r2]
 800832a:	edc2 7a01 	vstr	s15, [r2, #4]
 800832e:	00f0      	lsls	r0, r6, #3
 8008330:	b3ee      	cbz	r6, 80083ae <arm_rfft_fast_f32+0x176>
 8008332:	3808      	subs	r0, #8
 8008334:	f101 0e10 	add.w	lr, r1, #16
 8008338:	4420      	add	r0, r4
 800833a:	f104 0110 	add.w	r1, r4, #16
 800833e:	f102 0c10 	add.w	ip, r2, #16
 8008342:	ed90 7a02 	vldr	s14, [r0, #8]
 8008346:	ed51 6a02 	vldr	s13, [r1, #-8]
 800834a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800834e:	ed90 4a03 	vldr	s8, [r0, #12]
 8008352:	ed11 5a01 	vldr	s10, [r1, #-4]
 8008356:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800835a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800835e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8008362:	ee26 3a27 	vmul.f32	s6, s12, s15
 8008366:	ee77 6a26 	vadd.f32	s13, s14, s13
 800836a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800836e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008372:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008376:	ee77 7a05 	vadd.f32	s15, s14, s10
 800837a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800837e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008382:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008386:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800838a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800838e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008392:	3e01      	subs	r6, #1
 8008394:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8008398:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800839c:	f1a0 0008 	sub.w	r0, r0, #8
 80083a0:	f101 0108 	add.w	r1, r1, #8
 80083a4:	f10e 0e08 	add.w	lr, lr, #8
 80083a8:	f10c 0c08 	add.w	ip, ip, #8
 80083ac:	d1c9      	bne.n	8008342 <arm_rfft_fast_f32+0x10a>
 80083ae:	461a      	mov	r2, r3
 80083b0:	4629      	mov	r1, r5
 80083b2:	4638      	mov	r0, r7
 80083b4:	2301      	movs	r3, #1
 80083b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ba:	f000 bb2f 	b.w	8008a1c <arm_cfft_f32>
 80083be:	bf00      	nop

080083c0 <arm_cfft_radix8by2_f32>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	ed2d 8b08 	vpush	{d8-d11}
 80083c8:	4607      	mov	r7, r0
 80083ca:	4608      	mov	r0, r1
 80083cc:	f8b7 e000 	ldrh.w	lr, [r7]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80083d6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80083da:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80083de:	f000 80b0 	beq.w	8008542 <arm_cfft_radix8by2_f32+0x182>
 80083e2:	008b      	lsls	r3, r1, #2
 80083e4:	3310      	adds	r3, #16
 80083e6:	18c6      	adds	r6, r0, r3
 80083e8:	3210      	adds	r2, #16
 80083ea:	4443      	add	r3, r8
 80083ec:	f100 0510 	add.w	r5, r0, #16
 80083f0:	f108 0410 	add.w	r4, r8, #16
 80083f4:	ed54 1a04 	vldr	s3, [r4, #-16]
 80083f8:	ed54 6a03 	vldr	s13, [r4, #-12]
 80083fc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008400:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008404:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008408:	ed13 5a01 	vldr	s10, [r3, #-4]
 800840c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008410:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008414:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008418:	ed56 2a03 	vldr	s5, [r6, #-12]
 800841c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008420:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008424:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008428:	ed56 0a02 	vldr	s1, [r6, #-8]
 800842c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008430:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008434:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008438:	ee36 ba26 	vadd.f32	s22, s12, s13
 800843c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008440:	ee72 9a04 	vadd.f32	s19, s4, s8
 8008444:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8008448:	ee31 8a05 	vadd.f32	s16, s2, s10
 800844c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008450:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008454:	ed45 ba04 	vstr	s23, [r5, #-16]
 8008458:	ed05 ba03 	vstr	s22, [r5, #-12]
 800845c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008460:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008464:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008468:	ed46 9a04 	vstr	s19, [r6, #-16]
 800846c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008470:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008474:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008478:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800847c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008480:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008484:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008488:	ee34 4a42 	vsub.f32	s8, s8, s4
 800848c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008490:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008494:	ee63 1a22 	vmul.f32	s3, s6, s5
 8008498:	ee24 4a22 	vmul.f32	s8, s8, s5
 800849c:	ee23 3a06 	vmul.f32	s6, s6, s12
 80084a0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80084a4:	ee23 6a86 	vmul.f32	s12, s7, s12
 80084a8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80084ac:	ee36 6a04 	vadd.f32	s12, s12, s8
 80084b0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80084b4:	ee72 3a63 	vsub.f32	s7, s4, s7
 80084b8:	ee71 2a88 	vadd.f32	s5, s3, s16
 80084bc:	ed44 6a03 	vstr	s13, [r4, #-12]
 80084c0:	ed44 2a04 	vstr	s5, [r4, #-16]
 80084c4:	ed43 3a04 	vstr	s7, [r3, #-16]
 80084c8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80084cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80084d4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80084d8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80084dc:	ee35 6a41 	vsub.f32	s12, s10, s2
 80084e0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80084e4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80084e8:	ee26 5a87 	vmul.f32	s10, s13, s14
 80084ec:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80084f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80084f4:	ee64 4a87 	vmul.f32	s9, s9, s14
 80084f8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80084fc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008500:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008504:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008508:	ee74 5a23 	vadd.f32	s11, s8, s7
 800850c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008510:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008514:	f1be 0e01 	subs.w	lr, lr, #1
 8008518:	ed44 5a02 	vstr	s11, [r4, #-8]
 800851c:	f105 0510 	add.w	r5, r5, #16
 8008520:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008524:	f106 0610 	add.w	r6, r6, #16
 8008528:	ed03 6a02 	vstr	s12, [r3, #-8]
 800852c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008530:	f102 0210 	add.w	r2, r2, #16
 8008534:	f104 0410 	add.w	r4, r4, #16
 8008538:	f103 0310 	add.w	r3, r3, #16
 800853c:	f47f af5a 	bne.w	80083f4 <arm_cfft_radix8by2_f32+0x34>
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	b28c      	uxth	r4, r1
 8008544:	4621      	mov	r1, r4
 8008546:	2302      	movs	r3, #2
 8008548:	f000 fbca 	bl	8008ce0 <arm_radix8_butterfly_f32>
 800854c:	ecbd 8b08 	vpop	{d8-d11}
 8008550:	4621      	mov	r1, r4
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	4640      	mov	r0, r8
 8008556:	2302      	movs	r3, #2
 8008558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	f000 bbc0 	b.w	8008ce0 <arm_radix8_butterfly_f32>

08008560 <arm_cfft_radix8by4_f32>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	ed2d 8b0a 	vpush	{d8-d12}
 8008568:	8802      	ldrh	r2, [r0, #0]
 800856a:	ed91 6a00 	vldr	s12, [r1]
 800856e:	b08f      	sub	sp, #60	; 0x3c
 8008570:	460f      	mov	r7, r1
 8008572:	0852      	lsrs	r2, r2, #1
 8008574:	6841      	ldr	r1, [r0, #4]
 8008576:	900c      	str	r0, [sp, #48]	; 0x30
 8008578:	0093      	lsls	r3, r2, #2
 800857a:	4638      	mov	r0, r7
 800857c:	4418      	add	r0, r3
 800857e:	4606      	mov	r6, r0
 8008580:	9009      	str	r0, [sp, #36]	; 0x24
 8008582:	4418      	add	r0, r3
 8008584:	edd0 6a00 	vldr	s13, [r0]
 8008588:	ed96 4a00 	vldr	s8, [r6]
 800858c:	edd6 2a01 	vldr	s5, [r6, #4]
 8008590:	edd0 7a01 	vldr	s15, [r0, #4]
 8008594:	900a      	str	r0, [sp, #40]	; 0x28
 8008596:	ee76 5a26 	vadd.f32	s11, s12, s13
 800859a:	4604      	mov	r4, r0
 800859c:	4625      	mov	r5, r4
 800859e:	441c      	add	r4, r3
 80085a0:	edd4 4a00 	vldr	s9, [r4]
 80085a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80085a8:	ed94 3a01 	vldr	s6, [r4, #4]
 80085ac:	9401      	str	r4, [sp, #4]
 80085ae:	ee35 5a84 	vadd.f32	s10, s11, s8
 80085b2:	4630      	mov	r0, r6
 80085b4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80085b8:	463e      	mov	r6, r7
 80085ba:	ee15 ea10 	vmov	lr, s10
 80085be:	ee76 6a66 	vsub.f32	s13, s12, s13
 80085c2:	f846 eb08 	str.w	lr, [r6], #8
 80085c6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80085ca:	ed90 5a01 	vldr	s10, [r0, #4]
 80085ce:	9605      	str	r6, [sp, #20]
 80085d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085d4:	9e01      	ldr	r6, [sp, #4]
 80085d6:	9707      	str	r7, [sp, #28]
 80085d8:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80085dc:	ed96 2a01 	vldr	s4, [r6, #4]
 80085e0:	ee36 7a05 	vadd.f32	s14, s12, s10
 80085e4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80085e8:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80085ec:	ee77 7a84 	vadd.f32	s15, s15, s8
 80085f0:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80085f4:	4604      	mov	r4, r0
 80085f6:	46a3      	mov	fp, r4
 80085f8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80085fc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008600:	ee14 8a10 	vmov	r8, s8
 8008604:	46a4      	mov	ip, r4
 8008606:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800860a:	ed87 7a01 	vstr	s14, [r7, #4]
 800860e:	f84b 8b08 	str.w	r8, [fp], #8
 8008612:	f1ac 0704 	sub.w	r7, ip, #4
 8008616:	ed8c 5a01 	vstr	s10, [ip, #4]
 800861a:	f101 0c08 	add.w	ip, r1, #8
 800861e:	462c      	mov	r4, r5
 8008620:	f8cd c010 	str.w	ip, [sp, #16]
 8008624:	ee15 ca90 	vmov	ip, s11
 8008628:	ee36 6a62 	vsub.f32	s12, s12, s5
 800862c:	f844 cb08 	str.w	ip, [r4], #8
 8008630:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008634:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008638:	9406      	str	r4, [sp, #24]
 800863a:	ee76 6a83 	vadd.f32	s13, s13, s6
 800863e:	f101 0410 	add.w	r4, r1, #16
 8008642:	0852      	lsrs	r2, r2, #1
 8008644:	9402      	str	r4, [sp, #8]
 8008646:	ed85 6a01 	vstr	s12, [r5, #4]
 800864a:	462c      	mov	r4, r5
 800864c:	f101 0518 	add.w	r5, r1, #24
 8008650:	920b      	str	r2, [sp, #44]	; 0x2c
 8008652:	46b2      	mov	sl, r6
 8008654:	9503      	str	r5, [sp, #12]
 8008656:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800865a:	3a02      	subs	r2, #2
 800865c:	ee16 5a90 	vmov	r5, s13
 8008660:	46b6      	mov	lr, r6
 8008662:	4630      	mov	r0, r6
 8008664:	0852      	lsrs	r2, r2, #1
 8008666:	f84a 5b08 	str.w	r5, [sl], #8
 800866a:	f1a0 0604 	sub.w	r6, r0, #4
 800866e:	edce 7a01 	vstr	s15, [lr, #4]
 8008672:	9208      	str	r2, [sp, #32]
 8008674:	f000 8130 	beq.w	80088d8 <arm_cfft_radix8by4_f32+0x378>
 8008678:	4691      	mov	r9, r2
 800867a:	9a07      	ldr	r2, [sp, #28]
 800867c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008680:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008684:	3b08      	subs	r3, #8
 8008686:	f102 0510 	add.w	r5, r2, #16
 800868a:	f101 0c20 	add.w	ip, r1, #32
 800868e:	f1a4 020c 	sub.w	r2, r4, #12
 8008692:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8008696:	4433      	add	r3, r6
 8008698:	3410      	adds	r4, #16
 800869a:	4650      	mov	r0, sl
 800869c:	4659      	mov	r1, fp
 800869e:	ed55 3a02 	vldr	s7, [r5, #-8]
 80086a2:	ed14 5a02 	vldr	s10, [r4, #-8]
 80086a6:	ed91 7a00 	vldr	s14, [r1]
 80086aa:	edd0 7a00 	vldr	s15, [r0]
 80086ae:	ed54 5a01 	vldr	s11, [r4, #-4]
 80086b2:	ed15 4a01 	vldr	s8, [r5, #-4]
 80086b6:	edd0 6a01 	vldr	s13, [r0, #4]
 80086ba:	ed91 6a01 	vldr	s12, [r1, #4]
 80086be:	ee33 8a85 	vadd.f32	s16, s7, s10
 80086c2:	ee34 0a25 	vadd.f32	s0, s8, s11
 80086c6:	ee78 4a07 	vadd.f32	s9, s16, s14
 80086ca:	ee74 5a65 	vsub.f32	s11, s8, s11
 80086ce:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80086d2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80086d6:	ed45 4a02 	vstr	s9, [r5, #-8]
 80086da:	edd1 4a01 	vldr	s9, [r1, #4]
 80086de:	ed90 4a01 	vldr	s8, [r0, #4]
 80086e2:	ee70 4a24 	vadd.f32	s9, s0, s9
 80086e6:	ee75 aa06 	vadd.f32	s21, s10, s12
 80086ea:	ee74 4a84 	vadd.f32	s9, s9, s8
 80086ee:	ee35 aac7 	vsub.f32	s20, s11, s14
 80086f2:	ed45 4a01 	vstr	s9, [r5, #-4]
 80086f6:	edd6 1a00 	vldr	s3, [r6]
 80086fa:	edd7 0a00 	vldr	s1, [r7]
 80086fe:	ed92 4a02 	vldr	s8, [r2, #8]
 8008702:	edd3 3a02 	vldr	s7, [r3, #8]
 8008706:	ed93 2a01 	vldr	s4, [r3, #4]
 800870a:	ed16 1a01 	vldr	s2, [r6, #-4]
 800870e:	edd2 2a01 	vldr	s5, [r2, #4]
 8008712:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008716:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800871a:	ee39 3a81 	vadd.f32	s6, s19, s2
 800871e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008722:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008726:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800872a:	ee7a aae6 	vsub.f32	s21, s21, s13
 800872e:	ee18 aa90 	vmov	sl, s17
 8008732:	f847 a908 	str.w	sl, [r7], #-8
 8008736:	edd2 8a01 	vldr	s17, [r2, #4]
 800873a:	ed93 9a01 	vldr	s18, [r3, #4]
 800873e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008742:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008746:	ee78 8a89 	vadd.f32	s17, s17, s18
 800874a:	ee74 0a63 	vsub.f32	s1, s8, s7
 800874e:	edc7 8a01 	vstr	s17, [r7, #4]
 8008752:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008756:	ed58 8a01 	vldr	s17, [r8, #-4]
 800875a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800875e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008762:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008766:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800876a:	ee31 9a20 	vadd.f32	s18, s2, s1
 800876e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008772:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008776:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800877a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800877e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008782:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008786:	ee69 8a28 	vmul.f32	s17, s18, s17
 800878a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800878e:	ee1c aa10 	vmov	sl, s24
 8008792:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008796:	f841 ab08 	str.w	sl, [r1], #8
 800879a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800879e:	ee3b bacb 	vsub.f32	s22, s23, s22
 80087a2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80087a6:	ee33 3a62 	vsub.f32	s6, s6, s5
 80087aa:	ed01 aa01 	vstr	s20, [r1, #-4]
 80087ae:	edc2 8a01 	vstr	s17, [r2, #4]
 80087b2:	ed82 ba02 	vstr	s22, [r2, #8]
 80087b6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80087ba:	ee74 3a63 	vsub.f32	s7, s8, s7
 80087be:	ee38 8a47 	vsub.f32	s16, s16, s14
 80087c2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80087c6:	ee30 0a46 	vsub.f32	s0, s0, s12
 80087ca:	ee33 3a42 	vsub.f32	s6, s6, s4
 80087ce:	ee38 8a67 	vsub.f32	s16, s16, s15
 80087d2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80087d6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80087da:	ee63 8a04 	vmul.f32	s17, s6, s8
 80087de:	ee28 aa24 	vmul.f32	s20, s16, s9
 80087e2:	ee60 9a04 	vmul.f32	s19, s0, s8
 80087e6:	ee28 8a04 	vmul.f32	s16, s16, s8
 80087ea:	ee20 0a24 	vmul.f32	s0, s0, s9
 80087ee:	ee63 3a84 	vmul.f32	s7, s7, s8
 80087f2:	ee39 4a68 	vsub.f32	s8, s18, s17
 80087f6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80087fa:	ee14 aa10 	vmov	sl, s8
 80087fe:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008802:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008806:	ed44 9a02 	vstr	s19, [r4, #-8]
 800880a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800880e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008812:	f846 a908 	str.w	sl, [r6], #-8
 8008816:	ee35 6a46 	vsub.f32	s12, s10, s12
 800881a:	ee35 7a87 	vadd.f32	s14, s11, s14
 800881e:	edc6 3a01 	vstr	s7, [r6, #4]
 8008822:	ee76 6a26 	vadd.f32	s13, s12, s13
 8008826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800882a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800882e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008832:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008836:	ee26 5a87 	vmul.f32	s10, s13, s14
 800883a:	ee72 2a62 	vsub.f32	s5, s4, s5
 800883e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008842:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008846:	ee75 5a25 	vadd.f32	s11, s10, s11
 800884a:	ee62 0a86 	vmul.f32	s1, s5, s12
 800884e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008856:	ee21 6a06 	vmul.f32	s12, s2, s12
 800885a:	ee62 2a87 	vmul.f32	s5, s5, s14
 800885e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008862:	ee15 aa90 	vmov	sl, s11
 8008866:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800886a:	f840 ab08 	str.w	sl, [r0], #8
 800886e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008872:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008876:	f1b9 0901 	subs.w	r9, r9, #1
 800887a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800887e:	f105 0508 	add.w	r5, r5, #8
 8008882:	ed83 1a02 	vstr	s2, [r3, #8]
 8008886:	edc3 2a01 	vstr	s5, [r3, #4]
 800888a:	f108 0808 	add.w	r8, r8, #8
 800888e:	f1a2 0208 	sub.w	r2, r2, #8
 8008892:	f10c 0c10 	add.w	ip, ip, #16
 8008896:	f104 0408 	add.w	r4, r4, #8
 800889a:	f10e 0e18 	add.w	lr, lr, #24
 800889e:	f1a3 0308 	sub.w	r3, r3, #8
 80088a2:	f47f aefc 	bne.w	800869e <arm_cfft_radix8by4_f32+0x13e>
 80088a6:	9908      	ldr	r1, [sp, #32]
 80088a8:	9802      	ldr	r0, [sp, #8]
 80088aa:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80088ae:	00cb      	lsls	r3, r1, #3
 80088b0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80088b4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80088b8:	9102      	str	r1, [sp, #8]
 80088ba:	9905      	ldr	r1, [sp, #20]
 80088bc:	4419      	add	r1, r3
 80088be:	9105      	str	r1, [sp, #20]
 80088c0:	9904      	ldr	r1, [sp, #16]
 80088c2:	4419      	add	r1, r3
 80088c4:	9104      	str	r1, [sp, #16]
 80088c6:	9906      	ldr	r1, [sp, #24]
 80088c8:	449b      	add	fp, r3
 80088ca:	4419      	add	r1, r3
 80088cc:	449a      	add	sl, r3
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	9106      	str	r1, [sp, #24]
 80088d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	9a05      	ldr	r2, [sp, #20]
 80088da:	9806      	ldr	r0, [sp, #24]
 80088dc:	ed92 4a00 	vldr	s8, [r2]
 80088e0:	ed90 7a00 	vldr	s14, [r0]
 80088e4:	ed9b 3a00 	vldr	s6, [fp]
 80088e8:	edda 3a00 	vldr	s7, [sl]
 80088ec:	edd2 4a01 	vldr	s9, [r2, #4]
 80088f0:	edd0 6a01 	vldr	s13, [r0, #4]
 80088f4:	ed9a 2a01 	vldr	s4, [sl, #4]
 80088f8:	eddb 7a01 	vldr	s15, [fp, #4]
 80088fc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008900:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008902:	ee34 6a07 	vadd.f32	s12, s8, s14
 8008906:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800890a:	ee36 5a03 	vadd.f32	s10, s12, s6
 800890e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008912:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008916:	ee34 7a47 	vsub.f32	s14, s8, s14
 800891a:	ed82 5a00 	vstr	s10, [r2]
 800891e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8008922:	edda 4a01 	vldr	s9, [sl, #4]
 8008926:	ee35 5a85 	vadd.f32	s10, s11, s10
 800892a:	ee37 4a27 	vadd.f32	s8, s14, s15
 800892e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008932:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8008936:	ed82 5a01 	vstr	s10, [r2, #4]
 800893a:	9a04      	ldr	r2, [sp, #16]
 800893c:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008940:	edd2 1a00 	vldr	s3, [r2]
 8008944:	edd2 2a01 	vldr	s5, [r2, #4]
 8008948:	9a02      	ldr	r2, [sp, #8]
 800894a:	ee34 4a42 	vsub.f32	s8, s8, s4
 800894e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008952:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008956:	ee24 4a22 	vmul.f32	s8, s8, s5
 800895a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800895e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008962:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008966:	ee35 5a44 	vsub.f32	s10, s10, s8
 800896a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800896e:	edcb 2a00 	vstr	s5, [fp]
 8008972:	ed8b 5a01 	vstr	s10, [fp, #4]
 8008976:	ed92 4a01 	vldr	s8, [r2, #4]
 800897a:	ed92 5a00 	vldr	s10, [r2]
 800897e:	9a03      	ldr	r2, [sp, #12]
 8008980:	ee36 6a63 	vsub.f32	s12, s12, s7
 8008984:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008988:	ee66 4a05 	vmul.f32	s9, s12, s10
 800898c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008990:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008994:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008998:	ee35 6a46 	vsub.f32	s12, s10, s12
 800899c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80089a0:	ee76 6a83 	vadd.f32	s13, s13, s6
 80089a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089a8:	ed80 6a01 	vstr	s12, [r0, #4]
 80089ac:	edc0 5a00 	vstr	s11, [r0]
 80089b0:	edd2 5a01 	vldr	s11, [r2, #4]
 80089b4:	9807      	ldr	r0, [sp, #28]
 80089b6:	ee77 7a02 	vadd.f32	s15, s14, s4
 80089ba:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80089be:	edd2 6a00 	vldr	s13, [r2]
 80089c2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80089c6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80089ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80089ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 80089d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80089d6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80089da:	edca 7a01 	vstr	s15, [sl, #4]
 80089de:	ed8a 7a00 	vstr	s14, [sl]
 80089e2:	6872      	ldr	r2, [r6, #4]
 80089e4:	4621      	mov	r1, r4
 80089e6:	2304      	movs	r3, #4
 80089e8:	f000 f97a 	bl	8008ce0 <arm_radix8_butterfly_f32>
 80089ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ee:	6872      	ldr	r2, [r6, #4]
 80089f0:	4621      	mov	r1, r4
 80089f2:	2304      	movs	r3, #4
 80089f4:	f000 f974 	bl	8008ce0 <arm_radix8_butterfly_f32>
 80089f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089fa:	6872      	ldr	r2, [r6, #4]
 80089fc:	4621      	mov	r1, r4
 80089fe:	2304      	movs	r3, #4
 8008a00:	f000 f96e 	bl	8008ce0 <arm_radix8_butterfly_f32>
 8008a04:	6872      	ldr	r2, [r6, #4]
 8008a06:	9801      	ldr	r0, [sp, #4]
 8008a08:	4621      	mov	r1, r4
 8008a0a:	2304      	movs	r3, #4
 8008a0c:	b00f      	add	sp, #60	; 0x3c
 8008a0e:	ecbd 8b0a 	vpop	{d8-d12}
 8008a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a16:	f000 b963 	b.w	8008ce0 <arm_radix8_butterfly_f32>
 8008a1a:	bf00      	nop

08008a1c <arm_cfft_f32>:
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	2a01      	cmp	r2, #1
 8008a22:	4606      	mov	r6, r0
 8008a24:	4617      	mov	r7, r2
 8008a26:	460c      	mov	r4, r1
 8008a28:	4698      	mov	r8, r3
 8008a2a:	8805      	ldrh	r5, [r0, #0]
 8008a2c:	d054      	beq.n	8008ad8 <arm_cfft_f32+0xbc>
 8008a2e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008a32:	d04c      	beq.n	8008ace <arm_cfft_f32+0xb2>
 8008a34:	d916      	bls.n	8008a64 <arm_cfft_f32+0x48>
 8008a36:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008a3a:	d01a      	beq.n	8008a72 <arm_cfft_f32+0x56>
 8008a3c:	d95c      	bls.n	8008af8 <arm_cfft_f32+0xdc>
 8008a3e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008a42:	d044      	beq.n	8008ace <arm_cfft_f32+0xb2>
 8008a44:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008a48:	d105      	bne.n	8008a56 <arm_cfft_f32+0x3a>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	6872      	ldr	r2, [r6, #4]
 8008a4e:	4629      	mov	r1, r5
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 f945 	bl	8008ce0 <arm_radix8_butterfly_f32>
 8008a56:	f1b8 0f00 	cmp.w	r8, #0
 8008a5a:	d111      	bne.n	8008a80 <arm_cfft_f32+0x64>
 8008a5c:	2f01      	cmp	r7, #1
 8008a5e:	d016      	beq.n	8008a8e <arm_cfft_f32+0x72>
 8008a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a64:	2d20      	cmp	r5, #32
 8008a66:	d032      	beq.n	8008ace <arm_cfft_f32+0xb2>
 8008a68:	d94a      	bls.n	8008b00 <arm_cfft_f32+0xe4>
 8008a6a:	2d40      	cmp	r5, #64	; 0x40
 8008a6c:	d0ed      	beq.n	8008a4a <arm_cfft_f32+0x2e>
 8008a6e:	2d80      	cmp	r5, #128	; 0x80
 8008a70:	d1f1      	bne.n	8008a56 <arm_cfft_f32+0x3a>
 8008a72:	4621      	mov	r1, r4
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff fca3 	bl	80083c0 <arm_cfft_radix8by2_f32>
 8008a7a:	f1b8 0f00 	cmp.w	r8, #0
 8008a7e:	d0ed      	beq.n	8008a5c <arm_cfft_f32+0x40>
 8008a80:	68b2      	ldr	r2, [r6, #8]
 8008a82:	89b1      	ldrh	r1, [r6, #12]
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7f7 fbb3 	bl	80001f0 <arm_bitreversal_32>
 8008a8a:	2f01      	cmp	r7, #1
 8008a8c:	d1e8      	bne.n	8008a60 <arm_cfft_f32+0x44>
 8008a8e:	ee07 5a90 	vmov	s15, r5
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008a9e:	2d00      	cmp	r5, #0
 8008aa0:	d0de      	beq.n	8008a60 <arm_cfft_f32+0x44>
 8008aa2:	f104 0108 	add.w	r1, r4, #8
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	f101 0108 	add.w	r1, r1, #8
 8008ab0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008ab4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008ab8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008abc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ac0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008ac4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008ac8:	d1ee      	bne.n	8008aa8 <arm_cfft_f32+0x8c>
 8008aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7ff fd45 	bl	8008560 <arm_cfft_radix8by4_f32>
 8008ad6:	e7be      	b.n	8008a56 <arm_cfft_f32+0x3a>
 8008ad8:	b1ad      	cbz	r5, 8008b06 <arm_cfft_f32+0xea>
 8008ada:	f101 030c 	add.w	r3, r1, #12
 8008ade:	2200      	movs	r2, #0
 8008ae0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008ae4:	3201      	adds	r2, #1
 8008ae6:	eef1 7a67 	vneg.f32	s15, s15
 8008aea:	4295      	cmp	r5, r2
 8008aec:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008af0:	f103 0308 	add.w	r3, r3, #8
 8008af4:	d1f4      	bne.n	8008ae0 <arm_cfft_f32+0xc4>
 8008af6:	e79a      	b.n	8008a2e <arm_cfft_f32+0x12>
 8008af8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008afc:	d0a5      	beq.n	8008a4a <arm_cfft_f32+0x2e>
 8008afe:	e7aa      	b.n	8008a56 <arm_cfft_f32+0x3a>
 8008b00:	2d10      	cmp	r5, #16
 8008b02:	d0b6      	beq.n	8008a72 <arm_cfft_f32+0x56>
 8008b04:	e7a7      	b.n	8008a56 <arm_cfft_f32+0x3a>
 8008b06:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008b0a:	d894      	bhi.n	8008a36 <arm_cfft_f32+0x1a>
 8008b0c:	e7aa      	b.n	8008a64 <arm_cfft_f32+0x48>
 8008b0e:	bf00      	nop

08008b10 <arm_cmplx_mag_f32>:
 8008b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b14:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008b18:	b084      	sub	sp, #16
 8008b1a:	d07f      	beq.n	8008c1c <arm_cmplx_mag_f32+0x10c>
 8008b1c:	2700      	movs	r7, #0
 8008b1e:	f100 0420 	add.w	r4, r0, #32
 8008b22:	f101 0510 	add.w	r5, r1, #16
 8008b26:	4646      	mov	r6, r8
 8008b28:	e05a      	b.n	8008be0 <arm_cmplx_mag_f32+0xd0>
 8008b2a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008b2e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b36:	f040 80a4 	bne.w	8008c82 <arm_cmplx_mag_f32+0x172>
 8008b3a:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008b3e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008b42:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008b46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b4a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008b4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5a:	f2c0 808f 	blt.w	8008c7c <arm_cmplx_mag_f32+0x16c>
 8008b5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008b62:	eeb4 0a40 	vcmp.f32	s0, s0
 8008b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6a:	f040 80af 	bne.w	8008ccc <arm_cmplx_mag_f32+0x1bc>
 8008b6e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008b72:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008b76:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008b7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b7e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008b82:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b8e:	db72      	blt.n	8008c76 <arm_cmplx_mag_f32+0x166>
 8008b90:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008b94:	eeb4 0a40 	vcmp.f32	s0, s0
 8008b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9c:	f040 808c 	bne.w	8008cb8 <arm_cmplx_mag_f32+0x1a8>
 8008ba0:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008ba4:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008ba8:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008bac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bb0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008bb4:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc0:	db20      	blt.n	8008c04 <arm_cmplx_mag_f32+0xf4>
 8008bc2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008bc6:	eeb4 0a40 	vcmp.f32	s0, s0
 8008bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bce:	d169      	bne.n	8008ca4 <arm_cmplx_mag_f32+0x194>
 8008bd0:	3e01      	subs	r6, #1
 8008bd2:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008bd6:	f104 0420 	add.w	r4, r4, #32
 8008bda:	f105 0510 	add.w	r5, r5, #16
 8008bde:	d019      	beq.n	8008c14 <arm_cmplx_mag_f32+0x104>
 8008be0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008be4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008be8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008bf0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008bf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfc:	da95      	bge.n	8008b2a <arm_cmplx_mag_f32+0x1a>
 8008bfe:	f845 7c10 	str.w	r7, [r5, #-16]
 8008c02:	e79c      	b.n	8008b3e <arm_cmplx_mag_f32+0x2e>
 8008c04:	3e01      	subs	r6, #1
 8008c06:	f845 7c04 	str.w	r7, [r5, #-4]
 8008c0a:	f104 0420 	add.w	r4, r4, #32
 8008c0e:	f105 0510 	add.w	r5, r5, #16
 8008c12:	d1e5      	bne.n	8008be0 <arm_cmplx_mag_f32+0xd0>
 8008c14:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008c18:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008c1c:	f012 0503 	ands.w	r5, r2, #3
 8008c20:	d026      	beq.n	8008c70 <arm_cmplx_mag_f32+0x160>
 8008c22:	2600      	movs	r6, #0
 8008c24:	f100 0408 	add.w	r4, r0, #8
 8008c28:	e00c      	b.n	8008c44 <arm_cmplx_mag_f32+0x134>
 8008c2a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008c2e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c36:	d12e      	bne.n	8008c96 <arm_cmplx_mag_f32+0x186>
 8008c38:	3d01      	subs	r5, #1
 8008c3a:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008c3e:	f104 0408 	add.w	r4, r4, #8
 8008c42:	d015      	beq.n	8008c70 <arm_cmplx_mag_f32+0x160>
 8008c44:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008c48:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008c4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008c54:	3104      	adds	r1, #4
 8008c56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c62:	dae2      	bge.n	8008c2a <arm_cmplx_mag_f32+0x11a>
 8008c64:	3d01      	subs	r5, #1
 8008c66:	f841 6c04 	str.w	r6, [r1, #-4]
 8008c6a:	f104 0408 	add.w	r4, r4, #8
 8008c6e:	d1e9      	bne.n	8008c44 <arm_cmplx_mag_f32+0x134>
 8008c70:	b004      	add	sp, #16
 8008c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c76:	f845 7c08 	str.w	r7, [r5, #-8]
 8008c7a:	e793      	b.n	8008ba4 <arm_cmplx_mag_f32+0x94>
 8008c7c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008c80:	e777      	b.n	8008b72 <arm_cmplx_mag_f32+0x62>
 8008c82:	eeb0 0a67 	vmov.f32	s0, s15
 8008c86:	9203      	str	r2, [sp, #12]
 8008c88:	9102      	str	r1, [sp, #8]
 8008c8a:	9001      	str	r0, [sp, #4]
 8008c8c:	f000 ffcc 	bl	8009c28 <sqrtf>
 8008c90:	a801      	add	r0, sp, #4
 8008c92:	c807      	ldmia	r0, {r0, r1, r2}
 8008c94:	e751      	b.n	8008b3a <arm_cmplx_mag_f32+0x2a>
 8008c96:	eeb0 0a67 	vmov.f32	s0, s15
 8008c9a:	9101      	str	r1, [sp, #4]
 8008c9c:	f000 ffc4 	bl	8009c28 <sqrtf>
 8008ca0:	9901      	ldr	r1, [sp, #4]
 8008ca2:	e7c9      	b.n	8008c38 <arm_cmplx_mag_f32+0x128>
 8008ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ca8:	9203      	str	r2, [sp, #12]
 8008caa:	9102      	str	r1, [sp, #8]
 8008cac:	9001      	str	r0, [sp, #4]
 8008cae:	f000 ffbb 	bl	8009c28 <sqrtf>
 8008cb2:	a801      	add	r0, sp, #4
 8008cb4:	c807      	ldmia	r0, {r0, r1, r2}
 8008cb6:	e78b      	b.n	8008bd0 <arm_cmplx_mag_f32+0xc0>
 8008cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cbc:	9203      	str	r2, [sp, #12]
 8008cbe:	9102      	str	r1, [sp, #8]
 8008cc0:	9001      	str	r0, [sp, #4]
 8008cc2:	f000 ffb1 	bl	8009c28 <sqrtf>
 8008cc6:	a801      	add	r0, sp, #4
 8008cc8:	c807      	ldmia	r0, {r0, r1, r2}
 8008cca:	e769      	b.n	8008ba0 <arm_cmplx_mag_f32+0x90>
 8008ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8008cd0:	9203      	str	r2, [sp, #12]
 8008cd2:	9102      	str	r1, [sp, #8]
 8008cd4:	9001      	str	r0, [sp, #4]
 8008cd6:	f000 ffa7 	bl	8009c28 <sqrtf>
 8008cda:	a801      	add	r0, sp, #4
 8008cdc:	c807      	ldmia	r0, {r0, r1, r2}
 8008cde:	e746      	b.n	8008b6e <arm_cmplx_mag_f32+0x5e>

08008ce0 <arm_radix8_butterfly_f32>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	ed2d 8b10 	vpush	{d8-d15}
 8008ce8:	461c      	mov	r4, r3
 8008cea:	b09d      	sub	sp, #116	; 0x74
 8008cec:	4603      	mov	r3, r0
 8008cee:	3304      	adds	r3, #4
 8008cf0:	ed9f bac4 	vldr	s22, [pc, #784]	; 8009004 <arm_radix8_butterfly_f32+0x324>
 8008cf4:	9019      	str	r0, [sp, #100]	; 0x64
 8008cf6:	921a      	str	r2, [sp, #104]	; 0x68
 8008cf8:	468b      	mov	fp, r1
 8008cfa:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cfc:	468a      	mov	sl, r1
 8008cfe:	46a1      	mov	r9, r4
 8008d00:	4607      	mov	r7, r0
 8008d02:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008d06:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008d0a:	eb03 0508 	add.w	r5, r3, r8
 8008d0e:	195c      	adds	r4, r3, r5
 8008d10:	00de      	lsls	r6, r3, #3
 8008d12:	191a      	adds	r2, r3, r4
 8008d14:	9600      	str	r6, [sp, #0]
 8008d16:	1898      	adds	r0, r3, r2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	9e00      	ldr	r6, [sp, #0]
 8008d1c:	9311      	str	r3, [sp, #68]	; 0x44
 8008d1e:	4401      	add	r1, r0
 8008d20:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008d24:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8008d28:	19be      	adds	r6, r7, r6
 8008d2a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8008d2e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8008d32:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8008d36:	9f00      	ldr	r7, [sp, #0]
 8008d38:	011b      	lsls	r3, r3, #4
 8008d3a:	eb06 0e07 	add.w	lr, r6, r7
 8008d3e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008d40:	9302      	str	r3, [sp, #8]
 8008d42:	3204      	adds	r2, #4
 8008d44:	3104      	adds	r1, #4
 8008d46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d4a:	f04f 0c00 	mov.w	ip, #0
 8008d4e:	edde 7a00 	vldr	s15, [lr]
 8008d52:	edd6 6a00 	vldr	s13, [r6]
 8008d56:	ed95 2a00 	vldr	s4, [r5]
 8008d5a:	ed17 aa01 	vldr	s20, [r7, #-4]
 8008d5e:	edd4 4a00 	vldr	s9, [r4]
 8008d62:	ed90 5a00 	vldr	s10, [r0]
 8008d66:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008d6a:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008d6e:	ee77 8a85 	vadd.f32	s17, s15, s10
 8008d72:	ee76 3a87 	vadd.f32	s7, s13, s14
 8008d76:	ee32 4a20 	vadd.f32	s8, s4, s1
 8008d7a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8008d7e:	ee33 6a84 	vadd.f32	s12, s7, s8
 8008d82:	ee73 5a28 	vadd.f32	s11, s6, s17
 8008d86:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008d8a:	ee75 6a86 	vadd.f32	s13, s11, s12
 8008d8e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008d92:	ed47 6a01 	vstr	s13, [r7, #-4]
 8008d96:	edc4 5a00 	vstr	s11, [r4]
 8008d9a:	ed92 9a00 	vldr	s18, [r2]
 8008d9e:	ed95 1a01 	vldr	s2, [r5, #4]
 8008da2:	edd6 5a01 	vldr	s11, [r6, #4]
 8008da6:	ed91 6a00 	vldr	s12, [r1]
 8008daa:	edd7 2a00 	vldr	s5, [r7]
 8008dae:	edd4 1a01 	vldr	s3, [r4, #4]
 8008db2:	edde 6a01 	vldr	s13, [lr, #4]
 8008db6:	edd0 9a01 	vldr	s19, [r0, #4]
 8008dba:	ee72 0a60 	vsub.f32	s1, s4, s1
 8008dbe:	ee71 aa46 	vsub.f32	s21, s2, s12
 8008dc2:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8008dc6:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008dca:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8008dce:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008dd2:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8008dd6:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8008dda:	ee75 5a89 	vadd.f32	s11, s11, s18
 8008dde:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008de2:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8008de6:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008dea:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008dee:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8008df2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008df6:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8008dfa:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008dfe:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8008e02:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008e06:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008e0a:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008e0e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008e12:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008e16:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8008e1a:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8008e1e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008e22:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008e26:	ee75 4a27 	vadd.f32	s9, s10, s15
 8008e2a:	ee71 5a49 	vsub.f32	s11, s2, s18
 8008e2e:	ee31 2a09 	vadd.f32	s4, s2, s18
 8008e32:	ee75 7a67 	vsub.f32	s15, s10, s15
 8008e36:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8008e3a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8008e3e:	ee73 0a06 	vadd.f32	s1, s6, s12
 8008e42:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8008e46:	ee36 5a87 	vadd.f32	s10, s13, s14
 8008e4a:	ee32 8a28 	vadd.f32	s16, s4, s17
 8008e4e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008e52:	ee34 4a25 	vadd.f32	s8, s8, s11
 8008e56:	ee33 3a80 	vadd.f32	s6, s7, s0
 8008e5a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008e5e:	ee71 5a64 	vsub.f32	s11, s2, s9
 8008e62:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8008e66:	ee32 2a68 	vsub.f32	s4, s4, s17
 8008e6a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008e6e:	ee74 4a81 	vadd.f32	s9, s9, s2
 8008e72:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8008e76:	44dc      	add	ip, fp
 8008e78:	45e2      	cmp	sl, ip
 8008e7a:	ed87 8a00 	vstr	s16, [r7]
 8008e7e:	ed84 2a01 	vstr	s4, [r4, #4]
 8008e82:	441f      	add	r7, r3
 8008e84:	edce 0a00 	vstr	s1, [lr]
 8008e88:	441c      	add	r4, r3
 8008e8a:	ed80 6a00 	vstr	s12, [r0]
 8008e8e:	edce 1a01 	vstr	s3, [lr, #4]
 8008e92:	ed80 4a01 	vstr	s8, [r0, #4]
 8008e96:	449e      	add	lr, r3
 8008e98:	ed86 3a00 	vstr	s6, [r6]
 8008e9c:	4418      	add	r0, r3
 8008e9e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008ea2:	ed02 5a01 	vstr	s10, [r2, #-4]
 8008ea6:	ed85 7a00 	vstr	s14, [r5]
 8008eaa:	edc6 5a01 	vstr	s11, [r6, #4]
 8008eae:	edc1 4a00 	vstr	s9, [r1]
 8008eb2:	441e      	add	r6, r3
 8008eb4:	edc2 6a00 	vstr	s13, [r2]
 8008eb8:	4419      	add	r1, r3
 8008eba:	edc5 7a01 	vstr	s15, [r5, #4]
 8008ebe:	441a      	add	r2, r3
 8008ec0:	441d      	add	r5, r3
 8008ec2:	f63f af44 	bhi.w	8008d4e <arm_radix8_butterfly_f32+0x6e>
 8008ec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ec8:	2a07      	cmp	r2, #7
 8008eca:	f240 81f5 	bls.w	80092b8 <arm_radix8_butterfly_f32+0x5d8>
 8008ece:	f108 0101 	add.w	r1, r8, #1
 8008ed2:	188f      	adds	r7, r1, r2
 8008ed4:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8008ed8:	19d6      	adds	r6, r2, r7
 8008eda:	eb08 0c09 	add.w	ip, r8, r9
 8008ede:	1994      	adds	r4, r2, r6
 8008ee0:	eb0c 0e09 	add.w	lr, ip, r9
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	9701      	str	r7, [sp, #4]
 8008ee8:	4420      	add	r0, r4
 8008eea:	eb0e 0709 	add.w	r7, lr, r9
 8008eee:	1815      	adds	r5, r2, r0
 8008ef0:	eb07 0209 	add.w	r2, r7, r9
 8008ef4:	9203      	str	r2, [sp, #12]
 8008ef6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ef8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008efc:	9117      	str	r1, [sp, #92]	; 0x5c
 8008efe:	440a      	add	r2, r1
 8008f00:	9900      	ldr	r1, [sp, #0]
 8008f02:	3108      	adds	r1, #8
 8008f04:	9100      	str	r1, [sp, #0]
 8008f06:	9902      	ldr	r1, [sp, #8]
 8008f08:	3108      	adds	r1, #8
 8008f0a:	9102      	str	r1, [sp, #8]
 8008f0c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008f0e:	00ff      	lsls	r7, r7, #3
 8008f10:	9715      	str	r7, [sp, #84]	; 0x54
 8008f12:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008f16:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008f1a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008f1e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8008f20:	9903      	ldr	r1, [sp, #12]
 8008f22:	19d7      	adds	r7, r2, r7
 8008f24:	00c9      	lsls	r1, r1, #3
 8008f26:	9114      	str	r1, [sp, #80]	; 0x50
 8008f28:	9710      	str	r7, [sp, #64]	; 0x40
 8008f2a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008f2c:	9f00      	ldr	r7, [sp, #0]
 8008f2e:	19cf      	adds	r7, r1, r7
 8008f30:	970d      	str	r7, [sp, #52]	; 0x34
 8008f32:	9f02      	ldr	r7, [sp, #8]
 8008f34:	19cf      	adds	r7, r1, r7
 8008f36:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8008f3a:	970c      	str	r7, [sp, #48]	; 0x30
 8008f3c:	9f01      	ldr	r7, [sp, #4]
 8008f3e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8008f42:	3504      	adds	r5, #4
 8008f44:	3004      	adds	r0, #4
 8008f46:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8008f4a:	9508      	str	r5, [sp, #32]
 8008f4c:	9009      	str	r0, [sp, #36]	; 0x24
 8008f4e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008f50:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008f52:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8008f56:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8008f5a:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8008f5e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008f60:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008f64:	1945      	adds	r5, r0, r5
 8008f66:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	3404      	adds	r4, #4
 8008f6e:	4641      	mov	r1, r8
 8008f70:	1841      	adds	r1, r0, r1
 8008f72:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8008f76:	940a      	str	r4, [sp, #40]	; 0x28
 8008f78:	eb00 0c06 	add.w	ip, r0, r6
 8008f7c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008f80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008f82:	9506      	str	r5, [sp, #24]
 8008f84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008f86:	9105      	str	r1, [sp, #20]
 8008f88:	4639      	mov	r1, r7
 8008f8a:	1905      	adds	r5, r0, r4
 8008f8c:	3108      	adds	r1, #8
 8008f8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008f90:	9507      	str	r5, [sp, #28]
 8008f92:	910f      	str	r1, [sp, #60]	; 0x3c
 8008f94:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008f98:	2101      	movs	r1, #1
 8008f9a:	eb00 0e06 	add.w	lr, r0, r6
 8008f9e:	9518      	str	r5, [sp, #96]	; 0x60
 8008fa0:	9404      	str	r4, [sp, #16]
 8008fa2:	9103      	str	r1, [sp, #12]
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	4689      	mov	r9, r1
 8008fa8:	9e06      	ldr	r6, [sp, #24]
 8008faa:	ed90 fa00 	vldr	s30, [r0]
 8008fae:	edd6 7a01 	vldr	s15, [r6, #4]
 8008fb2:	edd0 ba01 	vldr	s23, [r0, #4]
 8008fb6:	edcd 7a00 	vstr	s15, [sp]
 8008fba:	a80d      	add	r0, sp, #52	; 0x34
 8008fbc:	edde 7a01 	vldr	s15, [lr, #4]
 8008fc0:	9c05      	ldr	r4, [sp, #20]
 8008fc2:	9d07      	ldr	r5, [sp, #28]
 8008fc4:	edd2 fa00 	vldr	s31, [r2]
 8008fc8:	ed92 ca01 	vldr	s24, [r2, #4]
 8008fcc:	edcd 7a01 	vstr	s15, [sp, #4]
 8008fd0:	c807      	ldmia	r0, {r0, r1, r2}
 8008fd2:	eddc 7a01 	vldr	s15, [ip, #4]
 8008fd6:	edd4 ea00 	vldr	s29, [r4]
 8008fda:	ed95 ea00 	vldr	s28, [r5]
 8008fde:	edd6 da00 	vldr	s27, [r6]
 8008fe2:	edd4 aa01 	vldr	s21, [r4, #4]
 8008fe6:	ed95 aa01 	vldr	s20, [r5, #4]
 8008fea:	ed9e da00 	vldr	s26, [lr]
 8008fee:	eddc ca00 	vldr	s25, [ip]
 8008ff2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ff6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ff8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ffa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ffc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008ffe:	edcd 7a02 	vstr	s15, [sp, #8]
 8009002:	e001      	b.n	8009008 <arm_radix8_butterfly_f32+0x328>
 8009004:	3f3504f3 	.word	0x3f3504f3
 8009008:	ed16 6a01 	vldr	s12, [r6, #-4]
 800900c:	ed91 5a00 	vldr	s10, [r1]
 8009010:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009014:	edd5 7a00 	vldr	s15, [r5]
 8009018:	ed18 7a01 	vldr	s14, [r8, #-4]
 800901c:	edd2 3a00 	vldr	s7, [r2]
 8009020:	ed94 3a00 	vldr	s6, [r4]
 8009024:	ed90 2a00 	vldr	s4, [r0]
 8009028:	ed92 0a01 	vldr	s0, [r2, #4]
 800902c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009030:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009034:	ee33 4a29 	vadd.f32	s8, s6, s19
 8009038:	ee77 4a87 	vadd.f32	s9, s15, s14
 800903c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009040:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009044:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009048:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800904c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009050:	ed82 6a00 	vstr	s12, [r2]
 8009054:	edd5 8a01 	vldr	s17, [r5, #4]
 8009058:	ed90 9a01 	vldr	s18, [r0, #4]
 800905c:	edd6 2a00 	vldr	s5, [r6]
 8009060:	ed98 7a00 	vldr	s14, [r8]
 8009064:	edd4 0a01 	vldr	s1, [r4, #4]
 8009068:	ed91 6a01 	vldr	s12, [r1, #4]
 800906c:	edd7 5a00 	vldr	s11, [r7]
 8009070:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009074:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009078:	ee39 5a62 	vsub.f32	s10, s18, s5
 800907c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8009080:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009084:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009088:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800908c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009090:	ee75 8a69 	vsub.f32	s17, s10, s19
 8009094:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009098:	ee35 5a29 	vadd.f32	s10, s10, s19
 800909c:	ee72 7a67 	vsub.f32	s15, s4, s15
 80090a0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80090a4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80090a8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80090ac:	ee32 9a08 	vadd.f32	s18, s4, s16
 80090b0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80090b4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80090b8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80090bc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80090c0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80090c4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80090c8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80090cc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80090d0:	ee73 0a29 	vadd.f32	s1, s6, s19
 80090d4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80090d8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80090dc:	ee32 7a64 	vsub.f32	s14, s4, s9
 80090e0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80090e4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80090e8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80090ec:	ee75 8a85 	vadd.f32	s17, s11, s10
 80090f0:	ee74 3a22 	vadd.f32	s7, s8, s5
 80090f4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80090f8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80090fc:	ee79 1a41 	vsub.f32	s3, s18, s2
 8009100:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009104:	ee76 5a43 	vsub.f32	s11, s12, s6
 8009108:	ee74 2a62 	vsub.f32	s5, s8, s5
 800910c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009110:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009114:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8009118:	ee30 0a80 	vadd.f32	s0, s1, s0
 800911c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8009120:	ee33 6a06 	vadd.f32	s12, s6, s12
 8009124:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009128:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800912c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009130:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009134:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009138:	ee39 1a01 	vadd.f32	s2, s18, s2
 800913c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8009140:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8009144:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8009148:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800914c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8009150:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009154:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009158:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800915c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8009160:	ed9d 4a02 	vldr	s8, [sp, #8]
 8009164:	ed82 1a01 	vstr	s2, [r2, #4]
 8009168:	ee77 3a63 	vsub.f32	s7, s14, s7
 800916c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009170:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009174:	ed81 3a00 	vstr	s6, [r1]
 8009178:	ee30 9a89 	vadd.f32	s18, s1, s18
 800917c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009180:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009184:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8009188:	ee67 2a22 	vmul.f32	s5, s14, s5
 800918c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8009190:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009194:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8009198:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800919c:	ee64 8a28 	vmul.f32	s17, s8, s17
 80091a0:	ed9d 4a00 	vldr	s8, [sp]
 80091a4:	edc1 6a01 	vstr	s13, [r1, #4]
 80091a8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80091ac:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80091b0:	ee64 9a29 	vmul.f32	s19, s8, s19
 80091b4:	ee24 4a25 	vmul.f32	s8, s8, s11
 80091b8:	ee30 7a87 	vadd.f32	s14, s1, s14
 80091bc:	ee74 4a84 	vadd.f32	s9, s9, s8
 80091c0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80091c4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80091c8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80091cc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80091d0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80091d4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80091d8:	ee75 1a21 	vadd.f32	s3, s10, s3
 80091dc:	ee30 0a68 	vsub.f32	s0, s0, s17
 80091e0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80091e4:	ee70 0a84 	vadd.f32	s1, s1, s8
 80091e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80091ec:	44d9      	add	r9, fp
 80091ee:	45ca      	cmp	sl, r9
 80091f0:	ed84 9a00 	vstr	s18, [r4]
 80091f4:	edc4 3a01 	vstr	s7, [r4, #4]
 80091f8:	441a      	add	r2, r3
 80091fa:	ed07 7a01 	vstr	s14, [r7, #-4]
 80091fe:	edc7 2a00 	vstr	s5, [r7]
 8009202:	4419      	add	r1, r3
 8009204:	ed80 2a00 	vstr	s4, [r0]
 8009208:	ed80 8a01 	vstr	s16, [r0, #4]
 800920c:	441c      	add	r4, r3
 800920e:	ed48 1a01 	vstr	s3, [r8, #-4]
 8009212:	ed88 0a00 	vstr	s0, [r8]
 8009216:	441f      	add	r7, r3
 8009218:	ed46 4a01 	vstr	s9, [r6, #-4]
 800921c:	4418      	add	r0, r3
 800921e:	edc6 9a00 	vstr	s19, [r6]
 8009222:	4498      	add	r8, r3
 8009224:	edc5 0a00 	vstr	s1, [r5]
 8009228:	ed85 6a01 	vstr	s12, [r5, #4]
 800922c:	441e      	add	r6, r3
 800922e:	441d      	add	r5, r3
 8009230:	f63f aeea 	bhi.w	8009008 <arm_radix8_butterfly_f32+0x328>
 8009234:	9a03      	ldr	r2, [sp, #12]
 8009236:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009238:	3201      	adds	r2, #1
 800923a:	4611      	mov	r1, r2
 800923c:	9203      	str	r2, [sp, #12]
 800923e:	9a04      	ldr	r2, [sp, #16]
 8009240:	4402      	add	r2, r0
 8009242:	9204      	str	r2, [sp, #16]
 8009244:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009246:	9a05      	ldr	r2, [sp, #20]
 8009248:	4402      	add	r2, r0
 800924a:	9205      	str	r2, [sp, #20]
 800924c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800924e:	9a07      	ldr	r2, [sp, #28]
 8009250:	4402      	add	r2, r0
 8009252:	9207      	str	r2, [sp, #28]
 8009254:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009256:	9a06      	ldr	r2, [sp, #24]
 8009258:	4402      	add	r2, r0
 800925a:	9206      	str	r2, [sp, #24]
 800925c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800925e:	4496      	add	lr, r2
 8009260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009262:	4494      	add	ip, r2
 8009264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009266:	3208      	adds	r2, #8
 8009268:	920f      	str	r2, [sp, #60]	; 0x3c
 800926a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800926c:	3208      	adds	r2, #8
 800926e:	920e      	str	r2, [sp, #56]	; 0x38
 8009270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009272:	3208      	adds	r2, #8
 8009274:	920d      	str	r2, [sp, #52]	; 0x34
 8009276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009278:	3208      	adds	r2, #8
 800927a:	920c      	str	r2, [sp, #48]	; 0x30
 800927c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800927e:	3208      	adds	r2, #8
 8009280:	920b      	str	r2, [sp, #44]	; 0x2c
 8009282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009284:	3208      	adds	r2, #8
 8009286:	920a      	str	r2, [sp, #40]	; 0x28
 8009288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800928a:	3208      	adds	r2, #8
 800928c:	9209      	str	r2, [sp, #36]	; 0x24
 800928e:	9a08      	ldr	r2, [sp, #32]
 8009290:	3208      	adds	r2, #8
 8009292:	9208      	str	r2, [sp, #32]
 8009294:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009296:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009298:	4288      	cmp	r0, r1
 800929a:	4622      	mov	r2, r4
 800929c:	d007      	beq.n	80092ae <arm_radix8_butterfly_f32+0x5ce>
 800929e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80092a0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80092a4:	4621      	mov	r1, r4
 80092a6:	4401      	add	r1, r0
 80092a8:	9110      	str	r1, [sp, #64]	; 0x40
 80092aa:	9804      	ldr	r0, [sp, #16]
 80092ac:	e67c      	b.n	8008fa8 <arm_radix8_butterfly_f32+0x2c8>
 80092ae:	4683      	mov	fp, r0
 80092b0:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80092b4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80092b6:	e524      	b.n	8008d02 <arm_radix8_butterfly_f32+0x22>
 80092b8:	b01d      	add	sp, #116	; 0x74
 80092ba:	ecbd 8b10 	vpop	{d8-d15}
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	bf00      	nop

080092c4 <sniprintf>:
 80092c4:	b40c      	push	{r2, r3}
 80092c6:	b530      	push	{r4, r5, lr}
 80092c8:	4b17      	ldr	r3, [pc, #92]	; (8009328 <sniprintf+0x64>)
 80092ca:	1e0c      	subs	r4, r1, #0
 80092cc:	681d      	ldr	r5, [r3, #0]
 80092ce:	b09d      	sub	sp, #116	; 0x74
 80092d0:	da08      	bge.n	80092e4 <sniprintf+0x20>
 80092d2:	238b      	movs	r3, #139	; 0x8b
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	f04f 30ff 	mov.w	r0, #4294967295
 80092da:	b01d      	add	sp, #116	; 0x74
 80092dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092e0:	b002      	add	sp, #8
 80092e2:	4770      	bx	lr
 80092e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80092e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092ec:	bf14      	ite	ne
 80092ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092f2:	4623      	moveq	r3, r4
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092fc:	9002      	str	r0, [sp, #8]
 80092fe:	9006      	str	r0, [sp, #24]
 8009300:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009304:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009306:	ab21      	add	r3, sp, #132	; 0x84
 8009308:	a902      	add	r1, sp, #8
 800930a:	4628      	mov	r0, r5
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	f000 f98d 	bl	800962c <_svfiprintf_r>
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	bfbc      	itt	lt
 8009316:	238b      	movlt	r3, #139	; 0x8b
 8009318:	602b      	strlt	r3, [r5, #0]
 800931a:	2c00      	cmp	r4, #0
 800931c:	d0dd      	beq.n	80092da <sniprintf+0x16>
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	2200      	movs	r2, #0
 8009322:	701a      	strb	r2, [r3, #0]
 8009324:	e7d9      	b.n	80092da <sniprintf+0x16>
 8009326:	bf00      	nop
 8009328:	200003c4 	.word	0x200003c4

0800932c <memset>:
 800932c:	4402      	add	r2, r0
 800932e:	4603      	mov	r3, r0
 8009330:	4293      	cmp	r3, r2
 8009332:	d100      	bne.n	8009336 <memset+0xa>
 8009334:	4770      	bx	lr
 8009336:	f803 1b01 	strb.w	r1, [r3], #1
 800933a:	e7f9      	b.n	8009330 <memset+0x4>

0800933c <__libc_init_array>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	4d0d      	ldr	r5, [pc, #52]	; (8009374 <__libc_init_array+0x38>)
 8009340:	4c0d      	ldr	r4, [pc, #52]	; (8009378 <__libc_init_array+0x3c>)
 8009342:	1b64      	subs	r4, r4, r5
 8009344:	10a4      	asrs	r4, r4, #2
 8009346:	2600      	movs	r6, #0
 8009348:	42a6      	cmp	r6, r4
 800934a:	d109      	bne.n	8009360 <__libc_init_array+0x24>
 800934c:	4d0b      	ldr	r5, [pc, #44]	; (800937c <__libc_init_array+0x40>)
 800934e:	4c0c      	ldr	r4, [pc, #48]	; (8009380 <__libc_init_array+0x44>)
 8009350:	f000 fca0 	bl	8009c94 <_init>
 8009354:	1b64      	subs	r4, r4, r5
 8009356:	10a4      	asrs	r4, r4, #2
 8009358:	2600      	movs	r6, #0
 800935a:	42a6      	cmp	r6, r4
 800935c:	d105      	bne.n	800936a <__libc_init_array+0x2e>
 800935e:	bd70      	pop	{r4, r5, r6, pc}
 8009360:	f855 3b04 	ldr.w	r3, [r5], #4
 8009364:	4798      	blx	r3
 8009366:	3601      	adds	r6, #1
 8009368:	e7ee      	b.n	8009348 <__libc_init_array+0xc>
 800936a:	f855 3b04 	ldr.w	r3, [r5], #4
 800936e:	4798      	blx	r3
 8009370:	3601      	adds	r6, #1
 8009372:	e7f2      	b.n	800935a <__libc_init_array+0x1e>
 8009374:	08020d88 	.word	0x08020d88
 8009378:	08020d88 	.word	0x08020d88
 800937c:	08020d88 	.word	0x08020d88
 8009380:	08020d8c 	.word	0x08020d8c

08009384 <__retarget_lock_acquire_recursive>:
 8009384:	4770      	bx	lr

08009386 <__retarget_lock_release_recursive>:
 8009386:	4770      	bx	lr

08009388 <_free_r>:
 8009388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800938a:	2900      	cmp	r1, #0
 800938c:	d044      	beq.n	8009418 <_free_r+0x90>
 800938e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009392:	9001      	str	r0, [sp, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f1a1 0404 	sub.w	r4, r1, #4
 800939a:	bfb8      	it	lt
 800939c:	18e4      	addlt	r4, r4, r3
 800939e:	f000 f8df 	bl	8009560 <__malloc_lock>
 80093a2:	4a1e      	ldr	r2, [pc, #120]	; (800941c <_free_r+0x94>)
 80093a4:	9801      	ldr	r0, [sp, #4]
 80093a6:	6813      	ldr	r3, [r2, #0]
 80093a8:	b933      	cbnz	r3, 80093b8 <_free_r+0x30>
 80093aa:	6063      	str	r3, [r4, #4]
 80093ac:	6014      	str	r4, [r2, #0]
 80093ae:	b003      	add	sp, #12
 80093b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093b4:	f000 b8da 	b.w	800956c <__malloc_unlock>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d908      	bls.n	80093ce <_free_r+0x46>
 80093bc:	6825      	ldr	r5, [r4, #0]
 80093be:	1961      	adds	r1, r4, r5
 80093c0:	428b      	cmp	r3, r1
 80093c2:	bf01      	itttt	eq
 80093c4:	6819      	ldreq	r1, [r3, #0]
 80093c6:	685b      	ldreq	r3, [r3, #4]
 80093c8:	1949      	addeq	r1, r1, r5
 80093ca:	6021      	streq	r1, [r4, #0]
 80093cc:	e7ed      	b.n	80093aa <_free_r+0x22>
 80093ce:	461a      	mov	r2, r3
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b10b      	cbz	r3, 80093d8 <_free_r+0x50>
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	d9fa      	bls.n	80093ce <_free_r+0x46>
 80093d8:	6811      	ldr	r1, [r2, #0]
 80093da:	1855      	adds	r5, r2, r1
 80093dc:	42a5      	cmp	r5, r4
 80093de:	d10b      	bne.n	80093f8 <_free_r+0x70>
 80093e0:	6824      	ldr	r4, [r4, #0]
 80093e2:	4421      	add	r1, r4
 80093e4:	1854      	adds	r4, r2, r1
 80093e6:	42a3      	cmp	r3, r4
 80093e8:	6011      	str	r1, [r2, #0]
 80093ea:	d1e0      	bne.n	80093ae <_free_r+0x26>
 80093ec:	681c      	ldr	r4, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	6053      	str	r3, [r2, #4]
 80093f2:	440c      	add	r4, r1
 80093f4:	6014      	str	r4, [r2, #0]
 80093f6:	e7da      	b.n	80093ae <_free_r+0x26>
 80093f8:	d902      	bls.n	8009400 <_free_r+0x78>
 80093fa:	230c      	movs	r3, #12
 80093fc:	6003      	str	r3, [r0, #0]
 80093fe:	e7d6      	b.n	80093ae <_free_r+0x26>
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	1961      	adds	r1, r4, r5
 8009404:	428b      	cmp	r3, r1
 8009406:	bf04      	itt	eq
 8009408:	6819      	ldreq	r1, [r3, #0]
 800940a:	685b      	ldreq	r3, [r3, #4]
 800940c:	6063      	str	r3, [r4, #4]
 800940e:	bf04      	itt	eq
 8009410:	1949      	addeq	r1, r1, r5
 8009412:	6021      	streq	r1, [r4, #0]
 8009414:	6054      	str	r4, [r2, #4]
 8009416:	e7ca      	b.n	80093ae <_free_r+0x26>
 8009418:	b003      	add	sp, #12
 800941a:	bd30      	pop	{r4, r5, pc}
 800941c:	20000bf8 	.word	0x20000bf8

08009420 <sbrk_aligned>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	4e0e      	ldr	r6, [pc, #56]	; (800945c <sbrk_aligned+0x3c>)
 8009424:	460c      	mov	r4, r1
 8009426:	6831      	ldr	r1, [r6, #0]
 8009428:	4605      	mov	r5, r0
 800942a:	b911      	cbnz	r1, 8009432 <sbrk_aligned+0x12>
 800942c:	f000 fba6 	bl	8009b7c <_sbrk_r>
 8009430:	6030      	str	r0, [r6, #0]
 8009432:	4621      	mov	r1, r4
 8009434:	4628      	mov	r0, r5
 8009436:	f000 fba1 	bl	8009b7c <_sbrk_r>
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	d00a      	beq.n	8009454 <sbrk_aligned+0x34>
 800943e:	1cc4      	adds	r4, r0, #3
 8009440:	f024 0403 	bic.w	r4, r4, #3
 8009444:	42a0      	cmp	r0, r4
 8009446:	d007      	beq.n	8009458 <sbrk_aligned+0x38>
 8009448:	1a21      	subs	r1, r4, r0
 800944a:	4628      	mov	r0, r5
 800944c:	f000 fb96 	bl	8009b7c <_sbrk_r>
 8009450:	3001      	adds	r0, #1
 8009452:	d101      	bne.n	8009458 <sbrk_aligned+0x38>
 8009454:	f04f 34ff 	mov.w	r4, #4294967295
 8009458:	4620      	mov	r0, r4
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	20000bfc 	.word	0x20000bfc

08009460 <_malloc_r>:
 8009460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009464:	1ccd      	adds	r5, r1, #3
 8009466:	f025 0503 	bic.w	r5, r5, #3
 800946a:	3508      	adds	r5, #8
 800946c:	2d0c      	cmp	r5, #12
 800946e:	bf38      	it	cc
 8009470:	250c      	movcc	r5, #12
 8009472:	2d00      	cmp	r5, #0
 8009474:	4607      	mov	r7, r0
 8009476:	db01      	blt.n	800947c <_malloc_r+0x1c>
 8009478:	42a9      	cmp	r1, r5
 800947a:	d905      	bls.n	8009488 <_malloc_r+0x28>
 800947c:	230c      	movs	r3, #12
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	2600      	movs	r6, #0
 8009482:	4630      	mov	r0, r6
 8009484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800955c <_malloc_r+0xfc>
 800948c:	f000 f868 	bl	8009560 <__malloc_lock>
 8009490:	f8d8 3000 	ldr.w	r3, [r8]
 8009494:	461c      	mov	r4, r3
 8009496:	bb5c      	cbnz	r4, 80094f0 <_malloc_r+0x90>
 8009498:	4629      	mov	r1, r5
 800949a:	4638      	mov	r0, r7
 800949c:	f7ff ffc0 	bl	8009420 <sbrk_aligned>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	4604      	mov	r4, r0
 80094a4:	d155      	bne.n	8009552 <_malloc_r+0xf2>
 80094a6:	f8d8 4000 	ldr.w	r4, [r8]
 80094aa:	4626      	mov	r6, r4
 80094ac:	2e00      	cmp	r6, #0
 80094ae:	d145      	bne.n	800953c <_malloc_r+0xdc>
 80094b0:	2c00      	cmp	r4, #0
 80094b2:	d048      	beq.n	8009546 <_malloc_r+0xe6>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	4631      	mov	r1, r6
 80094b8:	4638      	mov	r0, r7
 80094ba:	eb04 0903 	add.w	r9, r4, r3
 80094be:	f000 fb5d 	bl	8009b7c <_sbrk_r>
 80094c2:	4581      	cmp	r9, r0
 80094c4:	d13f      	bne.n	8009546 <_malloc_r+0xe6>
 80094c6:	6821      	ldr	r1, [r4, #0]
 80094c8:	1a6d      	subs	r5, r5, r1
 80094ca:	4629      	mov	r1, r5
 80094cc:	4638      	mov	r0, r7
 80094ce:	f7ff ffa7 	bl	8009420 <sbrk_aligned>
 80094d2:	3001      	adds	r0, #1
 80094d4:	d037      	beq.n	8009546 <_malloc_r+0xe6>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	442b      	add	r3, r5
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	f8d8 3000 	ldr.w	r3, [r8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d038      	beq.n	8009556 <_malloc_r+0xf6>
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	42a2      	cmp	r2, r4
 80094e8:	d12b      	bne.n	8009542 <_malloc_r+0xe2>
 80094ea:	2200      	movs	r2, #0
 80094ec:	605a      	str	r2, [r3, #4]
 80094ee:	e00f      	b.n	8009510 <_malloc_r+0xb0>
 80094f0:	6822      	ldr	r2, [r4, #0]
 80094f2:	1b52      	subs	r2, r2, r5
 80094f4:	d41f      	bmi.n	8009536 <_malloc_r+0xd6>
 80094f6:	2a0b      	cmp	r2, #11
 80094f8:	d917      	bls.n	800952a <_malloc_r+0xca>
 80094fa:	1961      	adds	r1, r4, r5
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	6025      	str	r5, [r4, #0]
 8009500:	bf18      	it	ne
 8009502:	6059      	strne	r1, [r3, #4]
 8009504:	6863      	ldr	r3, [r4, #4]
 8009506:	bf08      	it	eq
 8009508:	f8c8 1000 	streq.w	r1, [r8]
 800950c:	5162      	str	r2, [r4, r5]
 800950e:	604b      	str	r3, [r1, #4]
 8009510:	4638      	mov	r0, r7
 8009512:	f104 060b 	add.w	r6, r4, #11
 8009516:	f000 f829 	bl	800956c <__malloc_unlock>
 800951a:	f026 0607 	bic.w	r6, r6, #7
 800951e:	1d23      	adds	r3, r4, #4
 8009520:	1af2      	subs	r2, r6, r3
 8009522:	d0ae      	beq.n	8009482 <_malloc_r+0x22>
 8009524:	1b9b      	subs	r3, r3, r6
 8009526:	50a3      	str	r3, [r4, r2]
 8009528:	e7ab      	b.n	8009482 <_malloc_r+0x22>
 800952a:	42a3      	cmp	r3, r4
 800952c:	6862      	ldr	r2, [r4, #4]
 800952e:	d1dd      	bne.n	80094ec <_malloc_r+0x8c>
 8009530:	f8c8 2000 	str.w	r2, [r8]
 8009534:	e7ec      	b.n	8009510 <_malloc_r+0xb0>
 8009536:	4623      	mov	r3, r4
 8009538:	6864      	ldr	r4, [r4, #4]
 800953a:	e7ac      	b.n	8009496 <_malloc_r+0x36>
 800953c:	4634      	mov	r4, r6
 800953e:	6876      	ldr	r6, [r6, #4]
 8009540:	e7b4      	b.n	80094ac <_malloc_r+0x4c>
 8009542:	4613      	mov	r3, r2
 8009544:	e7cc      	b.n	80094e0 <_malloc_r+0x80>
 8009546:	230c      	movs	r3, #12
 8009548:	603b      	str	r3, [r7, #0]
 800954a:	4638      	mov	r0, r7
 800954c:	f000 f80e 	bl	800956c <__malloc_unlock>
 8009550:	e797      	b.n	8009482 <_malloc_r+0x22>
 8009552:	6025      	str	r5, [r4, #0]
 8009554:	e7dc      	b.n	8009510 <_malloc_r+0xb0>
 8009556:	605b      	str	r3, [r3, #4]
 8009558:	deff      	udf	#255	; 0xff
 800955a:	bf00      	nop
 800955c:	20000bf8 	.word	0x20000bf8

08009560 <__malloc_lock>:
 8009560:	4801      	ldr	r0, [pc, #4]	; (8009568 <__malloc_lock+0x8>)
 8009562:	f7ff bf0f 	b.w	8009384 <__retarget_lock_acquire_recursive>
 8009566:	bf00      	nop
 8009568:	20000bf4 	.word	0x20000bf4

0800956c <__malloc_unlock>:
 800956c:	4801      	ldr	r0, [pc, #4]	; (8009574 <__malloc_unlock+0x8>)
 800956e:	f7ff bf0a 	b.w	8009386 <__retarget_lock_release_recursive>
 8009572:	bf00      	nop
 8009574:	20000bf4 	.word	0x20000bf4

08009578 <__ssputs_r>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	688e      	ldr	r6, [r1, #8]
 800957e:	461f      	mov	r7, r3
 8009580:	42be      	cmp	r6, r7
 8009582:	680b      	ldr	r3, [r1, #0]
 8009584:	4682      	mov	sl, r0
 8009586:	460c      	mov	r4, r1
 8009588:	4690      	mov	r8, r2
 800958a:	d82c      	bhi.n	80095e6 <__ssputs_r+0x6e>
 800958c:	898a      	ldrh	r2, [r1, #12]
 800958e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009592:	d026      	beq.n	80095e2 <__ssputs_r+0x6a>
 8009594:	6965      	ldr	r5, [r4, #20]
 8009596:	6909      	ldr	r1, [r1, #16]
 8009598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800959c:	eba3 0901 	sub.w	r9, r3, r1
 80095a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095a4:	1c7b      	adds	r3, r7, #1
 80095a6:	444b      	add	r3, r9
 80095a8:	106d      	asrs	r5, r5, #1
 80095aa:	429d      	cmp	r5, r3
 80095ac:	bf38      	it	cc
 80095ae:	461d      	movcc	r5, r3
 80095b0:	0553      	lsls	r3, r2, #21
 80095b2:	d527      	bpl.n	8009604 <__ssputs_r+0x8c>
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7ff ff53 	bl	8009460 <_malloc_r>
 80095ba:	4606      	mov	r6, r0
 80095bc:	b360      	cbz	r0, 8009618 <__ssputs_r+0xa0>
 80095be:	6921      	ldr	r1, [r4, #16]
 80095c0:	464a      	mov	r2, r9
 80095c2:	f000 faeb 	bl	8009b9c <memcpy>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	6126      	str	r6, [r4, #16]
 80095d4:	6165      	str	r5, [r4, #20]
 80095d6:	444e      	add	r6, r9
 80095d8:	eba5 0509 	sub.w	r5, r5, r9
 80095dc:	6026      	str	r6, [r4, #0]
 80095de:	60a5      	str	r5, [r4, #8]
 80095e0:	463e      	mov	r6, r7
 80095e2:	42be      	cmp	r6, r7
 80095e4:	d900      	bls.n	80095e8 <__ssputs_r+0x70>
 80095e6:	463e      	mov	r6, r7
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	4632      	mov	r2, r6
 80095ec:	4641      	mov	r1, r8
 80095ee:	f000 faab 	bl	8009b48 <memmove>
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	1b9b      	subs	r3, r3, r6
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	4433      	add	r3, r6
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	2000      	movs	r0, #0
 8009600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009604:	462a      	mov	r2, r5
 8009606:	f000 fad7 	bl	8009bb8 <_realloc_r>
 800960a:	4606      	mov	r6, r0
 800960c:	2800      	cmp	r0, #0
 800960e:	d1e0      	bne.n	80095d2 <__ssputs_r+0x5a>
 8009610:	6921      	ldr	r1, [r4, #16]
 8009612:	4650      	mov	r0, sl
 8009614:	f7ff feb8 	bl	8009388 <_free_r>
 8009618:	230c      	movs	r3, #12
 800961a:	f8ca 3000 	str.w	r3, [sl]
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	e7e9      	b.n	8009600 <__ssputs_r+0x88>

0800962c <_svfiprintf_r>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4698      	mov	r8, r3
 8009632:	898b      	ldrh	r3, [r1, #12]
 8009634:	061b      	lsls	r3, r3, #24
 8009636:	b09d      	sub	sp, #116	; 0x74
 8009638:	4607      	mov	r7, r0
 800963a:	460d      	mov	r5, r1
 800963c:	4614      	mov	r4, r2
 800963e:	d50e      	bpl.n	800965e <_svfiprintf_r+0x32>
 8009640:	690b      	ldr	r3, [r1, #16]
 8009642:	b963      	cbnz	r3, 800965e <_svfiprintf_r+0x32>
 8009644:	2140      	movs	r1, #64	; 0x40
 8009646:	f7ff ff0b 	bl	8009460 <_malloc_r>
 800964a:	6028      	str	r0, [r5, #0]
 800964c:	6128      	str	r0, [r5, #16]
 800964e:	b920      	cbnz	r0, 800965a <_svfiprintf_r+0x2e>
 8009650:	230c      	movs	r3, #12
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e0d0      	b.n	80097fc <_svfiprintf_r+0x1d0>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	616b      	str	r3, [r5, #20]
 800965e:	2300      	movs	r3, #0
 8009660:	9309      	str	r3, [sp, #36]	; 0x24
 8009662:	2320      	movs	r3, #32
 8009664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009668:	f8cd 800c 	str.w	r8, [sp, #12]
 800966c:	2330      	movs	r3, #48	; 0x30
 800966e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009814 <_svfiprintf_r+0x1e8>
 8009672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009676:	f04f 0901 	mov.w	r9, #1
 800967a:	4623      	mov	r3, r4
 800967c:	469a      	mov	sl, r3
 800967e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009682:	b10a      	cbz	r2, 8009688 <_svfiprintf_r+0x5c>
 8009684:	2a25      	cmp	r2, #37	; 0x25
 8009686:	d1f9      	bne.n	800967c <_svfiprintf_r+0x50>
 8009688:	ebba 0b04 	subs.w	fp, sl, r4
 800968c:	d00b      	beq.n	80096a6 <_svfiprintf_r+0x7a>
 800968e:	465b      	mov	r3, fp
 8009690:	4622      	mov	r2, r4
 8009692:	4629      	mov	r1, r5
 8009694:	4638      	mov	r0, r7
 8009696:	f7ff ff6f 	bl	8009578 <__ssputs_r>
 800969a:	3001      	adds	r0, #1
 800969c:	f000 80a9 	beq.w	80097f2 <_svfiprintf_r+0x1c6>
 80096a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a2:	445a      	add	r2, fp
 80096a4:	9209      	str	r2, [sp, #36]	; 0x24
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80a1 	beq.w	80097f2 <_svfiprintf_r+0x1c6>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ba:	f10a 0a01 	add.w	sl, sl, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c6:	931a      	str	r3, [sp, #104]	; 0x68
 80096c8:	4654      	mov	r4, sl
 80096ca:	2205      	movs	r2, #5
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	4850      	ldr	r0, [pc, #320]	; (8009814 <_svfiprintf_r+0x1e8>)
 80096d2:	f7f6 fded 	bl	80002b0 <memchr>
 80096d6:	9a04      	ldr	r2, [sp, #16]
 80096d8:	b9d8      	cbnz	r0, 8009712 <_svfiprintf_r+0xe6>
 80096da:	06d0      	lsls	r0, r2, #27
 80096dc:	bf44      	itt	mi
 80096de:	2320      	movmi	r3, #32
 80096e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e4:	0711      	lsls	r1, r2, #28
 80096e6:	bf44      	itt	mi
 80096e8:	232b      	movmi	r3, #43	; 0x2b
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b2a      	cmp	r3, #42	; 0x2a
 80096f4:	d015      	beq.n	8009722 <_svfiprintf_r+0xf6>
 80096f6:	9a07      	ldr	r2, [sp, #28]
 80096f8:	4654      	mov	r4, sl
 80096fa:	2000      	movs	r0, #0
 80096fc:	f04f 0c0a 	mov.w	ip, #10
 8009700:	4621      	mov	r1, r4
 8009702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009706:	3b30      	subs	r3, #48	; 0x30
 8009708:	2b09      	cmp	r3, #9
 800970a:	d94d      	bls.n	80097a8 <_svfiprintf_r+0x17c>
 800970c:	b1b0      	cbz	r0, 800973c <_svfiprintf_r+0x110>
 800970e:	9207      	str	r2, [sp, #28]
 8009710:	e014      	b.n	800973c <_svfiprintf_r+0x110>
 8009712:	eba0 0308 	sub.w	r3, r0, r8
 8009716:	fa09 f303 	lsl.w	r3, r9, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	46a2      	mov	sl, r4
 8009720:	e7d2      	b.n	80096c8 <_svfiprintf_r+0x9c>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	9103      	str	r1, [sp, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfbb      	ittet	lt
 800972e:	425b      	neglt	r3, r3
 8009730:	f042 0202 	orrlt.w	r2, r2, #2
 8009734:	9307      	strge	r3, [sp, #28]
 8009736:	9307      	strlt	r3, [sp, #28]
 8009738:	bfb8      	it	lt
 800973a:	9204      	strlt	r2, [sp, #16]
 800973c:	7823      	ldrb	r3, [r4, #0]
 800973e:	2b2e      	cmp	r3, #46	; 0x2e
 8009740:	d10c      	bne.n	800975c <_svfiprintf_r+0x130>
 8009742:	7863      	ldrb	r3, [r4, #1]
 8009744:	2b2a      	cmp	r3, #42	; 0x2a
 8009746:	d134      	bne.n	80097b2 <_svfiprintf_r+0x186>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9203      	str	r2, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfb8      	it	lt
 8009754:	f04f 33ff 	movlt.w	r3, #4294967295
 8009758:	3402      	adds	r4, #2
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009824 <_svfiprintf_r+0x1f8>
 8009760:	7821      	ldrb	r1, [r4, #0]
 8009762:	2203      	movs	r2, #3
 8009764:	4650      	mov	r0, sl
 8009766:	f7f6 fda3 	bl	80002b0 <memchr>
 800976a:	b138      	cbz	r0, 800977c <_svfiprintf_r+0x150>
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	eba0 000a 	sub.w	r0, r0, sl
 8009772:	2240      	movs	r2, #64	; 0x40
 8009774:	4082      	lsls	r2, r0
 8009776:	4313      	orrs	r3, r2
 8009778:	3401      	adds	r4, #1
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	4825      	ldr	r0, [pc, #148]	; (8009818 <_svfiprintf_r+0x1ec>)
 8009782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009786:	2206      	movs	r2, #6
 8009788:	f7f6 fd92 	bl	80002b0 <memchr>
 800978c:	2800      	cmp	r0, #0
 800978e:	d038      	beq.n	8009802 <_svfiprintf_r+0x1d6>
 8009790:	4b22      	ldr	r3, [pc, #136]	; (800981c <_svfiprintf_r+0x1f0>)
 8009792:	bb1b      	cbnz	r3, 80097dc <_svfiprintf_r+0x1b0>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	3307      	adds	r3, #7
 8009798:	f023 0307 	bic.w	r3, r3, #7
 800979c:	3308      	adds	r3, #8
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	4433      	add	r3, r6
 80097a4:	9309      	str	r3, [sp, #36]	; 0x24
 80097a6:	e768      	b.n	800967a <_svfiprintf_r+0x4e>
 80097a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ac:	460c      	mov	r4, r1
 80097ae:	2001      	movs	r0, #1
 80097b0:	e7a6      	b.n	8009700 <_svfiprintf_r+0xd4>
 80097b2:	2300      	movs	r3, #0
 80097b4:	3401      	adds	r4, #1
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	4619      	mov	r1, r3
 80097ba:	f04f 0c0a 	mov.w	ip, #10
 80097be:	4620      	mov	r0, r4
 80097c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c4:	3a30      	subs	r2, #48	; 0x30
 80097c6:	2a09      	cmp	r2, #9
 80097c8:	d903      	bls.n	80097d2 <_svfiprintf_r+0x1a6>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0c6      	beq.n	800975c <_svfiprintf_r+0x130>
 80097ce:	9105      	str	r1, [sp, #20]
 80097d0:	e7c4      	b.n	800975c <_svfiprintf_r+0x130>
 80097d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d6:	4604      	mov	r4, r0
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f0      	b.n	80097be <_svfiprintf_r+0x192>
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <_svfiprintf_r+0x1f4>)
 80097e4:	a904      	add	r1, sp, #16
 80097e6:	4638      	mov	r0, r7
 80097e8:	f3af 8000 	nop.w
 80097ec:	1c42      	adds	r2, r0, #1
 80097ee:	4606      	mov	r6, r0
 80097f0:	d1d6      	bne.n	80097a0 <_svfiprintf_r+0x174>
 80097f2:	89ab      	ldrh	r3, [r5, #12]
 80097f4:	065b      	lsls	r3, r3, #25
 80097f6:	f53f af2d 	bmi.w	8009654 <_svfiprintf_r+0x28>
 80097fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fc:	b01d      	add	sp, #116	; 0x74
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	ab03      	add	r3, sp, #12
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4b05      	ldr	r3, [pc, #20]	; (8009820 <_svfiprintf_r+0x1f4>)
 800980a:	a904      	add	r1, sp, #16
 800980c:	4638      	mov	r0, r7
 800980e:	f000 f879 	bl	8009904 <_printf_i>
 8009812:	e7eb      	b.n	80097ec <_svfiprintf_r+0x1c0>
 8009814:	08020d4c 	.word	0x08020d4c
 8009818:	08020d56 	.word	0x08020d56
 800981c:	00000000 	.word	0x00000000
 8009820:	08009579 	.word	0x08009579
 8009824:	08020d52 	.word	0x08020d52

08009828 <_printf_common>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	4616      	mov	r6, r2
 800982e:	4699      	mov	r9, r3
 8009830:	688a      	ldr	r2, [r1, #8]
 8009832:	690b      	ldr	r3, [r1, #16]
 8009834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009838:	4293      	cmp	r3, r2
 800983a:	bfb8      	it	lt
 800983c:	4613      	movlt	r3, r2
 800983e:	6033      	str	r3, [r6, #0]
 8009840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009844:	4607      	mov	r7, r0
 8009846:	460c      	mov	r4, r1
 8009848:	b10a      	cbz	r2, 800984e <_printf_common+0x26>
 800984a:	3301      	adds	r3, #1
 800984c:	6033      	str	r3, [r6, #0]
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	0699      	lsls	r1, r3, #26
 8009852:	bf42      	ittt	mi
 8009854:	6833      	ldrmi	r3, [r6, #0]
 8009856:	3302      	addmi	r3, #2
 8009858:	6033      	strmi	r3, [r6, #0]
 800985a:	6825      	ldr	r5, [r4, #0]
 800985c:	f015 0506 	ands.w	r5, r5, #6
 8009860:	d106      	bne.n	8009870 <_printf_common+0x48>
 8009862:	f104 0a19 	add.w	sl, r4, #25
 8009866:	68e3      	ldr	r3, [r4, #12]
 8009868:	6832      	ldr	r2, [r6, #0]
 800986a:	1a9b      	subs	r3, r3, r2
 800986c:	42ab      	cmp	r3, r5
 800986e:	dc26      	bgt.n	80098be <_printf_common+0x96>
 8009870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009874:	1e13      	subs	r3, r2, #0
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	bf18      	it	ne
 800987a:	2301      	movne	r3, #1
 800987c:	0692      	lsls	r2, r2, #26
 800987e:	d42b      	bmi.n	80098d8 <_printf_common+0xb0>
 8009880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009884:	4649      	mov	r1, r9
 8009886:	4638      	mov	r0, r7
 8009888:	47c0      	blx	r8
 800988a:	3001      	adds	r0, #1
 800988c:	d01e      	beq.n	80098cc <_printf_common+0xa4>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	f003 0306 	and.w	r3, r3, #6
 8009896:	2b04      	cmp	r3, #4
 8009898:	bf02      	ittt	eq
 800989a:	68e5      	ldreq	r5, [r4, #12]
 800989c:	6833      	ldreq	r3, [r6, #0]
 800989e:	1aed      	subeq	r5, r5, r3
 80098a0:	68a3      	ldr	r3, [r4, #8]
 80098a2:	bf0c      	ite	eq
 80098a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098a8:	2500      	movne	r5, #0
 80098aa:	4293      	cmp	r3, r2
 80098ac:	bfc4      	itt	gt
 80098ae:	1a9b      	subgt	r3, r3, r2
 80098b0:	18ed      	addgt	r5, r5, r3
 80098b2:	2600      	movs	r6, #0
 80098b4:	341a      	adds	r4, #26
 80098b6:	42b5      	cmp	r5, r6
 80098b8:	d11a      	bne.n	80098f0 <_printf_common+0xc8>
 80098ba:	2000      	movs	r0, #0
 80098bc:	e008      	b.n	80098d0 <_printf_common+0xa8>
 80098be:	2301      	movs	r3, #1
 80098c0:	4652      	mov	r2, sl
 80098c2:	4649      	mov	r1, r9
 80098c4:	4638      	mov	r0, r7
 80098c6:	47c0      	blx	r8
 80098c8:	3001      	adds	r0, #1
 80098ca:	d103      	bne.n	80098d4 <_printf_common+0xac>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d4:	3501      	adds	r5, #1
 80098d6:	e7c6      	b.n	8009866 <_printf_common+0x3e>
 80098d8:	18e1      	adds	r1, r4, r3
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	2030      	movs	r0, #48	; 0x30
 80098de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098e2:	4422      	add	r2, r4
 80098e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098ec:	3302      	adds	r3, #2
 80098ee:	e7c7      	b.n	8009880 <_printf_common+0x58>
 80098f0:	2301      	movs	r3, #1
 80098f2:	4622      	mov	r2, r4
 80098f4:	4649      	mov	r1, r9
 80098f6:	4638      	mov	r0, r7
 80098f8:	47c0      	blx	r8
 80098fa:	3001      	adds	r0, #1
 80098fc:	d0e6      	beq.n	80098cc <_printf_common+0xa4>
 80098fe:	3601      	adds	r6, #1
 8009900:	e7d9      	b.n	80098b6 <_printf_common+0x8e>
	...

08009904 <_printf_i>:
 8009904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	7e0f      	ldrb	r7, [r1, #24]
 800990a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800990c:	2f78      	cmp	r7, #120	; 0x78
 800990e:	4691      	mov	r9, r2
 8009910:	4680      	mov	r8, r0
 8009912:	460c      	mov	r4, r1
 8009914:	469a      	mov	sl, r3
 8009916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800991a:	d807      	bhi.n	800992c <_printf_i+0x28>
 800991c:	2f62      	cmp	r7, #98	; 0x62
 800991e:	d80a      	bhi.n	8009936 <_printf_i+0x32>
 8009920:	2f00      	cmp	r7, #0
 8009922:	f000 80d4 	beq.w	8009ace <_printf_i+0x1ca>
 8009926:	2f58      	cmp	r7, #88	; 0x58
 8009928:	f000 80c0 	beq.w	8009aac <_printf_i+0x1a8>
 800992c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009934:	e03a      	b.n	80099ac <_printf_i+0xa8>
 8009936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800993a:	2b15      	cmp	r3, #21
 800993c:	d8f6      	bhi.n	800992c <_printf_i+0x28>
 800993e:	a101      	add	r1, pc, #4	; (adr r1, 8009944 <_printf_i+0x40>)
 8009940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009944:	0800999d 	.word	0x0800999d
 8009948:	080099b1 	.word	0x080099b1
 800994c:	0800992d 	.word	0x0800992d
 8009950:	0800992d 	.word	0x0800992d
 8009954:	0800992d 	.word	0x0800992d
 8009958:	0800992d 	.word	0x0800992d
 800995c:	080099b1 	.word	0x080099b1
 8009960:	0800992d 	.word	0x0800992d
 8009964:	0800992d 	.word	0x0800992d
 8009968:	0800992d 	.word	0x0800992d
 800996c:	0800992d 	.word	0x0800992d
 8009970:	08009ab5 	.word	0x08009ab5
 8009974:	080099dd 	.word	0x080099dd
 8009978:	08009a6f 	.word	0x08009a6f
 800997c:	0800992d 	.word	0x0800992d
 8009980:	0800992d 	.word	0x0800992d
 8009984:	08009ad7 	.word	0x08009ad7
 8009988:	0800992d 	.word	0x0800992d
 800998c:	080099dd 	.word	0x080099dd
 8009990:	0800992d 	.word	0x0800992d
 8009994:	0800992d 	.word	0x0800992d
 8009998:	08009a77 	.word	0x08009a77
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	1d1a      	adds	r2, r3, #4
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	602a      	str	r2, [r5, #0]
 80099a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099ac:	2301      	movs	r3, #1
 80099ae:	e09f      	b.n	8009af0 <_printf_i+0x1ec>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	682b      	ldr	r3, [r5, #0]
 80099b4:	0607      	lsls	r7, r0, #24
 80099b6:	f103 0104 	add.w	r1, r3, #4
 80099ba:	6029      	str	r1, [r5, #0]
 80099bc:	d501      	bpl.n	80099c2 <_printf_i+0xbe>
 80099be:	681e      	ldr	r6, [r3, #0]
 80099c0:	e003      	b.n	80099ca <_printf_i+0xc6>
 80099c2:	0646      	lsls	r6, r0, #25
 80099c4:	d5fb      	bpl.n	80099be <_printf_i+0xba>
 80099c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80099ca:	2e00      	cmp	r6, #0
 80099cc:	da03      	bge.n	80099d6 <_printf_i+0xd2>
 80099ce:	232d      	movs	r3, #45	; 0x2d
 80099d0:	4276      	negs	r6, r6
 80099d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d6:	485a      	ldr	r0, [pc, #360]	; (8009b40 <_printf_i+0x23c>)
 80099d8:	230a      	movs	r3, #10
 80099da:	e012      	b.n	8009a02 <_printf_i+0xfe>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	6820      	ldr	r0, [r4, #0]
 80099e0:	1d19      	adds	r1, r3, #4
 80099e2:	6029      	str	r1, [r5, #0]
 80099e4:	0605      	lsls	r5, r0, #24
 80099e6:	d501      	bpl.n	80099ec <_printf_i+0xe8>
 80099e8:	681e      	ldr	r6, [r3, #0]
 80099ea:	e002      	b.n	80099f2 <_printf_i+0xee>
 80099ec:	0641      	lsls	r1, r0, #25
 80099ee:	d5fb      	bpl.n	80099e8 <_printf_i+0xe4>
 80099f0:	881e      	ldrh	r6, [r3, #0]
 80099f2:	4853      	ldr	r0, [pc, #332]	; (8009b40 <_printf_i+0x23c>)
 80099f4:	2f6f      	cmp	r7, #111	; 0x6f
 80099f6:	bf0c      	ite	eq
 80099f8:	2308      	moveq	r3, #8
 80099fa:	230a      	movne	r3, #10
 80099fc:	2100      	movs	r1, #0
 80099fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a02:	6865      	ldr	r5, [r4, #4]
 8009a04:	60a5      	str	r5, [r4, #8]
 8009a06:	2d00      	cmp	r5, #0
 8009a08:	bfa2      	ittt	ge
 8009a0a:	6821      	ldrge	r1, [r4, #0]
 8009a0c:	f021 0104 	bicge.w	r1, r1, #4
 8009a10:	6021      	strge	r1, [r4, #0]
 8009a12:	b90e      	cbnz	r6, 8009a18 <_printf_i+0x114>
 8009a14:	2d00      	cmp	r5, #0
 8009a16:	d04b      	beq.n	8009ab0 <_printf_i+0x1ac>
 8009a18:	4615      	mov	r5, r2
 8009a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8009a22:	5dc7      	ldrb	r7, [r0, r7]
 8009a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a28:	4637      	mov	r7, r6
 8009a2a:	42bb      	cmp	r3, r7
 8009a2c:	460e      	mov	r6, r1
 8009a2e:	d9f4      	bls.n	8009a1a <_printf_i+0x116>
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d10b      	bne.n	8009a4c <_printf_i+0x148>
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	07de      	lsls	r6, r3, #31
 8009a38:	d508      	bpl.n	8009a4c <_printf_i+0x148>
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	6861      	ldr	r1, [r4, #4]
 8009a3e:	4299      	cmp	r1, r3
 8009a40:	bfde      	ittt	le
 8009a42:	2330      	movle	r3, #48	; 0x30
 8009a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a4c:	1b52      	subs	r2, r2, r5
 8009a4e:	6122      	str	r2, [r4, #16]
 8009a50:	f8cd a000 	str.w	sl, [sp]
 8009a54:	464b      	mov	r3, r9
 8009a56:	aa03      	add	r2, sp, #12
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	f7ff fee4 	bl	8009828 <_printf_common>
 8009a60:	3001      	adds	r0, #1
 8009a62:	d14a      	bne.n	8009afa <_printf_i+0x1f6>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	b004      	add	sp, #16
 8009a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	f043 0320 	orr.w	r3, r3, #32
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	4833      	ldr	r0, [pc, #204]	; (8009b44 <_printf_i+0x240>)
 8009a78:	2778      	movs	r7, #120	; 0x78
 8009a7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	6829      	ldr	r1, [r5, #0]
 8009a82:	061f      	lsls	r7, r3, #24
 8009a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a88:	d402      	bmi.n	8009a90 <_printf_i+0x18c>
 8009a8a:	065f      	lsls	r7, r3, #25
 8009a8c:	bf48      	it	mi
 8009a8e:	b2b6      	uxthmi	r6, r6
 8009a90:	07df      	lsls	r7, r3, #31
 8009a92:	bf48      	it	mi
 8009a94:	f043 0320 	orrmi.w	r3, r3, #32
 8009a98:	6029      	str	r1, [r5, #0]
 8009a9a:	bf48      	it	mi
 8009a9c:	6023      	strmi	r3, [r4, #0]
 8009a9e:	b91e      	cbnz	r6, 8009aa8 <_printf_i+0x1a4>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	f023 0320 	bic.w	r3, r3, #32
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	e7a7      	b.n	80099fc <_printf_i+0xf8>
 8009aac:	4824      	ldr	r0, [pc, #144]	; (8009b40 <_printf_i+0x23c>)
 8009aae:	e7e4      	b.n	8009a7a <_printf_i+0x176>
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	e7bd      	b.n	8009a30 <_printf_i+0x12c>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	6826      	ldr	r6, [r4, #0]
 8009ab8:	6961      	ldr	r1, [r4, #20]
 8009aba:	1d18      	adds	r0, r3, #4
 8009abc:	6028      	str	r0, [r5, #0]
 8009abe:	0635      	lsls	r5, r6, #24
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	d501      	bpl.n	8009ac8 <_printf_i+0x1c4>
 8009ac4:	6019      	str	r1, [r3, #0]
 8009ac6:	e002      	b.n	8009ace <_printf_i+0x1ca>
 8009ac8:	0670      	lsls	r0, r6, #25
 8009aca:	d5fb      	bpl.n	8009ac4 <_printf_i+0x1c0>
 8009acc:	8019      	strh	r1, [r3, #0]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	4615      	mov	r5, r2
 8009ad4:	e7bc      	b.n	8009a50 <_printf_i+0x14c>
 8009ad6:	682b      	ldr	r3, [r5, #0]
 8009ad8:	1d1a      	adds	r2, r3, #4
 8009ada:	602a      	str	r2, [r5, #0]
 8009adc:	681d      	ldr	r5, [r3, #0]
 8009ade:	6862      	ldr	r2, [r4, #4]
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f7f6 fbe4 	bl	80002b0 <memchr>
 8009ae8:	b108      	cbz	r0, 8009aee <_printf_i+0x1ea>
 8009aea:	1b40      	subs	r0, r0, r5
 8009aec:	6060      	str	r0, [r4, #4]
 8009aee:	6863      	ldr	r3, [r4, #4]
 8009af0:	6123      	str	r3, [r4, #16]
 8009af2:	2300      	movs	r3, #0
 8009af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af8:	e7aa      	b.n	8009a50 <_printf_i+0x14c>
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	462a      	mov	r2, r5
 8009afe:	4649      	mov	r1, r9
 8009b00:	4640      	mov	r0, r8
 8009b02:	47d0      	blx	sl
 8009b04:	3001      	adds	r0, #1
 8009b06:	d0ad      	beq.n	8009a64 <_printf_i+0x160>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	079b      	lsls	r3, r3, #30
 8009b0c:	d413      	bmi.n	8009b36 <_printf_i+0x232>
 8009b0e:	68e0      	ldr	r0, [r4, #12]
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	4298      	cmp	r0, r3
 8009b14:	bfb8      	it	lt
 8009b16:	4618      	movlt	r0, r3
 8009b18:	e7a6      	b.n	8009a68 <_printf_i+0x164>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4632      	mov	r2, r6
 8009b1e:	4649      	mov	r1, r9
 8009b20:	4640      	mov	r0, r8
 8009b22:	47d0      	blx	sl
 8009b24:	3001      	adds	r0, #1
 8009b26:	d09d      	beq.n	8009a64 <_printf_i+0x160>
 8009b28:	3501      	adds	r5, #1
 8009b2a:	68e3      	ldr	r3, [r4, #12]
 8009b2c:	9903      	ldr	r1, [sp, #12]
 8009b2e:	1a5b      	subs	r3, r3, r1
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dcf2      	bgt.n	8009b1a <_printf_i+0x216>
 8009b34:	e7eb      	b.n	8009b0e <_printf_i+0x20a>
 8009b36:	2500      	movs	r5, #0
 8009b38:	f104 0619 	add.w	r6, r4, #25
 8009b3c:	e7f5      	b.n	8009b2a <_printf_i+0x226>
 8009b3e:	bf00      	nop
 8009b40:	08020d5d 	.word	0x08020d5d
 8009b44:	08020d6e 	.word	0x08020d6e

08009b48 <memmove>:
 8009b48:	4288      	cmp	r0, r1
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	eb01 0402 	add.w	r4, r1, r2
 8009b50:	d902      	bls.n	8009b58 <memmove+0x10>
 8009b52:	4284      	cmp	r4, r0
 8009b54:	4623      	mov	r3, r4
 8009b56:	d807      	bhi.n	8009b68 <memmove+0x20>
 8009b58:	1e43      	subs	r3, r0, #1
 8009b5a:	42a1      	cmp	r1, r4
 8009b5c:	d008      	beq.n	8009b70 <memmove+0x28>
 8009b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b66:	e7f8      	b.n	8009b5a <memmove+0x12>
 8009b68:	4402      	add	r2, r0
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	428a      	cmp	r2, r1
 8009b6e:	d100      	bne.n	8009b72 <memmove+0x2a>
 8009b70:	bd10      	pop	{r4, pc}
 8009b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b7a:	e7f7      	b.n	8009b6c <memmove+0x24>

08009b7c <_sbrk_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d06      	ldr	r5, [pc, #24]	; (8009b98 <_sbrk_r+0x1c>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f000 f876 	bl	8009c78 <_sbrk>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_sbrk_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_sbrk_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20000bf0 	.word	0x20000bf0

08009b9c <memcpy>:
 8009b9c:	440a      	add	r2, r1
 8009b9e:	4291      	cmp	r1, r2
 8009ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ba4:	d100      	bne.n	8009ba8 <memcpy+0xc>
 8009ba6:	4770      	bx	lr
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bb2:	4291      	cmp	r1, r2
 8009bb4:	d1f9      	bne.n	8009baa <memcpy+0xe>
 8009bb6:	bd10      	pop	{r4, pc}

08009bb8 <_realloc_r>:
 8009bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	4614      	mov	r4, r2
 8009bc0:	460e      	mov	r6, r1
 8009bc2:	b921      	cbnz	r1, 8009bce <_realloc_r+0x16>
 8009bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc8:	4611      	mov	r1, r2
 8009bca:	f7ff bc49 	b.w	8009460 <_malloc_r>
 8009bce:	b92a      	cbnz	r2, 8009bdc <_realloc_r+0x24>
 8009bd0:	f7ff fbda 	bl	8009388 <_free_r>
 8009bd4:	4625      	mov	r5, r4
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bdc:	f000 f81b 	bl	8009c16 <_malloc_usable_size_r>
 8009be0:	4284      	cmp	r4, r0
 8009be2:	4607      	mov	r7, r0
 8009be4:	d802      	bhi.n	8009bec <_realloc_r+0x34>
 8009be6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bea:	d812      	bhi.n	8009c12 <_realloc_r+0x5a>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7ff fc36 	bl	8009460 <_malloc_r>
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d0ed      	beq.n	8009bd6 <_realloc_r+0x1e>
 8009bfa:	42bc      	cmp	r4, r7
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4631      	mov	r1, r6
 8009c00:	bf28      	it	cs
 8009c02:	463a      	movcs	r2, r7
 8009c04:	f7ff ffca 	bl	8009b9c <memcpy>
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f7ff fbbc 	bl	8009388 <_free_r>
 8009c10:	e7e1      	b.n	8009bd6 <_realloc_r+0x1e>
 8009c12:	4635      	mov	r5, r6
 8009c14:	e7df      	b.n	8009bd6 <_realloc_r+0x1e>

08009c16 <_malloc_usable_size_r>:
 8009c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c1a:	1f18      	subs	r0, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	bfbc      	itt	lt
 8009c20:	580b      	ldrlt	r3, [r1, r0]
 8009c22:	18c0      	addlt	r0, r0, r3
 8009c24:	4770      	bx	lr
	...

08009c28 <sqrtf>:
 8009c28:	b508      	push	{r3, lr}
 8009c2a:	ed2d 8b02 	vpush	{d8}
 8009c2e:	eeb0 8a40 	vmov.f32	s16, s0
 8009c32:	f000 f817 	bl	8009c64 <__ieee754_sqrtf>
 8009c36:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3e:	d60c      	bvs.n	8009c5a <sqrtf+0x32>
 8009c40:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009c60 <sqrtf+0x38>
 8009c44:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	d505      	bpl.n	8009c5a <sqrtf+0x32>
 8009c4e:	f000 f80d 	bl	8009c6c <__errno>
 8009c52:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009c56:	2321      	movs	r3, #33	; 0x21
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	ecbd 8b02 	vpop	{d8}
 8009c5e:	bd08      	pop	{r3, pc}
 8009c60:	00000000 	.word	0x00000000

08009c64 <__ieee754_sqrtf>:
 8009c64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009c68:	4770      	bx	lr
	...

08009c6c <__errno>:
 8009c6c:	4b01      	ldr	r3, [pc, #4]	; (8009c74 <__errno+0x8>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	200003c4 	.word	0x200003c4

08009c78 <_sbrk>:
 8009c78:	4a04      	ldr	r2, [pc, #16]	; (8009c8c <_sbrk+0x14>)
 8009c7a:	6811      	ldr	r1, [r2, #0]
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	b909      	cbnz	r1, 8009c84 <_sbrk+0xc>
 8009c80:	4903      	ldr	r1, [pc, #12]	; (8009c90 <_sbrk+0x18>)
 8009c82:	6011      	str	r1, [r2, #0]
 8009c84:	6810      	ldr	r0, [r2, #0]
 8009c86:	4403      	add	r3, r0
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	4770      	bx	lr
 8009c8c:	20000c00 	.word	0x20000c00
 8009c90:	20000c08 	.word	0x20000c08

08009c94 <_init>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_fini>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	bf00      	nop
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr
