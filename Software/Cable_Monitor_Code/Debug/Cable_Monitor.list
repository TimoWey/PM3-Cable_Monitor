
Cable_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000170c8  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020d8c  08020d8c  000403c8  2**0
                  CONTENTS
  4 .ARM          00000008  08020d8c  08020d8c  00030d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020d94  08020d94  000403c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020d94  08020d94  00030d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020d98  08020d98  00030d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08020d9c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  200003c8  08021164  000403c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  08021164  00040c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  000403f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168bc  00000000  00000000  000404a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e9d  00000000  00000000  00056d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0005ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8b  00000000  00000000  0005c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ba4  00000000  00000000  0005d0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2a4  00000000  00000000  00083c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfa9f  00000000  00000000  0009df43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c3c  00000000  00000000  0017d9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00183620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000330c  00000000  00000000  001836bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  001869c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003c8 	.word	0x200003c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009cac 	.word	0x08009cac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003cc 	.word	0x200003cc
 80001ec:	08009cac 	.word	0x08009cac

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <GPIO_Init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
	GPIOE-> OSPEEDR |= 0x400;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);*/

	// Initialize the GPIO pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOE_CLK_ENABLE(); // Enable the GPIO E clock
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <GPIO_Init+0x84>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <GPIO_Init+0x84>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <GPIO_Init+0x84>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

	// Configure PE3 in input mode
	GPIO_InitStruct.Pin = PIN_PE3;
 800066e:	2308      	movs	r3, #8
 8000670:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000676:	2302      	movs	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <GPIO_Init+0x88>)
 8000680:	f004 f96e 	bl	8004960 <HAL_GPIO_Init>

	// Configure PE5 in output push-pull mode
	GPIO_InitStruct.Pin = PIN_PE5;
 8000684:	2320      	movs	r3, #32
 8000686:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <GPIO_Init+0x88>)
 800069a:	f004 f961 	bl	8004960 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2120      	movs	r1, #32
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <GPIO_Init+0x88>)
 80006a4:	f004 fb20 	bl	8004ce8 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 80006a8:	e002      	b.n	80006b0 <GPIO_Init+0x64>
	{
	  HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f003 fbce 	bl	8003e4c <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET)
 80006b0:	2108      	movs	r1, #8
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <GPIO_Init+0x88>)
 80006b4:	f004 fb00 	bl	8004cb8 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d0f5      	beq.n	80006aa <GPIO_Init+0x5e>
	}
	HAL_Delay(3000);
 80006be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c2:	f003 fbc3 	bl	8003e4c <HAL_Delay>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40021000 	.word	0x40021000

080006d8 <calculate_main_frequency>:
 * @param fft_len The length of the FFT.
 * @param output Pointer to the array to store the FFT output.
 * @return The main frequency for the specific channel.
 */

float calculate_main_frequency(uint8_t Channel, uint32_t* samples, uint8_t num_channels, uint32_t buffer_size, uint32_t sampling_freq) {
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80006de:	af00      	add	r7, sp, #0
 80006e0:	4604      	mov	r4, r0
 80006e2:	f507 7050 	add.w	r0, r7, #832	; 0x340
 80006e6:	f5a0 704e 	sub.w	r0, r0, #824	; 0x338
 80006ea:	6001      	str	r1, [r0, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80006f2:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80006fc:	f2a3 3331 	subw	r3, r3, #817	; 0x331
 8000700:	4622      	mov	r2, r4
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000708:	f2a3 3332 	subw	r3, r3, #818	; 0x332
 800070c:	460a      	mov	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
    // Perform FFT using CMSIS-DSP library
    const uint32_t fft_size = buffer_size;
 8000710:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000714:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    float32_t input_samples[64];

    for (uint32_t i = 0; i < fft_size; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8000724:	e02a      	b.n	800077c <calculate_main_frequency+0xa4>
        input_samples[i] = (float32_t)samples[i * num_channels + (Channel - 1)];
 8000726:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800072a:	f2a3 3332 	subw	r3, r3, #818	; 0x332
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000734:	fb03 f202 	mul.w	r2, r3, r2
 8000738:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800073c:	f2a3 3331 	subw	r3, r3, #817	; 0x331
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	3b01      	subs	r3, #1
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800074c:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	4413      	add	r3, r2
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	ee07 3a90 	vmov	s15, r3
 800075a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000762:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000766:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < fft_size; i++) {
 8000772:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000776:	3301      	adds	r3, #1
 8000778:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800077c:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000780:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ce      	bcc.n	8000726 <calculate_main_frequency+0x4e>
    }
    
    // remove DC component
    for (uint32_t i = 0; i < fft_size; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800078e:	e01c      	b.n	80007ca <calculate_main_frequency+0xf2>
        input_samples[i] -= 2047.5;
 8000790:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000794:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000798:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000870 <calculate_main_frequency+0x198>
 80007a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007ac:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80007b0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80007b4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < fft_size; i++) {
 80007c0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80007c4:	3301      	adds	r3, #1
 80007c6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80007ca:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 80007ce:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3dc      	bcc.n	8000790 <calculate_main_frequency+0xb8>
    }

    float32_t output[128];
    arm_rfft_fast_instance_f32 fft_struct;
    arm_rfft_fast_init_f32(&fft_struct, fft_size);
 80007d6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 fcb2 	bl	800814c <arm_rfft_fast_init_f32>

    // Perform the FFT on the input samples
    arm_rfft_fast_f32(&fft_struct, input_samples, output, 0);
 80007e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007ec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80007f0:	f107 0018 	add.w	r0, r7, #24
 80007f4:	2300      	movs	r3, #0
 80007f6:	f007 fd2b 	bl	8008250 <arm_rfft_fast_f32>

    // Calculate magnitude of complex numbers
    arm_cmplx_mag_f32(output, output, fft_size / 2);
 80007fa:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80007fe:	085a      	lsrs	r2, r3, #1
 8000800:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000808:	4618      	mov	r0, r3
 800080a:	f008 f98d 	bl	8008b28 <arm_cmplx_mag_f32>

    // Find the index of the maximum magnitude in the first half of the array
    uint32_t maxIndex;
    float32_t maxValue;
    arm_max_f32(output, fft_size / 2, &maxValue, &maxIndex);
 800080e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000812:	0859      	lsrs	r1, r3, #1
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	f107 0210 	add.w	r2, r7, #16
 800081c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000820:	f007 fc2c 	bl	800807c <arm_max_f32>

    // Calculate the main frequency
    float main_frequency = (float)maxIndex * ((float)sampling_freq) / fft_size;
 8000824:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000828:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	ee07 3a90 	vmov	s15, r3
 8000832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000836:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000842:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000846:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000856:	edc7 7acc 	vstr	s15, [r7, #816]	; 0x330
    
    return main_frequency;
 800085a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800085e:	ee07 3a90 	vmov	s15, r3
}
 8000862:	eeb0 0a67 	vmov.f32	s0, s15
 8000866:	f507 7751 	add.w	r7, r7, #836	; 0x344
 800086a:	46bd      	mov	sp, r7
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	bf00      	nop
 8000870:	44fff000 	.word	0x44fff000

08000874 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000874:	b598      	push	{r3, r4, r7, lr}
 8000876:	af00      	add	r7, sp, #0
    HAL_Init();  // Initialize the system
 8000878:	f003 fa6e 	bl	8003d58 <HAL_Init>

    SystemClock_Config();  // Configure system clocks
 800087c:	f000 f850 	bl	8000920 <SystemClock_Config>

    GPIO_Init();  // Init PE5 and set it to HIGH
 8000880:	f7ff fee4 	bl	800064c <GPIO_Init>

#ifdef FLIPPED_LCD
    BSP_LCD_Init_Flipped();  // Initialize the LCD for flipped orientation
#else
    BSP_LCD_Init();  // Initialize the LCD display
 8000884:	f002 f9be 	bl	8002c04 <BSP_LCD_Init>
#endif
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000888:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800088c:	2001      	movs	r0, #1
 800088e:	f002 fa3b 	bl	8002d08 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000892:	2001      	movs	r0, #1
 8000894:	f002 fa9c 	bl	8002dd0 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 8000898:	f002 fd6c 	bl	8003374 <BSP_LCD_DisplayOn>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f002 faf2 	bl	8002e88 <BSP_LCD_Clear>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());  // Touchscreen
 80008a4:	f002 fa18 	bl	8002cd8 <BSP_LCD_GetXSize>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29c      	uxth	r4, r3
 80008ac:	f002 fa20 	bl	8002cf0 <BSP_LCD_GetYSize>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	4620      	mov	r0, r4
 80008b8:	f003 f94a 	bl	8003b50 <BSP_TS_Init>
    /* Uncomment next line to enable touchscreen interrupt */
    // BSP_TS_ITConfig();					// Enable
    // Touchscreen interrupt

    PB_init();       // Initialize the user pushbutton
 80008bc:	f001 f89e 	bl	80019fc <PB_init>
    PB_enableIRQ();  // Enable interrupt on user pushbutton
 80008c0:	f001 f8bc 	bl	8001a3c <PB_enableIRQ>

    BSP_LED_Init(LED3);  // Toggles in while loop
 80008c4:	2000      	movs	r0, #0
 80008c6:	f001 fdb9 	bl	800243c <BSP_LED_Init>
    BSP_LED_Init(LED4);  // Is toggled by user button
 80008ca:	2001      	movs	r0, #1
 80008cc:	f001 fdb6 	bl	800243c <BSP_LED_Init>

    // MENU_hint();						// Show hint at
    // startup MENU_draw(0,3);						// Draw
    // the menu
    DISP_info_screen(MENU_HOME);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fe1d 	bl	8001510 <DISP_info_screen>

    gyro_disable();  // Disable gyro, use those analog inputs
 80008d6:	f000 f8a1 	bl	8000a1c <gyro_disable>

    MEAS_GPIO_analog_init();         // Configure GPIOs in analog mode
 80008da:	f000 f989 	bl	8000bf0 <MEAS_GPIO_analog_init>
    MEAS_timer_init();               // Configure the timer
 80008de:	f000 fa09 	bl	8000cf4 <MEAS_timer_init>
    OUTPUT_MEAS_timer_init();        // Configure the timer for output
 80008e2:	f000 fb5b 	bl	8000f9c <OUTPUT_MEAS_timer_init>
                                     /* Clear the display */
    BSP_LCD_Clear(LCD_COLOR_BLACK);  // Clear display
 80008e6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80008ea:	f002 facd 	bl	8002e88 <BSP_LCD_Clear>

    /* Infinite while loop */
    while (1) {                // Infinitely loop in main function
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 80008ee:	2000      	movs	r0, #0
 80008f0:	f001 fdf8 	bl	80024e4 <BSP_LED_Toggle>
                        BSP_LED_Off(LED4);
                }
        }*/

        // Check if Device should power off (PE3)
        if (HAL_GPIO_ReadPin(GPIOE, PIN_PE3) == GPIO_PIN_SET) {
 80008f4:	2108      	movs	r1, #8
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <main+0xa8>)
 80008f8:	f004 f9de 	bl	8004cb8 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d108      	bne.n	8000914 <main+0xa0>
            // Set PE5 low
            HAL_GPIO_WritePin(GPIOE, PIN_PE5, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <main+0xa8>)
 8000908:	f004 f9ee 	bl	8004ce8 <HAL_GPIO_WritePin>
            // Delay for 3 seconds
            HAL_Delay(3000);
 800090c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000910:	f003 fa9c 	bl	8003e4c <HAL_Delay>

        // DISP_info_screen();

        // MENU_main();					// Check for user input

        HAL_Delay(100);  // Wait or sleep
 8000914:	2064      	movs	r0, #100	; 0x64
 8000916:	f003 fa99 	bl	8003e4c <HAL_Delay>
        BSP_LED_Toggle(LED3);  // Visual feedback when running
 800091a:	e7e8      	b.n	80008ee <main+0x7a>
 800091c:	40021000 	.word	0x40021000

08000920 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b0a0      	sub	sp, #128	; 0x80
 8000924:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f008 fd08 	bl	8009344 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2230      	movs	r2, #48	; 0x30
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f008 fcf9 	bl	8009344 <memset>
    /* Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <SystemClock_Config+0xf0>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <SystemClock_Config+0xf0>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <SystemClock_Config+0xf0>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xf4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <SystemClock_Config+0xf4>)
 8000978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <SystemClock_Config+0xf4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
    /* Initialize High Speed External Oscillator and PLL circuits */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098a:	2301      	movs	r3, #1
 800098c:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800099e:	2308      	movs	r3, #8
 80009a0:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.PLL.PLLN = 336;
 80009a2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a6:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009b4:	4618      	mov	r0, r3
 80009b6:	f005 fcb3 	bl	8006320 <HAL_RCC_OscConfig>
    /* Initialize gates and clock dividers for CPU, AHB and APB busses */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80009ba:	230f      	movs	r3, #15
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80009d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009d6:	2105      	movs	r1, #5
 80009d8:	4618      	mov	r0, r3
 80009da:	f005 ff0f 	bl	80067fc <HAL_RCC_ClockConfig>
    /* Initialize PLL and clock divider for the LCD */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009de:	2308      	movs	r3, #8
 80009e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009e2:	23c0      	movs	r3, #192	; 0xc0
 80009e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 f90d 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
    /* Set clock prescaler for ADCs */
    ADC->CCR |= ADC_CCR_ADCPRE_0;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <SystemClock_Config+0xf8>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <SystemClock_Config+0xf8>)
 8000a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a04:	6053      	str	r3, [r2, #4]
}
 8000a06:	bf00      	nop
 8000a08:	3780      	adds	r7, #128	; 0x80
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000
 8000a18:	40012300 	.word	0x40012300

08000a1c <gyro_disable>:
 * which is done with the code below.
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <gyro_disable+0xb4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <gyro_disable+0xb4>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <gyro_disable+0xb4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
    /* Disable PC1 and PF8 first */
    GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;        // Reset mode for PC1
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <gyro_disable+0xb8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <gyro_disable+0xb8>)
 8000a44:	f023 030c 	bic.w	r3, r3, #12
 8000a48:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;  // Set PC1 as output
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <gyro_disable+0xb8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <gyro_disable+0xb8>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6013      	str	r3, [r2, #0]
    GPIOC->BSRR |= GPIO_BSRR_BR1;  // Set GYRO (CS) to 0 for a short time
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <gyro_disable+0xb8>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <gyro_disable+0xb8>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6193      	str	r3, [r2, #24]
    HAL_Delay(10);                 // Wait some time
 8000a62:	200a      	movs	r0, #10
 8000a64:	f003 f9f2 	bl	8003e4c <HAL_Delay>
    GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;  // Analog PC1 = ADC123_IN11
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <gyro_disable+0xb8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <gyro_disable+0xb8>)
 8000a6e:	f043 030c 	orr.w	r3, r3, #12
 8000a72:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <gyro_disable+0xb4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <gyro_disable+0xb4>)
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <gyro_disable+0xb4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
    GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;  // Reset speed of PF8
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <gyro_disable+0xbc>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <gyro_disable+0xbc>)
 8000a96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000a9a:	6093      	str	r3, [r2, #8]
    GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;  // Reset alternate function of PF8
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <gyro_disable+0xbc>)
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <gyro_disable+0xbc>)
 8000aa2:	f023 030f 	bic.w	r3, r3, #15
 8000aa6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;   // Reset pulup/down of PF8
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <gyro_disable+0xbc>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <gyro_disable+0xbc>)
 8000aae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ab2:	60d3      	str	r3, [r2, #12]
    HAL_Delay(10);                           // Wait some time
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f003 f9c9 	bl	8003e4c <HAL_Delay>
    GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos;  // Analog mode PF8 = ADC3_IN4
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <gyro_disable+0xbc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <gyro_disable+0xbc>)
 8000ac0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000ac4:	6013      	str	r3, [r2, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40021400 	.word	0x40021400

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db12      	blt.n	8000b50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	490a      	ldr	r1, [pc, #40]	; (8000b5c <__NVIC_DisableIRQ+0x44>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	3320      	adds	r3, #32
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b44:	f3bf 8f4f 	dsb	sy
}
 8000b48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b4a:	f3bf 8f6f 	isb	sy
}
 8000b4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0c      	blt.n	8000b8c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <__NVIC_ClearPendingIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	3360      	adds	r3, #96	; 0x60
 8000b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <MEAS_GPIO_analog_init>:
 * - ADC3_IN4 = GPIO PF6 (Pad left)
 * - ADC123_IN13 = GPIO PC3 (Pad right)
 * - ADC3_IN6 = GPIO PF8 (Hall sensor Left)
 * - ADC123_IN11 = GPIO PC1 (Hall sensor Right)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MEAS_GPIO_analog_init+0x7c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <MEAS_GPIO_analog_init+0x7c>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MEAS_GPIO_analog_init+0x7c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);  // Analog PF6 = ADC3_IN4
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MEAS_GPIO_analog_init+0x80>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <MEAS_GPIO_analog_init+0x80>)
 8000c18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000c1c:	6013      	str	r3, [r2, #0]
    GPIOF->MODER |= (3UL << GPIO_MODER_MODER8_Pos);  // Analog PF8 = ADC3_IN6
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MEAS_GPIO_analog_init+0x80>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <MEAS_GPIO_analog_init+0x80>)
 8000c24:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c28:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MEAS_GPIO_analog_init+0x7c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <MEAS_GPIO_analog_init+0x7c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MEAS_GPIO_analog_init+0x7c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);  // Analog PC3 = ADC3_IN13
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MEAS_GPIO_analog_init+0x84>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <MEAS_GPIO_analog_init+0x84>)
 8000c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c50:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER1_Pos);  // Analog PC1 = ADC3_IN11
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MEAS_GPIO_analog_init+0x84>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <MEAS_GPIO_analog_init+0x84>)
 8000c58:	f043 030c 	orr.w	r3, r3, #12
 8000c5c:	6013      	str	r3, [r2, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40021400 	.word	0x40021400
 8000c74:	40020800 	.word	0x40020800

08000c78 <MEAS_ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void MEAS_ADC_reset(void) {
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;   // Reset ADCs
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MEAS_ADC_reset+0x38>)
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <MEAS_ADC_reset+0x38>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	6253      	str	r3, [r2, #36]	; 0x24
    RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;  // Release reset of ADCs
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MEAS_ADC_reset+0x38>)
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <MEAS_ADC_reset+0x38>)
 8000c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c92:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->CR1 &= ~TIM_CR1_CEN;              // Disable timer
 8000c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <MEAS_Buffer_reset>:
/** ***************************************************************************
 * @brief Resets the buffer and the flag (data ready for new measurement)
 * @param[in] channels	input channels
 * @param[in] buffer	buffer pointer
 *****************************************************************************/
static void MEAS_Buffer_reset(uint8_t channels, uint32_t* buffer) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
    /* Clear buffer and flag */
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e008      	b.n	8000cd8 <MEAS_Buffer_reset+0x24>
        buffer[i] = 0;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	4413      	add	r3, r2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < ADC_NUMS * channels; i++) {
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	019b      	lsls	r3, r3, #6
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d3f0      	bcc.n	8000cc6 <MEAS_Buffer_reset+0x12>
    }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <MEAS_timer_init>:
/** ***************************************************************************
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();  // Enable Clock for TIM2
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MEAS_timer_init+0x50>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <MEAS_timer_init+0x50>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MEAS_timer_init+0x50>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
    TIM2->PSC = TIM_PRESCALE;     // Prescaler for clock freq. = 1MHz
 8000d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1a:	f243 3244 	movw	r2, #13124	; 0x3344
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = TIM_TOP;          // Auto reload = counter top value
 8000d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d24:	2209      	movs	r2, #9
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR2 |= TIM_CR2_MMS_1;   // TRGO on update
 8000d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6053      	str	r3, [r2, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40023800 	.word	0x40023800

08000d48 <MEAS_ADC3_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC3_IN4 = GPIO PF6 (Pad Left), ADC3_IN13 = GPIO PC3
 *(Pad Right), ADC_IN6 = GPIO PF8 (HS-Left), ADC3_IN11 = GPIO PC1 (HS-Right)
 *****************************************************************************/
void MEAS_ADC3_scan_init(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
    __HAL_RCC_ADC3_CLK_ENABLE();               // Enable Clock for ADC3
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <MEAS_ADC3_scan_init+0x138>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a4a      	ldr	r2, [pc, #296]	; (8000e80 <MEAS_ADC3_scan_init+0x138>)
 8000d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <MEAS_ADC3_scan_init+0x138>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
    ADC3->SQR1 |= (3UL << ADC_SQR1_L_Pos);     // Convert 4 inputs (4-1)
 8000d6a:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6e:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000d74:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);   // Input 4 = first conversion
 8000d76:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	4a42      	ldr	r2, [pc, #264]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (13UL << ADC_SQR3_SQ2_Pos);  // Input 13 = second conversion
 8000d82:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	4a3f      	ldr	r2, [pc, #252]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d88:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 8000d8c:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (6UL << ADC_SQR3_SQ3_Pos);   // Input 6 = third conversion
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	4a3c      	ldr	r2, [pc, #240]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d94:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000d98:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= (11UL << ADC_SQR3_SQ4_Pos);  // Input 11 = fourth conversion
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9e:	4a39      	ldr	r2, [pc, #228]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000da0:	f443 23b0 	orr.w	r3, r3, #360448	; 0x58000
 8000da4:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->CR1 |= ADC_CR1_SCAN;                 // Enable scan mode
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	6053      	str	r3, [r2, #4]
    ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);   // En. ext. trigger on rising e.
 8000db2:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a33      	ldr	r2, [pc, #204]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);  // Timer 2 TRGO event
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000dc4:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000dc8:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= ADC_CR2_DMA;                  // Enable DMA mode
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <MEAS_ADC3_scan_init+0x13c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6093      	str	r3, [r2, #8]
    __HAL_RCC_DMA2_CLK_ENABLE();               // Enable Clock for DMA2
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MEAS_ADC3_scan_init+0x138>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <MEAS_ADC3_scan_init+0x138>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MEAS_ADC3_scan_init+0x138>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
    DMA2_Stream1->CR &= ~DMA_SxCR_EN;          // Disable the DMA stream 1
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 8000dfe:	bf00      	nop
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f9      	bne.n	8000e00 <MEAS_ADC3_scan_init+0xb8>
        ;
    }                                 // Wait for DMA to finish
    DMA2->LIFCR |= DMA_LIFCR_CTCIF1;  // Clear transfer complete interrupt fl.
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MEAS_ADC3_scan_init+0x144>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <MEAS_ADC3_scan_init+0x144>)
 8000e12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e16:	6093      	str	r3, [r2, #8]
    DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);  // Select channel 2
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e22:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PL_1;                // Priority high
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2e:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;  // Memory data size = 32 bit
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3a:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;  // Peripheral data size = 32 bit
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e46:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_MINC;     // Increment memory address pointer
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->CR |= DMA_SxCR_TCIE;     // Transfer complete interrupt enable
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6013      	str	r3, [r2, #0]
    DMA2_Stream1->NDTR =
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e66:	605a      	str	r2, [r3, #4]
        INPUT_COUNT * ADC_NUMS;  // Number of data items to transfer
    DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;     // Peripheral register address
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <MEAS_ADC3_scan_init+0x148>)
 8000e6c:	609a      	str	r2, [r3, #8]
    DMA2_Stream1->M0AR = (uint32_t)ADC_samples;  // Buffer memory loc. address
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MEAS_ADC3_scan_init+0x140>)
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <MEAS_ADC3_scan_init+0x14c>)
 8000e72:	60da      	str	r2, [r3, #12]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40012200 	.word	0x40012200
 8000e88:	40026428 	.word	0x40026428
 8000e8c:	40026400 	.word	0x40026400
 8000e90:	4001224c 	.word	0x4001224c
 8000e94:	200003e8 	.word	0x200003e8

08000e98 <MEAS_ADC3_scan_start>:

/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void MEAS_ADC3_scan_start(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    DMA2_Stream1->CR |= DMA_SxCR_EN;          // Enable DMA
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MEAS_ADC3_scan_start+0x3c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <MEAS_ADC3_scan_start+0x3c>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 8000ea8:	2039      	movs	r0, #57	; 0x39
 8000eaa:	f7ff fe59 	bl	8000b60 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream1_IRQn);  // Enable DMA interrupt in the NVIC
 8000eae:	2039      	movs	r0, #57	; 0x39
 8000eb0:	f7ff fe14 	bl	8000adc <__NVIC_EnableIRQ>
    ADC3->CR2 |= ADC_CR2_ADON;          // Enable ADC3
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MEAS_ADC3_scan_start+0x40>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <MEAS_ADC3_scan_start+0x40>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6093      	str	r3, [r2, #8]
    TIM2->CR1 |= TIM_CR1_CEN;           // Enable timer
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40026428 	.word	0x40026428
 8000ed8:	40012200 	.word	0x40012200

08000edc <DMA2_Stream1_IRQHandler>:
 * @brief Interrupt handler for DMA2 Stream1
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF1) {  // Stream1 transfer compl. interrupt f.
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <DMA2_Stream1_IRQHandler+0x78>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d031      	beq.n	8000f50 <DMA2_Stream1_IRQHandler+0x74>
        NVIC_DisableIRQ(
 8000eec:	2039      	movs	r0, #57	; 0x39
 8000eee:	f7ff fe13 	bl	8000b18 <__NVIC_DisableIRQ>
            DMA2_Stream1_IRQn);  // Disable DMA interrupt in the NVIC
        NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);  // Clear pending DMA interrupt
 8000ef2:	2039      	movs	r0, #57	; 0x39
 8000ef4:	f7ff fe34 	bl	8000b60 <__NVIC_ClearPendingIRQ>
        DMA2_Stream1->CR &= ~DMA_SxCR_EN;         // Disable the DMA
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <DMA2_Stream1_IRQHandler+0x7c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <DMA2_Stream1_IRQHandler+0x7c>)
 8000efe:	f023 0301 	bic.w	r3, r3, #1
 8000f02:	6013      	str	r3, [r2, #0]
        while (DMA2_Stream1->CR & DMA_SxCR_EN) {
 8000f04:	bf00      	nop
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <DMA2_Stream1_IRQHandler+0x7c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f9      	bne.n	8000f06 <DMA2_Stream1_IRQHandler+0x2a>
            ;
        }  // Wait for DMA to finish
        DMA2->LIFCR |=
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <DMA2_Stream1_IRQHandler+0x78>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <DMA2_Stream1_IRQHandler+0x78>)
 8000f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f1c:	6093      	str	r3, [r2, #8]
            DMA_LIFCR_CTCIF1;        // Clear transfer complete interrupt fl.
        TIM2->CR1 &= ~TIM_CR1_CEN;   // Disable timer
 8000f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6013      	str	r3, [r2, #0]
        ADC3->CR2 &= ~ADC_CR2_ADON;  // Disable ADC3
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <DMA2_Stream1_IRQHandler+0x80>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <DMA2_Stream1_IRQHandler+0x80>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6093      	str	r3, [r2, #8]
        ADC3->CR2 &= ~ADC_CR2_DMA;   // Disable DMA mode
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <DMA2_Stream1_IRQHandler+0x80>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <DMA2_Stream1_IRQHandler+0x80>)
 8000f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f44:	6093      	str	r3, [r2, #8]
        // copy data from DMA buffer to ADC_samples
        MEAS_ADC_reset();
 8000f46:	f7ff fe97 	bl	8000c78 <MEAS_ADC_reset>
        MEAS_data_ready = true;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <DMA2_Stream1_IRQHandler+0x84>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
    }
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40026400 	.word	0x40026400
 8000f58:	40026428 	.word	0x40026428
 8000f5c:	40012200 	.word	0x40012200
 8000f60:	200003e4 	.word	0x200003e4

08000f64 <MEAS_start_measure>:
 * @return ADC samples pointer
 *
 * @note The result is stored alternated e.g. every 4th is together.
 *****************************************************************************/
// Start the measurement procedure
uint32_t* MEAS_start_measure(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    MEAS_Buffer_reset(INPUT_COUNT, ADC_samples);
 8000f68:	490a      	ldr	r1, [pc, #40]	; (8000f94 <MEAS_start_measure+0x30>)
 8000f6a:	2004      	movs	r0, #4
 8000f6c:	f7ff fea2 	bl	8000cb4 <MEAS_Buffer_reset>
    MEAS_ADC3_scan_init();
 8000f70:	f7ff feea 	bl	8000d48 <MEAS_ADC3_scan_init>
    MEAS_ADC3_scan_start();
 8000f74:	f7ff ff90 	bl	8000e98 <MEAS_ADC3_scan_start>
    while (!MEAS_data_ready)
 8000f78:	bf00      	nop
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MEAS_start_measure+0x34>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	f083 0301 	eor.w	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f8      	bne.n	8000f7a <MEAS_start_measure+0x16>
        ;  // Wait for data
    MEAS_data_ready = false;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <MEAS_start_measure+0x34>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]

    return ADC_samples;
 8000f8e:	4b01      	ldr	r3, [pc, #4]	; (8000f94 <MEAS_start_measure+0x30>)
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200003e8 	.word	0x200003e8
 8000f98:	200003e4 	.word	0x200003e4

08000f9c <OUTPUT_MEAS_timer_init>:
 * This function enables the clock for timer 3, sets the prescaler to 16000,
 * sets the auto reload register to 100, enables the update interrupt,
 * enables timer 3, and enables the timer 3 interrupt.
 * This timer is used to trigger the data output to the display every 800ms.
 */
void OUTPUT_MEAS_timer_init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // enable clock for timer 3
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <OUTPUT_MEAS_timer_init+0x4c>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <OUTPUT_MEAS_timer_init+0x4c>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
    TIM3->PSC = 16000 - 1;               // set prescaler to 16000
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <OUTPUT_MEAS_timer_init+0x50>)
 8000fae:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 800 - 1;                 // set auto reload register to 800
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <OUTPUT_MEAS_timer_init+0x50>)
 8000fb6:	f240 321f 	movw	r2, #799	; 0x31f
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->DIER |= TIM_DIER_UIE;          // enable update interrupt
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <OUTPUT_MEAS_timer_init+0x50>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <OUTPUT_MEAS_timer_init+0x50>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN;            // enable timer 3
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <OUTPUT_MEAS_timer_init+0x50>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <OUTPUT_MEAS_timer_init+0x50>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(TIM3_IRQn, 3);
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	201d      	movs	r0, #29
 8000fd8:	f7ff fde0 	bl	8000b9c <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);  // enable timer 3 interrupt
 8000fdc:	201d      	movs	r0, #29
 8000fde:	f7ff fd7d 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40000400 	.word	0x40000400

08000ff0 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/

void MEAS_show_data(void) {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b09b      	sub	sp, #108	; 0x6c
 8000ff4:	af02      	add	r7, sp, #8
    const uint8_t ADC_RES = 12;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    // Define Samples variable and start measurement
    uint32_t* Samples = MEAS_start_measure();
 8000ffc:	f7ff ffb2 	bl	8000f64 <MEAS_start_measure>
 8001000:	6338      	str	r0, [r7, #48]	; 0x30
    /* Calculate the factor to scale the values to the display */
    const uint32_t Y_OFFSET = 100;
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t X_SIZE = 240;
 8001006:	23f0      	movs	r3, #240	; 0xf0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t f = (1 << ADC_RES) / Y_OFFSET + 1;  // Scaling factor
 800100a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800100e:	2201      	movs	r2, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	461a      	mov	r2, r3
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	fbb2 f3f3 	udiv	r3, r2, r3
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t data;
    uint32_t data_last;
    /* Clear the display */

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001020:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001024:	f001 fee4 	bl	8002df0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	b29a      	uxth	r2, r3
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	b29b      	uxth	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	b29b      	uxth	r3, r3
 8001034:	2100      	movs	r1, #0
 8001036:	2000      	movs	r0, #0
 8001038:	f002 f91a 	bl	8003270 <BSP_LCD_FillRect>
    /* Write first 4 samples as numbers */

    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800103c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001040:	f001 feee 	bl	8002e20 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f001 fed2 	bl	8002df0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font12);
 800104c:	48a2      	ldr	r0, [pc, #648]	; (80012d8 <MEAS_show_data+0x2e8>)
 800104e:	f001 ff01 	bl	8002e54 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"ADC Resolution: 12 bit",
 8001052:	2301      	movs	r3, #1
 8001054:	4aa1      	ldr	r2, [pc, #644]	; (80012dc <MEAS_show_data+0x2ec>)
 8001056:	2150      	movs	r1, #80	; 0x50
 8001058:	2000      	movs	r0, #0
 800105a:	f001 ff81 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Peak Values and frequency", CENTER_MODE);
 800105e:	2301      	movs	r3, #1
 8001060:	4a9f      	ldr	r2, [pc, #636]	; (80012e0 <MEAS_show_data+0x2f0>)
 8001062:	2164      	movs	r1, #100	; 0x64
 8001064:	2000      	movs	r0, #0
 8001066:	f001 ff7b 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 120, (uint8_t*)"of Channels 1 to 4:", CENTER_MODE);
 800106a:	2301      	movs	r3, #1
 800106c:	4a9d      	ldr	r2, [pc, #628]	; (80012e4 <MEAS_show_data+0x2f4>)
 800106e:	2178      	movs	r1, #120	; 0x78
 8001070:	2000      	movs	r0, #0
 8001072:	f001 ff75 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 260, (uint8_t*)"(without VGND -> peak - 2048)",
 8001076:	2301      	movs	r3, #1
 8001078:	4a9b      	ldr	r2, [pc, #620]	; (80012e8 <MEAS_show_data+0x2f8>)
 800107a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800107e:	2000      	movs	r0, #0
 8001080:	f001 ff6e 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font20);
 8001084:	4899      	ldr	r0, [pc, #612]	; (80012ec <MEAS_show_data+0x2fc>)
 8001086:	f001 fee5 	bl	8002e54 <BSP_LCD_SetFont>
    char text[32];
	// Calculate the frequency of channel 1
	static float frequency = 0;
    frequency = calculate_main_frequency(1, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 800108a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2340      	movs	r3, #64	; 0x40
 8001092:	2204      	movs	r2, #4
 8001094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fb1e 	bl	80006d8 <calculate_main_frequency>
 800109c:	ee07 0a90 	vmov	s15, r0
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	4b92      	ldr	r3, [pc, #584]	; (80012f0 <MEAS_show_data+0x300>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
    //uint32_t frequency = frequency_calculation(0, Samples);
    // Calculate the peak value of channel 1
    uint32_t peak = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
 80010b2:	e010      	b.n	80010d6 <MEAS_show_data+0xe6>
        if (Samples[4 * i] > peak) {
 80010b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ba:	4413      	add	r3, r2
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d205      	bcs.n	80010d0 <MEAS_show_data+0xe0>
            peak = Samples[4 * i];
 80010c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80010d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d2:	3301      	adds	r3, #1
 80010d4:	657b      	str	r3, [r7, #84]	; 0x54
 80010d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d8:	2b3f      	cmp	r3, #63	; 0x3f
 80010da:	d9eb      	bls.n	80010b4 <MEAS_show_data+0xc4>
        }
    }
    peak -= 2048;
 80010dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80010e2:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80010e4:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80010e8:	f001 fe82 	bl	8002df0 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C1:%4d f:%3d HZ", (int)(peak), (int)(frequency));
 80010ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ee:	4a80      	ldr	r2, [pc, #512]	; (80012f0 <MEAS_show_data+0x300>)
 80010f0:	edd2 7a00 	vldr	s15, [r2]
 80010f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f8:	ee17 2a90 	vmov	r2, s15
 80010fc:	4638      	mov	r0, r7
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	4a7c      	ldr	r2, [pc, #496]	; (80012f4 <MEAS_show_data+0x304>)
 8001102:	2128      	movs	r1, #40	; 0x28
 8001104:	f008 f8ea 	bl	80092dc <sniprintf>
    // snprintf(text, 15, "C1 %4d", (int)(Samples[0]));
    BSP_LCD_DisplayStringAt(0, 140, (uint8_t*)text, LEFT_MODE);
 8001108:	463a      	mov	r2, r7
 800110a:	2303      	movs	r3, #3
 800110c:	218c      	movs	r1, #140	; 0x8c
 800110e:	2000      	movs	r0, #0
 8001110:	f001 ff26 	bl	8002f60 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 2
	frequency = calculate_main_frequency(2, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 8001114:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2340      	movs	r3, #64	; 0x40
 800111c:	2204      	movs	r2, #4
 800111e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001120:	2002      	movs	r0, #2
 8001122:	f7ff fad9 	bl	80006d8 <calculate_main_frequency>
 8001126:	ee07 0a90 	vmov	s15, r0
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <MEAS_show_data+0x300>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
    //frequency = frequency_calculation(1, Samples);
    // Calculate the peak value of channel 2
    peak = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	653b      	str	r3, [r7, #80]	; 0x50
 800113c:	e012      	b.n	8001164 <MEAS_show_data+0x174>
        if (Samples[4 * i + 1] > peak) {
 800113e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	3304      	adds	r3, #4
 8001144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001146:	4413      	add	r3, r2
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800114c:	429a      	cmp	r2, r3
 800114e:	d206      	bcs.n	800115e <MEAS_show_data+0x16e>
            peak = Samples[4 * i + 1];
 8001150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	3304      	adds	r3, #4
 8001156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001158:	4413      	add	r3, r2
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800115e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001160:	3301      	adds	r3, #1
 8001162:	653b      	str	r3, [r7, #80]	; 0x50
 8001164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001166:	2b3f      	cmp	r3, #63	; 0x3f
 8001168:	d9e9      	bls.n	800113e <MEAS_show_data+0x14e>
        }
    }
    peak -= 2048;
 800116a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800116c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001170:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001172:	4861      	ldr	r0, [pc, #388]	; (80012f8 <MEAS_show_data+0x308>)
 8001174:	f001 fe3c 	bl	8002df0 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C2:%4d f:%3d HZ", (int)(peak), (int)(frequency));
 8001178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800117a:	4a5d      	ldr	r2, [pc, #372]	; (80012f0 <MEAS_show_data+0x300>)
 800117c:	edd2 7a00 	vldr	s15, [r2]
 8001180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001184:	ee17 2a90 	vmov	r2, s15
 8001188:	4638      	mov	r0, r7
 800118a:	9200      	str	r2, [sp, #0]
 800118c:	4a5b      	ldr	r2, [pc, #364]	; (80012fc <MEAS_show_data+0x30c>)
 800118e:	2128      	movs	r1, #40	; 0x28
 8001190:	f008 f8a4 	bl	80092dc <sniprintf>
    // snprintf(text, 15, "C2 %4d", (int)(Samples[1]));
    BSP_LCD_DisplayStringAt(0, 170, (uint8_t*)text, LEFT_MODE);
 8001194:	463a      	mov	r2, r7
 8001196:	2303      	movs	r3, #3
 8001198:	21aa      	movs	r1, #170	; 0xaa
 800119a:	2000      	movs	r0, #0
 800119c:	f001 fee0 	bl	8002f60 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 3
	frequency = calculate_main_frequency(3, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 80011a0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	2204      	movs	r2, #4
 80011aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011ac:	2003      	movs	r0, #3
 80011ae:	f7ff fa93 	bl	80006d8 <calculate_main_frequency>
 80011b2:	ee07 0a90 	vmov	s15, r0
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <MEAS_show_data+0x300>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]
    //frequency = frequency_calculation(2, Samples);
    // Calculate the peak value of channel 3
    peak = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011c8:	e012      	b.n	80011f0 <MEAS_show_data+0x200>
        if (Samples[4 * i + 2] > peak) {
 80011ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	3308      	adds	r3, #8
 80011d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d2:	4413      	add	r3, r2
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011d8:	429a      	cmp	r2, r3
 80011da:	d206      	bcs.n	80011ea <MEAS_show_data+0x1fa>
            peak = Samples[4 * i + 2];
 80011dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	3308      	adds	r3, #8
 80011e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80011ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ec:	3301      	adds	r3, #1
 80011ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f2:	2b3f      	cmp	r3, #63	; 0x3f
 80011f4:	d9e9      	bls.n	80011ca <MEAS_show_data+0x1da>
        }
    }
    peak -= 2048;
 80011f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011f8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80011fc:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80011fe:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001202:	f001 fdf5 	bl	8002df0 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C3:%4d f:%3d HZ ", (int)(peak), (int)(frequency));
 8001206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001208:	4a39      	ldr	r2, [pc, #228]	; (80012f0 <MEAS_show_data+0x300>)
 800120a:	edd2 7a00 	vldr	s15, [r2]
 800120e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001212:	ee17 2a90 	vmov	r2, s15
 8001216:	4638      	mov	r0, r7
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	4a39      	ldr	r2, [pc, #228]	; (8001300 <MEAS_show_data+0x310>)
 800121c:	2128      	movs	r1, #40	; 0x28
 800121e:	f008 f85d 	bl	80092dc <sniprintf>
    // snprintf(text, 15, "C3 %4d", (int)(Samples[2]));
    BSP_LCD_DisplayStringAt(0, 200, (uint8_t*)text, LEFT_MODE);
 8001222:	463a      	mov	r2, r7
 8001224:	2303      	movs	r3, #3
 8001226:	21c8      	movs	r1, #200	; 0xc8
 8001228:	2000      	movs	r0, #0
 800122a:	f001 fe99 	bl	8002f60 <BSP_LCD_DisplayStringAt>
	// Calculate the frequency of channel 4
	frequency = calculate_main_frequency(4, Samples, INPUT_COUNT, ADC_NUMS, ADC_FS);
 800122e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	2204      	movs	r2, #4
 8001238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800123a:	2004      	movs	r0, #4
 800123c:	f7ff fa4c 	bl	80006d8 <calculate_main_frequency>
 8001240:	ee07 0a90 	vmov	s15, r0
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <MEAS_show_data+0x300>)
 800124a:	edc3 7a00 	vstr	s15, [r3]
    //frequency = frequency_calculation(3, Samples);
    // Calculate the peak value of channel 4
    peak = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
 8001256:	e012      	b.n	800127e <MEAS_show_data+0x28e>
        if (Samples[4 * i + 3] > peak) {
 8001258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	330c      	adds	r3, #12
 800125e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001260:	4413      	add	r3, r2
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001266:	429a      	cmp	r2, r3
 8001268:	d206      	bcs.n	8001278 <MEAS_show_data+0x288>
            peak = Samples[4 * i + 3];
 800126a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	330c      	adds	r3, #12
 8001270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001272:	4413      	add	r3, r2
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	65bb      	str	r3, [r7, #88]	; 0x58
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800127a:	3301      	adds	r3, #1
 800127c:	64bb      	str	r3, [r7, #72]	; 0x48
 800127e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001280:	2b3f      	cmp	r3, #63	; 0x3f
 8001282:	d9e9      	bls.n	8001258 <MEAS_show_data+0x268>
        }
    }
    peak -= 2048;
 8001284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001286:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800128a:	65bb      	str	r3, [r7, #88]	; 0x58
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800128c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001290:	f001 fdae 	bl	8002df0 <BSP_LCD_SetTextColor>
    snprintf(text, 40, "C4:%4d f:%3d HZ", (int)(peak), (int)(frequency));
 8001294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <MEAS_show_data+0x300>)
 8001298:	edd2 7a00 	vldr	s15, [r2]
 800129c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a0:	ee17 2a90 	vmov	r2, s15
 80012a4:	4638      	mov	r0, r7
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <MEAS_show_data+0x314>)
 80012aa:	2128      	movs	r1, #40	; 0x28
 80012ac:	f008 f816 	bl	80092dc <sniprintf>
    // snprintf(text, 15, "C4 %4d", (int)(Samples[3]));
    BSP_LCD_DisplayStringAt(0, 230, (uint8_t*)text, LEFT_MODE);
 80012b0:	463a      	mov	r2, r7
 80012b2:	2303      	movs	r3, #3
 80012b4:	21e6      	movs	r1, #230	; 0xe6
 80012b6:	2000      	movs	r0, #0
 80012b8:	f001 fe52 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    /* Draw the  values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80012bc:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 80012c0:	f001 fd96 	bl	8002df0 <BSP_LCD_SetTextColor>
    data = Samples[0] / f;
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
 80012d4:	e044      	b.n	8001360 <MEAS_show_data+0x370>
 80012d6:	bf00      	nop
 80012d8:	20000364 	.word	0x20000364
 80012dc:	08009cc4 	.word	0x08009cc4
 80012e0:	08009cdc 	.word	0x08009cdc
 80012e4:	08009cf8 	.word	0x08009cf8
 80012e8:	08009d0c 	.word	0x08009d0c
 80012ec:	20000354 	.word	0x20000354
 80012f0:	200007e8 	.word	0x200007e8
 80012f4:	08009d2c 	.word	0x08009d2c
 80012f8:	ffff0000 	.word	0xffff0000
 80012fc:	08009d3c 	.word	0x08009d3c
 8001300:	08009d4c 	.word	0x08009d4c
 8001304:	08009d60 	.word	0x08009d60
        data_last = data;
 8001308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130a:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i]) / f;
 800130c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001312:	4413      	add	r3, r2
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 800131e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	429a      	cmp	r2, r3
 8001324:	d901      	bls.n	800132a <MEAS_show_data+0x33a>
            data = Y_OFFSET;
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 800132a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800132c:	3b01      	subs	r3, #1
 800132e:	b29b      	uxth	r3, r3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	b298      	uxth	r0, r3
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	b29a      	uxth	r2, r3
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	b29b      	uxth	r3, r3
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	b299      	uxth	r1, r3
 8001340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001342:	b29b      	uxth	r3, r3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	b29c      	uxth	r4, r3
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	b29a      	uxth	r2, r3
 800134c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134e:	b29b      	uxth	r3, r3
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	4622      	mov	r2, r4
 8001356:	f001 fec1 	bl	80030dc <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800135a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800135c:	3301      	adds	r3, #1
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
 8001360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001362:	2b3f      	cmp	r3, #63	; 0x3f
 8001364:	d9d0      	bls.n	8001308 <MEAS_show_data+0x318>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 2 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001366:	485f      	ldr	r0, [pc, #380]	; (80014e4 <MEAS_show_data+0x4f4>)
 8001368:	f001 fd42 	bl	8002df0 <BSP_LCD_SetTextColor>
    data = Samples[1] / f;
 800136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136e:	3304      	adds	r3, #4
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
 800137e:	e02c      	b.n	80013da <MEAS_show_data+0x3ea>
        data_last = data;
 8001380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001382:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i + 1]) / f;
 8001384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	3304      	adds	r3, #4
 800138a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800138c:	4413      	add	r3, r2
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 8001398:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	429a      	cmp	r2, r3
 800139e:	d901      	bls.n	80013a4 <MEAS_show_data+0x3b4>
            data = Y_OFFSET;
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 80013a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	b298      	uxth	r0, r3
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b299      	uxth	r1, r3
 80013ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013bc:	b29b      	uxth	r3, r3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	b29c      	uxth	r4, r3
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4622      	mov	r2, r4
 80013d0:	f001 fe84 	bl	80030dc <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80013d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d6:	3301      	adds	r3, #1
 80013d8:	643b      	str	r3, [r7, #64]	; 0x40
 80013da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013dc:	2b3f      	cmp	r3, #63	; 0x3f
 80013de:	d9cf      	bls.n	8001380 <MEAS_show_data+0x390>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 3 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80013e0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80013e4:	f001 fd04 	bl	8002df0 <BSP_LCD_SetTextColor>
    data = Samples[2] / f;
 80013e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ea:	3308      	adds	r3, #8
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013fa:	e02c      	b.n	8001456 <MEAS_show_data+0x466>
        data_last = data;
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i + 2]) / f;
 8001400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	3308      	adds	r3, #8
 8001406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001408:	4413      	add	r3, r2
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 8001414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	429a      	cmp	r2, r3
 800141a:	d901      	bls.n	8001420 <MEAS_show_data+0x430>
            data = Y_OFFSET;
 800141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141e:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 8001420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001422:	3b01      	subs	r3, #1
 8001424:	b29b      	uxth	r3, r3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	b298      	uxth	r0, r3
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	b29a      	uxth	r2, r3
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	b29b      	uxth	r3, r3
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b299      	uxth	r1, r3
 8001436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001438:	b29b      	uxth	r3, r3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	b29c      	uxth	r4, r3
 800143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001440:	b29a      	uxth	r2, r3
 8001442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001444:	b29b      	uxth	r3, r3
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	4622      	mov	r2, r4
 800144c:	f001 fe46 	bl	80030dc <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001452:	3301      	adds	r3, #1
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001458:	2b3f      	cmp	r3, #63	; 0x3f
 800145a:	d9cf      	bls.n	80013fc <MEAS_show_data+0x40c>
                         Y_OFFSET - data);
    }
    /* Draw the  values of input channel 4 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800145c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001460:	f001 fcc6 	bl	8002df0 <BSP_LCD_SetTextColor>
    data = Samples[3] / f;
 8001464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001466:	330c      	adds	r3, #12
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001470:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
 8001476:	e02c      	b.n	80014d2 <MEAS_show_data+0x4e2>
        data_last = data;
 8001478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147a:	623b      	str	r3, [r7, #32]
        data = (Samples[4 * i + 3]) / f;
 800147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	330c      	adds	r3, #12
 8001482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001484:	4413      	add	r3, r2
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (data > Y_OFFSET) {
 8001490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	429a      	cmp	r2, r3
 8001496:	d901      	bls.n	800149c <MEAS_show_data+0x4ac>
            data = Y_OFFSET;
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }  // Limit value, prevent crash
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i,
 800149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	b298      	uxth	r0, r3
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b299      	uxth	r1, r3
 80014b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	b29c      	uxth	r4, r3
 80014ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014bc:	b29a      	uxth	r2, r3
 80014be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4622      	mov	r2, r4
 80014c8:	f001 fe08 	bl	80030dc <BSP_LCD_DrawLine>
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80014cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ce:	3301      	adds	r3, #1
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80014d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d4:	2b3f      	cmp	r3, #63	; 0x3f
 80014d6:	d9cf      	bls.n	8001478 <MEAS_show_data+0x488>
                         Y_OFFSET - data);
    }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3764      	adds	r7, #100	; 0x64
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd90      	pop	{r4, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	ffff0000 	.word	0xffff0000

080014e8 <TIM3_IRQHandler>:
 *
 * This function is called when the update interrupt flag of TIM3 is set.
 * It clears the update interrupt flag and calls the MEAS_show_data() function
 * to output data to the display.
 */
void TIM3_IRQHandler(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {  // check if update interrupt flag is set
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <TIM3_IRQHandler+0x24>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <TIM3_IRQHandler+0x20>
        TIM3->SR &= ~TIM_SR_UIF;  // clear update interrupt flag
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <TIM3_IRQHandler+0x24>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <TIM3_IRQHandler+0x24>)
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6113      	str	r3, [r2, #16]
        MEAS_show_data();         // output data to display
 8001504:	f7ff fd74 	bl	8000ff0 <MEAS_show_data>
    }
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40000400 	.word	0x40000400

08001510 <DISP_info_screen>:
 * @brief Displays the info screen
 * @param[in] type	Actual menu type
 *
 * Displays the title and information on each screen.
 *****************************************************************************/
void DISP_info_screen(MENU_type_t type) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_Clear(LCD_COLOR_WHITE);  // Clear display
 800151a:	f04f 30ff 	mov.w	r0, #4294967295
 800151e:	f001 fcb3 	bl	8002e88 <BSP_LCD_Clear>
    MENU_draw(type);                 // Draw the home menu
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f85f 	bl	80015e8 <MENU_draw>

    switch (type) {
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b07      	cmp	r3, #7
 800152e:	d847      	bhi.n	80015c0 <DISP_info_screen+0xb0>
 8001530:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <DISP_info_screen+0x28>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001559 	.word	0x08001559
 800153c:	0800156d 	.word	0x0800156d
 8001540:	0800157b 	.word	0x0800157b
 8001544:	08001589 	.word	0x08001589
 8001548:	08001597 	.word	0x08001597
 800154c:	080015a5 	.word	0x080015a5
 8001550:	080015b3 	.word	0x080015b3
 8001554:	08001567 	.word	0x08001567
        case MENU_HOME:
            /* Show info home */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: HOME", LEFT_MODE);
 8001558:	2303      	movs	r3, #3
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <DISP_info_screen+0xbc>)
 800155c:	213c      	movs	r1, #60	; 0x3c
 800155e:	2005      	movs	r0, #5
 8001560:	f001 fcfe 	bl	8002f60 <BSP_LCD_DisplayStringAt>
            break;
 8001564:	e02d      	b.n	80015c2 <DISP_info_screen+0xb2>

        case MENU_INFO:
            /* Show info info */
            MENU_Info();
 8001566:	f000 f903 	bl	8001770 <MENU_Info>
            break;
 800156a:	e02a      	b.n	80015c2 <DISP_info_screen+0xb2>

        case MENU_M:
            /* Show measurement menu */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Measurement",
 800156c:	2303      	movs	r3, #3
 800156e:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <DISP_info_screen+0xc0>)
 8001570:	213c      	movs	r1, #60	; 0x3c
 8001572:	2005      	movs	r0, #5
 8001574:	f001 fcf4 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);

            
            // MENU_Measurements();
            break;
 8001578:	e023      	b.n	80015c2 <DISP_info_screen+0xb2>

        case MENU_M_SI:
            /* Show info single meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. Single",
 800157a:	2303      	movs	r3, #3
 800157c:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <DISP_info_screen+0xc4>)
 800157e:	213c      	movs	r1, #60	; 0x3c
 8001580:	2005      	movs	r0, #5
 8001582:	f001 fced 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Single Meas.");
            break;
 8001586:	e01c      	b.n	80015c2 <DISP_info_screen+0xb2>
        case MENU_M_AC:
            /* Show info accurate meas. */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: Meas. acc",
 8001588:	2303      	movs	r3, #3
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <DISP_info_screen+0xc8>)
 800158c:	213c      	movs	r1, #60	; 0x3c
 800158e:	2005      	movs	r0, #5
 8001590:	f001 fce6 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_measurement((uint8_t *)"Accurate Meas.");
            break;
 8001594:	e015      	b.n	80015c2 <DISP_info_screen+0xb2>
        case MENU_CALI:
            /* Show info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: calibration",
 8001596:	2303      	movs	r3, #3
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <DISP_info_screen+0xcc>)
 800159a:	213c      	movs	r1, #60	; 0x3c
 800159c:	2005      	movs	r0, #5
 800159e:	f001 fcdf 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // MENU_Calibrations();
            // DISP_info_calibration();
            break;
 80015a2:	e00e      	b.n	80015c2 <DISP_info_screen+0xb2>
        case MENU_C_CO:
            /* Show coil info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali coil",
 80015a4:	2303      	movs	r3, #3
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <DISP_info_screen+0xd0>)
 80015a8:	213c      	movs	r1, #60	; 0x3c
 80015aa:	2005      	movs	r0, #5
 80015ac:	f001 fcd8 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_coil();
            break;
 80015b0:	e007      	b.n	80015c2 <DISP_info_screen+0xb2>
        case MENU_C_PA:
            /* Show pad info calibration */
            BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"Menu: cali pad",
 80015b2:	2303      	movs	r3, #3
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <DISP_info_screen+0xd4>)
 80015b6:	213c      	movs	r1, #60	; 0x3c
 80015b8:	2005      	movs	r0, #5
 80015ba:	f001 fcd1 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                                    LEFT_MODE);
            // DISP_info_cali_pad();
            break;
 80015be:	e000      	b.n	80015c2 <DISP_info_screen+0xb2>
        default:
            /* Should never occur */
            break;
 80015c0:	bf00      	nop
    }
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08009d70 	.word	0x08009d70
 80015d0:	08009d7c 	.word	0x08009d7c
 80015d4:	08009d90 	.word	0x08009d90
 80015d8:	08009da4 	.word	0x08009da4
 80015dc:	08009db4 	.word	0x08009db4
 80015e0:	08009dc8 	.word	0x08009dc8
 80015e4:	08009dd8 	.word	0x08009dd8

080015e8 <MENU_draw>:
 *
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(MENU_type_t type) {
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_SetFont(MENU_FONT);
 80015f2:	485c      	ldr	r0, [pc, #368]	; (8001764 <MENU_draw+0x17c>)
 80015f4:	f001 fc2e 	bl	8002e54 <BSP_LCD_SetFont>
    uint32_t x, y, m, w, h, offset;
    y = MENU_Y;
 80015f8:	f001 fb7a 	bl	8002cf0 <BSP_LCD_GetYSize>
 80015fc:	4603      	mov	r3, r0
 80015fe:	3b28      	subs	r3, #40	; 0x28
 8001600:	61fb      	str	r3, [r7, #28]
    m = MENU_MARGIN;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    w = BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM;
 8001606:	f001 fb67 	bl	8002cd8 <BSP_LCD_GetXSize>
 800160a:	4603      	mov	r3, r0
 800160c:	4a56      	ldr	r2, [pc, #344]	; (8001768 <MENU_draw+0x180>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	617b      	str	r3, [r7, #20]
    h = MENU_HEIGHT;
 8001616:	2328      	movs	r3, #40	; 0x28
 8001618:	613b      	str	r3, [r7, #16]
    offset = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    if (type < MENU_NUM_OF_DIFF_MENU) {
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d804      	bhi.n	800162e <MENU_draw+0x46>
        offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the menu
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	e08e      	b.n	8001752 <MENU_draw+0x16a>
        x = i * w;
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	fb02 f303 	mul.w	r3, r2, r3
 800163c:	60fb      	str	r3, [r7, #12]
        BSP_LCD_SetTextColor(MENU_entry[i + offset].back_color);
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	441a      	add	r2, r3
 8001644:	4949      	ldr	r1, [pc, #292]	; (800176c <MENU_draw+0x184>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3324      	adds	r3, #36	; 0x24
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fbcb 	bl	8002df0 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(x + m, y + m, w - 2 * m, h - 2 * m);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	b29a      	uxth	r2, r3
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	b298      	uxth	r0, r3
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	b29a      	uxth	r2, r3
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4413      	add	r3, r2
 8001670:	b299      	uxth	r1, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	b29a      	uxth	r2, r3
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	b29b      	uxth	r3, r3
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	b29b      	uxth	r3, r3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29c      	uxth	r4, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	b29a      	uxth	r2, r3
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	b29b      	uxth	r3, r3
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	b29b      	uxth	r3, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	4622      	mov	r2, r4
 8001694:	f001 fdec 	bl	8003270 <BSP_LCD_FillRect>
        BSP_LCD_SetBackColor(MENU_entry[i + offset].back_color);
 8001698:	6a3a      	ldr	r2, [r7, #32]
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	441a      	add	r2, r3
 800169e:	4933      	ldr	r1, [pc, #204]	; (800176c <MENU_draw+0x184>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3324      	adds	r3, #36	; 0x24
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fbb6 	bl	8002e20 <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(MENU_entry[i + offset].text_color);
 80016b4:	6a3a      	ldr	r2, [r7, #32]
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	441a      	add	r2, r3
 80016ba:	492c      	ldr	r1, [pc, #176]	; (800176c <MENU_draw+0x184>)
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	3320      	adds	r3, #32
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 fb90 	bl	8002df0 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	0052      	lsls	r2, r2, #1
 80016d8:	4413      	add	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	b298      	uxth	r0, r3
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line1,
 80016f8:	6a3a      	ldr	r2, [r7, #32]
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	441a      	add	r2, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <MENU_draw+0x184>)
 8001708:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + 3 * m,
 800170a:	2303      	movs	r3, #3
 800170c:	f001 fc28 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                                LEFT_MODE);
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	0052      	lsls	r2, r2, #1
 8001718:	4413      	add	r3, r2
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	b298      	uxth	r0, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	b299      	uxth	r1, r3
                                (uint8_t*)MENU_entry[i + offset].line2,
 8001732:	6a3a      	ldr	r2, [r7, #32]
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	441a      	add	r2, r3
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	3310      	adds	r3, #16
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <MENU_draw+0x184>)
 8001744:	441a      	add	r2, r3
        BSP_LCD_DisplayStringAt(x + 3 * m, y + h / 2,
 8001746:	2303      	movs	r3, #3
 8001748:	f001 fc0a 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    for (uint32_t i = 0; i < MENU_NUM_OF_MENU_ELEM; i++) {
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	3301      	adds	r3, #1
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2b02      	cmp	r3, #2
 8001756:	f67f af6d 	bls.w	8001634 <MENU_draw+0x4c>
                                LEFT_MODE);
    }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	372c      	adds	r7, #44	; 0x2c
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	20000364 	.word	0x20000364
 8001768:	aaaaaaab 	.word	0xaaaaaaab
 800176c:	20000004 	.word	0x20000004

08001770 <MENU_Info>:

/** ***************************************************************************
 * @brief Show some information about the Cable-Monitor.
 *
 *****************************************************************************/
void MENU_Info(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f001 fb52 	bl	8002e20 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800177c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001780:	f001 fb36 	bl	8002df0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001784:	4829      	ldr	r0, [pc, #164]	; (800182c <MENU_Info+0xbc>)
 8001786:	f001 fb65 	bl	8002e54 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Cable-Monitor", CENTER_MODE);
 800178a:	2301      	movs	r3, #1
 800178c:	4a28      	ldr	r2, [pc, #160]	; (8001830 <MENU_Info+0xc0>)
 800178e:	210a      	movs	r1, #10
 8001790:	2000      	movs	r0, #0
 8001792:	f001 fbe5 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font12);
 8001796:	4827      	ldr	r0, [pc, #156]	; (8001834 <MENU_Info+0xc4>)
 8001798:	f001 fb5c 	bl	8002e54 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"by Alejandro & Timo",
 800179c:	2301      	movs	r3, #1
 800179e:	4a26      	ldr	r2, [pc, #152]	; (8001838 <MENU_Info+0xc8>)
 80017a0:	211e      	movs	r1, #30
 80017a2:	2000      	movs	r0, #0
 80017a4:	f001 fbdc 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                            CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
 80017a8:	4824      	ldr	r0, [pc, #144]	; (800183c <MENU_Info+0xcc>)
 80017aa:	f001 fb53 	bl	8002e54 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(5, 60, (uint8_t*)"1. Touch a menu item", LEFT_MODE);
 80017ae:	2303      	movs	r3, #3
 80017b0:	4a23      	ldr	r2, [pc, #140]	; (8001840 <MENU_Info+0xd0>)
 80017b2:	213c      	movs	r1, #60	; 0x3c
 80017b4:	2005      	movs	r0, #5
 80017b6:	f001 fbd3 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 80, (uint8_t*)"to start a cable", LEFT_MODE);
 80017ba:	2303      	movs	r3, #3
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <MENU_Info+0xd4>)
 80017be:	2150      	movs	r1, #80	; 0x50
 80017c0:	2005      	movs	r0, #5
 80017c2:	f001 fbcd 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 100, (uint8_t*)"measurement:", LEFT_MODE);
 80017c6:	2303      	movs	r3, #3
 80017c8:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <MENU_Info+0xd8>)
 80017ca:	2164      	movs	r1, #100	; 0x64
 80017cc:	2005      	movs	r0, #5
 80017ce:	f001 fbc7 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 120, (uint8_t*)"Single or Accurate.", LEFT_MODE);
 80017d2:	2303      	movs	r3, #3
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <MENU_Info+0xdc>)
 80017d6:	2178      	movs	r1, #120	; 0x78
 80017d8:	2005      	movs	r0, #5
 80017da:	f001 fbc1 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 150, (uint8_t*)"Version: 01.00", LEFT_MODE);
 80017de:	2303      	movs	r3, #3
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <MENU_Info+0xe0>)
 80017e2:	2196      	movs	r1, #150	; 0x96
 80017e4:	2005      	movs	r0, #5
 80017e6:	f001 fbbb 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 170, (uint8_t*)"Data: 17.12.2023", LEFT_MODE);
 80017ea:	2303      	movs	r3, #3
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <MENU_Info+0xe4>)
 80017ee:	21aa      	movs	r1, #170	; 0xaa
 80017f0:	2005      	movs	r0, #5
 80017f2:	f001 fbb5 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 190, (uint8_t*)"Authors: Horvat, Wey",
 80017f6:	2303      	movs	r3, #3
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <MENU_Info+0xe8>)
 80017fa:	21be      	movs	r1, #190	; 0xbe
 80017fc:	2005      	movs	r0, #5
 80017fe:	f001 fbaf 	bl	8002f60 <BSP_LCD_DisplayStringAt>
                            LEFT_MODE);
    BSP_LCD_DisplayStringAt(5, 210, (uint8_t*)"Modul: ET.PM3 ZHAW", LEFT_MODE);
 8001802:	2303      	movs	r3, #3
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <MENU_Info+0xec>)
 8001806:	21d2      	movs	r1, #210	; 0xd2
 8001808:	2005      	movs	r0, #5
 800180a:	f001 fba9 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 230, (uint8_t*)"Lecturers: Matic &", LEFT_MODE);
 800180e:	2303      	movs	r3, #3
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <MENU_Info+0xf0>)
 8001812:	21e6      	movs	r1, #230	; 0xe6
 8001814:	2005      	movs	r0, #5
 8001816:	f001 fba3 	bl	8002f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(5, 250, (uint8_t*)"Ehrensperger", LEFT_MODE);
 800181a:	2303      	movs	r3, #3
 800181c:	4a11      	ldr	r2, [pc, #68]	; (8001864 <MENU_Info+0xf4>)
 800181e:	21fa      	movs	r1, #250	; 0xfa
 8001820:	2005      	movs	r0, #5
 8001822:	f001 fb9d 	bl	8002f60 <BSP_LCD_DisplayStringAt>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000034c 	.word	0x2000034c
 8001830:	08009de8 	.word	0x08009de8
 8001834:	20000364 	.word	0x20000364
 8001838:	08009df8 	.word	0x08009df8
 800183c:	2000035c 	.word	0x2000035c
 8001840:	08009e0c 	.word	0x08009e0c
 8001844:	08009e24 	.word	0x08009e24
 8001848:	08009e38 	.word	0x08009e38
 800184c:	08009e48 	.word	0x08009e48
 8001850:	08009e5c 	.word	0x08009e5c
 8001854:	08009e6c 	.word	0x08009e6c
 8001858:	08009e80 	.word	0x08009e80
 800185c:	08009e98 	.word	0x08009e98
 8001860:	08009eac 	.word	0x08009eac
 8001864:	08009ec0 	.word	0x08009ec0

08001868 <MENU_check_transition>:
 * the variable MENU_transition is set to the touched item.
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
static void MENU_check_transition(MENU_type_t type) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    static MENU_item_t item_old = MENU_NONE;
    static MENU_item_t item_new = MENU_NONE;
    static TS_StateTypeDef TS_State;  // State of the touch controller
    uint32_t offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
    BSP_TS_GetState(&TS_State);  // Get the state
 8001876:	482d      	ldr	r0, [pc, #180]	; (800192c <MENU_check_transition+0xc4>)
 8001878:	f002 f9b0 	bl	8003bdc <BSP_TS_GetState>
#ifdef EVAL_REV_E
    /* Evalboard revision E (blue) has an inverted y-axis in the touch
     * controller */
    TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;  // Invert the y-axis
 800187c:	f001 fa38 	bl	8002cf0 <BSP_LCD_GetYSize>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <MENU_check_transition+0xc4>)
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <MENU_check_transition+0xc4>)
 800188e:	809a      	strh	r2, [r3, #4]
#endif
    if (TS_State.TouchDetected) {  // If a touch was detected
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <MENU_check_transition+0xc4>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d045      	beq.n	8001924 <MENU_check_transition+0xbc>
        /* Do only if last transition not pending anymore */
        if (MENU_NONE == MENU_transition) {
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <MENU_check_transition+0xc8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b15      	cmp	r3, #21
 800189e:	d141      	bne.n	8001924 <MENU_check_transition+0xbc>
            item_old = item_new;  // Store old item
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <MENU_check_transition+0xcc>)
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <MENU_check_transition+0xd0>)
 80018a6:	701a      	strb	r2, [r3, #0]
            /* If touched within the menu bar? */
            if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 80018a8:	f001 fa22 	bl	8002cf0 <BSP_LCD_GetYSize>
 80018ac:	4603      	mov	r3, r0
 80018ae:	3b28      	subs	r3, #40	; 0x28
 80018b0:	4a1e      	ldr	r2, [pc, #120]	; (800192c <MENU_check_transition+0xc4>)
 80018b2:	8892      	ldrh	r2, [r2, #4]
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d235      	bcs.n	8001924 <MENU_check_transition+0xbc>
 80018b8:	f001 fa1a 	bl	8002cf0 <BSP_LCD_GetYSize>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a1b      	ldr	r2, [pc, #108]	; (800192c <MENU_check_transition+0xc4>)
 80018c0:	8892      	ldrh	r2, [r2, #4]
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d92e      	bls.n	8001924 <MENU_check_transition+0xbc>
                if (type < MENU_NUM_OF_DIFF_MENU) {
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d804      	bhi.n	80018d6 <MENU_check_transition+0x6e>
                    offset = type * MENU_NUM_OF_MENU_ELEM;  // calculate the
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
                                                            // menu
                }
                item_new = (TS_State.X  // Calculate new item
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MENU_check_transition+0xc4>)
 80018d8:	885b      	ldrh	r3, [r3, #2]
 80018da:	461c      	mov	r4, r3
                            / (BSP_LCD_GetXSize() / MENU_NUM_OF_MENU_ELEM)) +
 80018dc:	f001 f9fc 	bl	8002cd8 <BSP_LCD_GetXSize>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <MENU_check_transition+0xd4>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	fbb4 f3f3 	udiv	r3, r4, r3
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	b2da      	uxtb	r2, r3
                item_new = (TS_State.X  // Calculate new item
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MENU_check_transition+0xcc>)
 80018fa:	701a      	strb	r2, [r3, #0]
                           offset;
                if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <MENU_check_transition+0xcc>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b11      	cmp	r3, #17
 8001902:	d902      	bls.n	800190a <MENU_check_transition+0xa2>
                    item_new = MENU_NONE;  // Out of bounds
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MENU_check_transition+0xcc>)
 8001906:	2215      	movs	r2, #21
 8001908:	701a      	strb	r2, [r3, #0]
                }
                if (item_new == item_old) {  // 2 times the same menu item
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MENU_check_transition+0xcc>)
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MENU_check_transition+0xd0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d106      	bne.n	8001924 <MENU_check_transition+0xbc>
                    item_new = MENU_NONE;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MENU_check_transition+0xcc>)
 8001918:	2215      	movs	r2, #21
 800191a:	701a      	strb	r2, [r3, #0]
                    MENU_transition = item_old;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MENU_check_transition+0xd0>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <MENU_check_transition+0xc8>)
 8001922:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	200007ec 	.word	0x200007ec
 8001930:	20000000 	.word	0x20000000
 8001934:	200002d4 	.word	0x200002d4
 8001938:	200002d5 	.word	0x200002d5
 800193c:	aaaaaaab 	.word	0xaaaaaaab

08001940 <EXTI15_10_IRQHandler>:
 * @n Call MENU_check_transition() from the while loop in main for polling.
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR15) {   // Check if interrupt on touchscreen
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <EXTI15_10_IRQHandler+0x40>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d015      	beq.n	800197c <EXTI15_10_IRQHandler+0x3c>
        EXTI->PR |= EXTI_PR_PR15;    // Clear pending interrupt on line 15
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <EXTI15_10_IRQHandler+0x40>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <EXTI15_10_IRQHandler+0x40>)
 8001956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195a:	6153      	str	r3, [r2, #20]
        if (BSP_TS_ITGetStatus()) {  // Get interrupt status
 800195c:	f002 f932 	bl	8003bc4 <BSP_TS_ITGetStatus>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <EXTI15_10_IRQHandler+0x30>
            BSP_TS_ITClear();        // Clear touchscreen controller int.
 8001966:	f002 f9eb 	bl	8003d40 <BSP_TS_ITClear>
            MENU_check_transition(MENU_NONE);
 800196a:	2015      	movs	r0, #21
 800196c:	f7ff ff7c 	bl	8001868 <MENU_check_transition>
        }
        EXTI->PR |= EXTI_PR_PR15;  // Clear pending interrupt on line 15
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <EXTI15_10_IRQHandler+0x40>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	4a02      	ldr	r2, [pc, #8]	; (8001980 <EXTI15_10_IRQHandler+0x40>)
 8001976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197a:	6153      	str	r3, [r2, #20]
    }
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40013c00 	.word	0x40013c00

08001984 <__NVIC_EnableIRQ>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_ClearPendingIRQ>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0c      	blt.n	80019ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_ClearPendingIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	3360      	adds	r3, #96	; 0x60
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100

080019fc <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <PB_init+0x38>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <PB_init+0x38>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <PB_init+0x38>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <PB_init+0x3c>)
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <PB_init+0x3c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000

08001a3c <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <PB_enableIRQ+0x58>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <PB_enableIRQ+0x58>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <PB_enableIRQ+0x58>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <PB_enableIRQ+0x5c>)
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <PB_enableIRQ+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <PB_enableIRQ+0x60>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <PB_enableIRQ+0x60>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <PB_enableIRQ+0x60>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <PB_enableIRQ+0x60>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001a7e:	2006      	movs	r0, #6
 8001a80:	f7ff ff9e 	bl	80019c0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001a84:	2006      	movs	r0, #6
 8001a86:	f7ff ff7d 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <EXTI0_IRQHandler+0x2c>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <EXTI0_IRQHandler+0x2c>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	4a05      	ldr	r2, [pc, #20]	; (8001acc <EXTI0_IRQHandler+0x2c>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <EXTI0_IRQHandler+0x30>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40013c00 	.word	0x40013c00
 8001ad0:	200007f4 	.word	0x200007f4

08001ad4 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001b28:	f002 f970 	bl	8003e0c <HAL_IncTick>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <SystemInit+0x60>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <SystemInit+0x60>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <SystemInit+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <SystemInit+0x64>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <SystemInit+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <SystemInit+0x64>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <SystemInit+0x64>)
 8001b5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <SystemInit+0x64>)
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <SystemInit+0x68>)
 8001b6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <SystemInit+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <SystemInit+0x64>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SystemInit+0x60>)
 8001b80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b84:	609a      	str	r2, [r3, #8]
#endif
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00
 8001b94:	40023800 	.word	0x40023800
 8001b98:	24003010 	.word	0x24003010

08001b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ba0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ba2:	e003      	b.n	8001bac <LoopCopyDataInit>

08001ba4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ba6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ba8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001baa:	3104      	adds	r1, #4

08001bac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bb4:	d3f6      	bcc.n	8001ba4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bb8:	e002      	b.n	8001bc0 <LoopFillZerobss>

08001bba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bbc:	f842 3b04 	str.w	r3, [r2], #4

08001bc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bc4:	d3f9      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bc6:	f7ff ffb3 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f007 fbc3 	bl	8009354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bce:	f7fe fe51 	bl	8000874 <main>
  bx  lr    
 8001bd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bd4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001bd8:	08020d9c 	.word	0x08020d9c
  ldr  r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001be0:	200003c8 	.word	0x200003c8
  ldr  r2, =_sbss
 8001be4:	200003c8 	.word	0x200003c8
  ldr  r3, = _ebss
 8001be8:	20000c08 	.word	0x20000c08

08001bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC_IRQHandler>

08001bee <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001bf2:	f000 feb9 	bl	8002968 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001bf6:	20ca      	movs	r0, #202	; 0xca
 8001bf8:	f000 f95d 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001bfc:	20c3      	movs	r0, #195	; 0xc3
 8001bfe:	f000 f967 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001c02:	2008      	movs	r0, #8
 8001c04:	f000 f964 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001c08:	2050      	movs	r0, #80	; 0x50
 8001c0a:	f000 f961 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001c0e:	20cf      	movs	r0, #207	; 0xcf
 8001c10:	f000 f951 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 f95b 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001c1a:	20c1      	movs	r0, #193	; 0xc1
 8001c1c:	f000 f958 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001c20:	2030      	movs	r0, #48	; 0x30
 8001c22:	f000 f955 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001c26:	20ed      	movs	r0, #237	; 0xed
 8001c28:	f000 f945 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001c2c:	2064      	movs	r0, #100	; 0x64
 8001c2e:	f000 f94f 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001c32:	2003      	movs	r0, #3
 8001c34:	f000 f94c 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001c38:	2012      	movs	r0, #18
 8001c3a:	f000 f949 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001c3e:	2081      	movs	r0, #129	; 0x81
 8001c40:	f000 f946 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001c44:	20e8      	movs	r0, #232	; 0xe8
 8001c46:	f000 f936 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001c4a:	2085      	movs	r0, #133	; 0x85
 8001c4c:	f000 f940 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f000 f93d 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001c56:	2078      	movs	r0, #120	; 0x78
 8001c58:	f000 f93a 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001c5c:	20cb      	movs	r0, #203	; 0xcb
 8001c5e:	f000 f92a 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001c62:	2039      	movs	r0, #57	; 0x39
 8001c64:	f000 f934 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001c68:	202c      	movs	r0, #44	; 0x2c
 8001c6a:	f000 f931 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f92e 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001c74:	2034      	movs	r0, #52	; 0x34
 8001c76:	f000 f92b 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	f000 f928 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001c80:	20f7      	movs	r0, #247	; 0xf7
 8001c82:	f000 f918 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001c86:	2020      	movs	r0, #32
 8001c88:	f000 f922 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001c8c:	20ea      	movs	r0, #234	; 0xea
 8001c8e:	f000 f912 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 f91c 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 f919 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001c9e:	20b1      	movs	r0, #177	; 0xb1
 8001ca0:	f000 f909 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 f913 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001caa:	201b      	movs	r0, #27
 8001cac:	f000 f910 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001cb0:	20b6      	movs	r0, #182	; 0xb6
 8001cb2:	f000 f900 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001cb6:	200a      	movs	r0, #10
 8001cb8:	f000 f90a 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001cbc:	20a2      	movs	r0, #162	; 0xa2
 8001cbe:	f000 f907 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001cc2:	20c0      	movs	r0, #192	; 0xc0
 8001cc4:	f000 f8f7 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001cc8:	2010      	movs	r0, #16
 8001cca:	f000 f901 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001cce:	20c1      	movs	r0, #193	; 0xc1
 8001cd0:	f000 f8f1 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001cd4:	2010      	movs	r0, #16
 8001cd6:	f000 f8fb 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001cda:	20c5      	movs	r0, #197	; 0xc5
 8001cdc:	f000 f8eb 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001ce0:	2045      	movs	r0, #69	; 0x45
 8001ce2:	f000 f8f5 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001ce6:	2015      	movs	r0, #21
 8001ce8:	f000 f8f2 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001cec:	20c7      	movs	r0, #199	; 0xc7
 8001cee:	f000 f8e2 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001cf2:	2090      	movs	r0, #144	; 0x90
 8001cf4:	f000 f8ec 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001cf8:	2036      	movs	r0, #54	; 0x36
 8001cfa:	f000 f8dc 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001cfe:	20c8      	movs	r0, #200	; 0xc8
 8001d00:	f000 f8e6 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001d04:	20f2      	movs	r0, #242	; 0xf2
 8001d06:	f000 f8d6 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f8e0 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001d10:	20b0      	movs	r0, #176	; 0xb0
 8001d12:	f000 f8d0 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001d16:	20c2      	movs	r0, #194	; 0xc2
 8001d18:	f000 f8da 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d1c:	20b6      	movs	r0, #182	; 0xb6
 8001d1e:	f000 f8ca 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d22:	200a      	movs	r0, #10
 8001d24:	f000 f8d4 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001d28:	20a7      	movs	r0, #167	; 0xa7
 8001d2a:	f000 f8d1 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001d2e:	2027      	movs	r0, #39	; 0x27
 8001d30:	f000 f8ce 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001d34:	2004      	movs	r0, #4
 8001d36:	f000 f8cb 	bl	8001ed0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001d3a:	202a      	movs	r0, #42	; 0x2a
 8001d3c:	f000 f8bb 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 f8c5 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f8c2 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f8bf 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001d52:	20ef      	movs	r0, #239	; 0xef
 8001d54:	f000 f8bc 	bl	8001ed0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001d58:	202b      	movs	r0, #43	; 0x2b
 8001d5a:	f000 f8ac 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f8b6 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f8b3 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f000 f8b0 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001d70:	203f      	movs	r0, #63	; 0x3f
 8001d72:	f000 f8ad 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001d76:	20f6      	movs	r0, #246	; 0xf6
 8001d78:	f000 f89d 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f000 f8a7 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f8a4 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001d88:	2006      	movs	r0, #6
 8001d8a:	f000 f8a1 	bl	8001ed0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001d8e:	202c      	movs	r0, #44	; 0x2c
 8001d90:	f000 f891 	bl	8001eb6 <ili9341_WriteReg>
  LCD_Delay(200);
 8001d94:	20c8      	movs	r0, #200	; 0xc8
 8001d96:	f000 fed5 	bl	8002b44 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001d9a:	2026      	movs	r0, #38	; 0x26
 8001d9c:	f000 f88b 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f000 f895 	bl	8001ed0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001da6:	20e0      	movs	r0, #224	; 0xe0
 8001da8:	f000 f885 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001dac:	200f      	movs	r0, #15
 8001dae:	f000 f88f 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001db2:	2029      	movs	r0, #41	; 0x29
 8001db4:	f000 f88c 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001db8:	2024      	movs	r0, #36	; 0x24
 8001dba:	f000 f889 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001dbe:	200c      	movs	r0, #12
 8001dc0:	f000 f886 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001dc4:	200e      	movs	r0, #14
 8001dc6:	f000 f883 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001dca:	2009      	movs	r0, #9
 8001dcc:	f000 f880 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001dd0:	204e      	movs	r0, #78	; 0x4e
 8001dd2:	f000 f87d 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001dd6:	2078      	movs	r0, #120	; 0x78
 8001dd8:	f000 f87a 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ddc:	203c      	movs	r0, #60	; 0x3c
 8001dde:	f000 f877 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001de2:	2009      	movs	r0, #9
 8001de4:	f000 f874 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001de8:	2013      	movs	r0, #19
 8001dea:	f000 f871 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001dee:	2005      	movs	r0, #5
 8001df0:	f000 f86e 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001df4:	2017      	movs	r0, #23
 8001df6:	f000 f86b 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001dfa:	2011      	movs	r0, #17
 8001dfc:	f000 f868 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 f865 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001e06:	20e1      	movs	r0, #225	; 0xe1
 8001e08:	f000 f855 	bl	8001eb6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f000 f85f 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001e12:	2016      	movs	r0, #22
 8001e14:	f000 f85c 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001e18:	201b      	movs	r0, #27
 8001e1a:	f000 f859 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e1e:	2004      	movs	r0, #4
 8001e20:	f000 f856 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001e24:	2011      	movs	r0, #17
 8001e26:	f000 f853 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001e2a:	2007      	movs	r0, #7
 8001e2c:	f000 f850 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001e30:	2031      	movs	r0, #49	; 0x31
 8001e32:	f000 f84d 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001e36:	2033      	movs	r0, #51	; 0x33
 8001e38:	f000 f84a 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001e3c:	2042      	movs	r0, #66	; 0x42
 8001e3e:	f000 f847 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001e42:	2005      	movs	r0, #5
 8001e44:	f000 f844 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e48:	200c      	movs	r0, #12
 8001e4a:	f000 f841 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f000 f83e 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001e54:	2028      	movs	r0, #40	; 0x28
 8001e56:	f000 f83b 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001e5a:	202f      	movs	r0, #47	; 0x2f
 8001e5c:	f000 f838 	bl	8001ed0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001e60:	200f      	movs	r0, #15
 8001e62:	f000 f835 	bl	8001ed0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001e66:	2011      	movs	r0, #17
 8001e68:	f000 f825 	bl	8001eb6 <ili9341_WriteReg>
  LCD_Delay(200);
 8001e6c:	20c8      	movs	r0, #200	; 0xc8
 8001e6e:	f000 fe69 	bl	8002b44 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e72:	2029      	movs	r0, #41	; 0x29
 8001e74:	f000 f81f 	bl	8001eb6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001e78:	202c      	movs	r0, #44	; 0x2c
 8001e7a:	f000 f81c 	bl	8001eb6 <ili9341_WriteReg>
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001e86:	f000 fd6f 	bl	8002968 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	20d3      	movs	r0, #211	; 0xd3
 8001e8e:	f000 f82c 	bl	8001eea <ili9341_ReadData>
 8001e92:	4603      	mov	r3, r0
 8001e94:	b29b      	uxth	r3, r3
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001e9e:	2029      	movs	r0, #41	; 0x29
 8001ea0:	f000 f809 	bl	8001eb6 <ili9341_WriteReg>
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001eac:	2028      	movs	r0, #40	; 0x28
 8001eae:	f000 f802 	bl	8001eb6 <ili9341_WriteReg>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fdea 	bl	8002a9c <LCD_IO_WriteReg>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fdbb 	bl	8002a58 <LCD_IO_WriteData>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	460a      	mov	r2, r1
 8001ef4:	80fb      	strh	r3, [r7, #6]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001efa:	797a      	ldrb	r2, [r7, #5]
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fded 	bl	8002ae0 <LCD_IO_ReadData>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001f14:	23f0      	movs	r3, #240	; 0xf0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001f24:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fa59 	bl	80023f8 <stmpe811_GetInstance>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2bff      	cmp	r3, #255	; 0xff
 8001f4e:	d112      	bne.n	8001f76 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f000 fa51 	bl	80023f8 <stmpe811_GetInstance>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001f5a:	7bbb      	ldrb	r3, [r7, #14]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d80a      	bhi.n	8001f76 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	88fa      	ldrh	r2, [r7, #6]
 8001f64:	b2d1      	uxtb	r1, r2
 8001f66:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <stmpe811_Init+0x4c>)
 8001f68:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001f6a:	f000 fdf6 	bl	8002b5a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f807 	bl	8001f84 <stmpe811_Reset>
    }
  }
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200007f8 	.word	0x200007f8

08001f84 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2202      	movs	r2, #2
 8001f94:	2103      	movs	r1, #3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fdeb 	bl	8002b72 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001f9c:	200a      	movs	r0, #10
 8001f9e:	f000 fe25 	bl	8002bec <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2103      	movs	r1, #3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fde1 	bl	8002b72 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f000 fe1b 	bl	8002bec <IOE_Delay>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001fbe:	b590      	push	{r4, r7, lr}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001fc8:	f000 fdc7 	bl	8002b5a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fde0 	bl	8002b98 <IOE_Read>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fdd7 	bl	8002b98 <IOE_Read>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001fee:	4323      	orrs	r3, r4
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	b29b      	uxth	r3, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}

08001ffc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2109      	movs	r1, #9
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fdc1 	bl	8002b98 <IOE_Read>
 8002016:	4603      	mov	r3, r0
 8002018:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	2109      	movs	r1, #9
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fda1 	bl	8002b72 <IOE_Write>
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2109      	movs	r1, #9
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fda3 	bl	8002b98 <IOE_Read>
 8002052:	4603      	mov	r3, r0
 8002054:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	2109      	movs	r1, #9
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fd83 	bl	8002b72 <IOE_Write>
    
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	80fb      	strh	r3, [r7, #6]
 8002080:	4613      	mov	r3, r2
 8002082:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	210a      	movs	r1, #10
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fd82 	bl	8002b98 <IOE_Read>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	797b      	ldrb	r3, [r7, #5]
 800209c:	4313      	orrs	r3, r2
 800209e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	210a      	movs	r1, #10
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fd62 	bl	8002b72 <IOE_Write>
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	460a      	mov	r2, r1
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	4613      	mov	r3, r2
 80020c4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	210a      	movs	r1, #10
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fd61 	bl	8002b98 <IOE_Read>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80020da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020de:	43db      	mvns	r3, r3
 80020e0:	b25a      	sxtb	r2, r3
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4013      	ands	r3, r2
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	210a      	movs	r1, #10
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fd3c 	bl	8002b72 <IOE_Write>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	460a      	mov	r2, r1
 800210c:	80fb      	strh	r3, [r7, #6]
 800210e:	4613      	mov	r3, r2
 8002110:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	210b      	movs	r1, #11
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fd3d 	bl	8002b98 <IOE_Read>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	4013      	ands	r3, r2
 8002126:	b2db      	uxtb	r3, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	460a      	mov	r2, r1
 800213a:	80fb      	strh	r3, [r7, #6]
 800213c:	4613      	mov	r3, r2
 800213e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	797a      	ldrb	r2, [r7, #5]
 8002146:	210b      	movs	r1, #11
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fd12 	bl	8002b72 <IOE_Write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	6039      	str	r1, [r7, #0]
 8002160:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2117      	movs	r1, #23
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fd13 	bl	8002b98 <IOE_Read>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b25b      	sxtb	r3, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	b25a      	sxtb	r2, r3
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4013      	ands	r3, r2
 8002184:	b25b      	sxtb	r3, r3
 8002186:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	2117      	movs	r1, #23
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fcee 	bl	8002b72 <IOE_Write>
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2104      	movs	r1, #4
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fcf2 	bl	8002b98 <IOE_Read>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	2104      	movs	r1, #4
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fcd2 	bl	8002b72 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	21f0      	movs	r1, #240	; 0xf0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffbf 	bl	8002156 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	2104      	movs	r1, #4
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fcc2 	bl	8002b72 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2249      	movs	r2, #73	; 0x49
 80021f4:	2120      	movs	r1, #32
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fcbb 	bl	8002b72 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80021fc:	2002      	movs	r0, #2
 80021fe:	f000 fcf5 	bl	8002bec <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2201      	movs	r2, #1
 8002208:	2121      	movs	r1, #33	; 0x21
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fcb1 	bl	8002b72 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	229a      	movs	r2, #154	; 0x9a
 8002216:	2141      	movs	r1, #65	; 0x41
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fcaa 	bl	8002b72 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2201      	movs	r2, #1
 8002224:	214a      	movs	r1, #74	; 0x4a
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fca3 	bl	8002b72 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2201      	movs	r2, #1
 8002232:	214b      	movs	r1, #75	; 0x4b
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fc9c 	bl	8002b72 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2200      	movs	r2, #0
 8002240:	214b      	movs	r1, #75	; 0x4b
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fc95 	bl	8002b72 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2201      	movs	r2, #1
 800224e:	2156      	movs	r1, #86	; 0x56
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fc8e 	bl	8002b72 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2201      	movs	r2, #1
 800225c:	2158      	movs	r1, #88	; 0x58
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fc87 	bl	8002b72 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2201      	movs	r2, #1
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fc80 	bl	8002b72 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	210b      	movs	r1, #11
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fc79 	bl	8002b72 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002280:	2002      	movs	r0, #2
 8002282:	f000 fcb3 	bl	8002bec <IOE_Delay>
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2140      	movs	r1, #64	; 0x40
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fc78 	bl	8002b98 <IOE_Read>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80022ba:	7bbb      	ldrb	r3, [r7, #14]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	214c      	movs	r1, #76	; 0x4c
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fc66 	bl	8002b98 <IOE_Read>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e00d      	b.n	80022f4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2201      	movs	r2, #1
 80022de:	214b      	movs	r1, #75	; 0x4b
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fc46 	bl	8002b72 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	214b      	movs	r1, #75	; 0x4b
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fc3f 	bl	8002b72 <IOE_Write>
  }
  
  return ret;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800230c:	89fb      	ldrh	r3, [r7, #14]
 800230e:	b2d8      	uxtb	r0, r3
 8002310:	f107 0210 	add.w	r2, r7, #16
 8002314:	2304      	movs	r3, #4
 8002316:	21d7      	movs	r1, #215	; 0xd7
 8002318:	f000 fc51 	bl	8002bbe <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800231c:	7c3b      	ldrb	r3, [r7, #16]
 800231e:	061a      	lsls	r2, r3, #24
 8002320:	7c7b      	ldrb	r3, [r7, #17]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	431a      	orrs	r2, r3
 8002326:	7cbb      	ldrb	r3, [r7, #18]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	4313      	orrs	r3, r2
 800232c:	7cfa      	ldrb	r2, [r7, #19]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	0d1b      	lsrs	r3, r3, #20
 8002336:	b29a      	uxth	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002346:	b29a      	uxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2201      	movs	r2, #1
 8002352:	214b      	movs	r1, #75	; 0x4b
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fc0c 	bl	8002b72 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800235a:	89fb      	ldrh	r3, [r7, #14]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2200      	movs	r2, #0
 8002360:	214b      	movs	r1, #75	; 0x4b
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fc05 	bl	8002b72 <IOE_Write>
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800237a:	f000 fbf4 	bl	8002b66 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	211f      	movs	r1, #31
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fe76 	bl	8002074 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe36 	bl	8001ffc <stmpe811_EnableGlobalIT>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fe47 	bl	8002038 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	211f      	movs	r1, #31
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fe81 	bl	80020b6 <stmpe811_DisableITSource>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	211f      	movs	r1, #31
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fe99 	bl	8002102 <stmpe811_ReadGITStatus>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	211f      	movs	r1, #31
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fea1 	bl	8002130 <stmpe811_ClearGlobalIT>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e00b      	b.n	8002424 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <stmpe811_GetInstance+0x40>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	b29b      	uxth	r3, r3
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	429a      	cmp	r2, r3
 8002418:	d101      	bne.n	800241e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	e006      	b.n	800242c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	3301      	adds	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d9f0      	bls.n	800240c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800242a:	23ff      	movs	r3, #255	; 0xff
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	200007f8 	.word	0x200007f8

0800243c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10e      	bne.n	800246a <BSP_LED_Init+0x2e>
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <BSP_LED_Init+0x9c>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <BSP_LED_Init+0x9c>)
 8002456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <BSP_LED_Init+0x9c>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	e010      	b.n	800248c <BSP_LED_Init+0x50>
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10d      	bne.n	800248c <BSP_LED_Init+0x50>
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <BSP_LED_Init+0x9c>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <BSP_LED_Init+0x9c>)
 800247a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <BSP_LED_Init+0x9c>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <BSP_LED_Init+0xa0>)
 8002490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249a:	2301      	movs	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800249e:	2302      	movs	r3, #2
 80024a0:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <BSP_LED_Init+0xa4>)
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	f107 0214 	add.w	r2, r7, #20
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fa55 	bl	8004960 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <BSP_LED_Init+0xa4>)
 80024ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <BSP_LED_Init+0xa0>)
 80024c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c6:	2200      	movs	r2, #0
 80024c8:	4619      	mov	r1, r3
 80024ca:	f002 fc0d 	bl	8004ce8 <HAL_GPIO_WritePin>
}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08009f10 	.word	0x08009f10
 80024e0:	2000033c 	.word	0x2000033c

080024e4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <BSP_LED_Toggle+0x2c>)
 80024f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	4906      	ldr	r1, [pc, #24]	; (8002514 <BSP_LED_Toggle+0x30>)
 80024fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80024fe:	4619      	mov	r1, r3
 8002500:	4610      	mov	r0, r2
 8002502:	f002 fc0a 	bl	8004d1a <HAL_GPIO_TogglePin>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000033c 	.word	0x2000033c
 8002514:	08009f10 	.word	0x08009f10

08002518 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <I2Cx_MspInit+0xdc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d15f      	bne.n	80025ea <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <I2Cx_MspInit+0xe0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <I2Cx_MspInit+0xe0>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <I2Cx_MspInit+0xe0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <I2Cx_MspInit+0xe0>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <I2Cx_MspInit+0xe0>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <I2Cx_MspInit+0xe0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002568:	2312      	movs	r3, #18
 800256a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002570:	2302      	movs	r3, #2
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002574:	2304      	movs	r3, #4
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4619      	mov	r1, r3
 800257e:	481f      	ldr	r0, [pc, #124]	; (80025fc <I2Cx_MspInit+0xe4>)
 8002580:	f002 f9ee 	bl	8004960 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002588:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	481b      	ldr	r0, [pc, #108]	; (8002600 <I2Cx_MspInit+0xe8>)
 8002592:	f002 f9e5 	bl	8004960 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <I2Cx_MspInit+0xe0>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <I2Cx_MspInit+0xe0>)
 80025a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <I2Cx_MspInit+0xe0>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <I2Cx_MspInit+0xe0>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <I2Cx_MspInit+0xe0>)
 80025b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025bc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <I2Cx_MspInit+0xe0>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <I2Cx_MspInit+0xe0>)
 80025c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025c8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	210f      	movs	r1, #15
 80025ce:	2048      	movs	r0, #72	; 0x48
 80025d0:	f001 fd3b 	bl	800404a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80025d4:	2048      	movs	r0, #72	; 0x48
 80025d6:	f001 fd54 	bl	8004082 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	210f      	movs	r1, #15
 80025de:	2049      	movs	r0, #73	; 0x49
 80025e0:	f001 fd33 	bl	800404a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80025e4:	2049      	movs	r0, #73	; 0x49
 80025e6:	f001 fd4c 	bl	8004082 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40005c00 	.word	0x40005c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020800 	.word	0x40020800

08002604 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002608:	4814      	ldr	r0, [pc, #80]	; (800265c <I2Cx_Init+0x58>)
 800260a:	f003 f849 	bl	80056a0 <HAL_I2C_GetState>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d121      	bne.n	8002658 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <I2Cx_Init+0x58>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <I2Cx_Init+0x5c>)
 8002618:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <I2Cx_Init+0x58>)
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <I2Cx_Init+0x60>)
 800261e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <I2Cx_Init+0x58>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <I2Cx_Init+0x58>)
 8002628:	2200      	movs	r2, #0
 800262a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <I2Cx_Init+0x58>)
 800262e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002632:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <I2Cx_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <I2Cx_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <I2Cx_Init+0x58>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <I2Cx_Init+0x58>)
 8002648:	2200      	movs	r2, #0
 800264a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <I2Cx_Init+0x58>)
 800264e:	f7ff ff63 	bl	8002518 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002652:	4802      	ldr	r0, [pc, #8]	; (800265c <I2Cx_Init+0x58>)
 8002654:	f002 fb7c 	bl	8004d50 <HAL_I2C_Init>
  }
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200007fc 	.word	0x200007fc
 8002660:	40005c00 	.word	0x40005c00
 8002664:	000186a0 	.word	0x000186a0

08002668 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <I2Cx_ITConfig+0x58>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <I2Cx_ITConfig+0x58>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <I2Cx_ITConfig+0x58>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800268a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002690:	2301      	movs	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <I2Cx_ITConfig+0x5c>)
 800269a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	4619      	mov	r1, r3
 80026a0:	4809      	ldr	r0, [pc, #36]	; (80026c8 <I2Cx_ITConfig+0x60>)
 80026a2:	f002 f95d 	bl	8004960 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80026a6:	2200      	movs	r2, #0
 80026a8:	210f      	movs	r1, #15
 80026aa:	2028      	movs	r0, #40	; 0x28
 80026ac:	f001 fccd 	bl	800404a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80026b0:	2028      	movs	r0, #40	; 0x28
 80026b2:	f001 fce6 	bl	8004082 <HAL_NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	10210000 	.word	0x10210000
 80026c8:	40020000 	.word	0x40020000

080026cc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
 80026d6:	460b      	mov	r3, r1
 80026d8:	71bb      	strb	r3, [r7, #6]
 80026da:	4613      	mov	r3, r2
 80026dc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	b299      	uxth	r1, r3
 80026e6:	79bb      	ldrb	r3, [r7, #6]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <I2Cx_WriteData+0x4c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	2301      	movs	r3, #1
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	1d7b      	adds	r3, r7, #5
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2301      	movs	r3, #1
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <I2Cx_WriteData+0x50>)
 80026fc:	f002 fcb0 	bl	8005060 <HAL_I2C_Mem_Write>
 8002700:	4603      	mov	r3, r0
 8002702:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800270a:	f000 f863 	bl	80027d4 <I2Cx_Error>
  }        
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000344 	.word	0x20000344
 800271c:	200007fc 	.word	0x200007fc

08002720 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af04      	add	r7, sp, #16
 8002726:	4603      	mov	r3, r0
 8002728:	460a      	mov	r2, r1
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	4613      	mov	r3, r2
 800272e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	b299      	uxth	r1, r3
 800273c:	79bb      	ldrb	r3, [r7, #6]
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <I2Cx_ReadData+0x50>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	2301      	movs	r3, #1
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	f107 030e 	add.w	r3, r7, #14
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2301      	movs	r3, #1
 8002752:	4808      	ldr	r0, [pc, #32]	; (8002774 <I2Cx_ReadData+0x54>)
 8002754:	f002 fd7e 	bl	8005254 <HAL_I2C_Mem_Read>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002762:	f000 f837 	bl	80027d4 <I2Cx_Error>
  
  }
  return value;
 8002766:	7bbb      	ldrb	r3, [r7, #14]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000344 	.word	0x20000344
 8002774:	200007fc 	.word	0x200007fc

08002778 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af04      	add	r7, sp, #16
 800277e:	603a      	str	r2, [r7, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	460b      	mov	r3, r1
 8002788:	71bb      	strb	r3, [r7, #6]
 800278a:	4613      	mov	r3, r2
 800278c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	b299      	uxth	r1, r3
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <I2Cx_ReadBuffer+0x54>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	9302      	str	r3, [sp, #8]
 80027a0:	88bb      	ldrh	r3, [r7, #4]
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	4809      	ldr	r0, [pc, #36]	; (80027d0 <I2Cx_ReadBuffer+0x58>)
 80027ac:	f002 fd52 	bl	8005254 <HAL_I2C_Mem_Read>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e002      	b.n	80027c4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80027be:	f000 f809 	bl	80027d4 <I2Cx_Error>

    return 1;
 80027c2:	2301      	movs	r3, #1
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000344 	.word	0x20000344
 80027d0:	200007fc 	.word	0x200007fc

080027d4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <I2Cx_Error+0x14>)
 80027da:	f002 fbfd 	bl	8004fd8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80027de:	f7ff ff11 	bl	8002604 <I2Cx_Init>
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200007fc 	.word	0x200007fc

080027ec <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80027f0:	4819      	ldr	r0, [pc, #100]	; (8002858 <SPIx_Init+0x6c>)
 80027f2:	f005 f9e2 	bl	8007bba <HAL_SPI_GetState>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d12b      	bne.n	8002854 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <SPIx_Init+0x6c>)
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <SPIx_Init+0x70>)
 8002800:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <SPIx_Init+0x6c>)
 8002804:	2218      	movs	r2, #24
 8002806:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <SPIx_Init+0x6c>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <SPIx_Init+0x6c>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <SPIx_Init+0x6c>)
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <SPIx_Init+0x6c>)
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002820:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <SPIx_Init+0x6c>)
 8002822:	2207      	movs	r2, #7
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <SPIx_Init+0x6c>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <SPIx_Init+0x6c>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <SPIx_Init+0x6c>)
 8002834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002838:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <SPIx_Init+0x6c>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SPIx_Init+0x6c>)
 8002842:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002846:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002848:	4803      	ldr	r0, [pc, #12]	; (8002858 <SPIx_Init+0x6c>)
 800284a:	f000 f853 	bl	80028f4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800284e:	4802      	ldr	r0, [pc, #8]	; (8002858 <SPIx_Init+0x6c>)
 8002850:	f004 fc29 	bl	80070a6 <HAL_SPI_Init>
  } 
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000850 	.word	0x20000850
 800285c:	40015000 	.word	0x40015000

08002860 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <SPIx_Read+0x38>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f107 0108 	add.w	r1, r7, #8
 800287a:	4808      	ldr	r0, [pc, #32]	; (800289c <SPIx_Read+0x3c>)
 800287c:	f004 fe10 	bl	80074a0 <HAL_SPI_Receive>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800288a:	f000 f827 	bl	80028dc <SPIx_Error>
  }
  
  return readvalue;
 800288e:	68bb      	ldr	r3, [r7, #8]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000348 	.word	0x20000348
 800289c:	20000850 	.word	0x20000850

080028a0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <SPIx_Write+0x34>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1db9      	adds	r1, r7, #6
 80028b4:	2201      	movs	r2, #1
 80028b6:	4808      	ldr	r0, [pc, #32]	; (80028d8 <SPIx_Write+0x38>)
 80028b8:	f004 fc9c 	bl	80071f4 <HAL_SPI_Transmit>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80028c6:	f000 f809 	bl	80028dc <SPIx_Error>
  }
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000348 	.word	0x20000348
 80028d8:	20000850 	.word	0x20000850

080028dc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <SPIx_Error+0x14>)
 80028e2:	f004 fc4b 	bl	800717c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80028e6:	f7ff ff81 	bl	80027ec <SPIx_Init>
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000850 	.word	0x20000850

080028f4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <SPIx_MspInit+0x6c>)
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	4a16      	ldr	r2, [pc, #88]	; (8002960 <SPIx_MspInit+0x6c>)
 8002906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800290a:	6453      	str	r3, [r2, #68]	; 0x44
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <SPIx_MspInit+0x6c>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <SPIx_MspInit+0x6c>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <SPIx_MspInit+0x6c>)
 8002922:	f043 0320 	orr.w	r3, r3, #32
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <SPIx_MspInit+0x6c>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002934:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002938:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800293e:	2302      	movs	r3, #2
 8002940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002942:	2301      	movs	r3, #1
 8002944:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002946:	2305      	movs	r3, #5
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <SPIx_MspInit+0x70>)
 8002952:	f002 f805 	bl	8004960 <HAL_GPIO_Init>
}
 8002956:	bf00      	nop
 8002958:	3728      	adds	r7, #40	; 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40021400 	.word	0x40021400

08002968 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <LCD_IO_Init+0xe0>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d164      	bne.n	8002a40 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <LCD_IO_Init+0xe0>)
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <LCD_IO_Init+0xe4>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <LCD_IO_Init+0xe4>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <LCD_IO_Init+0xe4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800299c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800299e:	2301      	movs	r3, #1
 80029a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4619      	mov	r1, r3
 80029b0:	4827      	ldr	r0, [pc, #156]	; (8002a50 <LCD_IO_Init+0xe8>)
 80029b2:	f001 ffd5 	bl	8004960 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <LCD_IO_Init+0xe4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <LCD_IO_Init+0xe4>)
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <LCD_IO_Init+0xe4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80029d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	4619      	mov	r1, r3
 80029ea:	4819      	ldr	r0, [pc, #100]	; (8002a50 <LCD_IO_Init+0xe8>)
 80029ec:	f001 ffb8 	bl	8004960 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <LCD_IO_Init+0xe4>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <LCD_IO_Init+0xe4>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <LCD_IO_Init+0xe4>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	4619      	mov	r1, r3
 8002a22:	480c      	ldr	r0, [pc, #48]	; (8002a54 <LCD_IO_Init+0xec>)
 8002a24:	f001 ff9c 	bl	8004960 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	4809      	ldr	r0, [pc, #36]	; (8002a54 <LCD_IO_Init+0xec>)
 8002a2e:	f002 f95b 	bl	8004ce8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002a32:	2201      	movs	r2, #1
 8002a34:	2104      	movs	r1, #4
 8002a36:	4807      	ldr	r0, [pc, #28]	; (8002a54 <LCD_IO_Init+0xec>)
 8002a38:	f002 f956 	bl	8004ce8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002a3c:	f7ff fed6 	bl	80027ec <SPIx_Init>
  }
}
 8002a40:	bf00      	nop
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200008a8 	.word	0x200008a8
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40020800 	.word	0x40020800

08002a58 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a62:	2201      	movs	r2, #1
 8002a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a68:	480a      	ldr	r0, [pc, #40]	; (8002a94 <LCD_IO_WriteData+0x3c>)
 8002a6a:	f002 f93d 	bl	8004ce8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2104      	movs	r1, #4
 8002a72:	4809      	ldr	r0, [pc, #36]	; (8002a98 <LCD_IO_WriteData+0x40>)
 8002a74:	f002 f938 	bl	8004ce8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff10 	bl	80028a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a80:	2201      	movs	r2, #1
 8002a82:	2104      	movs	r1, #4
 8002a84:	4804      	ldr	r0, [pc, #16]	; (8002a98 <LCD_IO_WriteData+0x40>)
 8002a86:	f002 f92f 	bl	8004ce8 <HAL_GPIO_WritePin>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40020800 	.word	0x40020800

08002a9c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aac:	480a      	ldr	r0, [pc, #40]	; (8002ad8 <LCD_IO_WriteReg+0x3c>)
 8002aae:	f002 f91b 	bl	8004ce8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4809      	ldr	r0, [pc, #36]	; (8002adc <LCD_IO_WriteReg+0x40>)
 8002ab8:	f002 f916 	bl	8004ce8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff feed 	bl	80028a0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2104      	movs	r1, #4
 8002aca:	4804      	ldr	r0, [pc, #16]	; (8002adc <LCD_IO_WriteReg+0x40>)
 8002acc:	f002 f90c 	bl	8004ce8 <HAL_GPIO_WritePin>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40020800 	.word	0x40020800

08002ae0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460a      	mov	r2, r1
 8002aea:	80fb      	strh	r3, [r7, #6]
 8002aec:	4613      	mov	r3, r2
 8002aee:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002af4:	2200      	movs	r2, #0
 8002af6:	2104      	movs	r1, #4
 8002af8:	4810      	ldr	r0, [pc, #64]	; (8002b3c <LCD_IO_ReadData+0x5c>)
 8002afa:	f002 f8f5 	bl	8004ce8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002afe:	2200      	movs	r2, #0
 8002b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b04:	480e      	ldr	r0, [pc, #56]	; (8002b40 <LCD_IO_ReadData+0x60>)
 8002b06:	f002 f8ef 	bl	8004ce8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fec7 	bl	80028a0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002b12:	797b      	ldrb	r3, [r7, #5]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fea3 	bl	8002860 <SPIx_Read>
 8002b1a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b22:	4807      	ldr	r0, [pc, #28]	; (8002b40 <LCD_IO_ReadData+0x60>)
 8002b24:	f002 f8e0 	bl	8004ce8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	4803      	ldr	r0, [pc, #12]	; (8002b3c <LCD_IO_ReadData+0x5c>)
 8002b2e:	f002 f8db 	bl	8004ce8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00

08002b44 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f001 f97d 	bl	8003e4c <HAL_Delay>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002b5e:	f7ff fd51 	bl	8002604 <I2Cx_Init>
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002b6a:	f7ff fd7d 	bl	8002668 <I2Cx_ITConfig>
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	71bb      	strb	r3, [r7, #6]
 8002b80:	4613      	mov	r3, r2
 8002b82:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002b84:	797a      	ldrb	r2, [r7, #5]
 8002b86:	79b9      	ldrb	r1, [r7, #6]
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fd9e 	bl	80026cc <I2Cx_WriteData>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	71fb      	strb	r3, [r7, #7]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002ba8:	79ba      	ldrb	r2, [r7, #6]
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fdb6 	bl	8002720 <I2Cx_ReadData>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	603a      	str	r2, [r7, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	71bb      	strb	r3, [r7, #6]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002bd4:	88bb      	ldrh	r3, [r7, #4]
 8002bd6:	79b9      	ldrb	r1, [r7, #6]
 8002bd8:	79f8      	ldrb	r0, [r7, #7]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	f7ff fdcc 	bl	8002778 <I2Cx_ReadBuffer>
 8002be0:	4603      	mov	r3, r0
 8002be2:	b29b      	uxth	r3, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f001 f929 	bl	8003e4c <HAL_Delay>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002c08:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <BSP_LCD_Init+0xc0>)
 8002c0c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c10:	2209      	movs	r2, #9
 8002c12:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002c1a:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c1c:	221d      	movs	r2, #29
 8002c1e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c22:	2203      	movs	r2, #3
 8002c24:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c28:	f240 120d 	movw	r2, #269	; 0x10d
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c30:	f240 1243 	movw	r2, #323	; 0x143
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c38:	f240 1217 	movw	r2, #279	; 0x117
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c40:	f240 1247 	movw	r2, #327	; 0x147
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002c46:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <BSP_LCD_Init+0xc4>)
 8002c60:	2208      	movs	r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <BSP_LCD_Init+0xc4>)
 8002c66:	22c0      	movs	r2, #192	; 0xc0
 8002c68:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <BSP_LCD_Init+0xc4>)
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002c70:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <BSP_LCD_Init+0xc4>)
 8002c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002c78:	4813      	ldr	r0, [pc, #76]	; (8002cc8 <BSP_LCD_Init+0xc4>)
 8002c7a:	f003 ffcb 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002c96:	f000 fb7d 	bl	8003394 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002c9a:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <BSP_LCD_Init+0xbc>)
 8002c9c:	f003 f866 	bl	8005d6c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <BSP_LCD_Init+0xc8>)
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <BSP_LCD_Init+0xcc>)
 8002ca4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <BSP_LCD_Init+0xc8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002cae:	f000 fd85 	bl	80037bc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002cb2:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <BSP_LCD_Init+0xd0>)
 8002cb4:	f000 f8ce 	bl	8002e54 <BSP_LCD_SetFont>

  return LCD_OK;
 8002cb8:	2300      	movs	r3, #0
}  
 8002cba:	4618      	mov	r0, r3
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200008ac 	.word	0x200008ac
 8002cc4:	40016800 	.word	0x40016800
 8002cc8:	20000994 	.word	0x20000994
 8002ccc:	200009e0 	.word	0x200009e0
 8002cd0:	200002dc 	.word	0x200002dc
 8002cd4:	2000034c 	.word	0x2000034c

08002cd8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <BSP_LCD_GetXSize+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	4798      	blx	r3
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200009e0 	.word	0x200009e0

08002cf0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <BSP_LCD_GetYSize+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	4798      	blx	r3
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200009e0 	.word	0x200009e0

08002d08 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b090      	sub	sp, #64	; 0x40
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002d18:	f7ff ffde 	bl	8002cd8 <BSP_LCD_GetXSize>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d24:	f7ff ffe4 	bl	8002cf0 <BSP_LCD_GetYSize>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002d34:	23ff      	movs	r3, #255	; 0xff
 8002d36:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d54:	2307      	movs	r3, #7
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002d58:	f7ff ffbe 	bl	8002cd8 <BSP_LCD_GetXSize>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002d60:	f7ff ffc6 	bl	8002cf0 <BSP_LCD_GetYSize>
 8002d64:	4603      	mov	r3, r0
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4814      	ldr	r0, [pc, #80]	; (8002dc4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d72:	f003 f8d5 	bl	8005f20 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	4913      	ldr	r1, [pc, #76]	; (8002dc8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3304      	adds	r3, #4
 8002d86:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <BSP_LCD_LayerDefaultInit+0xc4>)
 8002d9e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002da0:	88fa      	ldrh	r2, [r7, #6]
 8002da2:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002db2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002db4:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002db6:	f003 f8f1 	bl	8005f9c <HAL_LTDC_EnableDither>
}
 8002dba:	bf00      	nop
 8002dbc:	3740      	adds	r7, #64	; 0x40
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200008ac 	.word	0x200008ac
 8002dc8:	200009c8 	.word	0x200009c8
 8002dcc:	2000034c 	.word	0x2000034c

08002dd0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <BSP_LCD_SelectLayer+0x1c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	200009c4 	.word	0x200009c4

08002df0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002df8:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <BSP_LCD_SetTextColor+0x28>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4907      	ldr	r1, [pc, #28]	; (8002e1c <BSP_LCD_SetTextColor+0x2c>)
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	601a      	str	r2, [r3, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	200009c4 	.word	0x200009c4
 8002e1c:	200009c8 	.word	0x200009c8

08002e20 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <BSP_LCD_SetBackColor+0x2c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4908      	ldr	r1, [pc, #32]	; (8002e50 <BSP_LCD_SetBackColor+0x30>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3304      	adds	r3, #4
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	200009c4 	.word	0x200009c4
 8002e50:	200009c8 	.word	0x200009c8

08002e54 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <BSP_LCD_SetFont+0x2c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4908      	ldr	r1, [pc, #32]	; (8002e84 <BSP_LCD_SetFont+0x30>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	601a      	str	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	200009c4 	.word	0x200009c4
 8002e84:	200009c8 	.word	0x200009c8

08002e88 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <BSP_LCD_Clear+0x48>)
 8002e92:	681c      	ldr	r4, [r3, #0]
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <BSP_LCD_Clear+0x48>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <BSP_LCD_Clear+0x4c>)
 8002e9a:	2134      	movs	r1, #52	; 0x34
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	335c      	adds	r3, #92	; 0x5c
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461e      	mov	r6, r3
 8002ea8:	f7ff ff16 	bl	8002cd8 <BSP_LCD_GetXSize>
 8002eac:	4605      	mov	r5, r0
 8002eae:	f7ff ff1f 	bl	8002cf0 <BSP_LCD_GetYSize>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	4631      	mov	r1, r6
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f000 fc42 	bl	800374c <FillBuffer>
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed0:	200009c4 	.word	0x200009c4
 8002ed4:	200008ac 	.word	0x200008ac

08002ed8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	80bb      	strh	r3, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <BSP_LCD_DisplayChar+0x80>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	491b      	ldr	r1, [pc, #108]	; (8002f5c <BSP_LCD_DisplayChar+0x84>)
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3308      	adds	r3, #8
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <BSP_LCD_DisplayChar+0x80>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4c14      	ldr	r4, [pc, #80]	; (8002f5c <BSP_LCD_DisplayChar+0x84>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4423      	add	r3, r4
 8002f16:	3308      	adds	r3, #8
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f1c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <BSP_LCD_DisplayChar+0x80>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4c0d      	ldr	r4, [pc, #52]	; (8002f5c <BSP_LCD_DisplayChar+0x84>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4423      	add	r3, r4
 8002f30:	3308      	adds	r3, #8
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	889b      	ldrh	r3, [r3, #4]
 8002f36:	3307      	adds	r3, #7
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da00      	bge.n	8002f3e <BSP_LCD_DisplayChar+0x66>
 8002f3c:	3307      	adds	r3, #7
 8002f3e:	10db      	asrs	r3, r3, #3
 8002f40:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f44:	18ca      	adds	r2, r1, r3
 8002f46:	88b9      	ldrh	r1, [r7, #4]
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fb44 	bl	80035d8 <DrawChar>
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd90      	pop	{r4, r7, pc}
 8002f58:	200009c4 	.word	0x200009c4
 8002f5c:	200009c8 	.word	0x200009c8

08002f60 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60ba      	str	r2, [r7, #8]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	81fb      	strh	r3, [r7, #14]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	81bb      	strh	r3, [r7, #12]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002f76:	2301      	movs	r3, #1
 8002f78:	83fb      	strh	r3, [r7, #30]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002f8a:	e002      	b.n	8002f92 <BSP_LCD_DisplayStringAt+0x32>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	617a      	str	r2, [r7, #20]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f6      	bne.n	8002f8c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f9e:	f7ff fe9b 	bl	8002cd8 <BSP_LCD_GetXSize>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <BSP_LCD_DisplayStringAt+0x174>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	484b      	ldr	r0, [pc, #300]	; (80030d8 <BSP_LCD_DisplayStringAt+0x178>)
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4403      	add	r3, r0
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	889b      	ldrh	r3, [r3, #4]
 8002fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fbe:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d01c      	beq.n	8003000 <BSP_LCD_DisplayStringAt+0xa0>
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	dc33      	bgt.n	8003032 <BSP_LCD_DisplayStringAt+0xd2>
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d002      	beq.n	8002fd4 <BSP_LCD_DisplayStringAt+0x74>
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d019      	beq.n	8003006 <BSP_LCD_DisplayStringAt+0xa6>
 8002fd2:	e02e      	b.n	8003032 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad1      	subs	r1, r2, r3
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <BSP_LCD_DisplayStringAt+0x174>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	483e      	ldr	r0, [pc, #248]	; (80030d8 <BSP_LCD_DisplayStringAt+0x178>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4403      	add	r3, r0
 8002fea:	3308      	adds	r3, #8
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	889b      	ldrh	r3, [r3, #4]
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	83fb      	strh	r3, [r7, #30]
      break;
 8002ffe:	e01b      	b.n	8003038 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	83fb      	strh	r3, [r7, #30]
      break;
 8003004:	e018      	b.n	8003038 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	b299      	uxth	r1, r3
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4831      	ldr	r0, [pc, #196]	; (80030d8 <BSP_LCD_DisplayStringAt+0x178>)
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4403      	add	r3, r0
 800301e:	3308      	adds	r3, #8
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	889b      	ldrh	r3, [r3, #4]
 8003024:	fb11 f303 	smulbb	r3, r1, r3
 8003028:	b29a      	uxth	r2, r3
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	4413      	add	r3, r2
 800302e:	83fb      	strh	r3, [r7, #30]
      break;
 8003030:	e002      	b.n	8003038 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	83fb      	strh	r3, [r7, #30]
      break;
 8003036:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003038:	e01a      	b.n	8003070 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	89b9      	ldrh	r1, [r7, #12]
 8003040:	8bfb      	ldrh	r3, [r7, #30]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff48 	bl	8002ed8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <BSP_LCD_DisplayStringAt+0x174>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4922      	ldr	r1, [pc, #136]	; (80030d8 <BSP_LCD_DisplayStringAt+0x178>)
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3308      	adds	r3, #8
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	889a      	ldrh	r2, [r3, #4]
 800305e:	8bfb      	ldrh	r3, [r7, #30]
 8003060:	4413      	add	r3, r2
 8003062:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
    i++;
 800306a:	8bbb      	ldrh	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2dc      	uxtb	r4, r3
 800307e:	f7ff fe2b 	bl	8002cd8 <BSP_LCD_GetXSize>
 8003082:	8bb9      	ldrh	r1, [r7, #28]
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4d13      	ldr	r5, [pc, #76]	; (80030d8 <BSP_LCD_DisplayStringAt+0x178>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	442b      	add	r3, r5
 8003094:	3308      	adds	r3, #8
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	1ac3      	subs	r3, r0, r3
 80030a0:	b299      	uxth	r1, r3
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <BSP_LCD_DisplayStringAt+0x174>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	480c      	ldr	r0, [pc, #48]	; (80030d8 <BSP_LCD_DisplayStringAt+0x178>)
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4403      	add	r3, r0
 80030b2:	3308      	adds	r3, #8
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	889b      	ldrh	r3, [r3, #4]
 80030b8:	4299      	cmp	r1, r3
 80030ba:	bf2c      	ite	cs
 80030bc:	2301      	movcs	r3, #1
 80030be:	2300      	movcc	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4023      	ands	r3, r4
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1b7      	bne.n	800303a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bdb0      	pop	{r4, r5, r7, pc}
 80030d4:	200009c4 	.word	0x200009c4
 80030d8:	200009c8 	.word	0x200009c8

080030dc <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b08b      	sub	sp, #44	; 0x2c
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4604      	mov	r4, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4623      	mov	r3, r4
 80030ec:	80fb      	strh	r3, [r7, #6]
 80030ee:	4603      	mov	r3, r0
 80030f0:	80bb      	strh	r3, [r7, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	807b      	strh	r3, [r7, #2]
 80030f6:	4613      	mov	r3, r2
 80030f8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80030fa:	2300      	movs	r3, #0
 80030fc:	823b      	strh	r3, [r7, #16]
 80030fe:	2300      	movs	r3, #0
 8003100:	81fb      	strh	r3, [r7, #14]
 8003102:	2300      	movs	r3, #0
 8003104:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003106:	2300      	movs	r3, #0
 8003108:	84bb      	strh	r3, [r7, #36]	; 0x24
 800310a:	2300      	movs	r3, #0
 800310c:	847b      	strh	r3, [r7, #34]	; 0x22
 800310e:	2300      	movs	r3, #0
 8003110:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003112:	2300      	movs	r3, #0
 8003114:	83fb      	strh	r3, [r7, #30]
 8003116:	2300      	movs	r3, #0
 8003118:	83bb      	strh	r3, [r7, #28]
 800311a:	2300      	movs	r3, #0
 800311c:	837b      	strh	r3, [r7, #26]
 800311e:	2300      	movs	r3, #0
 8003120:	833b      	strh	r3, [r7, #24]
 8003122:	2300      	movs	r3, #0
 8003124:	82fb      	strh	r3, [r7, #22]
 8003126:	2300      	movs	r3, #0
 8003128:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800312e:	887a      	ldrh	r2, [r7, #2]
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bfb8      	it	lt
 8003138:	425b      	neglt	r3, r3
 800313a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 800313c:	883a      	ldrh	r2, [r7, #0]
 800313e:	88bb      	ldrh	r3, [r7, #4]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfb8      	it	lt
 8003146:	425b      	neglt	r3, r3
 8003148:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800314e:	88bb      	ldrh	r3, [r7, #4]
 8003150:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	429a      	cmp	r2, r3
 8003158:	d304      	bcc.n	8003164 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800315a:	2301      	movs	r3, #1
 800315c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	843b      	strh	r3, [r7, #32]
 8003162:	e005      	b.n	8003170 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003168:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800316a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800316e:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003170:	883a      	ldrh	r2, [r7, #0]
 8003172:	88bb      	ldrh	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d304      	bcc.n	8003182 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003178:	2301      	movs	r3, #1
 800317a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800317c:	2301      	movs	r3, #1
 800317e:	83bb      	strh	r3, [r7, #28]
 8003180:	e005      	b.n	800318e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003186:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800318c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800318e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003196:	429a      	cmp	r2, r3
 8003198:	db10      	blt.n	80031bc <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800319a:	2300      	movs	r3, #0
 800319c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800319e:	2300      	movs	r3, #0
 80031a0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80031a2:	8a3b      	ldrh	r3, [r7, #16]
 80031a4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80031a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031aa:	0fda      	lsrs	r2, r3, #31
 80031ac:	4413      	add	r3, r2
 80031ae:	105b      	asrs	r3, r3, #1
 80031b0:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80031b2:	89fb      	ldrh	r3, [r7, #14]
 80031b4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80031b6:	8a3b      	ldrh	r3, [r7, #16]
 80031b8:	82bb      	strh	r3, [r7, #20]
 80031ba:	e00f      	b.n	80031dc <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80031bc:	2300      	movs	r3, #0
 80031be:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80031c0:	2300      	movs	r3, #0
 80031c2:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80031c4:	89fb      	ldrh	r3, [r7, #14]
 80031c6:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80031c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031cc:	0fda      	lsrs	r2, r3, #31
 80031ce:	4413      	add	r3, r2
 80031d0:	105b      	asrs	r3, r3, #1
 80031d2:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80031d4:	8a3b      	ldrh	r3, [r7, #16]
 80031d6:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80031d8:	89fb      	ldrh	r3, [r7, #14]
 80031da:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80031dc:	2300      	movs	r3, #0
 80031de:	827b      	strh	r3, [r7, #18]
 80031e0:	e037      	b.n	8003252 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80031e2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80031e4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <BSP_LCD_DrawLine+0x18c>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4c20      	ldr	r4, [pc, #128]	; (800326c <BSP_LCD_DrawLine+0x190>)
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4423      	add	r3, r4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f000 f9a1 	bl	8003540 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80031fe:	8b3a      	ldrh	r2, [r7, #24]
 8003200:	8afb      	ldrh	r3, [r7, #22]
 8003202:	4413      	add	r3, r2
 8003204:	b29b      	uxth	r3, r3
 8003206:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003208:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800320c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003210:	429a      	cmp	r2, r3
 8003212:	db0e      	blt.n	8003232 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003214:	8b3a      	ldrh	r2, [r7, #24]
 8003216:	8b7b      	ldrh	r3, [r7, #26]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	b29b      	uxth	r3, r3
 800321c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800321e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003222:	4413      	add	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800322a:	8bfb      	ldrh	r3, [r7, #30]
 800322c:	4413      	add	r3, r2
 800322e:	b29b      	uxth	r3, r3
 8003230:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003234:	8c3b      	ldrh	r3, [r7, #32]
 8003236:	4413      	add	r3, r2
 8003238:	b29b      	uxth	r3, r3
 800323a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800323c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800323e:	8bbb      	ldrh	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	b29b      	uxth	r3, r3
 8003244:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800324a:	b29b      	uxth	r3, r3
 800324c:	3301      	adds	r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	827b      	strh	r3, [r7, #18]
 8003252:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003256:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800325a:	429a      	cmp	r2, r3
 800325c:	ddc1      	ble.n	80031e2 <BSP_LCD_DrawLine+0x106>
  }
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	372c      	adds	r7, #44	; 0x2c
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	200009c4 	.word	0x200009c4
 800326c:	200009c8 	.word	0x200009c8

08003270 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af02      	add	r7, sp, #8
 8003278:	4604      	mov	r4, r0
 800327a:	4608      	mov	r0, r1
 800327c:	4611      	mov	r1, r2
 800327e:	461a      	mov	r2, r3
 8003280:	4623      	mov	r3, r4
 8003282:	80fb      	strh	r3, [r7, #6]
 8003284:	4603      	mov	r3, r0
 8003286:	80bb      	strh	r3, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
 800328c:	4613      	mov	r3, r2
 800328e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003294:	4b33      	ldr	r3, [pc, #204]	; (8003364 <BSP_LCD_FillRect+0xf4>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4933      	ldr	r1, [pc, #204]	; (8003368 <BSP_LCD_FillRect+0xf8>)
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fda2 	bl	8002df0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 80032ac:	4b2f      	ldr	r3, [pc, #188]	; (800336c <BSP_LCD_FillRect+0xfc>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d022      	beq.n	80032fa <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <BSP_LCD_FillRect+0xf4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <BSP_LCD_FillRect+0x100>)
 80032ba:	2134      	movs	r1, #52	; 0x34
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	681c      	ldr	r4, [r3, #0]
 80032c6:	f7ff fd07 	bl	8002cd8 <BSP_LCD_GetXSize>
 80032ca:	4603      	mov	r3, r0
 80032cc:	425b      	negs	r3, r3
 80032ce:	88b9      	ldrh	r1, [r7, #4]
 80032d0:	883a      	ldrh	r2, [r7, #0]
 80032d2:	440a      	add	r2, r1
 80032d4:	fb02 f503 	mul.w	r5, r2, r3
 80032d8:	f7ff fcfe 	bl	8002cd8 <BSP_LCD_GetXSize>
 80032dc:	4606      	mov	r6, r0
 80032de:	f7ff fd07 	bl	8002cf0 <BSP_LCD_GetYSize>
 80032e2:	4603      	mov	r3, r0
 80032e4:	fb06 f303 	mul.w	r3, r6, r3
 80032e8:	442b      	add	r3, r5
 80032ea:	88f9      	ldrh	r1, [r7, #6]
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	440a      	add	r2, r1
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4423      	add	r3, r4
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e013      	b.n	8003322 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <BSP_LCD_FillRect+0xf4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <BSP_LCD_FillRect+0x100>)
 8003300:	2134      	movs	r1, #52	; 0x34
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	335c      	adds	r3, #92	; 0x5c
 800330a:	681c      	ldr	r4, [r3, #0]
 800330c:	f7ff fce4 	bl	8002cd8 <BSP_LCD_GetXSize>
 8003310:	4602      	mov	r2, r0
 8003312:	88bb      	ldrh	r3, [r7, #4]
 8003314:	fb03 f202 	mul.w	r2, r3, r2
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4423      	add	r3, r4
 8003320:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <BSP_LCD_FillRect+0xf4>)
 8003324:	681c      	ldr	r4, [r3, #0]
 8003326:	68fd      	ldr	r5, [r7, #12]
 8003328:	887e      	ldrh	r6, [r7, #2]
 800332a:	f8b7 8000 	ldrh.w	r8, [r7]
 800332e:	f7ff fcd3 	bl	8002cd8 <BSP_LCD_GetXSize>
 8003332:	4602      	mov	r2, r0
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	1ad1      	subs	r1, r2, r3
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <BSP_LCD_FillRect+0xf4>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	480a      	ldr	r0, [pc, #40]	; (8003368 <BSP_LCD_FillRect+0xf8>)
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4403      	add	r3, r0
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	9100      	str	r1, [sp, #0]
 800334e:	4643      	mov	r3, r8
 8003350:	4632      	mov	r2, r6
 8003352:	4629      	mov	r1, r5
 8003354:	4620      	mov	r0, r4
 8003356:	f000 f9f9 	bl	800374c <FillBuffer>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003364:	200009c4 	.word	0x200009c4
 8003368:	200009c8 	.word	0x200009c8
 800336c:	200009e4 	.word	0x200009e4
 8003370:	200008ac 	.word	0x200008ac

08003374 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <BSP_LCD_DisplayOn+0x1c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003382:	4b03      	ldr	r3, [pc, #12]	; (8003390 <BSP_LCD_DisplayOn+0x1c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4798      	blx	r3
  }
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200009e0 	.word	0x200009e0

08003394 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	; 0x38
 8003398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
 800339e:	4b61      	ldr	r3, [pc, #388]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	4a60      	ldr	r2, [pc, #384]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033a8:	6453      	str	r3, [r2, #68]	; 0x44
 80033aa:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a59      	ldr	r2, [pc, #356]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b57      	ldr	r3, [pc, #348]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	4b53      	ldr	r3, [pc, #332]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a52      	ldr	r2, [pc, #328]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b50      	ldr	r3, [pc, #320]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a4b      	ldr	r2, [pc, #300]	; (8003524 <BSP_LCD_MspInit+0x190>)
 80033f8:	f043 0302 	orr.w	r3, r3, #2
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	4b45      	ldr	r3, [pc, #276]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a44      	ldr	r2, [pc, #272]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b42      	ldr	r3, [pc, #264]	; (8003524 <BSP_LCD_MspInit+0x190>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <BSP_LCD_MspInit+0x190>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a36      	ldr	r2, [pc, #216]	; (8003524 <BSP_LCD_MspInit+0x190>)
 800344c:	f043 0320 	orr.w	r3, r3, #32
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	4b30      	ldr	r3, [pc, #192]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <BSP_LCD_MspInit+0x190>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800347a:	f641 0358 	movw	r3, #6232	; 0x1858
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003488:	2302      	movs	r3, #2
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800348c:	230e      	movs	r3, #14
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	4824      	ldr	r0, [pc, #144]	; (8003528 <BSP_LCD_MspInit+0x194>)
 8003498:	f001 fa62 	bl	8004960 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800349c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a6:	4619      	mov	r1, r3
 80034a8:	4820      	ldr	r0, [pc, #128]	; (800352c <BSP_LCD_MspInit+0x198>)
 80034aa:	f001 fa59 	bl	8004960 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80034ae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80034b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b8:	4619      	mov	r1, r3
 80034ba:	481d      	ldr	r0, [pc, #116]	; (8003530 <BSP_LCD_MspInit+0x19c>)
 80034bc:	f001 fa50 	bl	8004960 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80034c0:	2348      	movs	r3, #72	; 0x48
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80034c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c8:	4619      	mov	r1, r3
 80034ca:	481a      	ldr	r0, [pc, #104]	; (8003534 <BSP_LCD_MspInit+0x1a0>)
 80034cc:	f001 fa48 	bl	8004960 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80034d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80034d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034da:	4619      	mov	r1, r3
 80034dc:	4816      	ldr	r0, [pc, #88]	; (8003538 <BSP_LCD_MspInit+0x1a4>)
 80034de:	f001 fa3f 	bl	8004960 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80034e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ec:	4619      	mov	r1, r3
 80034ee:	4813      	ldr	r0, [pc, #76]	; (800353c <BSP_LCD_MspInit+0x1a8>)
 80034f0:	f001 fa36 	bl	8004960 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80034f4:	2303      	movs	r3, #3
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80034f8:	2309      	movs	r3, #9
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003500:	4619      	mov	r1, r3
 8003502:	480a      	ldr	r0, [pc, #40]	; (800352c <BSP_LCD_MspInit+0x198>)
 8003504:	f001 fa2c 	bl	8004960 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003508:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003512:	4619      	mov	r1, r3
 8003514:	4809      	ldr	r0, [pc, #36]	; (800353c <BSP_LCD_MspInit+0x1a8>)
 8003516:	f001 fa23 	bl	8004960 <HAL_GPIO_Init>
}
 800351a:	bf00      	nop
 800351c:	3738      	adds	r7, #56	; 0x38
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800

08003540 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003540:	b5b0      	push	{r4, r5, r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	603a      	str	r2, [r7, #0]
 800354a:	80fb      	strh	r3, [r7, #6]
 800354c:	460b      	mov	r3, r1
 800354e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <BSP_LCD_DrawPixel+0x8c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01f      	beq.n	8003598 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <BSP_LCD_DrawPixel+0x90>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <BSP_LCD_DrawPixel+0x94>)
 800355e:	2134      	movs	r1, #52	; 0x34
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	335c      	adds	r3, #92	; 0x5c
 8003568:	681c      	ldr	r4, [r3, #0]
 800356a:	f7ff fbb5 	bl	8002cd8 <BSP_LCD_GetXSize>
 800356e:	4605      	mov	r5, r0
 8003570:	f7ff fbbe 	bl	8002cf0 <BSP_LCD_GetYSize>
 8003574:	4603      	mov	r3, r0
 8003576:	fb03 f205 	mul.w	r2, r3, r5
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	1ad5      	subs	r5, r2, r3
 800357e:	f7ff fbab 	bl	8002cd8 <BSP_LCD_GetXSize>
 8003582:	4602      	mov	r2, r0
 8003584:	88bb      	ldrh	r3, [r7, #4]
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	1aeb      	subs	r3, r5, r3
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4423      	add	r3, r4
 8003590:	461a      	mov	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003596:	e015      	b.n	80035c4 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <BSP_LCD_DrawPixel+0x90>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <BSP_LCD_DrawPixel+0x94>)
 800359e:	2134      	movs	r1, #52	; 0x34
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	335c      	adds	r3, #92	; 0x5c
 80035a8:	681c      	ldr	r4, [r3, #0]
 80035aa:	88bd      	ldrh	r5, [r7, #4]
 80035ac:	f7ff fb94 	bl	8002cd8 <BSP_LCD_GetXSize>
 80035b0:	4603      	mov	r3, r0
 80035b2:	fb03 f205 	mul.w	r2, r3, r5
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4423      	add	r3, r4
 80035be:	461a      	mov	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6013      	str	r3, [r2, #0]
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	200009e4 	.word	0x200009e4
 80035d0:	200009c4 	.word	0x200009c4
 80035d4:	200008ac 	.word	0x200008ac

080035d8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	603a      	str	r2, [r7, #0]
 80035e2:	80fb      	strh	r3, [r7, #6]
 80035e4:	460b      	mov	r3, r1
 80035e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <DrawChar+0x16c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4953      	ldr	r1, [pc, #332]	; (8003748 <DrawChar+0x170>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3308      	adds	r3, #8
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	88db      	ldrh	r3, [r3, #6]
 800360a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800360c:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <DrawChar+0x16c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <DrawChar+0x170>)
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3308      	adds	r3, #8
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	889b      	ldrh	r3, [r3, #4]
 8003622:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003624:	8a3b      	ldrh	r3, [r7, #16]
 8003626:	3307      	adds	r3, #7
 8003628:	2b00      	cmp	r3, #0
 800362a:	da00      	bge.n	800362e <DrawChar+0x56>
 800362c:	3307      	adds	r3, #7
 800362e:	10db      	asrs	r3, r3, #3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	b2da      	uxtb	r2, r3
 8003636:	8a3b      	ldrh	r3, [r7, #16]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	e076      	b.n	8003732 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003644:	8a3b      	ldrh	r3, [r7, #16]
 8003646:	3307      	adds	r3, #7
 8003648:	2b00      	cmp	r3, #0
 800364a:	da00      	bge.n	800364e <DrawChar+0x76>
 800364c:	3307      	adds	r3, #7
 800364e:	10db      	asrs	r3, r3, #3
 8003650:	461a      	mov	r2, r3
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800365e:	8a3b      	ldrh	r3, [r7, #16]
 8003660:	3307      	adds	r3, #7
 8003662:	2b00      	cmp	r3, #0
 8003664:	da00      	bge.n	8003668 <DrawChar+0x90>
 8003666:	3307      	adds	r3, #7
 8003668:	10db      	asrs	r3, r3, #3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <DrawChar+0x9c>
 800366e:	2b02      	cmp	r3, #2
 8003670:	d004      	beq.n	800367c <DrawChar+0xa4>
 8003672:	e00c      	b.n	800368e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	617b      	str	r3, [r7, #20]
      break;
 800367a:	e016      	b.n	80036aa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	3201      	adds	r2, #1
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
      break;
 800368c:	e00d      	b.n	80036aa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3301      	adds	r3, #1
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	4313      	orrs	r3, r2
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	3202      	adds	r2, #2
 80036a2:	7812      	ldrb	r2, [r2, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
      break;
 80036a8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e036      	b.n	800371e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80036b0:	8a3a      	ldrh	r2, [r7, #16]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad2      	subs	r2, r2, r3
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	4413      	add	r3, r2
 80036ba:	3b01      	subs	r3, #1
 80036bc:	2201      	movs	r2, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4413      	add	r3, r2
 80036d4:	b298      	uxth	r0, r3
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <DrawChar+0x16c>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <DrawChar+0x170>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	88bb      	ldrh	r3, [r7, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	f7ff ff28 	bl	8003540 <BSP_LCD_DrawPixel>
 80036f0:	e012      	b.n	8003718 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	4413      	add	r3, r2
 80036fa:	b298      	uxth	r0, r3
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <DrawChar+0x16c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4911      	ldr	r1, [pc, #68]	; (8003748 <DrawChar+0x170>)
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3304      	adds	r3, #4
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	88bb      	ldrh	r3, [r7, #4]
 8003712:	4619      	mov	r1, r3
 8003714:	f7ff ff14 	bl	8003540 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	3301      	adds	r3, #1
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	8a3b      	ldrh	r3, [r7, #16]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3c4      	bcc.n	80036b0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003726:	88bb      	ldrh	r3, [r7, #4]
 8003728:	3301      	adds	r3, #1
 800372a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3301      	adds	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	8a7b      	ldrh	r3, [r7, #18]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	429a      	cmp	r2, r3
 8003738:	d384      	bcc.n	8003644 <DrawChar+0x6c>
  }
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	200009c4 	.word	0x200009c4
 8003748:	200009c8 	.word	0x200009c8

0800374c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <FillBuffer+0x68>)
 800375c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003760:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <FillBuffer+0x68>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <FillBuffer+0x68>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <FillBuffer+0x68>)
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <FillBuffer+0x6c>)
 8003772:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003774:	480f      	ldr	r0, [pc, #60]	; (80037b4 <FillBuffer+0x68>)
 8003776:	f000 fe5d 	bl	8004434 <HAL_DMA2D_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d115      	bne.n	80037ac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	480c      	ldr	r0, [pc, #48]	; (80037b4 <FillBuffer+0x68>)
 8003784:	f000 ffbe 	bl	8004704 <HAL_DMA2D_ConfigLayer>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69f9      	ldr	r1, [r7, #28]
 8003798:	4806      	ldr	r0, [pc, #24]	; (80037b4 <FillBuffer+0x68>)
 800379a:	f000 fe9e 	bl	80044da <HAL_DMA2D_Start>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80037a4:	210a      	movs	r1, #10
 80037a6:	4803      	ldr	r0, [pc, #12]	; (80037b4 <FillBuffer+0x68>)
 80037a8:	f000 fec2 	bl	8004530 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000954 	.word	0x20000954
 80037b8:	4002b000 	.word	0x4002b000

080037bc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <BSP_SDRAM_Init+0xb0>)
 80037c4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037c8:	2202      	movs	r2, #2
 80037ca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037ce:	2207      	movs	r2, #7
 80037d0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037d4:	2204      	movs	r2, #4
 80037d6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037da:	2207      	movs	r2, #7
 80037dc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037e0:	2202      	movs	r2, #2
 80037e2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80037e4:	4b22      	ldr	r3, [pc, #136]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037e6:	2202      	movs	r2, #2
 80037e8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037ec:	2202      	movs	r2, #2
 80037ee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037fe:	2204      	movs	r2, #4
 8003800:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003804:	2210      	movs	r2, #16
 8003806:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003808:	4b17      	ldr	r3, [pc, #92]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003810:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003814:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003818:	2200      	movs	r2, #0
 800381a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800381e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003822:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003826:	2200      	movs	r2, #0
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800382c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003830:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003832:	2100      	movs	r1, #0
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003836:	f000 f87f 	bl	8003938 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800383a:	490d      	ldr	r1, [pc, #52]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 800383c:	480a      	ldr	r0, [pc, #40]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800383e:	f003 fba9 	bl	8006f94 <HAL_SDRAM_Init>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <BSP_SDRAM_Init+0xb8>)
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e002      	b.n	8003856 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <BSP_SDRAM_Init+0xb8>)
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003856:	f240 506a 	movw	r0, #1386	; 0x56a
 800385a:	f000 f80d 	bl	8003878 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <BSP_SDRAM_Init+0xb8>)
 8003860:	781b      	ldrb	r3, [r3, #0]
}
 8003862:	4618      	mov	r0, r3
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200009e8 	.word	0x200009e8
 800386c:	a0000140 	.word	0xa0000140
 8003870:	20000a1c 	.word	0x20000a1c
 8003874:	2000036c 	.word	0x2000036c

08003878 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388c:	2208      	movs	r2, #8
 800388e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003892:	2201      	movs	r2, #1
 8003894:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003898:	2200      	movs	r2, #0
 800389a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800389c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a0:	4923      	ldr	r1, [pc, #140]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038a2:	4824      	ldr	r0, [pc, #144]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a4:	f003 fbb4 	bl	8007010 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80038a8:	2001      	movs	r0, #1
 80038aa:	f000 facf 	bl	8003e4c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038b0:	2202      	movs	r2, #2
 80038b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038b4:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038b6:	2208      	movs	r2, #8
 80038b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80038ba:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038bc:	2201      	movs	r2, #1
 80038be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80038c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ca:	4919      	ldr	r1, [pc, #100]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038cc:	4819      	ldr	r0, [pc, #100]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038ce:	f003 fb9f 	bl	8007010 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038d4:	2203      	movs	r2, #3
 80038d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038da:	2208      	movs	r2, #8
 80038dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038e0:	2204      	movs	r2, #4
 80038e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80038ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ee:	4910      	ldr	r1, [pc, #64]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038f0:	4810      	ldr	r0, [pc, #64]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038f2:	f003 fb8d 	bl	8007010 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80038f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80038fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038fe:	2204      	movs	r2, #4
 8003900:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003904:	2208      	movs	r2, #8
 8003906:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800390a:	2201      	movs	r2, #1
 800390c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003912:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003918:	4905      	ldr	r1, [pc, #20]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800391a:	4806      	ldr	r0, [pc, #24]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800391c:	f003 fb78 	bl	8007010 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4804      	ldr	r0, [pc, #16]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003924:	f003 fb9f 	bl	8007066 <HAL_SDRAM_ProgramRefreshRate>
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000a38 	.word	0x20000a38
 8003934:	200009e8 	.word	0x200009e8

08003938 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b090      	sub	sp, #64	; 0x40
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80ec 	beq.w	8003b22 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	4b77      	ldr	r3, [pc, #476]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	4a76      	ldr	r2, [pc, #472]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6393      	str	r3, [r2, #56]	; 0x38
 800395a:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
 800396a:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a6f      	ldr	r2, [pc, #444]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	4b69      	ldr	r3, [pc, #420]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a68      	ldr	r2, [pc, #416]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	623b      	str	r3, [r7, #32]
 800399c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	4b62      	ldr	r3, [pc, #392]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a61      	ldr	r2, [pc, #388]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a5a      	ldr	r2, [pc, #360]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b58      	ldr	r3, [pc, #352]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	4b54      	ldr	r3, [pc, #336]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a53      	ldr	r2, [pc, #332]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039e0:	f043 0310 	orr.w	r3, r3, #16
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	4b4d      	ldr	r3, [pc, #308]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a4c      	ldr	r2, [pc, #304]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b46      	ldr	r3, [pc, #280]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003a36:	230c      	movs	r3, #12
 8003a38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003a3a:	2360      	movs	r3, #96	; 0x60
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a42:	4619      	mov	r1, r3
 8003a44:	483a      	ldr	r0, [pc, #232]	; (8003b30 <BSP_SDRAM_MspInit+0x1f8>)
 8003a46:	f000 ff8b 	bl	8004960 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a52:	4619      	mov	r1, r3
 8003a54:	4837      	ldr	r0, [pc, #220]	; (8003b34 <BSP_SDRAM_MspInit+0x1fc>)
 8003a56:	f000 ff83 	bl	8004960 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003a5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a64:	4619      	mov	r1, r3
 8003a66:	4834      	ldr	r0, [pc, #208]	; (8003b38 <BSP_SDRAM_MspInit+0x200>)
 8003a68:	f000 ff7a 	bl	8004960 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003a6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a76:	4619      	mov	r1, r3
 8003a78:	4830      	ldr	r0, [pc, #192]	; (8003b3c <BSP_SDRAM_MspInit+0x204>)
 8003a7a:	f000 ff71 	bl	8004960 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003a7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a88:	4619      	mov	r1, r3
 8003a8a:	482d      	ldr	r0, [pc, #180]	; (8003b40 <BSP_SDRAM_MspInit+0x208>)
 8003a8c:	f000 ff68 	bl	8004960 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003a90:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4829      	ldr	r0, [pc, #164]	; (8003b44 <BSP_SDRAM_MspInit+0x20c>)
 8003a9e:	f000 ff5f 	bl	8004960 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003aa2:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003aa8:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003abc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003abe:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ac4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003acc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ada:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003af4:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <BSP_SDRAM_MspInit+0x214>)
 8003af8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
 8003b00:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003b06:	4810      	ldr	r0, [pc, #64]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003b08:	f000 fb84 	bl	8004214 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003b0c:	480e      	ldr	r0, [pc, #56]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003b0e:	f000 fad3 	bl	80040b8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	210f      	movs	r1, #15
 8003b16:	2038      	movs	r0, #56	; 0x38
 8003b18:	f000 fa97 	bl	800404a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003b1c:	2038      	movs	r0, #56	; 0x38
 8003b1e:	f000 fab0 	bl	8004082 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003b22:	bf00      	nop
 8003b24:	3740      	adds	r7, #64	; 0x40
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40020400 	.word	0x40020400
 8003b34:	40020800 	.word	0x40020800
 8003b38:	40020c00 	.word	0x40020c00
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40021400 	.word	0x40021400
 8003b44:	40021800 	.word	0x40021800
 8003b48:	20000a48 	.word	0x20000a48
 8003b4c:	40026410 	.word	0x40026410

08003b50 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	460a      	mov	r2, r1
 8003b5a:	80fb      	strh	r3, [r7, #6]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <BSP_TS_Init+0x64>)
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <BSP_TS_Init+0x68>)
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <BSP_TS_Init+0x6c>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2082      	movs	r0, #130	; 0x82
 8003b76:	4798      	blx	r3
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f640 0311 	movw	r3, #2065	; 0x811
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d104      	bne.n	8003b8e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <BSP_TS_Init+0x70>)
 8003b86:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <BSP_TS_Init+0x6c>)
 8003b88:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <BSP_TS_Init+0x70>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2082      	movs	r0, #130	; 0x82
 8003b9c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <BSP_TS_Init+0x70>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2082      	movs	r0, #130	; 0x82
 8003ba6:	4798      	blx	r3
  }

  return ret;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000aac 	.word	0x20000aac
 8003bb8:	20000aae 	.word	0x20000aae
 8003bbc:	20000314 	.word	0x20000314
 8003bc0:	20000aa8 	.word	0x20000aa8

08003bc4 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <BSP_TS_ITGetStatus+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	2082      	movs	r0, #130	; 0x82
 8003bd0:	4798      	blx	r3
 8003bd2:	4603      	mov	r3, r0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000aa8 	.word	0x20000aa8

08003bdc <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003be4:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <BSP_TS_GetState+0x148>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2082      	movs	r0, #130	; 0x82
 8003bec:	4798      	blx	r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 808d 	beq.w	8003d1a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <BSP_TS_GetState+0x148>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f107 020c 	add.w	r2, r7, #12
 8003c0a:	f107 010e 	add.w	r1, r7, #14
 8003c0e:	2082      	movs	r0, #130	; 0x82
 8003c10:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003c12:	89bb      	ldrh	r3, [r7, #12]
 8003c14:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003c1c:	89bb      	ldrh	r3, [r7, #12]
 8003c1e:	4a42      	ldr	r2, [pc, #264]	; (8003d28 <BSP_TS_GetState+0x14c>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003c28:	8abb      	ldrh	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	82bb      	strh	r3, [r7, #20]
 8003c32:	e008      	b.n	8003c46 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003c34:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <BSP_TS_GetState+0x150>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	8aba      	ldrh	r2, [r7, #20]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d903      	bls.n	8003c46 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <BSP_TS_GetState+0x150>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003c46:	8abb      	ldrh	r3, [r7, #20]
 8003c48:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d806      	bhi.n	8003c62 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003c54:	89fb      	ldrh	r3, [r7, #14]
 8003c56:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003c5a:	330e      	adds	r3, #14
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	81fb      	strh	r3, [r7, #14]
 8003c60:	e005      	b.n	8003c6e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003c62:	89fb      	ldrh	r3, [r7, #14]
 8003c64:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003c68:	3308      	adds	r3, #8
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003c6e:	89fb      	ldrh	r3, [r7, #14]
 8003c70:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <BSP_TS_GetState+0x154>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003c7a:	8afb      	ldrh	r3, [r7, #22]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	82fb      	strh	r3, [r7, #22]
 8003c84:	e008      	b.n	8003c98 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003c86:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <BSP_TS_GetState+0x158>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	8afa      	ldrh	r2, [r7, #22]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d903      	bls.n	8003c98 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003c90:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <BSP_TS_GetState+0x158>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003c98:	8afb      	ldrh	r3, [r7, #22]
 8003c9a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <BSP_TS_GetState+0x15c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d906      	bls.n	8003cb6 <BSP_TS_GetState+0xda>
 8003ca8:	89fa      	ldrh	r2, [r7, #14]
 8003caa:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <BSP_TS_GetState+0x15c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	e005      	b.n	8003cc2 <BSP_TS_GetState+0xe6>
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <BSP_TS_GetState+0x15c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	89fb      	ldrh	r3, [r7, #14]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003cc4:	89bb      	ldrh	r3, [r7, #12]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <BSP_TS_GetState+0x160>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d906      	bls.n	8003cde <BSP_TS_GetState+0x102>
 8003cd0:	89ba      	ldrh	r2, [r7, #12]
 8003cd2:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <BSP_TS_GetState+0x160>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	e005      	b.n	8003cea <BSP_TS_GetState+0x10e>
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <BSP_TS_GetState+0x160>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	89bb      	ldrh	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003cec:	8a7a      	ldrh	r2, [r7, #18]
 8003cee:	8a3b      	ldrh	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	dd07      	ble.n	8003d06 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003cf6:	89fb      	ldrh	r3, [r7, #14]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <BSP_TS_GetState+0x15c>)
 8003cfc:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003cfe:	89bb      	ldrh	r3, [r7, #12]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <BSP_TS_GetState+0x160>)
 8003d04:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <BSP_TS_GetState+0x15c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <BSP_TS_GetState+0x160>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	809a      	strh	r2, [r3, #4]
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000aa8 	.word	0x20000aa8
 8003d28:	ba2e8ba3 	.word	0xba2e8ba3
 8003d2c:	20000aae 	.word	0x20000aae
 8003d30:	88888889 	.word	0x88888889
 8003d34:	20000aac 	.word	0x20000aac
 8003d38:	20000ab0 	.word	0x20000ab0
 8003d3c:	20000ab4 	.word	0x20000ab4

08003d40 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <BSP_TS_ITClear+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	2082      	movs	r0, #130	; 0x82
 8003d4c:	4798      	blx	r3
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000aa8 	.word	0x20000aa8

08003d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <HAL_Init+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <HAL_Init+0x40>)
 8003d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_Init+0x40>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <HAL_Init+0x40>)
 8003d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <HAL_Init+0x40>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <HAL_Init+0x40>)
 8003d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d80:	2003      	movs	r0, #3
 8003d82:	f000 f957 	bl	8004034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d86:	200f      	movs	r0, #15
 8003d88:	f000 f810 	bl	8003dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d8c:	f000 f806 	bl	8003d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023c00 	.word	0x40023c00

08003d9c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_InitTick+0x54>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <HAL_InitTick+0x58>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f967 	bl	800409e <HAL_SYSTICK_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00e      	b.n	8003df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b0f      	cmp	r3, #15
 8003dde:	d80a      	bhi.n	8003df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003de0:	2200      	movs	r2, #0
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f000 f92f 	bl	800404a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dec:	4a06      	ldr	r2, [pc, #24]	; (8003e08 <HAL_InitTick+0x5c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200002d8 	.word	0x200002d8
 8003e04:	20000374 	.word	0x20000374
 8003e08:	20000370 	.word	0x20000370

08003e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_IncTick+0x20>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_IncTick+0x24>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_IncTick+0x24>)
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000374 	.word	0x20000374
 8003e30:	20000ab8 	.word	0x20000ab8

08003e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return uwTick;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_GetTick+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000ab8 	.word	0x20000ab8

08003e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7ff ffee 	bl	8003e34 <HAL_GetTick>
 8003e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d005      	beq.n	8003e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_Delay+0x44>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e72:	bf00      	nop
 8003e74:	f7ff ffde 	bl	8003e34 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d8f7      	bhi.n	8003e74 <HAL_Delay+0x28>
  {
  }
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000374 	.word	0x20000374

08003e94 <__NVIC_SetPriorityGrouping>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60d3      	str	r3, [r2, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_GetPriorityGrouping>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f003 0307 	and.w	r3, r3, #7
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <__NVIC_EnableIRQ>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db0b      	blt.n	8003f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <__NVIC_EnableIRQ+0x38>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e100 	.word	0xe000e100

08003f34 <__NVIC_SetPriority>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	db0a      	blt.n	8003f5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	490c      	ldr	r1, [pc, #48]	; (8003f80 <__NVIC_SetPriority+0x4c>)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	0112      	lsls	r2, r2, #4
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	440b      	add	r3, r1
 8003f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f5c:	e00a      	b.n	8003f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4908      	ldr	r1, [pc, #32]	; (8003f84 <__NVIC_SetPriority+0x50>)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	3b04      	subs	r3, #4
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	440b      	add	r3, r1
 8003f72:	761a      	strb	r2, [r3, #24]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000e100 	.word	0xe000e100
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f1c3 0307 	rsb	r3, r3, #7
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	bf28      	it	cs
 8003fa6:	2304      	movcs	r3, #4
 8003fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d902      	bls.n	8003fb8 <NVIC_EncodePriority+0x30>
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3b03      	subs	r3, #3
 8003fb6:	e000      	b.n	8003fba <NVIC_EncodePriority+0x32>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	401a      	ands	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	43d9      	mvns	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe0:	4313      	orrs	r3, r2
         );
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004000:	d301      	bcc.n	8004006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004002:	2301      	movs	r3, #1
 8004004:	e00f      	b.n	8004026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <SysTick_Config+0x40>)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400e:	210f      	movs	r1, #15
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	f7ff ff8e 	bl	8003f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <SysTick_Config+0x40>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <SysTick_Config+0x40>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000e010 	.word	0xe000e010

08004034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff ff29 	bl	8003e94 <__NVIC_SetPriorityGrouping>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800404a:	b580      	push	{r7, lr}
 800404c:	b086      	sub	sp, #24
 800404e:	af00      	add	r7, sp, #0
 8004050:	4603      	mov	r3, r0
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800405c:	f7ff ff3e 	bl	8003edc <__NVIC_GetPriorityGrouping>
 8004060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	6978      	ldr	r0, [r7, #20]
 8004068:	f7ff ff8e 	bl	8003f88 <NVIC_EncodePriority>
 800406c:	4602      	mov	r2, r0
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff5d 	bl	8003f34 <__NVIC_SetPriority>
}
 800407a:	bf00      	nop
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	4603      	mov	r3, r0
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800408c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff31 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ffa2 	bl	8003ff0 <SysTick_Config>
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040c4:	f7ff feb6 	bl	8003e34 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e099      	b.n	8004208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f4:	e00f      	b.n	8004116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040f6:	f7ff fe9d 	bl	8003e34 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b05      	cmp	r3, #5
 8004102:	d908      	bls.n	8004116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2203      	movs	r2, #3
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e078      	b.n	8004208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e8      	bne.n	80040f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_DMA_Init+0x158>)
 8004130:	4013      	ands	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800414e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800415a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b04      	cmp	r3, #4
 800416e:	d107      	bne.n	8004180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	4313      	orrs	r3, r2
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0307 	bic.w	r3, r3, #7
 8004196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d117      	bne.n	80041da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00e      	beq.n	80041da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8bd 	bl	800433c <DMA_CheckFifoParam>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2240      	movs	r2, #64	; 0x40
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041d6:	2301      	movs	r3, #1
 80041d8:	e016      	b.n	8004208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f874 	bl	80042d0 <DMA_CalcBaseAndBitshift>
 80041e8:	4603      	mov	r3, r0
 80041ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f0:	223f      	movs	r2, #63	; 0x3f
 80041f2:	409a      	lsls	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	f010803f 	.word	0xf010803f

08004214 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e050      	b.n	80042c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d101      	bne.n	8004236 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	e048      	b.n	80042c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2200      	movs	r2, #0
 8004254:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2221      	movs	r2, #33	; 0x21
 8004274:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f82a 	bl	80042d0 <DMA_CalcBaseAndBitshift>
 800427c:	4603      	mov	r3, r0
 800427e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	223f      	movs	r2, #63	; 0x3f
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	3b10      	subs	r3, #16
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <DMA_CalcBaseAndBitshift+0x64>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ea:	4a13      	ldr	r2, [pc, #76]	; (8004338 <DMA_CalcBaseAndBitshift+0x68>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d909      	bls.n	8004312 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	659a      	str	r2, [r3, #88]	; 0x58
 8004310:	e007      	b.n	8004322 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	aaaaaaab 	.word	0xaaaaaaab
 8004338:	0800d8f8 	.word	0x0800d8f8

0800433c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11f      	bne.n	8004396 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d856      	bhi.n	800440a <DMA_CheckFifoParam+0xce>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <DMA_CheckFifoParam+0x28>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004375 	.word	0x08004375
 8004368:	08004387 	.word	0x08004387
 800436c:	08004375 	.word	0x08004375
 8004370:	0800440b 	.word	0x0800440b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d046      	beq.n	800440e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004384:	e043      	b.n	800440e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800438e:	d140      	bne.n	8004412 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004394:	e03d      	b.n	8004412 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439e:	d121      	bne.n	80043e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d837      	bhi.n	8004416 <DMA_CheckFifoParam+0xda>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <DMA_CheckFifoParam+0x70>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043c3 	.word	0x080043c3
 80043b4:	080043bd 	.word	0x080043bd
 80043b8:	080043d5 	.word	0x080043d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      break;
 80043c0:	e030      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d025      	beq.n	800441a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d2:	e022      	b.n	800441a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043dc:	d11f      	bne.n	800441e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043e2:	e01c      	b.n	800441e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d903      	bls.n	80043f2 <DMA_CheckFifoParam+0xb6>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d003      	beq.n	80043f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043f0:	e018      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
      break;
 80043f6:	e015      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00e      	beq.n	8004422 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e00b      	b.n	8004422 <DMA_CheckFifoParam+0xe6>
      break;
 800440a:	bf00      	nop
 800440c:	e00a      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 800440e:	bf00      	nop
 8004410:	e008      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 8004412:	bf00      	nop
 8004414:	e006      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 8004416:	bf00      	nop
 8004418:	e004      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;   
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
      break;
 8004422:	bf00      	nop
    }
  } 
  
  return status; 
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop

08004434 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e03b      	b.n	80044be <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f833 	bl	80044c6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	f023 0107 	bic.w	r1, r3, #7
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800449e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68d1      	ldr	r1, [r2, #12]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_DMA2D_Start+0x1c>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e018      	b.n	8004528 <HAL_DMA2D_Start+0x4e>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f989 	bl	8004828 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d056      	beq.n	80045fa <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800454c:	f7ff fc72 	bl	8003e34 <HAL_GetTick>
 8004550:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004552:	e04b      	b.n	80045ec <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004562:	2b00      	cmp	r3, #0
 8004564:	d023      	beq.n	80045ae <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	f043 0202 	orr.w	r2, r3, #2
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2221      	movs	r2, #33	; 0x21
 8004598:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0a5      	b.n	80046fa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d01a      	beq.n	80045ec <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80045b6:	f7ff fc3d 	bl	8003e34 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <HAL_DMA2D_PollForTransfer+0x9c>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10f      	bne.n	80045ec <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2203      	movs	r2, #3
 80045dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e086      	b.n	80046fa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ac      	beq.n	8004554 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d061      	beq.n	80046e0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800461c:	f7ff fc0a 	bl	8003e34 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004622:	e056      	b.n	80046d2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02e      	beq.n	8004694 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004644:	f043 0204 	orr.w	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	f043 0202 	orr.w	r2, r3, #2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2229      	movs	r2, #41	; 0x29
 800467e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2204      	movs	r2, #4
 8004684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e032      	b.n	80046fa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d01a      	beq.n	80046d2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800469c:	f7ff fbca 	bl	8003e34 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d302      	bcc.n	80046b2 <HAL_DMA2D_PollForTransfer+0x182>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10f      	bne.n	80046d2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2203      	movs	r2, #3
 80046c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e013      	b.n	80046fa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0a1      	beq.n	8004624 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2212      	movs	r2, #18
 80046e6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_DMA2D_ConfigLayer+0x20>
 8004720:	2302      	movs	r3, #2
 8004722:	e079      	b.n	8004818 <HAL_DMA2D_ConfigLayer+0x114>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	3318      	adds	r3, #24
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800474e:	4b35      	ldr	r3, [pc, #212]	; (8004824 <HAL_DMA2D_ConfigLayer+0x120>)
 8004750:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b0a      	cmp	r3, #10
 8004758:	d003      	beq.n	8004762 <HAL_DMA2D_ConfigLayer+0x5e>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b09      	cmp	r3, #9
 8004760:	d107      	bne.n	8004772 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e005      	b.n	800477e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d120      	bne.n	80047c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	43db      	mvns	r3, r3
 800478e:	ea02 0103 	and.w	r1, r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	430a      	orrs	r2, r1
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b0a      	cmp	r3, #10
 80047ac:	d003      	beq.n	80047b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b09      	cmp	r3, #9
 80047b4:	d127      	bne.n	8004806 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
 80047c4:	e01f      	b.n	8004806 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	ea02 0103 	and.w	r1, r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b0a      	cmp	r3, #10
 80047ee:	d003      	beq.n	80047f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	d106      	bne.n	8004806 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004804:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	ff03000f 	.word	0xff03000f

08004828 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004828:	b480      	push	{r7}
 800482a:	b08b      	sub	sp, #44	; 0x2c
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	041a      	lsls	r2, r3, #16
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	431a      	orrs	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004860:	d174      	bne.n	800494c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004868:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004870:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004878:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	431a      	orrs	r2, r3
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	4313      	orrs	r3, r2
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
 8004898:	e053      	b.n	8004942 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d106      	bne.n	80048b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	e048      	b.n	8004942 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d111      	bne.n	80048dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	0cdb      	lsrs	r3, r3, #19
 80048bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	0a9b      	lsrs	r3, r3, #10
 80048c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	08db      	lsrs	r3, r3, #3
 80048c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	02db      	lsls	r3, r3, #11
 80048d2:	4313      	orrs	r3, r2
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	e032      	b.n	8004942 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d117      	bne.n	8004914 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	0fdb      	lsrs	r3, r3, #31
 80048e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	0cdb      	lsrs	r3, r3, #19
 80048ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	0adb      	lsrs	r3, r3, #11
 80048f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	431a      	orrs	r2, r3
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	03db      	lsls	r3, r3, #15
 800490a:	4313      	orrs	r3, r2
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	e016      	b.n	8004942 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	0f1b      	lsrs	r3, r3, #28
 8004918:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	0d1b      	lsrs	r3, r3, #20
 800491e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	0b1b      	lsrs	r3, r3, #12
 8004924:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	011a      	lsls	r2, r3, #4
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	431a      	orrs	r2, r3
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	031b      	lsls	r3, r3, #12
 800493a:	4313      	orrs	r3, r2
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800494a:	e003      	b.n	8004954 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	60da      	str	r2, [r3, #12]
}
 8004954:	bf00      	nop
 8004956:	372c      	adds	r7, #44	; 0x2c
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004972:	2300      	movs	r3, #0
 8004974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	e177      	b.n	8004c6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800497c:	2201      	movs	r2, #1
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4013      	ands	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	429a      	cmp	r2, r3
 8004996:	f040 8166 	bne.w	8004c66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d00b      	beq.n	80049ba <HAL_GPIO_Init+0x5a>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d007      	beq.n	80049ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049ae:	2b11      	cmp	r3, #17
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b12      	cmp	r3, #18
 80049b8:	d130      	bne.n	8004a1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	2203      	movs	r2, #3
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f0:	2201      	movs	r2, #1
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 0201 	and.w	r2, r3, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	2203      	movs	r2, #3
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d003      	beq.n	8004a5c <HAL_GPIO_Init+0xfc>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b12      	cmp	r3, #18
 8004a5a:	d123      	bne.n	8004aa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	08da      	lsrs	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3208      	adds	r2, #8
 8004a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	220f      	movs	r2, #15
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	08da      	lsrs	r2, r3, #3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3208      	adds	r2, #8
 8004a9e:	69b9      	ldr	r1, [r7, #24]
 8004aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 0203 	and.w	r2, r3, #3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80c0 	beq.w	8004c66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	4b66      	ldr	r3, [pc, #408]	; (8004c84 <HAL_GPIO_Init+0x324>)
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	4a65      	ldr	r2, [pc, #404]	; (8004c84 <HAL_GPIO_Init+0x324>)
 8004af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af4:	6453      	str	r3, [r2, #68]	; 0x44
 8004af6:	4b63      	ldr	r3, [pc, #396]	; (8004c84 <HAL_GPIO_Init+0x324>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b02:	4a61      	ldr	r2, [pc, #388]	; (8004c88 <HAL_GPIO_Init+0x328>)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	3302      	adds	r3, #2
 8004b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	220f      	movs	r2, #15
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <HAL_GPIO_Init+0x32c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d037      	beq.n	8004b9e <HAL_GPIO_Init+0x23e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a57      	ldr	r2, [pc, #348]	; (8004c90 <HAL_GPIO_Init+0x330>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d031      	beq.n	8004b9a <HAL_GPIO_Init+0x23a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a56      	ldr	r2, [pc, #344]	; (8004c94 <HAL_GPIO_Init+0x334>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02b      	beq.n	8004b96 <HAL_GPIO_Init+0x236>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a55      	ldr	r2, [pc, #340]	; (8004c98 <HAL_GPIO_Init+0x338>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d025      	beq.n	8004b92 <HAL_GPIO_Init+0x232>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a54      	ldr	r2, [pc, #336]	; (8004c9c <HAL_GPIO_Init+0x33c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01f      	beq.n	8004b8e <HAL_GPIO_Init+0x22e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a53      	ldr	r2, [pc, #332]	; (8004ca0 <HAL_GPIO_Init+0x340>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d019      	beq.n	8004b8a <HAL_GPIO_Init+0x22a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_GPIO_Init+0x344>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_GPIO_Init+0x226>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a51      	ldr	r2, [pc, #324]	; (8004ca8 <HAL_GPIO_Init+0x348>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00d      	beq.n	8004b82 <HAL_GPIO_Init+0x222>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a50      	ldr	r2, [pc, #320]	; (8004cac <HAL_GPIO_Init+0x34c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <HAL_GPIO_Init+0x21e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4f      	ldr	r2, [pc, #316]	; (8004cb0 <HAL_GPIO_Init+0x350>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_GPIO_Init+0x21a>
 8004b76:	2309      	movs	r3, #9
 8004b78:	e012      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	e010      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	e00e      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b82:	2307      	movs	r3, #7
 8004b84:	e00c      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b86:	2306      	movs	r3, #6
 8004b88:	e00a      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b8a:	2305      	movs	r3, #5
 8004b8c:	e008      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	e006      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b92:	2303      	movs	r3, #3
 8004b94:	e004      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e002      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_GPIO_Init+0x240>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	f002 0203 	and.w	r2, r2, #3
 8004ba6:	0092      	lsls	r2, r2, #2
 8004ba8:	4093      	lsls	r3, r2
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bb0:	4935      	ldr	r1, [pc, #212]	; (8004c88 <HAL_GPIO_Init+0x328>)
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	089b      	lsrs	r3, r3, #2
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bbe:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004be2:	4a34      	ldr	r2, [pc, #208]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004be8:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c0c:	4a29      	ldr	r2, [pc, #164]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c12:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c36:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c60:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <HAL_GPIO_Init+0x354>)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	f67f ae84 	bls.w	800497c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	40020000 	.word	0x40020000
 8004c90:	40020400 	.word	0x40020400
 8004c94:	40020800 	.word	0x40020800
 8004c98:	40020c00 	.word	0x40020c00
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40021400 	.word	0x40021400
 8004ca4:	40021800 	.word	0x40021800
 8004ca8:	40021c00 	.word	0x40021c00
 8004cac:	40022000 	.word	0x40022000
 8004cb0:	40022400 	.word	0x40022400
 8004cb4:	40013c00 	.word	0x40013c00

08004cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	e001      	b.n	8004cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cf8:	787b      	ldrb	r3, [r7, #1]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cfe:	887a      	ldrh	r2, [r7, #2]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d04:	e003      	b.n	8004d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	041a      	lsls	r2, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	619a      	str	r2, [r3, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695a      	ldr	r2, [r3, #20]
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	887b      	ldrh	r3, [r7, #2]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d104      	bne.n	8004d3e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d34:	887b      	ldrh	r3, [r7, #2]
 8004d36:	041a      	lsls	r2, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d3c:	e002      	b.n	8004d44 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d3e:	887a      	ldrh	r2, [r7, #2]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	619a      	str	r2, [r3, #24]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e12b      	b.n	8004fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f95d 	bl	8005036 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2224      	movs	r2, #36	; 0x24
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004db4:	f001 ff1a 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 8004db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4a81      	ldr	r2, [pc, #516]	; (8004fc4 <HAL_I2C_Init+0x274>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d807      	bhi.n	8004dd4 <HAL_I2C_Init+0x84>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a80      	ldr	r2, [pc, #512]	; (8004fc8 <HAL_I2C_Init+0x278>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	bf94      	ite	ls
 8004dcc:	2301      	movls	r3, #1
 8004dce:	2300      	movhi	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e006      	b.n	8004de2 <HAL_I2C_Init+0x92>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a7d      	ldr	r2, [pc, #500]	; (8004fcc <HAL_I2C_Init+0x27c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bf94      	ite	ls
 8004ddc:	2301      	movls	r3, #1
 8004dde:	2300      	movhi	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0e7      	b.n	8004fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a78      	ldr	r2, [pc, #480]	; (8004fd0 <HAL_I2C_Init+0x280>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	0c9b      	lsrs	r3, r3, #18
 8004df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a6a      	ldr	r2, [pc, #424]	; (8004fc4 <HAL_I2C_Init+0x274>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d802      	bhi.n	8004e24 <HAL_I2C_Init+0xd4>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3301      	adds	r3, #1
 8004e22:	e009      	b.n	8004e38 <HAL_I2C_Init+0xe8>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	4a69      	ldr	r2, [pc, #420]	; (8004fd4 <HAL_I2C_Init+0x284>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	099b      	lsrs	r3, r3, #6
 8004e36:	3301      	adds	r3, #1
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	495c      	ldr	r1, [pc, #368]	; (8004fc4 <HAL_I2C_Init+0x274>)
 8004e54:	428b      	cmp	r3, r1
 8004e56:	d819      	bhi.n	8004e8c <HAL_I2C_Init+0x13c>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1e59      	subs	r1, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e66:	1c59      	adds	r1, r3, #1
 8004e68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e6c:	400b      	ands	r3, r1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_I2C_Init+0x138>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1e59      	subs	r1, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e80:	3301      	adds	r3, #1
 8004e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e86:	e051      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	e04f      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d111      	bne.n	8004eb8 <HAL_I2C_Init+0x168>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1e58      	subs	r0, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	440b      	add	r3, r1
 8004ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e012      	b.n	8004ede <HAL_I2C_Init+0x18e>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e58      	subs	r0, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6859      	ldr	r1, [r3, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	0099      	lsls	r1, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_Init+0x196>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e022      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10e      	bne.n	8004f0c <HAL_I2C_Init+0x1bc>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1e58      	subs	r0, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6859      	ldr	r1, [r3, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	440b      	add	r3, r1
 8004efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f00:	3301      	adds	r3, #1
 8004f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0a:	e00f      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1e58      	subs	r0, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	0099      	lsls	r1, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f22:	3301      	adds	r3, #1
 8004f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	6809      	ldr	r1, [r1, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6911      	ldr	r1, [r2, #16]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d2      	ldr	r2, [r2, #12]
 8004f66:	4311      	orrs	r1, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	000186a0 	.word	0x000186a0
 8004fc8:	001e847f 	.word	0x001e847f
 8004fcc:	003d08ff 	.word	0x003d08ff
 8004fd0:	431bde83 	.word	0x431bde83
 8004fd4:	10624dd3 	.word	0x10624dd3

08004fd8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e021      	b.n	800502e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2224      	movs	r2, #36	; 0x24
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f821 	bl	800504a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	461a      	mov	r2, r3
 800506e:	4603      	mov	r3, r0
 8005070:	817b      	strh	r3, [r7, #10]
 8005072:	460b      	mov	r3, r1
 8005074:	813b      	strh	r3, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800507a:	f7fe fedb 	bl	8003e34 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b20      	cmp	r3, #32
 800508a:	f040 80d9 	bne.w	8005240 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	2319      	movs	r3, #25
 8005094:	2201      	movs	r2, #1
 8005096:	496d      	ldr	r1, [pc, #436]	; (800524c <HAL_I2C_Mem_Write+0x1ec>)
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fc89 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
 80050a6:	e0cc      	b.n	8005242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_I2C_Mem_Write+0x56>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e0c5      	b.n	8005242 <HAL_I2C_Mem_Write+0x1e2>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d007      	beq.n	80050dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2221      	movs	r2, #33	; 0x21
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2240      	movs	r2, #64	; 0x40
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a4d      	ldr	r2, [pc, #308]	; (8005250 <HAL_I2C_Mem_Write+0x1f0>)
 800511c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800511e:	88f8      	ldrh	r0, [r7, #6]
 8005120:	893a      	ldrh	r2, [r7, #8]
 8005122:	8979      	ldrh	r1, [r7, #10]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	4603      	mov	r3, r0
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fac4 	bl	80056bc <I2C_RequestMemoryWrite>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d052      	beq.n	80051e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e081      	b.n	8005242 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fd0a 	bl	8005b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b04      	cmp	r3, #4
 8005154:	d107      	bne.n	8005166 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06b      	b.n	8005242 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d11b      	bne.n	80051e0 <HAL_I2C_Mem_Write+0x180>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d017      	beq.n	80051e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	781a      	ldrb	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1aa      	bne.n	800513e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fcf6 	bl	8005bde <I2C_WaitOnBTFFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d107      	bne.n	8005210 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e016      	b.n	8005242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	00100002 	.word	0x00100002
 8005250:	ffff0000 	.word	0xffff0000

08005254 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08c      	sub	sp, #48	; 0x30
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4603      	mov	r3, r0
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	460b      	mov	r3, r1
 8005268:	813b      	strh	r3, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800526e:	f7fe fde1 	bl	8003e34 <HAL_GetTick>
 8005272:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b20      	cmp	r3, #32
 800527e:	f040 8208 	bne.w	8005692 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	2319      	movs	r3, #25
 8005288:	2201      	movs	r2, #1
 800528a:	497b      	ldr	r1, [pc, #492]	; (8005478 <HAL_I2C_Mem_Read+0x224>)
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fb8f 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005298:	2302      	movs	r3, #2
 800529a:	e1fb      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_I2C_Mem_Read+0x56>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e1f4      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d007      	beq.n	80052d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2222      	movs	r2, #34	; 0x22
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a5b      	ldr	r2, [pc, #364]	; (800547c <HAL_I2C_Mem_Read+0x228>)
 8005310:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005312:	88f8      	ldrh	r0, [r7, #6]
 8005314:	893a      	ldrh	r2, [r7, #8]
 8005316:	8979      	ldrh	r1, [r7, #10]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	4603      	mov	r3, r0
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fa5e 	bl	80057e4 <I2C_RequestMemoryRead>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e1b0      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d113      	bne.n	8005362 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533a:	2300      	movs	r3, #0
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	623b      	str	r3, [r7, #32]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e184      	b.n	800566c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005366:	2b01      	cmp	r3, #1
 8005368:	d11b      	bne.n	80053a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e164      	b.n	800566c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d11b      	bne.n	80053e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	e144      	b.n	800566c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053f8:	e138      	b.n	800566c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	2b03      	cmp	r3, #3
 8005400:	f200 80f1 	bhi.w	80055e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	2b01      	cmp	r3, #1
 800540a:	d123      	bne.n	8005454 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800540c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fc25 	bl	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e139      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005452:	e10b      	b.n	800566c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	2b02      	cmp	r3, #2
 800545a:	d14e      	bne.n	80054fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	2200      	movs	r2, #0
 8005464:	4906      	ldr	r1, [pc, #24]	; (8005480 <HAL_I2C_Mem_Read+0x22c>)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 faa2 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d008      	beq.n	8005484 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e10e      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
 8005476:	bf00      	nop
 8005478:	00100002 	.word	0x00100002
 800547c:	ffff0000 	.word	0xffff0000
 8005480:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054f8:	e0b8      	b.n	800566c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2200      	movs	r2, #0
 8005502:	4966      	ldr	r1, [pc, #408]	; (800569c <HAL_I2C_Mem_Read+0x448>)
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 fa53 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0bf      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2200      	movs	r2, #0
 800555e:	494f      	ldr	r1, [pc, #316]	; (800569c <HAL_I2C_Mem_Read+0x448>)
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fa25 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e091      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055e4:	e042      	b.n	800566c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fb38 	bl	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e04c      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b04      	cmp	r3, #4
 8005638:	d118      	bne.n	800566c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f aec2 	bne.w	80053fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e000      	b.n	8005694 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	00010004 	.word	0x00010004

080056a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	b2db      	uxtb	r3, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	4608      	mov	r0, r1
 80056c6:	4611      	mov	r1, r2
 80056c8:	461a      	mov	r2, r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	817b      	strh	r3, [r7, #10]
 80056ce:	460b      	mov	r3, r1
 80056d0:	813b      	strh	r3, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f95c 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00c      	beq.n	8005718 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e05f      	b.n	80057d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005718:	897b      	ldrh	r3, [r7, #10]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005726:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	492c      	ldr	r1, [pc, #176]	; (80057e0 <I2C_RequestMemoryWrite+0x124>)
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f995 	bl	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e04c      	b.n	80057d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	6a39      	ldr	r1, [r7, #32]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f9ff 	bl	8005b5c <I2C_WaitOnTXEFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b04      	cmp	r3, #4
 800576a:	d107      	bne.n	800577c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e02b      	b.n	80057d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d105      	bne.n	8005792 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005786:	893b      	ldrh	r3, [r7, #8]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]
 8005790:	e021      	b.n	80057d6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005792:	893b      	ldrh	r3, [r7, #8]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	b29b      	uxth	r3, r3
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	6a39      	ldr	r1, [r7, #32]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f9d9 	bl	8005b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00d      	beq.n	80057cc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d107      	bne.n	80057c8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e005      	b.n	80057d8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057cc:	893b      	ldrh	r3, [r7, #8]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	00010002 	.word	0x00010002

080057e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	817b      	strh	r3, [r7, #10]
 80057f6:	460b      	mov	r3, r1
 80057f8:	813b      	strh	r3, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800580c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800581c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2200      	movs	r2, #0
 8005826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f8c0 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0a9      	b.n	80059a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005850:	897b      	ldrh	r3, [r7, #10]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800585e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	4951      	ldr	r1, [pc, #324]	; (80059ac <I2C_RequestMemoryRead+0x1c8>)
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f8f9 	bl	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e096      	b.n	80059a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800588c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588e:	6a39      	ldr	r1, [r7, #32]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f963 	bl	8005b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d107      	bne.n	80058b4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e075      	b.n	80059a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d105      	bne.n	80058ca <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058be:	893b      	ldrh	r3, [r7, #8]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	e021      	b.n	800590e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	6a39      	ldr	r1, [r7, #32]
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f93d 	bl	8005b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d107      	bne.n	8005900 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e04f      	b.n	80059a4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005904:	893b      	ldrh	r3, [r7, #8]
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	6a39      	ldr	r1, [r7, #32]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f922 	bl	8005b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	2b04      	cmp	r3, #4
 8005924:	d107      	bne.n	8005936 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e034      	b.n	80059a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2200      	movs	r2, #0
 8005952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f82a 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00c      	beq.n	800597c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e013      	b.n	80059a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800597c:	897b      	ldrh	r3, [r7, #10]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	b2da      	uxtb	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	6a3a      	ldr	r2, [r7, #32]
 8005990:	4906      	ldr	r1, [pc, #24]	; (80059ac <I2C_RequestMemoryRead+0x1c8>)
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f863 	bl	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	00010002 	.word	0x00010002

080059b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c0:	e025      	b.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d021      	beq.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ca:	f7fe fa33 	bl	8003e34 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d116      	bne.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e023      	b.n	8005a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d10d      	bne.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bf0c      	ite	eq
 8005a2a:	2301      	moveq	r3, #1
 8005a2c:	2300      	movne	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	e00c      	b.n	8005a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	43da      	mvns	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d0b6      	beq.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a6c:	e051      	b.n	8005b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7c:	d123      	bne.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f043 0204 	orr.w	r2, r3, #4
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e046      	b.n	8005b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d021      	beq.n	8005b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fe f9b1 	bl	8003e34 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d116      	bne.n	8005b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f043 0220 	orr.w	r2, r3, #32
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e020      	b.n	8005b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d10c      	bne.n	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	43da      	mvns	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bf14      	ite	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	2300      	moveq	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	e00b      	b.n	8005b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	43da      	mvns	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4013      	ands	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d18d      	bne.n	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b68:	e02d      	b.n	8005bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f8ce 	bl	8005d0c <I2C_IsAcknowledgeFailed>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e02d      	b.n	8005bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d021      	beq.n	8005bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b82:	f7fe f957 	bl	8003e34 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d302      	bcc.n	8005b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d116      	bne.n	8005bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f043 0220 	orr.w	r2, r3, #32
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e007      	b.n	8005bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd0:	2b80      	cmp	r3, #128	; 0x80
 8005bd2:	d1ca      	bne.n	8005b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bea:	e02d      	b.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f88d 	bl	8005d0c <I2C_IsAcknowledgeFailed>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e02d      	b.n	8005c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d021      	beq.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c04:	f7fe f916 	bl	8003e34 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d116      	bne.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e007      	b.n	8005c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d1ca      	bne.n	8005bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c6c:	e042      	b.n	8005cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d119      	bne.n	8005cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0210 	mvn.w	r2, #16
 8005c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e029      	b.n	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb0:	f7fe f8c0 	bl	8003e34 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d302      	bcc.n	8005cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d116      	bne.n	8005cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	f043 0220 	orr.w	r2, r3, #32
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e007      	b.n	8005d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d1b5      	bne.n	8005c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d22:	d11b      	bne.n	8005d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f043 0204 	orr.w	r2, r3, #4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e0bf      	b.n	8005efe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f8ba 	bl	8005f0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005dae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6999      	ldr	r1, [r3, #24]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dc4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6899      	ldr	r1, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b4a      	ldr	r3, [pc, #296]	; (8005f08 <HAL_LTDC_Init+0x19c>)
 8005de0:	400b      	ands	r3, r1
 8005de2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6899      	ldr	r1, [r3, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68d9      	ldr	r1, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b3e      	ldr	r3, [pc, #248]	; (8005f08 <HAL_LTDC_Init+0x19c>)
 8005e0e:	400b      	ands	r3, r1
 8005e10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68d9      	ldr	r1, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6919      	ldr	r1, [r3, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <HAL_LTDC_Init+0x19c>)
 8005e3c:	400b      	ands	r3, r1
 8005e3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6919      	ldr	r1, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6959      	ldr	r1, [r3, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <HAL_LTDC_Init+0x19c>)
 8005e6a:	400b      	ands	r3, r1
 8005e6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6959      	ldr	r1, [r3, #20]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0206 	orr.w	r2, r2, #6
 8005eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	f000f800 	.word	0xf000f800

08005f0c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f20:	b5b0      	push	{r4, r5, r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_LTDC_ConfigLayer+0x1a>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e02c      	b.n	8005f94 <HAL_LTDC_ConfigLayer+0x74>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2134      	movs	r1, #52	; 0x34
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	4413      	add	r3, r2
 8005f56:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	461d      	mov	r5, r3
 8005f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f83b 	bl	8005ff0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bdb0      	pop	{r4, r5, r7, pc}

08005f9c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_LTDC_EnableDither+0x16>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e016      	b.n	8005fe0 <HAL_LTDC_EnableDither+0x44>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <HAL_LTDC_EnableDither+0x50>)
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	4a09      	ldr	r2, [pc, #36]	; (8005fec <HAL_LTDC_EnableDither+0x50>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fcc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	40016800 	.word	0x40016800

08005ff0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	; 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600c:	4413      	add	r3, r2
 800600e:	041b      	lsls	r3, r3, #16
 8006010:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	01db      	lsls	r3, r3, #7
 800601c:	4413      	add	r3, r2
 800601e:	3384      	adds	r3, #132	; 0x84
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	4611      	mov	r1, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	01d2      	lsls	r2, r2, #7
 800602c:	440a      	add	r2, r1
 800602e:	3284      	adds	r2, #132	; 0x84
 8006030:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006034:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006046:	4413      	add	r3, r2
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4619      	mov	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	01db      	lsls	r3, r3, #7
 8006054:	440b      	add	r3, r1
 8006056:	3384      	adds	r3, #132	; 0x84
 8006058:	4619      	mov	r1, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4313      	orrs	r3, r2
 800605e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800606e:	4413      	add	r3, r2
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	01db      	lsls	r3, r3, #7
 800607e:	4413      	add	r3, r2
 8006080:	3384      	adds	r3, #132	; 0x84
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	4611      	mov	r1, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	01d2      	lsls	r2, r2, #7
 800608e:	440a      	add	r2, r1
 8006090:	3284      	adds	r2, #132	; 0x84
 8006092:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006096:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060a6:	4413      	add	r3, r2
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	01db      	lsls	r3, r3, #7
 80060b4:	440b      	add	r3, r1
 80060b6:	3384      	adds	r3, #132	; 0x84
 80060b8:	4619      	mov	r1, r3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	01db      	lsls	r3, r3, #7
 80060ca:	4413      	add	r3, r2
 80060cc:	3384      	adds	r3, #132	; 0x84
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	4611      	mov	r1, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	01d2      	lsls	r2, r2, #7
 80060da:	440a      	add	r2, r1
 80060dc:	3284      	adds	r2, #132	; 0x84
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	01db      	lsls	r3, r3, #7
 80060ee:	4413      	add	r3, r2
 80060f0:	3384      	adds	r3, #132	; 0x84
 80060f2:	461a      	mov	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	01db      	lsls	r3, r3, #7
 8006120:	4413      	add	r3, r2
 8006122:	3384      	adds	r3, #132	; 0x84
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	01db      	lsls	r3, r3, #7
 8006130:	4413      	add	r3, r2
 8006132:	3384      	adds	r3, #132	; 0x84
 8006134:	461a      	mov	r2, r3
 8006136:	2300      	movs	r3, #0
 8006138:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006140:	461a      	mov	r2, r3
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	431a      	orrs	r2, r3
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4619      	mov	r1, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	01db      	lsls	r3, r3, #7
 8006154:	440b      	add	r3, r1
 8006156:	3384      	adds	r3, #132	; 0x84
 8006158:	4619      	mov	r1, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	01db      	lsls	r3, r3, #7
 800616a:	4413      	add	r3, r2
 800616c:	3384      	adds	r3, #132	; 0x84
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	4611      	mov	r1, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	01d2      	lsls	r2, r2, #7
 800617a:	440a      	add	r2, r1
 800617c:	3284      	adds	r2, #132	; 0x84
 800617e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006182:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	4413      	add	r3, r2
 8006190:	3384      	adds	r3, #132	; 0x84
 8006192:	461a      	mov	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	4413      	add	r3, r2
 80061a6:	3384      	adds	r3, #132	; 0x84
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	4611      	mov	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	01d2      	lsls	r2, r2, #7
 80061b4:	440a      	add	r2, r1
 80061b6:	3284      	adds	r2, #132	; 0x84
 80061b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6809      	ldr	r1, [r1, #0]
 80061ce:	4608      	mov	r0, r1
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	01c9      	lsls	r1, r1, #7
 80061d4:	4401      	add	r1, r0
 80061d6:	3184      	adds	r1, #132	; 0x84
 80061d8:	4313      	orrs	r3, r2
 80061da:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	01db      	lsls	r3, r3, #7
 80061e6:	4413      	add	r3, r2
 80061e8:	3384      	adds	r3, #132	; 0x84
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	01db      	lsls	r3, r3, #7
 80061f6:	4413      	add	r3, r2
 80061f8:	3384      	adds	r3, #132	; 0x84
 80061fa:	461a      	mov	r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	01db      	lsls	r3, r3, #7
 800620a:	4413      	add	r3, r2
 800620c:	3384      	adds	r3, #132	; 0x84
 800620e:	461a      	mov	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800621e:	2304      	movs	r3, #4
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	e01b      	b.n	800625c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800622c:	2303      	movs	r3, #3
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e014      	b.n	800625c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d00b      	beq.n	8006252 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800623e:	2b02      	cmp	r3, #2
 8006240:	d007      	beq.n	8006252 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006246:	2b03      	cmp	r3, #3
 8006248:	d003      	beq.n	8006252 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800624e:	2b07      	cmp	r3, #7
 8006250:	d102      	bne.n	8006258 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006252:	2302      	movs	r3, #2
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	e001      	b.n	800625c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006258:	2301      	movs	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	01db      	lsls	r3, r3, #7
 8006266:	4413      	add	r3, r2
 8006268:	3384      	adds	r3, #132	; 0x84
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	4611      	mov	r1, r2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	01d2      	lsls	r2, r2, #7
 8006276:	440a      	add	r2, r1
 8006278:	3284      	adds	r2, #132	; 0x84
 800627a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800627e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	041a      	lsls	r2, r3, #16
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1acb      	subs	r3, r1, r3
 8006296:	69f9      	ldr	r1, [r7, #28]
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	3303      	adds	r3, #3
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	6809      	ldr	r1, [r1, #0]
 80062a2:	4608      	mov	r0, r1
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	01c9      	lsls	r1, r1, #7
 80062a8:	4401      	add	r1, r0
 80062aa:	3184      	adds	r1, #132	; 0x84
 80062ac:	4313      	orrs	r3, r2
 80062ae:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	01db      	lsls	r3, r3, #7
 80062ba:	4413      	add	r3, r2
 80062bc:	3384      	adds	r3, #132	; 0x84
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	4611      	mov	r1, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	01d2      	lsls	r2, r2, #7
 80062ca:	440a      	add	r2, r1
 80062cc:	3284      	adds	r2, #132	; 0x84
 80062ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062d2:	f023 0307 	bic.w	r3, r3, #7
 80062d6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	01db      	lsls	r3, r3, #7
 80062e2:	4413      	add	r3, r2
 80062e4:	3384      	adds	r3, #132	; 0x84
 80062e6:	461a      	mov	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	4413      	add	r3, r2
 80062fa:	3384      	adds	r3, #132	; 0x84
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	4611      	mov	r1, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	01d2      	lsls	r2, r2, #7
 8006308:	440a      	add	r2, r1
 800630a:	3284      	adds	r2, #132	; 0x84
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	6013      	str	r3, [r2, #0]
}
 8006312:	bf00      	nop
 8006314:	3724      	adds	r7, #36	; 0x24
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e25e      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d075      	beq.n	800642a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800633e:	4b88      	ldr	r3, [pc, #544]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
 8006346:	2b04      	cmp	r3, #4
 8006348:	d00c      	beq.n	8006364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800634a:	4b85      	ldr	r3, [pc, #532]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006352:	2b08      	cmp	r3, #8
 8006354:	d112      	bne.n	800637c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006356:	4b82      	ldr	r3, [pc, #520]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006362:	d10b      	bne.n	800637c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006364:	4b7e      	ldr	r3, [pc, #504]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d05b      	beq.n	8006428 <HAL_RCC_OscConfig+0x108>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d157      	bne.n	8006428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e239      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006384:	d106      	bne.n	8006394 <HAL_RCC_OscConfig+0x74>
 8006386:	4b76      	ldr	r3, [pc, #472]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a75      	ldr	r2, [pc, #468]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e01d      	b.n	80063d0 <HAL_RCC_OscConfig+0xb0>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800639c:	d10c      	bne.n	80063b8 <HAL_RCC_OscConfig+0x98>
 800639e:	4b70      	ldr	r3, [pc, #448]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a6f      	ldr	r2, [pc, #444]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b6d      	ldr	r3, [pc, #436]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a6c      	ldr	r2, [pc, #432]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e00b      	b.n	80063d0 <HAL_RCC_OscConfig+0xb0>
 80063b8:	4b69      	ldr	r3, [pc, #420]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a68      	ldr	r2, [pc, #416]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	4b66      	ldr	r3, [pc, #408]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a65      	ldr	r2, [pc, #404]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d013      	beq.n	8006400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d8:	f7fd fd2c 	bl	8003e34 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063e0:	f7fd fd28 	bl	8003e34 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b64      	cmp	r3, #100	; 0x64
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e1fe      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f2:	4b5b      	ldr	r3, [pc, #364]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCC_OscConfig+0xc0>
 80063fe:	e014      	b.n	800642a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006400:	f7fd fd18 	bl	8003e34 <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006408:	f7fd fd14 	bl	8003e34 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b64      	cmp	r3, #100	; 0x64
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e1ea      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641a:	4b51      	ldr	r3, [pc, #324]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f0      	bne.n	8006408 <HAL_RCC_OscConfig+0xe8>
 8006426:	e000      	b.n	800642a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d063      	beq.n	80064fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006436:	4b4a      	ldr	r3, [pc, #296]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006442:	4b47      	ldr	r3, [pc, #284]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800644a:	2b08      	cmp	r3, #8
 800644c:	d11c      	bne.n	8006488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800644e:	4b44      	ldr	r3, [pc, #272]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d116      	bne.n	8006488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645a:	4b41      	ldr	r3, [pc, #260]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d005      	beq.n	8006472 <HAL_RCC_OscConfig+0x152>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d001      	beq.n	8006472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e1be      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006472:	4b3b      	ldr	r3, [pc, #236]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4937      	ldr	r1, [pc, #220]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006482:	4313      	orrs	r3, r2
 8006484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006486:	e03a      	b.n	80064fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d020      	beq.n	80064d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006490:	4b34      	ldr	r3, [pc, #208]	; (8006564 <HAL_RCC_OscConfig+0x244>)
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006496:	f7fd fccd 	bl	8003e34 <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800649e:	f7fd fcc9 	bl	8003e34 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e19f      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b0:	4b2b      	ldr	r3, [pc, #172]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f0      	beq.n	800649e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064bc:	4b28      	ldr	r3, [pc, #160]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4925      	ldr	r1, [pc, #148]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]
 80064d0:	e015      	b.n	80064fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064d2:	4b24      	ldr	r3, [pc, #144]	; (8006564 <HAL_RCC_OscConfig+0x244>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d8:	f7fd fcac 	bl	8003e34 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064e0:	f7fd fca8 	bl	8003e34 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e17e      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f2:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f0      	bne.n	80064e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d036      	beq.n	8006578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d016      	beq.n	8006540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <HAL_RCC_OscConfig+0x248>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006518:	f7fd fc8c 	bl	8003e34 <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006520:	f7fd fc88 	bl	8003e34 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e15e      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006532:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <HAL_RCC_OscConfig+0x240>)
 8006534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0f0      	beq.n	8006520 <HAL_RCC_OscConfig+0x200>
 800653e:	e01b      	b.n	8006578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006540:	4b09      	ldr	r3, [pc, #36]	; (8006568 <HAL_RCC_OscConfig+0x248>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006546:	f7fd fc75 	bl	8003e34 <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800654c:	e00e      	b.n	800656c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800654e:	f7fd fc71 	bl	8003e34 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d907      	bls.n	800656c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e147      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
 8006560:	40023800 	.word	0x40023800
 8006564:	42470000 	.word	0x42470000
 8006568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800656c:	4b88      	ldr	r3, [pc, #544]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1ea      	bne.n	800654e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8097 	beq.w	80066b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006586:	2300      	movs	r3, #0
 8006588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800658a:	4b81      	ldr	r3, [pc, #516]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10f      	bne.n	80065b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	4b7d      	ldr	r3, [pc, #500]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	4a7c      	ldr	r2, [pc, #496]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 80065a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a4:	6413      	str	r3, [r2, #64]	; 0x40
 80065a6:	4b7a      	ldr	r3, [pc, #488]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ae:	60bb      	str	r3, [r7, #8]
 80065b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b2:	2301      	movs	r3, #1
 80065b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b6:	4b77      	ldr	r3, [pc, #476]	; (8006794 <HAL_RCC_OscConfig+0x474>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d118      	bne.n	80065f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065c2:	4b74      	ldr	r3, [pc, #464]	; (8006794 <HAL_RCC_OscConfig+0x474>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a73      	ldr	r2, [pc, #460]	; (8006794 <HAL_RCC_OscConfig+0x474>)
 80065c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ce:	f7fd fc31 	bl	8003e34 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d6:	f7fd fc2d 	bl	8003e34 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e103      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	4b6a      	ldr	r3, [pc, #424]	; (8006794 <HAL_RCC_OscConfig+0x474>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <HAL_RCC_OscConfig+0x2ea>
 80065fc:	4b64      	ldr	r3, [pc, #400]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	4a63      	ldr	r2, [pc, #396]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	6713      	str	r3, [r2, #112]	; 0x70
 8006608:	e01c      	b.n	8006644 <HAL_RCC_OscConfig+0x324>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b05      	cmp	r3, #5
 8006610:	d10c      	bne.n	800662c <HAL_RCC_OscConfig+0x30c>
 8006612:	4b5f      	ldr	r3, [pc, #380]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a5e      	ldr	r2, [pc, #376]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006618:	f043 0304 	orr.w	r3, r3, #4
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
 800661e:	4b5c      	ldr	r3, [pc, #368]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	4a5b      	ldr	r2, [pc, #364]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	6713      	str	r3, [r2, #112]	; 0x70
 800662a:	e00b      	b.n	8006644 <HAL_RCC_OscConfig+0x324>
 800662c:	4b58      	ldr	r3, [pc, #352]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	4a57      	ldr	r2, [pc, #348]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	6713      	str	r3, [r2, #112]	; 0x70
 8006638:	4b55      	ldr	r3, [pc, #340]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	4a54      	ldr	r2, [pc, #336]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800663e:	f023 0304 	bic.w	r3, r3, #4
 8006642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d015      	beq.n	8006678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664c:	f7fd fbf2 	bl	8003e34 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006652:	e00a      	b.n	800666a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006654:	f7fd fbee 	bl	8003e34 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e0c2      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800666a:	4b49      	ldr	r3, [pc, #292]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0ee      	beq.n	8006654 <HAL_RCC_OscConfig+0x334>
 8006676:	e014      	b.n	80066a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006678:	f7fd fbdc 	bl	8003e34 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800667e:	e00a      	b.n	8006696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006680:	f7fd fbd8 	bl	8003e34 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	f241 3288 	movw	r2, #5000	; 0x1388
 800668e:	4293      	cmp	r3, r2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e0ac      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006696:	4b3e      	ldr	r3, [pc, #248]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1ee      	bne.n	8006680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d105      	bne.n	80066b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a8:	4b39      	ldr	r3, [pc, #228]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	4a38      	ldr	r2, [pc, #224]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 80066ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8098 	beq.w	80067ee <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066be:	4b34      	ldr	r3, [pc, #208]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 030c 	and.w	r3, r3, #12
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d05c      	beq.n	8006784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d141      	bne.n	8006756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066d2:	4b31      	ldr	r3, [pc, #196]	; (8006798 <HAL_RCC_OscConfig+0x478>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d8:	f7fd fbac 	bl	8003e34 <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066e0:	f7fd fba8 	bl	8003e34 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e07e      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f2:	4b27      	ldr	r3, [pc, #156]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1f0      	bne.n	80066e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	3b01      	subs	r3, #1
 8006718:	041b      	lsls	r3, r3, #16
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	061b      	lsls	r3, r3, #24
 8006722:	491b      	ldr	r1, [pc, #108]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006724:	4313      	orrs	r3, r2
 8006726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006728:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <HAL_RCC_OscConfig+0x478>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672e:	f7fd fb81 	bl	8003e34 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006736:	f7fd fb7d 	bl	8003e34 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e053      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006748:	4b11      	ldr	r3, [pc, #68]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f0      	beq.n	8006736 <HAL_RCC_OscConfig+0x416>
 8006754:	e04b      	b.n	80067ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <HAL_RCC_OscConfig+0x478>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675c:	f7fd fb6a 	bl	8003e34 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006764:	f7fd fb66 	bl	8003e34 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e03c      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <HAL_RCC_OscConfig+0x470>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x444>
 8006782:	e034      	b.n	80067ee <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d107      	bne.n	800679c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e02f      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
 8006790:	40023800 	.word	0x40023800
 8006794:	40007000 	.word	0x40007000
 8006798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800679c:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <HAL_RCC_OscConfig+0x4d8>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d11c      	bne.n	80067ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d115      	bne.n	80067ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d10d      	bne.n	80067ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067d8:	429a      	cmp	r2, r3
 80067da:	d106      	bne.n	80067ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d001      	beq.n	80067ee <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40023800 	.word	0x40023800

080067fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0cc      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006810:	4b68      	ldr	r3, [pc, #416]	; (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d90c      	bls.n	8006838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b65      	ldr	r3, [pc, #404]	; (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b63      	ldr	r3, [pc, #396]	; (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0b8      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d020      	beq.n	8006886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006850:	4b59      	ldr	r3, [pc, #356]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a58      	ldr	r2, [pc, #352]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800685a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006868:	4b53      	ldr	r3, [pc, #332]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4a52      	ldr	r2, [pc, #328]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006874:	4b50      	ldr	r3, [pc, #320]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	494d      	ldr	r1, [pc, #308]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d044      	beq.n	800691c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d107      	bne.n	80068aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689a:	4b47      	ldr	r3, [pc, #284]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d119      	bne.n	80068da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e07f      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d003      	beq.n	80068ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d107      	bne.n	80068ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ba:	4b3f      	ldr	r3, [pc, #252]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e06f      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ca:	4b3b      	ldr	r3, [pc, #236]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e067      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068da:	4b37      	ldr	r3, [pc, #220]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4934      	ldr	r1, [pc, #208]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068ec:	f7fd faa2 	bl	8003e34 <HAL_GetTick>
 80068f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	e00a      	b.n	800690a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f4:	f7fd fa9e 	bl	8003e34 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006902:	4293      	cmp	r3, r2
 8006904:	d901      	bls.n	800690a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e04f      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690a:	4b2b      	ldr	r3, [pc, #172]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 020c 	and.w	r2, r3, #12
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	429a      	cmp	r2, r3
 800691a:	d1eb      	bne.n	80068f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800691c:	4b25      	ldr	r3, [pc, #148]	; (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d20c      	bcs.n	8006944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692a:	4b22      	ldr	r3, [pc, #136]	; (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	4b20      	ldr	r3, [pc, #128]	; (80069b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d001      	beq.n	8006944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e032      	b.n	80069aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006950:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4916      	ldr	r1, [pc, #88]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	4313      	orrs	r3, r2
 8006960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	490e      	ldr	r1, [pc, #56]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	4313      	orrs	r3, r2
 8006980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006982:	f000 f821 	bl	80069c8 <HAL_RCC_GetSysClockFreq>
 8006986:	4602      	mov	r2, r0
 8006988:	4b0b      	ldr	r3, [pc, #44]	; (80069b8 <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	091b      	lsrs	r3, r3, #4
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	490a      	ldr	r1, [pc, #40]	; (80069bc <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	5ccb      	ldrb	r3, [r1, r3]
 8006996:	fa22 f303 	lsr.w	r3, r2, r3
 800699a:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <HAL_RCC_ClockConfig+0x1c8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fd fa02 	bl	8003dac <HAL_InitTick>

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	40023c00 	.word	0x40023c00
 80069b8:	40023800 	.word	0x40023800
 80069bc:	08009ef8 	.word	0x08009ef8
 80069c0:	200002d8 	.word	0x200002d8
 80069c4:	20000370 	.word	0x20000370

080069c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069cc:	b094      	sub	sp, #80	; 0x50
 80069ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	647b      	str	r3, [r7, #68]	; 0x44
 80069d4:	2300      	movs	r3, #0
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d8:	2300      	movs	r3, #0
 80069da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069e0:	4b79      	ldr	r3, [pc, #484]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 030c 	and.w	r3, r3, #12
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d00d      	beq.n	8006a08 <HAL_RCC_GetSysClockFreq+0x40>
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	f200 80e1 	bhi.w	8006bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_RCC_GetSysClockFreq+0x34>
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d003      	beq.n	8006a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80069fa:	e0db      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069fc:	4b73      	ldr	r3, [pc, #460]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x204>)
 80069fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a00:	e0db      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a02:	4b73      	ldr	r3, [pc, #460]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a06:	e0d8      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a08:	4b6f      	ldr	r3, [pc, #444]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a12:	4b6d      	ldr	r3, [pc, #436]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d063      	beq.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a1e:	4b6a      	ldr	r3, [pc, #424]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	099b      	lsrs	r3, r3, #6
 8006a24:	2200      	movs	r2, #0
 8006a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30
 8006a32:	2300      	movs	r3, #0
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
 8006a36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	f04f 0000 	mov.w	r0, #0
 8006a42:	f04f 0100 	mov.w	r1, #0
 8006a46:	0159      	lsls	r1, r3, #5
 8006a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a4c:	0150      	lsls	r0, r2, #5
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4621      	mov	r1, r4
 8006a54:	1a51      	subs	r1, r2, r1
 8006a56:	6139      	str	r1, [r7, #16]
 8006a58:	4629      	mov	r1, r5
 8006a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	018b      	lsls	r3, r1, #6
 8006a70:	4651      	mov	r1, sl
 8006a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a76:	4651      	mov	r1, sl
 8006a78:	018a      	lsls	r2, r1, #6
 8006a7a:	4651      	mov	r1, sl
 8006a7c:	ebb2 0801 	subs.w	r8, r2, r1
 8006a80:	4659      	mov	r1, fp
 8006a82:	eb63 0901 	sbc.w	r9, r3, r1
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a9a:	4690      	mov	r8, r2
 8006a9c:	4699      	mov	r9, r3
 8006a9e:	4623      	mov	r3, r4
 8006aa0:	eb18 0303 	adds.w	r3, r8, r3
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	eb49 0303 	adc.w	r3, r9, r3
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006aba:	4629      	mov	r1, r5
 8006abc:	024b      	lsls	r3, r1, #9
 8006abe:	4621      	mov	r1, r4
 8006ac0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	024a      	lsls	r2, r1, #9
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4619      	mov	r1, r3
 8006acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ace:	2200      	movs	r2, #0
 8006ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ad8:	f7f9 fc3a 	bl	8000350 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae4:	e058      	b.n	8006b98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ae6:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	099b      	lsrs	r3, r3, #6
 8006aec:	2200      	movs	r2, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	4611      	mov	r1, r2
 8006af2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
 8006afc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b00:	4642      	mov	r2, r8
 8006b02:	464b      	mov	r3, r9
 8006b04:	f04f 0000 	mov.w	r0, #0
 8006b08:	f04f 0100 	mov.w	r1, #0
 8006b0c:	0159      	lsls	r1, r3, #5
 8006b0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b12:	0150      	lsls	r0, r2, #5
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4641      	mov	r1, r8
 8006b1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b1e:	4649      	mov	r1, r9
 8006b20:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b38:	ebb2 040a 	subs.w	r4, r2, sl
 8006b3c:	eb63 050b 	sbc.w	r5, r3, fp
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	00eb      	lsls	r3, r5, #3
 8006b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b4e:	00e2      	lsls	r2, r4, #3
 8006b50:	4614      	mov	r4, r2
 8006b52:	461d      	mov	r5, r3
 8006b54:	4643      	mov	r3, r8
 8006b56:	18e3      	adds	r3, r4, r3
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	eb45 0303 	adc.w	r3, r5, r3
 8006b60:	607b      	str	r3, [r7, #4]
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b6e:	4629      	mov	r1, r5
 8006b70:	028b      	lsls	r3, r1, #10
 8006b72:	4621      	mov	r1, r4
 8006b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b78:	4621      	mov	r1, r4
 8006b7a:	028a      	lsls	r2, r1, #10
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	2200      	movs	r2, #0
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	61fa      	str	r2, [r7, #28]
 8006b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b8c:	f7f9 fbe0 	bl	8000350 <__aeabi_uldivmod>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4613      	mov	r3, r2
 8006b96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b98:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bb2:	e002      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x204>)
 8006bb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3750      	adds	r7, #80	; 0x50
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	00f42400 	.word	0x00f42400
 8006bd0:	007a1200 	.word	0x007a1200

08006bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bda:	681b      	ldr	r3, [r3, #0]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	200002d8 	.word	0x200002d8

08006bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bf0:	f7ff fff0 	bl	8006bd4 <HAL_RCC_GetHCLKFreq>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	0a9b      	lsrs	r3, r3, #10
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4903      	ldr	r1, [pc, #12]	; (8006c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c02:	5ccb      	ldrb	r3, [r1, r3]
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	08009f08 	.word	0x08009f08

08006c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d105      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d075      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c48:	4b91      	ldr	r3, [pc, #580]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c4e:	f7fd f8f1 	bl	8003e34 <HAL_GetTick>
 8006c52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c54:	e008      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c56:	f7fd f8ed 	bl	8003e34 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e189      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c68:	4b8a      	ldr	r3, [pc, #552]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f0      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	019a      	lsls	r2, r3, #6
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	071b      	lsls	r3, r3, #28
 8006c8c:	4981      	ldr	r1, [pc, #516]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01f      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ca0:	4b7c      	ldr	r3, [pc, #496]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca6:	0f1b      	lsrs	r3, r3, #28
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	019a      	lsls	r2, r3, #6
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	061b      	lsls	r3, r3, #24
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	071b      	lsls	r3, r3, #28
 8006cc0:	4974      	ldr	r1, [pc, #464]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006cc8:	4b72      	ldr	r3, [pc, #456]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cce:	f023 021f 	bic.w	r2, r3, #31
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	496e      	ldr	r1, [pc, #440]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	019a      	lsls	r2, r3, #6
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	061b      	lsls	r3, r3, #24
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	071b      	lsls	r3, r3, #28
 8006d00:	4964      	ldr	r1, [pc, #400]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d08:	4b61      	ldr	r3, [pc, #388]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0e:	f7fd f891 	bl	8003e34 <HAL_GetTick>
 8006d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d14:	e008      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d16:	f7fd f88d 	bl	8003e34 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e129      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d28:	4b5a      	ldr	r3, [pc, #360]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0f0      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d105      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d079      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d4c:	4b52      	ldr	r3, [pc, #328]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d52:	f7fd f86f 	bl	8003e34 <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d58:	e008      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d5a:	f7fd f86b 	bl	8003e34 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e107      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d6c:	4b49      	ldr	r3, [pc, #292]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d78:	d0ef      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d020      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d86:	4b43      	ldr	r3, [pc, #268]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	0f1b      	lsrs	r3, r3, #28
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	019a      	lsls	r2, r3, #6
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	431a      	orrs	r2, r3
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	071b      	lsls	r3, r3, #28
 8006da6:	493b      	ldr	r1, [pc, #236]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006dae:	4b39      	ldr	r3, [pc, #228]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	4934      	ldr	r1, [pc, #208]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01e      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dd4:	4b2f      	ldr	r3, [pc, #188]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dda:	0e1b      	lsrs	r3, r3, #24
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	019a      	lsls	r2, r3, #6
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	071b      	lsls	r3, r3, #28
 8006df4:	4927      	ldr	r1, [pc, #156]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006dfc:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	4922      	ldr	r1, [pc, #136]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e12:	4b21      	ldr	r3, [pc, #132]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e18:	f7fd f80c 	bl	8003e34 <HAL_GetTick>
 8006e1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e20:	f7fd f808 	bl	8003e34 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e0a4      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e32:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3e:	d1ef      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 808b 	beq.w	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e76:	f7fc ffdd 	bl	8003e34 <HAL_GetTick>
 8006e7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e7c:	e010      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e7e:	f7fc ffd9 	bl	8003e34 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d909      	bls.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e075      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006e90:	42470068 	.word	0x42470068
 8006e94:	40023800 	.word	0x40023800
 8006e98:	42470070 	.word	0x42470070
 8006e9c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ea0:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0e8      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eac:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02f      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d028      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eca:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ed4:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ee0:	4a29      	ldr	r2, [pc, #164]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ee6:	4b28      	ldr	r3, [pc, #160]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d114      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ef2:	f7fc ff9f 	bl	8003e34 <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef8:	e00a      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006efa:	f7fc ff9b 	bl	8003e34 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e035      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f10:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0ee      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f28:	d10d      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006f2a:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	4912      	ldr	r1, [pc, #72]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	608b      	str	r3, [r1, #8]
 8006f44:	e005      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	4a0f      	ldr	r2, [pc, #60]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f50:	6093      	str	r3, [r2, #8]
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f5e:	490a      	ldr	r1, [pc, #40]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006f78:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40007000 	.word	0x40007000
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	42470e40 	.word	0x42470e40
 8006f90:	424711e0 	.word	0x424711e0

08006f94 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e025      	b.n	8006ff4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f81d 	bl	8006ffc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f000 ff0f 	bl	8007df8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	f000 ff7a 	bl	8007ede <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d101      	bne.n	800702c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007028:	2302      	movs	r3, #2
 800702a:	e018      	b.n	800705e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 ffcd 	bl	8007fdc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d104      	bne.n	8007054 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2205      	movs	r2, #5
 800704e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007052:	e003      	b.n	800705c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d101      	bne.n	8007080 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800707c:	2302      	movs	r3, #2
 800707e:	e00e      	b.n	800709e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 ffe0 	bl	8008054 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e05d      	b.n	8007174 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f87d 	bl	80071cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	ea42 0103 	orr.w	r1, r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	f003 0104 	and.w	r1, r3, #4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007148:	d104      	bne.n	8007154 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007152:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e01a      	b.n	80071c4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f81a 	bl	80071e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_SPI_Transmit+0x22>
 8007212:	2302      	movs	r3, #2
 8007214:	e140      	b.n	8007498 <HAL_SPI_Transmit+0x2a4>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800721e:	f7fc fe09 	bl	8003e34 <HAL_GetTick>
 8007222:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007224:	88fb      	ldrh	r3, [r7, #6]
 8007226:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b01      	cmp	r3, #1
 8007232:	d002      	beq.n	800723a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007234:	2302      	movs	r3, #2
 8007236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007238:	e125      	b.n	8007486 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <HAL_SPI_Transmit+0x52>
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800724a:	e11c      	b.n	8007486 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2203      	movs	r2, #3
 8007250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007292:	d107      	bne.n	80072a4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a2:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ac:	d10f      	bne.n	80072ce <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072cc:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	d007      	beq.n	80072ec <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f4:	d14b      	bne.n	800738e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_SPI_Transmit+0x110>
 80072fe:	8afb      	ldrh	r3, [r7, #22]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d13e      	bne.n	8007382 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007328:	e02b      	b.n	8007382 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d112      	bne.n	800735e <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	881a      	ldrh	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	1c9a      	adds	r2, r3, #2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	86da      	strh	r2, [r3, #54]	; 0x36
 800735c:	e011      	b.n	8007382 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800735e:	f7fc fd69 	bl	8003e34 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d803      	bhi.n	8007376 <HAL_SPI_Transmit+0x182>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d102      	bne.n	800737c <HAL_SPI_Transmit+0x188>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007380:	e081      	b.n	8007486 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1ce      	bne.n	800732a <HAL_SPI_Transmit+0x136>
 800738c:	e04c      	b.n	8007428 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_SPI_Transmit+0x1a8>
 8007396:	8afb      	ldrh	r3, [r7, #22]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d140      	bne.n	800741e <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073c2:	e02c      	b.n	800741e <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d113      	bne.n	80073fa <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	330c      	adds	r3, #12
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80073f8:	e011      	b.n	800741e <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fa:	f7fc fd1b 	bl	8003e34 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d803      	bhi.n	8007412 <HAL_SPI_Transmit+0x21e>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d102      	bne.n	8007418 <HAL_SPI_Transmit+0x224>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800741c:	e033      	b.n	8007486 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1cd      	bne.n	80073c4 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007430:	d107      	bne.n	8007442 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007440:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fc94 	bl	8007d74 <SPI_EndRxTxTransaction>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	77fb      	strb	r3, [r7, #31]
 8007482:	e000      	b.n	8007486 <HAL_SPI_Transmit+0x292>
  }

error:
 8007484:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007496:	7ffb      	ldrb	r3, [r7, #31]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074bc:	d112      	bne.n	80074e4 <HAL_SPI_Receive+0x44>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10e      	bne.n	80074e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2204      	movs	r2, #4
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074ce:	88fa      	ldrh	r2, [r7, #6]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f95f 	bl	800779e <HAL_SPI_TransmitReceive>
 80074e0:	4603      	mov	r3, r0
 80074e2:	e158      	b.n	8007796 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_SPI_Receive+0x52>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e151      	b.n	8007796 <HAL_SPI_Receive+0x2f6>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074fa:	f7fc fc9b 	bl	8003e34 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d002      	beq.n	8007512 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800750c:	2302      	movs	r3, #2
 800750e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007510:	e138      	b.n	8007784 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_SPI_Receive+0x7e>
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007522:	e12f      	b.n	8007784 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2204      	movs	r2, #4
 8007528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	88fa      	ldrh	r2, [r7, #6]
 8007542:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800756a:	d116      	bne.n	800759a <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800758a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a2:	d107      	bne.n	80075b4 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d007      	beq.n	80075d2 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d162      	bne.n	80076a0 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075da:	e02e      	b.n	800763a <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d115      	bne.n	8007616 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f103 020c 	add.w	r2, r3, #12
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007614:	e011      	b.n	800763a <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007616:	f7fc fc0d 	bl	8003e34 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d803      	bhi.n	800762e <HAL_SPI_Receive+0x18e>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d102      	bne.n	8007634 <HAL_SPI_Receive+0x194>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007638:	e0a4      	b.n	8007784 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1cb      	bne.n	80075dc <HAL_SPI_Receive+0x13c>
 8007644:	e031      	b.n	80076aa <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b01      	cmp	r3, #1
 8007652:	d113      	bne.n	800767c <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	b292      	uxth	r2, r2
 8007660:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	1c9a      	adds	r2, r3, #2
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	87da      	strh	r2, [r3, #62]	; 0x3e
 800767a:	e011      	b.n	80076a0 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800767c:	f7fc fbda 	bl	8003e34 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d803      	bhi.n	8007694 <HAL_SPI_Receive+0x1f4>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d102      	bne.n	800769a <HAL_SPI_Receive+0x1fa>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800769e:	e071      	b.n	8007784 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1cd      	bne.n	8007646 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b2:	d142      	bne.n	800773a <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076c2:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2201      	movs	r2, #1
 80076cc:	2101      	movs	r1, #1
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fa81 	bl	8007bd6 <SPI_WaitFlagStateUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	75fb      	strb	r3, [r7, #23]
      goto error;
 80076de:	e051      	b.n	8007784 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e8:	d107      	bne.n	80076fa <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	b292      	uxth	r2, r2
 80076f6:	801a      	strh	r2, [r3, #0]
 80076f8:	e008      	b.n	800770c <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f103 020c 	add.w	r2, r3, #12
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2201      	movs	r2, #1
 8007714:	2101      	movs	r1, #1
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 fa5d 	bl	8007bd6 <SPI_WaitFlagStateUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d008      	beq.n	8007734 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	f043 0202 	orr.w	r2, r3, #2
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007732:	e027      	b.n	8007784 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fab3 	bl	8007caa <SPI_EndRxTransaction>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	2b10      	cmp	r3, #16
 800775c:	d10a      	bne.n	8007774 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007762:	f043 0202 	orr.w	r2, r3, #2
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007772:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	75fb      	strb	r3, [r7, #23]
 8007780:	e000      	b.n	8007784 <HAL_SPI_Receive+0x2e4>
  }

error :
 8007782:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b08e      	sub	sp, #56	; 0x38
 80077a2:	af02      	add	r7, sp, #8
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077ac:	2301      	movs	r3, #1
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x26>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e1f6      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x414>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077cc:	f7fc fb32 	bl	8003e34 <HAL_GetTick>
 80077d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077e2:	887b      	ldrh	r3, [r7, #2]
 80077e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d00f      	beq.n	800780e <HAL_SPI_TransmitReceive+0x70>
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f4:	d107      	bne.n	8007806 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <HAL_SPI_TransmitReceive+0x68>
 80077fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007802:	2b04      	cmp	r3, #4
 8007804:	d003      	beq.n	800780e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007806:	2302      	movs	r3, #2
 8007808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800780c:	e1c7      	b.n	8007b9e <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x82>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x82>
 800781a:	887b      	ldrh	r3, [r7, #2]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007826:	e1ba      	b.n	8007b9e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b04      	cmp	r3, #4
 8007832:	d003      	beq.n	800783c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2205      	movs	r2, #5
 8007838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	887a      	ldrh	r2, [r7, #2]
 800784c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	887a      	ldrh	r2, [r7, #2]
 8007852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	887a      	ldrh	r2, [r7, #2]
 800785e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	887a      	ldrh	r2, [r7, #2]
 8007864:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800787a:	d10f      	bne.n	800789c <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800789a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d007      	beq.n	80078ba <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c2:	f040 808b 	bne.w	80079dc <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_SPI_TransmitReceive+0x136>
 80078ce:	8b7b      	ldrh	r3, [r7, #26]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d178      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	881a      	ldrh	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	1c9a      	adds	r2, r3, #2
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f8:	e065      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b02      	cmp	r3, #2
 8007906:	d12d      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x1c6>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d028      	beq.n	8007964 <HAL_SPI_TransmitReceive+0x1c6>
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	2b01      	cmp	r3, #1
 8007916:	d125      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	881a      	ldrh	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	1c9a      	adds	r2, r3, #2
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10c      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x1c6>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007952:	d107      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007962:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b01      	cmp	r3, #1
 8007970:	d119      	bne.n	80079a6 <HAL_SPI_TransmitReceive+0x208>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d014      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007986:	b292      	uxth	r2, r2
 8007988:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079a2:	2301      	movs	r3, #1
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079a6:	f7fc fa45 	bl	8003e34 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d807      	bhi.n	80079c6 <HAL_SPI_TransmitReceive+0x228>
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d003      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079c4:	e0eb      	b.n	8007b9e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d194      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x15c>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d18f      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x15c>
 80079da:	e08e      	b.n	8007afa <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <HAL_SPI_TransmitReceive+0x24c>
 80079e4:	8b7b      	ldrh	r3, [r7, #26]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d17d      	bne.n	8007ae6 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	7812      	ldrb	r2, [r2, #0]
 80079f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a10:	e069      	b.n	8007ae6 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d12e      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x2e0>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d029      	beq.n	8007a7e <HAL_SPI_TransmitReceive+0x2e0>
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d126      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10c      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x2e0>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6c:	d107      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a7c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d119      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x322>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d014      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007abc:	2301      	movs	r3, #1
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ac0:	f7fc f9b8 	bl	8003e34 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d803      	bhi.n	8007ad8 <HAL_SPI_TransmitReceive+0x33a>
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad6:	d102      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x340>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ae4:	e05b      	b.n	8007b9e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d190      	bne.n	8007a12 <HAL_SPI_TransmitReceive+0x274>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d18b      	bne.n	8007a12 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b02:	d117      	bne.n	8007b34 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f861 	bl	8007bd6 <SPI_WaitFlagStateUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1e:	f043 0202 	orr.w	r2, r3, #2
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007b2c:	e037      	b.n	8007b9e <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d10d      	bne.n	8007b5e <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	f043 0202 	orr.w	r2, r3, #2
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007b56:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f906 	bl	8007d74 <SPI_EndRxTxTransaction>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d006      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b7a:	e010      	b.n	8007b9e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10b      	bne.n	8007b9c <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	e000      	b.n	8007b9e <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8007b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3730      	adds	r7, #48	; 0x30
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bc8:	b2db      	uxtb	r3, r3
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	603b      	str	r3, [r7, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007be6:	e04c      	b.n	8007c82 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d048      	beq.n	8007c82 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007bf0:	f7fc f920 	bl	8003e34 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d902      	bls.n	8007c06 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d13d      	bne.n	8007c82 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c1e:	d111      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c28:	d004      	beq.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c32:	d107      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c4c:	d10f      	bne.n	8007c6e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e00f      	b.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d1a3      	bne.n	8007be8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af02      	add	r7, sp, #8
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cbe:	d111      	bne.n	8007ce4 <SPI_EndRxTransaction+0x3a>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc8:	d004      	beq.n	8007cd4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d107      	bne.n	8007ce4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ce2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cec:	d12a      	bne.n	8007d44 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf6:	d012      	beq.n	8007d1e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2180      	movs	r1, #128	; 0x80
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff ff67 	bl	8007bd6 <SPI_WaitFlagStateUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d02d      	beq.n	8007d6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e026      	b.n	8007d6c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2200      	movs	r2, #0
 8007d26:	2101      	movs	r1, #1
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff ff54 	bl	8007bd6 <SPI_WaitFlagStateUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01a      	beq.n	8007d6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d38:	f043 0220 	orr.w	r2, r3, #32
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e013      	b.n	8007d6c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff ff41 	bl	8007bd6 <SPI_WaitFlagStateUntilTimeout>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f043 0220 	orr.w	r2, r3, #32
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e000      	b.n	8007d6c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d80:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <SPI_EndRxTxTransaction+0x7c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1b      	ldr	r2, [pc, #108]	; (8007df4 <SPI_EndRxTxTransaction+0x80>)
 8007d86:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8a:	0d5b      	lsrs	r3, r3, #21
 8007d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d90:	fb02 f303 	mul.w	r3, r2, r3
 8007d94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d9e:	d112      	bne.n	8007dc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2200      	movs	r2, #0
 8007da8:	2180      	movs	r1, #128	; 0x80
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff ff13 	bl	8007bd6 <SPI_WaitFlagStateUntilTimeout>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d016      	beq.n	8007de4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dba:	f043 0220 	orr.w	r2, r3, #32
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e00f      	b.n	8007de6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d0f2      	beq.n	8007dc6 <SPI_EndRxTxTransaction+0x52>
 8007de0:	e000      	b.n	8007de4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007de2:	bf00      	nop
  }

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200002d8 	.word	0x200002d8
 8007df4:	165e9f81 	.word	0x165e9f81

08007df8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d029      	beq.n	8007e66 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e22:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e2c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007e32:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007e38:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007e3e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007e44:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007e4a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007e50:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007e56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	e034      	b.n	8007ed0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e72:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e7c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007e82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e9a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ea4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007eaa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007eb0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007eb6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007ebc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b087      	sub	sp, #28
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d02e      	beq.n	8007f56 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f04:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007f14:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007f1e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007f28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f32:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007f3c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007f46:	4313      	orrs	r3, r2
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	609a      	str	r2, [r3, #8]
 8007f54:	e03b      	b.n	8007fce <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f66:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f8c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f9c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007fa6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007fb0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007ff8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008002:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008014:	f7fb ff0e 	bl	8003e34 <HAL_GetTick>
 8008018:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800801a:	e010      	b.n	800803e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d00c      	beq.n	800803e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <FMC_SDRAM_SendCommand+0x5e>
 800802a:	f7fb ff03 	bl	8003e34 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d201      	bcs.n	800803e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e006      	b.n	800804c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b20      	cmp	r3, #32
 8008048:	d0e8      	beq.n	800801c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695a      	ldr	r2, [r3, #20]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <arm_max_f32>:
 800807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	1e4f      	subs	r7, r1, #1
 8008082:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8008086:	f100 0e04 	add.w	lr, r0, #4
 800808a:	edd0 7a00 	vldr	s15, [r0]
 800808e:	d058      	beq.n	8008142 <arm_max_f32+0xc6>
 8008090:	3014      	adds	r0, #20
 8008092:	46c4      	mov	ip, r8
 8008094:	2604      	movs	r6, #4
 8008096:	2400      	movs	r4, #0
 8008098:	ed10 6a04 	vldr	s12, [r0, #-16]
 800809c:	ed50 6a03 	vldr	s13, [r0, #-12]
 80080a0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80080a4:	ed50 5a01 	vldr	s11, [r0, #-4]
 80080a8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80080ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b0:	bfc8      	it	gt
 80080b2:	eef0 7a46 	vmovgt.f32	s15, s12
 80080b6:	f1a6 0503 	sub.w	r5, r6, #3
 80080ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80080be:	bfc8      	it	gt
 80080c0:	462c      	movgt	r4, r5
 80080c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c6:	bf48      	it	mi
 80080c8:	eef0 7a66 	vmovmi.f32	s15, s13
 80080cc:	f1a6 0502 	sub.w	r5, r6, #2
 80080d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080d4:	bf48      	it	mi
 80080d6:	462c      	movmi	r4, r5
 80080d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080dc:	bf48      	it	mi
 80080de:	eef0 7a47 	vmovmi.f32	s15, s14
 80080e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80080e6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80080ea:	bf48      	it	mi
 80080ec:	462c      	movmi	r4, r5
 80080ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f2:	bf48      	it	mi
 80080f4:	4634      	movmi	r4, r6
 80080f6:	bf48      	it	mi
 80080f8:	eef0 7a65 	vmovmi.f32	s15, s11
 80080fc:	f1bc 0c01 	subs.w	ip, ip, #1
 8008100:	f100 0010 	add.w	r0, r0, #16
 8008104:	f106 0604 	add.w	r6, r6, #4
 8008108:	d1c6      	bne.n	8008098 <arm_max_f32+0x1c>
 800810a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800810e:	f017 0003 	ands.w	r0, r7, #3
 8008112:	d018      	beq.n	8008146 <arm_max_f32+0xca>
 8008114:	1a08      	subs	r0, r1, r0
 8008116:	ecbe 7a01 	vldmia	lr!, {s14}
 800811a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800811e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008122:	bfc8      	it	gt
 8008124:	4604      	movgt	r4, r0
 8008126:	f100 0001 	add.w	r0, r0, #1
 800812a:	bfd8      	it	le
 800812c:	eeb0 7a67 	vmovle.f32	s14, s15
 8008130:	4281      	cmp	r1, r0
 8008132:	eef0 7a47 	vmov.f32	s15, s14
 8008136:	d1ee      	bne.n	8008116 <arm_max_f32+0x9a>
 8008138:	ed82 7a00 	vstr	s14, [r2]
 800813c:	601c      	str	r4, [r3, #0]
 800813e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008142:	4644      	mov	r4, r8
 8008144:	e7e3      	b.n	800810e <arm_max_f32+0x92>
 8008146:	eeb0 7a67 	vmov.f32	s14, s15
 800814a:	e7f5      	b.n	8008138 <arm_max_f32+0xbc>

0800814c <arm_rfft_fast_init_f32>:
 800814c:	084b      	lsrs	r3, r1, #1
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	b410      	push	{r4}
 8008152:	8201      	strh	r1, [r0, #16]
 8008154:	8003      	strh	r3, [r0, #0]
 8008156:	d046      	beq.n	80081e6 <arm_rfft_fast_init_f32+0x9a>
 8008158:	d916      	bls.n	8008188 <arm_rfft_fast_init_f32+0x3c>
 800815a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800815e:	d03c      	beq.n	80081da <arm_rfft_fast_init_f32+0x8e>
 8008160:	d928      	bls.n	80081b4 <arm_rfft_fast_init_f32+0x68>
 8008162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008166:	d01f      	beq.n	80081a8 <arm_rfft_fast_init_f32+0x5c>
 8008168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816c:	d112      	bne.n	8008194 <arm_rfft_fast_init_f32+0x48>
 800816e:	4920      	ldr	r1, [pc, #128]	; (80081f0 <arm_rfft_fast_init_f32+0xa4>)
 8008170:	4a20      	ldr	r2, [pc, #128]	; (80081f4 <arm_rfft_fast_init_f32+0xa8>)
 8008172:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <arm_rfft_fast_init_f32+0xac>)
 8008174:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008178:	8184      	strh	r4, [r0, #12]
 800817a:	6081      	str	r1, [r0, #8]
 800817c:	6042      	str	r2, [r0, #4]
 800817e:	6143      	str	r3, [r0, #20]
 8008180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008184:	2000      	movs	r0, #0
 8008186:	4770      	bx	lr
 8008188:	2b20      	cmp	r3, #32
 800818a:	d01c      	beq.n	80081c6 <arm_rfft_fast_init_f32+0x7a>
 800818c:	2b40      	cmp	r3, #64	; 0x40
 800818e:	d006      	beq.n	800819e <arm_rfft_fast_init_f32+0x52>
 8008190:	2b10      	cmp	r3, #16
 8008192:	d01d      	beq.n	80081d0 <arm_rfft_fast_init_f32+0x84>
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	2438      	movs	r4, #56	; 0x38
 80081a0:	4916      	ldr	r1, [pc, #88]	; (80081fc <arm_rfft_fast_init_f32+0xb0>)
 80081a2:	4a17      	ldr	r2, [pc, #92]	; (8008200 <arm_rfft_fast_init_f32+0xb4>)
 80081a4:	4b17      	ldr	r3, [pc, #92]	; (8008204 <arm_rfft_fast_init_f32+0xb8>)
 80081a6:	e7e7      	b.n	8008178 <arm_rfft_fast_init_f32+0x2c>
 80081a8:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80081ac:	4916      	ldr	r1, [pc, #88]	; (8008208 <arm_rfft_fast_init_f32+0xbc>)
 80081ae:	4a17      	ldr	r2, [pc, #92]	; (800820c <arm_rfft_fast_init_f32+0xc0>)
 80081b0:	4b17      	ldr	r3, [pc, #92]	; (8008210 <arm_rfft_fast_init_f32+0xc4>)
 80081b2:	e7e1      	b.n	8008178 <arm_rfft_fast_init_f32+0x2c>
 80081b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b8:	d1ec      	bne.n	8008194 <arm_rfft_fast_init_f32+0x48>
 80081ba:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80081be:	4915      	ldr	r1, [pc, #84]	; (8008214 <arm_rfft_fast_init_f32+0xc8>)
 80081c0:	4a15      	ldr	r2, [pc, #84]	; (8008218 <arm_rfft_fast_init_f32+0xcc>)
 80081c2:	4b16      	ldr	r3, [pc, #88]	; (800821c <arm_rfft_fast_init_f32+0xd0>)
 80081c4:	e7d8      	b.n	8008178 <arm_rfft_fast_init_f32+0x2c>
 80081c6:	2430      	movs	r4, #48	; 0x30
 80081c8:	4915      	ldr	r1, [pc, #84]	; (8008220 <arm_rfft_fast_init_f32+0xd4>)
 80081ca:	4a16      	ldr	r2, [pc, #88]	; (8008224 <arm_rfft_fast_init_f32+0xd8>)
 80081cc:	4b16      	ldr	r3, [pc, #88]	; (8008228 <arm_rfft_fast_init_f32+0xdc>)
 80081ce:	e7d3      	b.n	8008178 <arm_rfft_fast_init_f32+0x2c>
 80081d0:	2414      	movs	r4, #20
 80081d2:	4916      	ldr	r1, [pc, #88]	; (800822c <arm_rfft_fast_init_f32+0xe0>)
 80081d4:	4a16      	ldr	r2, [pc, #88]	; (8008230 <arm_rfft_fast_init_f32+0xe4>)
 80081d6:	4b17      	ldr	r3, [pc, #92]	; (8008234 <arm_rfft_fast_init_f32+0xe8>)
 80081d8:	e7ce      	b.n	8008178 <arm_rfft_fast_init_f32+0x2c>
 80081da:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80081de:	4916      	ldr	r1, [pc, #88]	; (8008238 <arm_rfft_fast_init_f32+0xec>)
 80081e0:	4a16      	ldr	r2, [pc, #88]	; (800823c <arm_rfft_fast_init_f32+0xf0>)
 80081e2:	4b17      	ldr	r3, [pc, #92]	; (8008240 <arm_rfft_fast_init_f32+0xf4>)
 80081e4:	e7c8      	b.n	8008178 <arm_rfft_fast_init_f32+0x2c>
 80081e6:	24d0      	movs	r4, #208	; 0xd0
 80081e8:	4916      	ldr	r1, [pc, #88]	; (8008244 <arm_rfft_fast_init_f32+0xf8>)
 80081ea:	4a17      	ldr	r2, [pc, #92]	; (8008248 <arm_rfft_fast_init_f32+0xfc>)
 80081ec:	4b17      	ldr	r3, [pc, #92]	; (800824c <arm_rfft_fast_init_f32+0x100>)
 80081ee:	e7c3      	b.n	8008178 <arm_rfft_fast_init_f32+0x2c>
 80081f0:	0801c708 	.word	0x0801c708
 80081f4:	0800d900 	.word	0x0800d900
 80081f8:	08013a70 	.word	0x08013a70
 80081fc:	08011a00 	.word	0x08011a00
 8008200:	0801e4c8 	.word	0x0801e4c8
 8008204:	080209b8 	.word	0x080209b8
 8008208:	0801a3f0 	.word	0x0801a3f0
 800820c:	080182f0 	.word	0x080182f0
 8008210:	08011a70 	.word	0x08011a70
 8008214:	08020648 	.word	0x08020648
 8008218:	08017a70 	.word	0x08017a70
 800821c:	0801e6c8 	.word	0x0801e6c8
 8008220:	0801b2a8 	.word	0x0801b2a8
 8008224:	0801a2f0 	.word	0x0801a2f0
 8008228:	08011900 	.word	0x08011900
 800822c:	0801b200 	.word	0x0801b200
 8008230:	08018270 	.word	0x08018270
 8008234:	0801b228 	.word	0x0801b228
 8008238:	0801eec8 	.word	0x0801eec8
 800823c:	0801b708 	.word	0x0801b708
 8008240:	0801f248 	.word	0x0801f248
 8008244:	08020bb8 	.word	0x08020bb8
 8008248:	0801b308 	.word	0x0801b308
 800824c:	08020248 	.word	0x08020248

08008250 <arm_rfft_fast_f32>:
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	8a06      	ldrh	r6, [r0, #16]
 8008256:	0876      	lsrs	r6, r6, #1
 8008258:	4607      	mov	r7, r0
 800825a:	4615      	mov	r5, r2
 800825c:	8006      	strh	r6, [r0, #0]
 800825e:	460c      	mov	r4, r1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d15c      	bne.n	800831e <arm_rfft_fast_f32+0xce>
 8008264:	461a      	mov	r2, r3
 8008266:	2301      	movs	r3, #1
 8008268:	f000 fbe4 	bl	8008a34 <arm_cfft_f32>
 800826c:	edd4 7a00 	vldr	s15, [r4]
 8008270:	ed94 7a01 	vldr	s14, [r4, #4]
 8008274:	883e      	ldrh	r6, [r7, #0]
 8008276:	6978      	ldr	r0, [r7, #20]
 8008278:	ee37 7a07 	vadd.f32	s14, s14, s14
 800827c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008280:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8008284:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800828c:	3e01      	subs	r6, #1
 800828e:	ee26 7a83 	vmul.f32	s14, s13, s6
 8008292:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008296:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800829a:	ed85 7a00 	vstr	s14, [r5]
 800829e:	edc5 7a01 	vstr	s15, [r5, #4]
 80082a2:	3010      	adds	r0, #16
 80082a4:	f105 0210 	add.w	r2, r5, #16
 80082a8:	3b08      	subs	r3, #8
 80082aa:	f104 0110 	add.w	r1, r4, #16
 80082ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80082b2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80082b6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80082ba:	edd3 3a03 	vldr	s7, [r3, #12]
 80082be:	ed11 5a01 	vldr	s10, [r1, #-4]
 80082c2:	ed50 5a01 	vldr	s11, [r0, #-4]
 80082c6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80082ca:	ee77 4a26 	vadd.f32	s9, s14, s13
 80082ce:	ee33 4a85 	vadd.f32	s8, s7, s10
 80082d2:	ee66 6a27 	vmul.f32	s13, s12, s15
 80082d6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80082da:	ee35 5a63 	vsub.f32	s10, s10, s7
 80082de:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80082e2:	ee77 7a05 	vadd.f32	s15, s14, s10
 80082e6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80082ea:	ee65 5a84 	vmul.f32	s11, s11, s8
 80082ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80082f2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80082f6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80082fa:	ee27 7a03 	vmul.f32	s14, s14, s6
 80082fe:	3e01      	subs	r6, #1
 8008300:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008304:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008308:	f1a3 0308 	sub.w	r3, r3, #8
 800830c:	f101 0108 	add.w	r1, r1, #8
 8008310:	f100 0008 	add.w	r0, r0, #8
 8008314:	f102 0208 	add.w	r2, r2, #8
 8008318:	d1c9      	bne.n	80082ae <arm_rfft_fast_f32+0x5e>
 800831a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831e:	edd1 7a00 	vldr	s15, [r1]
 8008322:	edd1 6a01 	vldr	s13, [r1, #4]
 8008326:	6941      	ldr	r1, [r0, #20]
 8008328:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800832c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008330:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008334:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008338:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800833c:	3e01      	subs	r6, #1
 800833e:	ed82 7a00 	vstr	s14, [r2]
 8008342:	edc2 7a01 	vstr	s15, [r2, #4]
 8008346:	00f0      	lsls	r0, r6, #3
 8008348:	b3ee      	cbz	r6, 80083c6 <arm_rfft_fast_f32+0x176>
 800834a:	3808      	subs	r0, #8
 800834c:	f101 0e10 	add.w	lr, r1, #16
 8008350:	4420      	add	r0, r4
 8008352:	f104 0110 	add.w	r1, r4, #16
 8008356:	f102 0c10 	add.w	ip, r2, #16
 800835a:	ed90 7a02 	vldr	s14, [r0, #8]
 800835e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8008362:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8008366:	ed90 4a03 	vldr	s8, [r0, #12]
 800836a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800836e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8008372:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008376:	ee74 4a05 	vadd.f32	s9, s8, s10
 800837a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800837e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8008382:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008386:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800838a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800838e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008392:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008396:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800839a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800839e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80083a2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80083a6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80083aa:	3e01      	subs	r6, #1
 80083ac:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80083b0:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80083b4:	f1a0 0008 	sub.w	r0, r0, #8
 80083b8:	f101 0108 	add.w	r1, r1, #8
 80083bc:	f10e 0e08 	add.w	lr, lr, #8
 80083c0:	f10c 0c08 	add.w	ip, ip, #8
 80083c4:	d1c9      	bne.n	800835a <arm_rfft_fast_f32+0x10a>
 80083c6:	461a      	mov	r2, r3
 80083c8:	4629      	mov	r1, r5
 80083ca:	4638      	mov	r0, r7
 80083cc:	2301      	movs	r3, #1
 80083ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	f000 bb2f 	b.w	8008a34 <arm_cfft_f32>
 80083d6:	bf00      	nop

080083d8 <arm_cfft_radix8by2_f32>:
 80083d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083dc:	ed2d 8b08 	vpush	{d8-d11}
 80083e0:	4607      	mov	r7, r0
 80083e2:	4608      	mov	r0, r1
 80083e4:	f8b7 e000 	ldrh.w	lr, [r7]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80083ee:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80083f2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80083f6:	f000 80b0 	beq.w	800855a <arm_cfft_radix8by2_f32+0x182>
 80083fa:	008b      	lsls	r3, r1, #2
 80083fc:	3310      	adds	r3, #16
 80083fe:	18c6      	adds	r6, r0, r3
 8008400:	3210      	adds	r2, #16
 8008402:	4443      	add	r3, r8
 8008404:	f100 0510 	add.w	r5, r0, #16
 8008408:	f108 0410 	add.w	r4, r8, #16
 800840c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8008410:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008414:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008418:	ed53 3a03 	vldr	s7, [r3, #-12]
 800841c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008420:	ed13 5a01 	vldr	s10, [r3, #-4]
 8008424:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008428:	ed54 7a01 	vldr	s15, [r4, #-4]
 800842c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008430:	ed56 2a03 	vldr	s5, [r6, #-12]
 8008434:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008438:	ed15 7a01 	vldr	s14, [r5, #-4]
 800843c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008440:	ed56 0a02 	vldr	s1, [r6, #-8]
 8008444:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008448:	ed55 4a02 	vldr	s9, [r5, #-8]
 800844c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008450:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008454:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008458:	ee72 9a04 	vadd.f32	s19, s4, s8
 800845c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8008460:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008464:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008468:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800846c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8008470:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008474:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008478:	ed05 aa01 	vstr	s20, [r5, #-4]
 800847c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008480:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008484:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008488:	ed46 8a02 	vstr	s17, [r6, #-8]
 800848c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008490:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008494:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008498:	ed52 2a04 	vldr	s5, [r2, #-16]
 800849c:	ee33 3a61 	vsub.f32	s6, s6, s3
 80084a0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80084a4:	ee26 8a86 	vmul.f32	s16, s13, s12
 80084a8:	ee24 2a06 	vmul.f32	s4, s8, s12
 80084ac:	ee63 1a22 	vmul.f32	s3, s6, s5
 80084b0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80084b4:	ee23 3a06 	vmul.f32	s6, s6, s12
 80084b8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80084bc:	ee23 6a86 	vmul.f32	s12, s7, s12
 80084c0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80084c4:	ee36 6a04 	vadd.f32	s12, s12, s8
 80084c8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80084cc:	ee72 3a63 	vsub.f32	s7, s4, s7
 80084d0:	ee71 2a88 	vadd.f32	s5, s3, s16
 80084d4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80084d8:	ed44 2a04 	vstr	s5, [r4, #-16]
 80084dc:	ed43 3a04 	vstr	s7, [r3, #-16]
 80084e0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80084e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80084ec:	ed12 7a01 	vldr	s14, [r2, #-4]
 80084f0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80084f4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80084f8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80084fc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008500:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008504:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8008508:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800850c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8008510:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008514:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008518:	ee26 6a25 	vmul.f32	s12, s12, s11
 800851c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008520:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008524:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008528:	ee37 7a26 	vadd.f32	s14, s14, s13
 800852c:	f1be 0e01 	subs.w	lr, lr, #1
 8008530:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008534:	f105 0510 	add.w	r5, r5, #16
 8008538:	ed44 7a01 	vstr	s15, [r4, #-4]
 800853c:	f106 0610 	add.w	r6, r6, #16
 8008540:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008544:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008548:	f102 0210 	add.w	r2, r2, #16
 800854c:	f104 0410 	add.w	r4, r4, #16
 8008550:	f103 0310 	add.w	r3, r3, #16
 8008554:	f47f af5a 	bne.w	800840c <arm_cfft_radix8by2_f32+0x34>
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	b28c      	uxth	r4, r1
 800855c:	4621      	mov	r1, r4
 800855e:	2302      	movs	r3, #2
 8008560:	f000 fbca 	bl	8008cf8 <arm_radix8_butterfly_f32>
 8008564:	ecbd 8b08 	vpop	{d8-d11}
 8008568:	4621      	mov	r1, r4
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	4640      	mov	r0, r8
 800856e:	2302      	movs	r3, #2
 8008570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008574:	f000 bbc0 	b.w	8008cf8 <arm_radix8_butterfly_f32>

08008578 <arm_cfft_radix8by4_f32>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	ed2d 8b0a 	vpush	{d8-d12}
 8008580:	8802      	ldrh	r2, [r0, #0]
 8008582:	ed91 6a00 	vldr	s12, [r1]
 8008586:	b08f      	sub	sp, #60	; 0x3c
 8008588:	460f      	mov	r7, r1
 800858a:	0852      	lsrs	r2, r2, #1
 800858c:	6841      	ldr	r1, [r0, #4]
 800858e:	900c      	str	r0, [sp, #48]	; 0x30
 8008590:	0093      	lsls	r3, r2, #2
 8008592:	4638      	mov	r0, r7
 8008594:	4418      	add	r0, r3
 8008596:	4606      	mov	r6, r0
 8008598:	9009      	str	r0, [sp, #36]	; 0x24
 800859a:	4418      	add	r0, r3
 800859c:	edd0 6a00 	vldr	s13, [r0]
 80085a0:	ed96 4a00 	vldr	s8, [r6]
 80085a4:	edd6 2a01 	vldr	s5, [r6, #4]
 80085a8:	edd0 7a01 	vldr	s15, [r0, #4]
 80085ac:	900a      	str	r0, [sp, #40]	; 0x28
 80085ae:	ee76 5a26 	vadd.f32	s11, s12, s13
 80085b2:	4604      	mov	r4, r0
 80085b4:	4625      	mov	r5, r4
 80085b6:	441c      	add	r4, r3
 80085b8:	edd4 4a00 	vldr	s9, [r4]
 80085bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80085c0:	ed94 3a01 	vldr	s6, [r4, #4]
 80085c4:	9401      	str	r4, [sp, #4]
 80085c6:	ee35 5a84 	vadd.f32	s10, s11, s8
 80085ca:	4630      	mov	r0, r6
 80085cc:	ee35 5a24 	vadd.f32	s10, s10, s9
 80085d0:	463e      	mov	r6, r7
 80085d2:	ee15 ea10 	vmov	lr, s10
 80085d6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80085da:	f846 eb08 	str.w	lr, [r6], #8
 80085de:	ee37 6a27 	vadd.f32	s12, s14, s15
 80085e2:	ed90 5a01 	vldr	s10, [r0, #4]
 80085e6:	9605      	str	r6, [sp, #20]
 80085e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ec:	9e01      	ldr	r6, [sp, #4]
 80085ee:	9707      	str	r7, [sp, #28]
 80085f0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80085f4:	ed96 2a01 	vldr	s4, [r6, #4]
 80085f8:	ee36 7a05 	vadd.f32	s14, s12, s10
 80085fc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008600:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8008604:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008608:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800860c:	4604      	mov	r4, r0
 800860e:	46a3      	mov	fp, r4
 8008610:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008614:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008618:	ee14 8a10 	vmov	r8, s8
 800861c:	46a4      	mov	ip, r4
 800861e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8008622:	ed87 7a01 	vstr	s14, [r7, #4]
 8008626:	f84b 8b08 	str.w	r8, [fp], #8
 800862a:	f1ac 0704 	sub.w	r7, ip, #4
 800862e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8008632:	f101 0c08 	add.w	ip, r1, #8
 8008636:	462c      	mov	r4, r5
 8008638:	f8cd c010 	str.w	ip, [sp, #16]
 800863c:	ee15 ca90 	vmov	ip, s11
 8008640:	ee36 6a62 	vsub.f32	s12, s12, s5
 8008644:	f844 cb08 	str.w	ip, [r4], #8
 8008648:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800864c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008650:	9406      	str	r4, [sp, #24]
 8008652:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008656:	f101 0410 	add.w	r4, r1, #16
 800865a:	0852      	lsrs	r2, r2, #1
 800865c:	9402      	str	r4, [sp, #8]
 800865e:	ed85 6a01 	vstr	s12, [r5, #4]
 8008662:	462c      	mov	r4, r5
 8008664:	f101 0518 	add.w	r5, r1, #24
 8008668:	920b      	str	r2, [sp, #44]	; 0x2c
 800866a:	46b2      	mov	sl, r6
 800866c:	9503      	str	r5, [sp, #12]
 800866e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008672:	3a02      	subs	r2, #2
 8008674:	ee16 5a90 	vmov	r5, s13
 8008678:	46b6      	mov	lr, r6
 800867a:	4630      	mov	r0, r6
 800867c:	0852      	lsrs	r2, r2, #1
 800867e:	f84a 5b08 	str.w	r5, [sl], #8
 8008682:	f1a0 0604 	sub.w	r6, r0, #4
 8008686:	edce 7a01 	vstr	s15, [lr, #4]
 800868a:	9208      	str	r2, [sp, #32]
 800868c:	f000 8130 	beq.w	80088f0 <arm_cfft_radix8by4_f32+0x378>
 8008690:	4691      	mov	r9, r2
 8008692:	9a07      	ldr	r2, [sp, #28]
 8008694:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008698:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800869c:	3b08      	subs	r3, #8
 800869e:	f102 0510 	add.w	r5, r2, #16
 80086a2:	f101 0c20 	add.w	ip, r1, #32
 80086a6:	f1a4 020c 	sub.w	r2, r4, #12
 80086aa:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80086ae:	4433      	add	r3, r6
 80086b0:	3410      	adds	r4, #16
 80086b2:	4650      	mov	r0, sl
 80086b4:	4659      	mov	r1, fp
 80086b6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80086ba:	ed14 5a02 	vldr	s10, [r4, #-8]
 80086be:	ed91 7a00 	vldr	s14, [r1]
 80086c2:	edd0 7a00 	vldr	s15, [r0]
 80086c6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80086ca:	ed15 4a01 	vldr	s8, [r5, #-4]
 80086ce:	edd0 6a01 	vldr	s13, [r0, #4]
 80086d2:	ed91 6a01 	vldr	s12, [r1, #4]
 80086d6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80086da:	ee34 0a25 	vadd.f32	s0, s8, s11
 80086de:	ee78 4a07 	vadd.f32	s9, s16, s14
 80086e2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80086e6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80086ea:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80086ee:	ed45 4a02 	vstr	s9, [r5, #-8]
 80086f2:	edd1 4a01 	vldr	s9, [r1, #4]
 80086f6:	ed90 4a01 	vldr	s8, [r0, #4]
 80086fa:	ee70 4a24 	vadd.f32	s9, s0, s9
 80086fe:	ee75 aa06 	vadd.f32	s21, s10, s12
 8008702:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008706:	ee35 aac7 	vsub.f32	s20, s11, s14
 800870a:	ed45 4a01 	vstr	s9, [r5, #-4]
 800870e:	edd6 1a00 	vldr	s3, [r6]
 8008712:	edd7 0a00 	vldr	s1, [r7]
 8008716:	ed92 4a02 	vldr	s8, [r2, #8]
 800871a:	edd3 3a02 	vldr	s7, [r3, #8]
 800871e:	ed93 2a01 	vldr	s4, [r3, #4]
 8008722:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008726:	edd2 2a01 	vldr	s5, [r2, #4]
 800872a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800872e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008732:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008736:	ee74 8a84 	vadd.f32	s17, s9, s8
 800873a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800873e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8008742:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008746:	ee18 aa90 	vmov	sl, s17
 800874a:	f847 a908 	str.w	sl, [r7], #-8
 800874e:	edd2 8a01 	vldr	s17, [r2, #4]
 8008752:	ed93 9a01 	vldr	s18, [r3, #4]
 8008756:	ee73 8a28 	vadd.f32	s17, s6, s17
 800875a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800875e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008762:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008766:	edc7 8a01 	vstr	s17, [r7, #4]
 800876a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800876e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008772:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008776:	ee6a ba28 	vmul.f32	s23, s20, s17
 800877a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800877e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008782:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008786:	ee79 9a82 	vadd.f32	s19, s19, s4
 800878a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800878e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008792:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008796:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800879a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800879e:	ee69 8a28 	vmul.f32	s17, s18, s17
 80087a2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80087a6:	ee1c aa10 	vmov	sl, s24
 80087aa:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80087ae:	f841 ab08 	str.w	sl, [r1], #8
 80087b2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80087b6:	ee3b bacb 	vsub.f32	s22, s23, s22
 80087ba:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80087be:	ee33 3a62 	vsub.f32	s6, s6, s5
 80087c2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80087c6:	edc2 8a01 	vstr	s17, [r2, #4]
 80087ca:	ed82 ba02 	vstr	s22, [r2, #8]
 80087ce:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80087d2:	ee74 3a63 	vsub.f32	s7, s8, s7
 80087d6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80087da:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80087de:	ee30 0a46 	vsub.f32	s0, s0, s12
 80087e2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80087e6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80087ea:	ee30 0a66 	vsub.f32	s0, s0, s13
 80087ee:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80087f2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80087f6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80087fa:	ee60 9a04 	vmul.f32	s19, s0, s8
 80087fe:	ee28 8a04 	vmul.f32	s16, s16, s8
 8008802:	ee20 0a24 	vmul.f32	s0, s0, s9
 8008806:	ee63 3a84 	vmul.f32	s7, s7, s8
 800880a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800880e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008812:	ee14 aa10 	vmov	sl, s8
 8008816:	ee30 0a48 	vsub.f32	s0, s0, s16
 800881a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800881e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008822:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008826:	ed04 0a01 	vstr	s0, [r4, #-4]
 800882a:	f846 a908 	str.w	sl, [r6], #-8
 800882e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008832:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008836:	edc6 3a01 	vstr	s7, [r6, #4]
 800883a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800883e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008842:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008846:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800884a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800884e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008852:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008856:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800885a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800885e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008862:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008866:	ee66 6a86 	vmul.f32	s13, s13, s12
 800886a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800886e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008872:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008876:	ee21 1a07 	vmul.f32	s2, s2, s14
 800887a:	ee15 aa90 	vmov	sl, s11
 800887e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008882:	f840 ab08 	str.w	sl, [r0], #8
 8008886:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800888a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800888e:	f1b9 0901 	subs.w	r9, r9, #1
 8008892:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008896:	f105 0508 	add.w	r5, r5, #8
 800889a:	ed83 1a02 	vstr	s2, [r3, #8]
 800889e:	edc3 2a01 	vstr	s5, [r3, #4]
 80088a2:	f108 0808 	add.w	r8, r8, #8
 80088a6:	f1a2 0208 	sub.w	r2, r2, #8
 80088aa:	f10c 0c10 	add.w	ip, ip, #16
 80088ae:	f104 0408 	add.w	r4, r4, #8
 80088b2:	f10e 0e18 	add.w	lr, lr, #24
 80088b6:	f1a3 0308 	sub.w	r3, r3, #8
 80088ba:	f47f aefc 	bne.w	80086b6 <arm_cfft_radix8by4_f32+0x13e>
 80088be:	9908      	ldr	r1, [sp, #32]
 80088c0:	9802      	ldr	r0, [sp, #8]
 80088c2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80088c6:	00cb      	lsls	r3, r1, #3
 80088c8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80088cc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80088d0:	9102      	str	r1, [sp, #8]
 80088d2:	9905      	ldr	r1, [sp, #20]
 80088d4:	4419      	add	r1, r3
 80088d6:	9105      	str	r1, [sp, #20]
 80088d8:	9904      	ldr	r1, [sp, #16]
 80088da:	4419      	add	r1, r3
 80088dc:	9104      	str	r1, [sp, #16]
 80088de:	9906      	ldr	r1, [sp, #24]
 80088e0:	449b      	add	fp, r3
 80088e2:	4419      	add	r1, r3
 80088e4:	449a      	add	sl, r3
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	9106      	str	r1, [sp, #24]
 80088ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ee:	9303      	str	r3, [sp, #12]
 80088f0:	9a05      	ldr	r2, [sp, #20]
 80088f2:	9806      	ldr	r0, [sp, #24]
 80088f4:	ed92 4a00 	vldr	s8, [r2]
 80088f8:	ed90 7a00 	vldr	s14, [r0]
 80088fc:	ed9b 3a00 	vldr	s6, [fp]
 8008900:	edda 3a00 	vldr	s7, [sl]
 8008904:	edd2 4a01 	vldr	s9, [r2, #4]
 8008908:	edd0 6a01 	vldr	s13, [r0, #4]
 800890c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8008910:	eddb 7a01 	vldr	s15, [fp, #4]
 8008914:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008918:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800891a:	ee34 6a07 	vadd.f32	s12, s8, s14
 800891e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8008922:	ee36 5a03 	vadd.f32	s10, s12, s6
 8008926:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800892a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800892e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8008932:	ed82 5a00 	vstr	s10, [r2]
 8008936:	ed9b 5a01 	vldr	s10, [fp, #4]
 800893a:	edda 4a01 	vldr	s9, [sl, #4]
 800893e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008942:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008946:	ee35 5a24 	vadd.f32	s10, s10, s9
 800894a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800894e:	ed82 5a01 	vstr	s10, [r2, #4]
 8008952:	9a04      	ldr	r2, [sp, #16]
 8008954:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008958:	edd2 1a00 	vldr	s3, [r2]
 800895c:	edd2 2a01 	vldr	s5, [r2, #4]
 8008960:	9a02      	ldr	r2, [sp, #8]
 8008962:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008966:	ee36 6a43 	vsub.f32	s12, s12, s6
 800896a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800896e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008972:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008976:	ee25 5a21 	vmul.f32	s10, s10, s3
 800897a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800897e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008982:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008986:	edcb 2a00 	vstr	s5, [fp]
 800898a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800898e:	ed92 4a01 	vldr	s8, [r2, #4]
 8008992:	ed92 5a00 	vldr	s10, [r2]
 8008996:	9a03      	ldr	r2, [sp, #12]
 8008998:	ee36 6a63 	vsub.f32	s12, s12, s7
 800899c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80089a0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80089a4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80089a8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80089ac:	ee65 5a84 	vmul.f32	s11, s11, s8
 80089b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80089b4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80089b8:	ee76 6a83 	vadd.f32	s13, s13, s6
 80089bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089c0:	ed80 6a01 	vstr	s12, [r0, #4]
 80089c4:	edc0 5a00 	vstr	s11, [r0]
 80089c8:	edd2 5a01 	vldr	s11, [r2, #4]
 80089cc:	9807      	ldr	r0, [sp, #28]
 80089ce:	ee77 7a02 	vadd.f32	s15, s14, s4
 80089d2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80089d6:	edd2 6a00 	vldr	s13, [r2]
 80089da:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80089de:	ee67 6a26 	vmul.f32	s13, s14, s13
 80089e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80089e6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80089ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80089ee:	ee36 7a07 	vadd.f32	s14, s12, s14
 80089f2:	edca 7a01 	vstr	s15, [sl, #4]
 80089f6:	ed8a 7a00 	vstr	s14, [sl]
 80089fa:	6872      	ldr	r2, [r6, #4]
 80089fc:	4621      	mov	r1, r4
 80089fe:	2304      	movs	r3, #4
 8008a00:	f000 f97a 	bl	8008cf8 <arm_radix8_butterfly_f32>
 8008a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a06:	6872      	ldr	r2, [r6, #4]
 8008a08:	4621      	mov	r1, r4
 8008a0a:	2304      	movs	r3, #4
 8008a0c:	f000 f974 	bl	8008cf8 <arm_radix8_butterfly_f32>
 8008a10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a12:	6872      	ldr	r2, [r6, #4]
 8008a14:	4621      	mov	r1, r4
 8008a16:	2304      	movs	r3, #4
 8008a18:	f000 f96e 	bl	8008cf8 <arm_radix8_butterfly_f32>
 8008a1c:	6872      	ldr	r2, [r6, #4]
 8008a1e:	9801      	ldr	r0, [sp, #4]
 8008a20:	4621      	mov	r1, r4
 8008a22:	2304      	movs	r3, #4
 8008a24:	b00f      	add	sp, #60	; 0x3c
 8008a26:	ecbd 8b0a 	vpop	{d8-d12}
 8008a2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2e:	f000 b963 	b.w	8008cf8 <arm_radix8_butterfly_f32>
 8008a32:	bf00      	nop

08008a34 <arm_cfft_f32>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	2a01      	cmp	r2, #1
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	4617      	mov	r7, r2
 8008a3e:	460c      	mov	r4, r1
 8008a40:	4698      	mov	r8, r3
 8008a42:	8805      	ldrh	r5, [r0, #0]
 8008a44:	d054      	beq.n	8008af0 <arm_cfft_f32+0xbc>
 8008a46:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008a4a:	d04c      	beq.n	8008ae6 <arm_cfft_f32+0xb2>
 8008a4c:	d916      	bls.n	8008a7c <arm_cfft_f32+0x48>
 8008a4e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008a52:	d01a      	beq.n	8008a8a <arm_cfft_f32+0x56>
 8008a54:	d95c      	bls.n	8008b10 <arm_cfft_f32+0xdc>
 8008a56:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008a5a:	d044      	beq.n	8008ae6 <arm_cfft_f32+0xb2>
 8008a5c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008a60:	d105      	bne.n	8008a6e <arm_cfft_f32+0x3a>
 8008a62:	2301      	movs	r3, #1
 8008a64:	6872      	ldr	r2, [r6, #4]
 8008a66:	4629      	mov	r1, r5
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 f945 	bl	8008cf8 <arm_radix8_butterfly_f32>
 8008a6e:	f1b8 0f00 	cmp.w	r8, #0
 8008a72:	d111      	bne.n	8008a98 <arm_cfft_f32+0x64>
 8008a74:	2f01      	cmp	r7, #1
 8008a76:	d016      	beq.n	8008aa6 <arm_cfft_f32+0x72>
 8008a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7c:	2d20      	cmp	r5, #32
 8008a7e:	d032      	beq.n	8008ae6 <arm_cfft_f32+0xb2>
 8008a80:	d94a      	bls.n	8008b18 <arm_cfft_f32+0xe4>
 8008a82:	2d40      	cmp	r5, #64	; 0x40
 8008a84:	d0ed      	beq.n	8008a62 <arm_cfft_f32+0x2e>
 8008a86:	2d80      	cmp	r5, #128	; 0x80
 8008a88:	d1f1      	bne.n	8008a6e <arm_cfft_f32+0x3a>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff fca3 	bl	80083d8 <arm_cfft_radix8by2_f32>
 8008a92:	f1b8 0f00 	cmp.w	r8, #0
 8008a96:	d0ed      	beq.n	8008a74 <arm_cfft_f32+0x40>
 8008a98:	68b2      	ldr	r2, [r6, #8]
 8008a9a:	89b1      	ldrh	r1, [r6, #12]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f7f7 fba7 	bl	80001f0 <arm_bitreversal_32>
 8008aa2:	2f01      	cmp	r7, #1
 8008aa4:	d1e8      	bne.n	8008a78 <arm_cfft_f32+0x44>
 8008aa6:	ee07 5a90 	vmov	s15, r5
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ab2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	d0de      	beq.n	8008a78 <arm_cfft_f32+0x44>
 8008aba:	f104 0108 	add.w	r1, r4, #8
 8008abe:	2300      	movs	r3, #0
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	f101 0108 	add.w	r1, r1, #8
 8008ac8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008acc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008ad0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008ad4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ad8:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008adc:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008ae0:	d1ee      	bne.n	8008ac0 <arm_cfft_f32+0x8c>
 8008ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff fd45 	bl	8008578 <arm_cfft_radix8by4_f32>
 8008aee:	e7be      	b.n	8008a6e <arm_cfft_f32+0x3a>
 8008af0:	b1ad      	cbz	r5, 8008b1e <arm_cfft_f32+0xea>
 8008af2:	f101 030c 	add.w	r3, r1, #12
 8008af6:	2200      	movs	r2, #0
 8008af8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008afc:	3201      	adds	r2, #1
 8008afe:	eef1 7a67 	vneg.f32	s15, s15
 8008b02:	4295      	cmp	r5, r2
 8008b04:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008b08:	f103 0308 	add.w	r3, r3, #8
 8008b0c:	d1f4      	bne.n	8008af8 <arm_cfft_f32+0xc4>
 8008b0e:	e79a      	b.n	8008a46 <arm_cfft_f32+0x12>
 8008b10:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008b14:	d0a5      	beq.n	8008a62 <arm_cfft_f32+0x2e>
 8008b16:	e7aa      	b.n	8008a6e <arm_cfft_f32+0x3a>
 8008b18:	2d10      	cmp	r5, #16
 8008b1a:	d0b6      	beq.n	8008a8a <arm_cfft_f32+0x56>
 8008b1c:	e7a7      	b.n	8008a6e <arm_cfft_f32+0x3a>
 8008b1e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008b22:	d894      	bhi.n	8008a4e <arm_cfft_f32+0x1a>
 8008b24:	e7aa      	b.n	8008a7c <arm_cfft_f32+0x48>
 8008b26:	bf00      	nop

08008b28 <arm_cmplx_mag_f32>:
 8008b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008b30:	b084      	sub	sp, #16
 8008b32:	d07f      	beq.n	8008c34 <arm_cmplx_mag_f32+0x10c>
 8008b34:	2700      	movs	r7, #0
 8008b36:	f100 0420 	add.w	r4, r0, #32
 8008b3a:	f101 0510 	add.w	r5, r1, #16
 8008b3e:	4646      	mov	r6, r8
 8008b40:	e05a      	b.n	8008bf8 <arm_cmplx_mag_f32+0xd0>
 8008b42:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008b46:	eeb4 0a40 	vcmp.f32	s0, s0
 8008b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b4e:	f040 80a4 	bne.w	8008c9a <arm_cmplx_mag_f32+0x172>
 8008b52:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008b56:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008b5a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008b5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b62:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008b66:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	f2c0 808f 	blt.w	8008c94 <arm_cmplx_mag_f32+0x16c>
 8008b76:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008b7a:	eeb4 0a40 	vcmp.f32	s0, s0
 8008b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b82:	f040 80af 	bne.w	8008ce4 <arm_cmplx_mag_f32+0x1bc>
 8008b86:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008b8a:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008b8e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008b92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b96:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008b9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba6:	db72      	blt.n	8008c8e <arm_cmplx_mag_f32+0x166>
 8008ba8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008bac:	eeb4 0a40 	vcmp.f32	s0, s0
 8008bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb4:	f040 808c 	bne.w	8008cd0 <arm_cmplx_mag_f32+0x1a8>
 8008bb8:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008bbc:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008bc0:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008bc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bc8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008bcc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd8:	db20      	blt.n	8008c1c <arm_cmplx_mag_f32+0xf4>
 8008bda:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008bde:	eeb4 0a40 	vcmp.f32	s0, s0
 8008be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be6:	d169      	bne.n	8008cbc <arm_cmplx_mag_f32+0x194>
 8008be8:	3e01      	subs	r6, #1
 8008bea:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008bee:	f104 0420 	add.w	r4, r4, #32
 8008bf2:	f105 0510 	add.w	r5, r5, #16
 8008bf6:	d019      	beq.n	8008c2c <arm_cmplx_mag_f32+0x104>
 8008bf8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008bfc:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008c00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008c08:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c14:	da95      	bge.n	8008b42 <arm_cmplx_mag_f32+0x1a>
 8008c16:	f845 7c10 	str.w	r7, [r5, #-16]
 8008c1a:	e79c      	b.n	8008b56 <arm_cmplx_mag_f32+0x2e>
 8008c1c:	3e01      	subs	r6, #1
 8008c1e:	f845 7c04 	str.w	r7, [r5, #-4]
 8008c22:	f104 0420 	add.w	r4, r4, #32
 8008c26:	f105 0510 	add.w	r5, r5, #16
 8008c2a:	d1e5      	bne.n	8008bf8 <arm_cmplx_mag_f32+0xd0>
 8008c2c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008c30:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008c34:	f012 0503 	ands.w	r5, r2, #3
 8008c38:	d026      	beq.n	8008c88 <arm_cmplx_mag_f32+0x160>
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	f100 0408 	add.w	r4, r0, #8
 8008c40:	e00c      	b.n	8008c5c <arm_cmplx_mag_f32+0x134>
 8008c42:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008c46:	eeb4 0a40 	vcmp.f32	s0, s0
 8008c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c4e:	d12e      	bne.n	8008cae <arm_cmplx_mag_f32+0x186>
 8008c50:	3d01      	subs	r5, #1
 8008c52:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008c56:	f104 0408 	add.w	r4, r4, #8
 8008c5a:	d015      	beq.n	8008c88 <arm_cmplx_mag_f32+0x160>
 8008c5c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008c60:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008c64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c68:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008c6c:	3104      	adds	r1, #4
 8008c6e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7a:	dae2      	bge.n	8008c42 <arm_cmplx_mag_f32+0x11a>
 8008c7c:	3d01      	subs	r5, #1
 8008c7e:	f841 6c04 	str.w	r6, [r1, #-4]
 8008c82:	f104 0408 	add.w	r4, r4, #8
 8008c86:	d1e9      	bne.n	8008c5c <arm_cmplx_mag_f32+0x134>
 8008c88:	b004      	add	sp, #16
 8008c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8e:	f845 7c08 	str.w	r7, [r5, #-8]
 8008c92:	e793      	b.n	8008bbc <arm_cmplx_mag_f32+0x94>
 8008c94:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008c98:	e777      	b.n	8008b8a <arm_cmplx_mag_f32+0x62>
 8008c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c9e:	9203      	str	r2, [sp, #12]
 8008ca0:	9102      	str	r1, [sp, #8]
 8008ca2:	9001      	str	r0, [sp, #4]
 8008ca4:	f000 ffcc 	bl	8009c40 <sqrtf>
 8008ca8:	a801      	add	r0, sp, #4
 8008caa:	c807      	ldmia	r0, {r0, r1, r2}
 8008cac:	e751      	b.n	8008b52 <arm_cmplx_mag_f32+0x2a>
 8008cae:	eeb0 0a67 	vmov.f32	s0, s15
 8008cb2:	9101      	str	r1, [sp, #4]
 8008cb4:	f000 ffc4 	bl	8009c40 <sqrtf>
 8008cb8:	9901      	ldr	r1, [sp, #4]
 8008cba:	e7c9      	b.n	8008c50 <arm_cmplx_mag_f32+0x128>
 8008cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8008cc0:	9203      	str	r2, [sp, #12]
 8008cc2:	9102      	str	r1, [sp, #8]
 8008cc4:	9001      	str	r0, [sp, #4]
 8008cc6:	f000 ffbb 	bl	8009c40 <sqrtf>
 8008cca:	a801      	add	r0, sp, #4
 8008ccc:	c807      	ldmia	r0, {r0, r1, r2}
 8008cce:	e78b      	b.n	8008be8 <arm_cmplx_mag_f32+0xc0>
 8008cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8008cd4:	9203      	str	r2, [sp, #12]
 8008cd6:	9102      	str	r1, [sp, #8]
 8008cd8:	9001      	str	r0, [sp, #4]
 8008cda:	f000 ffb1 	bl	8009c40 <sqrtf>
 8008cde:	a801      	add	r0, sp, #4
 8008ce0:	c807      	ldmia	r0, {r0, r1, r2}
 8008ce2:	e769      	b.n	8008bb8 <arm_cmplx_mag_f32+0x90>
 8008ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ce8:	9203      	str	r2, [sp, #12]
 8008cea:	9102      	str	r1, [sp, #8]
 8008cec:	9001      	str	r0, [sp, #4]
 8008cee:	f000 ffa7 	bl	8009c40 <sqrtf>
 8008cf2:	a801      	add	r0, sp, #4
 8008cf4:	c807      	ldmia	r0, {r0, r1, r2}
 8008cf6:	e746      	b.n	8008b86 <arm_cmplx_mag_f32+0x5e>

08008cf8 <arm_radix8_butterfly_f32>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	ed2d 8b10 	vpush	{d8-d15}
 8008d00:	461c      	mov	r4, r3
 8008d02:	b09d      	sub	sp, #116	; 0x74
 8008d04:	4603      	mov	r3, r0
 8008d06:	3304      	adds	r3, #4
 8008d08:	ed9f bac4 	vldr	s22, [pc, #784]	; 800901c <arm_radix8_butterfly_f32+0x324>
 8008d0c:	9019      	str	r0, [sp, #100]	; 0x64
 8008d0e:	921a      	str	r2, [sp, #104]	; 0x68
 8008d10:	468b      	mov	fp, r1
 8008d12:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d14:	468a      	mov	sl, r1
 8008d16:	46a1      	mov	r9, r4
 8008d18:	4607      	mov	r7, r0
 8008d1a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008d1e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008d22:	eb03 0508 	add.w	r5, r3, r8
 8008d26:	195c      	adds	r4, r3, r5
 8008d28:	00de      	lsls	r6, r3, #3
 8008d2a:	191a      	adds	r2, r3, r4
 8008d2c:	9600      	str	r6, [sp, #0]
 8008d2e:	1898      	adds	r0, r3, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	9e00      	ldr	r6, [sp, #0]
 8008d34:	9311      	str	r3, [sp, #68]	; 0x44
 8008d36:	4401      	add	r1, r0
 8008d38:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008d3c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8008d40:	19be      	adds	r6, r7, r6
 8008d42:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8008d46:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8008d4a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8008d4e:	9f00      	ldr	r7, [sp, #0]
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	eb06 0e07 	add.w	lr, r6, r7
 8008d56:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	3204      	adds	r2, #4
 8008d5c:	3104      	adds	r1, #4
 8008d5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d62:	f04f 0c00 	mov.w	ip, #0
 8008d66:	edde 7a00 	vldr	s15, [lr]
 8008d6a:	edd6 6a00 	vldr	s13, [r6]
 8008d6e:	ed95 2a00 	vldr	s4, [r5]
 8008d72:	ed17 aa01 	vldr	s20, [r7, #-4]
 8008d76:	edd4 4a00 	vldr	s9, [r4]
 8008d7a:	ed90 5a00 	vldr	s10, [r0]
 8008d7e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008d82:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008d86:	ee77 8a85 	vadd.f32	s17, s15, s10
 8008d8a:	ee76 3a87 	vadd.f32	s7, s13, s14
 8008d8e:	ee32 4a20 	vadd.f32	s8, s4, s1
 8008d92:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8008d96:	ee33 6a84 	vadd.f32	s12, s7, s8
 8008d9a:	ee73 5a28 	vadd.f32	s11, s6, s17
 8008d9e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008da2:	ee75 6a86 	vadd.f32	s13, s11, s12
 8008da6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008daa:	ed47 6a01 	vstr	s13, [r7, #-4]
 8008dae:	edc4 5a00 	vstr	s11, [r4]
 8008db2:	ed92 9a00 	vldr	s18, [r2]
 8008db6:	ed95 1a01 	vldr	s2, [r5, #4]
 8008dba:	edd6 5a01 	vldr	s11, [r6, #4]
 8008dbe:	ed91 6a00 	vldr	s12, [r1]
 8008dc2:	edd7 2a00 	vldr	s5, [r7]
 8008dc6:	edd4 1a01 	vldr	s3, [r4, #4]
 8008dca:	edde 6a01 	vldr	s13, [lr, #4]
 8008dce:	edd0 9a01 	vldr	s19, [r0, #4]
 8008dd2:	ee72 0a60 	vsub.f32	s1, s4, s1
 8008dd6:	ee71 aa46 	vsub.f32	s21, s2, s12
 8008dda:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8008dde:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008de2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8008de6:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008dea:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8008dee:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8008df2:	ee75 5a89 	vadd.f32	s11, s11, s18
 8008df6:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008dfa:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8008dfe:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008e02:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008e06:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8008e0a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008e0e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8008e12:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008e16:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8008e1a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008e1e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008e22:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008e26:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008e2a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008e2e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8008e32:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8008e36:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008e3a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008e3e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8008e42:	ee71 5a49 	vsub.f32	s11, s2, s18
 8008e46:	ee31 2a09 	vadd.f32	s4, s2, s18
 8008e4a:	ee75 7a67 	vsub.f32	s15, s10, s15
 8008e4e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8008e52:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8008e56:	ee73 0a06 	vadd.f32	s1, s6, s12
 8008e5a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8008e5e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8008e62:	ee32 8a28 	vadd.f32	s16, s4, s17
 8008e66:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008e6a:	ee34 4a25 	vadd.f32	s8, s8, s11
 8008e6e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8008e72:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008e76:	ee71 5a64 	vsub.f32	s11, s2, s9
 8008e7a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8008e7e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8008e82:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008e86:	ee74 4a81 	vadd.f32	s9, s9, s2
 8008e8a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8008e8e:	44dc      	add	ip, fp
 8008e90:	45e2      	cmp	sl, ip
 8008e92:	ed87 8a00 	vstr	s16, [r7]
 8008e96:	ed84 2a01 	vstr	s4, [r4, #4]
 8008e9a:	441f      	add	r7, r3
 8008e9c:	edce 0a00 	vstr	s1, [lr]
 8008ea0:	441c      	add	r4, r3
 8008ea2:	ed80 6a00 	vstr	s12, [r0]
 8008ea6:	edce 1a01 	vstr	s3, [lr, #4]
 8008eaa:	ed80 4a01 	vstr	s8, [r0, #4]
 8008eae:	449e      	add	lr, r3
 8008eb0:	ed86 3a00 	vstr	s6, [r6]
 8008eb4:	4418      	add	r0, r3
 8008eb6:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008eba:	ed02 5a01 	vstr	s10, [r2, #-4]
 8008ebe:	ed85 7a00 	vstr	s14, [r5]
 8008ec2:	edc6 5a01 	vstr	s11, [r6, #4]
 8008ec6:	edc1 4a00 	vstr	s9, [r1]
 8008eca:	441e      	add	r6, r3
 8008ecc:	edc2 6a00 	vstr	s13, [r2]
 8008ed0:	4419      	add	r1, r3
 8008ed2:	edc5 7a01 	vstr	s15, [r5, #4]
 8008ed6:	441a      	add	r2, r3
 8008ed8:	441d      	add	r5, r3
 8008eda:	f63f af44 	bhi.w	8008d66 <arm_radix8_butterfly_f32+0x6e>
 8008ede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ee0:	2a07      	cmp	r2, #7
 8008ee2:	f240 81f5 	bls.w	80092d0 <arm_radix8_butterfly_f32+0x5d8>
 8008ee6:	f108 0101 	add.w	r1, r8, #1
 8008eea:	188f      	adds	r7, r1, r2
 8008eec:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8008ef0:	19d6      	adds	r6, r2, r7
 8008ef2:	eb08 0c09 	add.w	ip, r8, r9
 8008ef6:	1994      	adds	r4, r2, r6
 8008ef8:	eb0c 0e09 	add.w	lr, ip, r9
 8008efc:	4610      	mov	r0, r2
 8008efe:	9701      	str	r7, [sp, #4]
 8008f00:	4420      	add	r0, r4
 8008f02:	eb0e 0709 	add.w	r7, lr, r9
 8008f06:	1815      	adds	r5, r2, r0
 8008f08:	eb07 0209 	add.w	r2, r7, r9
 8008f0c:	9203      	str	r2, [sp, #12]
 8008f0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f14:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f16:	440a      	add	r2, r1
 8008f18:	9900      	ldr	r1, [sp, #0]
 8008f1a:	3108      	adds	r1, #8
 8008f1c:	9100      	str	r1, [sp, #0]
 8008f1e:	9902      	ldr	r1, [sp, #8]
 8008f20:	3108      	adds	r1, #8
 8008f22:	9102      	str	r1, [sp, #8]
 8008f24:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008f26:	00ff      	lsls	r7, r7, #3
 8008f28:	9715      	str	r7, [sp, #84]	; 0x54
 8008f2a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008f2e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008f32:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008f36:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8008f38:	9903      	ldr	r1, [sp, #12]
 8008f3a:	19d7      	adds	r7, r2, r7
 8008f3c:	00c9      	lsls	r1, r1, #3
 8008f3e:	9114      	str	r1, [sp, #80]	; 0x50
 8008f40:	9710      	str	r7, [sp, #64]	; 0x40
 8008f42:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008f44:	9f00      	ldr	r7, [sp, #0]
 8008f46:	19cf      	adds	r7, r1, r7
 8008f48:	970d      	str	r7, [sp, #52]	; 0x34
 8008f4a:	9f02      	ldr	r7, [sp, #8]
 8008f4c:	19cf      	adds	r7, r1, r7
 8008f4e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8008f52:	970c      	str	r7, [sp, #48]	; 0x30
 8008f54:	9f01      	ldr	r7, [sp, #4]
 8008f56:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8008f5a:	3504      	adds	r5, #4
 8008f5c:	3004      	adds	r0, #4
 8008f5e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8008f62:	9508      	str	r5, [sp, #32]
 8008f64:	9009      	str	r0, [sp, #36]	; 0x24
 8008f66:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008f68:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008f6a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8008f6e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8008f72:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8008f76:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008f78:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8008f7c:	1945      	adds	r5, r0, r5
 8008f7e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008f82:	460f      	mov	r7, r1
 8008f84:	3404      	adds	r4, #4
 8008f86:	4641      	mov	r1, r8
 8008f88:	1841      	adds	r1, r0, r1
 8008f8a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8008f8e:	940a      	str	r4, [sp, #40]	; 0x28
 8008f90:	eb00 0c06 	add.w	ip, r0, r6
 8008f94:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008f98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008f9a:	9506      	str	r5, [sp, #24]
 8008f9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008f9e:	9105      	str	r1, [sp, #20]
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	1905      	adds	r5, r0, r4
 8008fa4:	3108      	adds	r1, #8
 8008fa6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008fa8:	9507      	str	r5, [sp, #28]
 8008faa:	910f      	str	r1, [sp, #60]	; 0x3c
 8008fac:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	eb00 0e06 	add.w	lr, r0, r6
 8008fb6:	9518      	str	r5, [sp, #96]	; 0x60
 8008fb8:	9404      	str	r4, [sp, #16]
 8008fba:	9103      	str	r1, [sp, #12]
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4689      	mov	r9, r1
 8008fc0:	9e06      	ldr	r6, [sp, #24]
 8008fc2:	ed90 fa00 	vldr	s30, [r0]
 8008fc6:	edd6 7a01 	vldr	s15, [r6, #4]
 8008fca:	edd0 ba01 	vldr	s23, [r0, #4]
 8008fce:	edcd 7a00 	vstr	s15, [sp]
 8008fd2:	a80d      	add	r0, sp, #52	; 0x34
 8008fd4:	edde 7a01 	vldr	s15, [lr, #4]
 8008fd8:	9c05      	ldr	r4, [sp, #20]
 8008fda:	9d07      	ldr	r5, [sp, #28]
 8008fdc:	edd2 fa00 	vldr	s31, [r2]
 8008fe0:	ed92 ca01 	vldr	s24, [r2, #4]
 8008fe4:	edcd 7a01 	vstr	s15, [sp, #4]
 8008fe8:	c807      	ldmia	r0, {r0, r1, r2}
 8008fea:	eddc 7a01 	vldr	s15, [ip, #4]
 8008fee:	edd4 ea00 	vldr	s29, [r4]
 8008ff2:	ed95 ea00 	vldr	s28, [r5]
 8008ff6:	edd6 da00 	vldr	s27, [r6]
 8008ffa:	edd4 aa01 	vldr	s21, [r4, #4]
 8008ffe:	ed95 aa01 	vldr	s20, [r5, #4]
 8009002:	ed9e da00 	vldr	s26, [lr]
 8009006:	eddc ca00 	vldr	s25, [ip]
 800900a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800900e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009010:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009012:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009014:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009016:	edcd 7a02 	vstr	s15, [sp, #8]
 800901a:	e001      	b.n	8009020 <arm_radix8_butterfly_f32+0x328>
 800901c:	3f3504f3 	.word	0x3f3504f3
 8009020:	ed16 6a01 	vldr	s12, [r6, #-4]
 8009024:	ed91 5a00 	vldr	s10, [r1]
 8009028:	ed57 9a01 	vldr	s19, [r7, #-4]
 800902c:	edd5 7a00 	vldr	s15, [r5]
 8009030:	ed18 7a01 	vldr	s14, [r8, #-4]
 8009034:	edd2 3a00 	vldr	s7, [r2]
 8009038:	ed94 3a00 	vldr	s6, [r4]
 800903c:	ed90 2a00 	vldr	s4, [r0]
 8009040:	ed92 0a01 	vldr	s0, [r2, #4]
 8009044:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009048:	ee32 1a06 	vadd.f32	s2, s4, s12
 800904c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8009050:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009054:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009058:	ee71 6a24 	vadd.f32	s13, s2, s9
 800905c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009060:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009064:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009068:	ed82 6a00 	vstr	s12, [r2]
 800906c:	edd5 8a01 	vldr	s17, [r5, #4]
 8009070:	ed90 9a01 	vldr	s18, [r0, #4]
 8009074:	edd6 2a00 	vldr	s5, [r6]
 8009078:	ed98 7a00 	vldr	s14, [r8]
 800907c:	edd4 0a01 	vldr	s1, [r4, #4]
 8009080:	ed91 6a01 	vldr	s12, [r1, #4]
 8009084:	edd7 5a00 	vldr	s11, [r7]
 8009088:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800908c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009090:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009094:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8009098:	ee38 4a44 	vsub.f32	s8, s16, s8
 800909c:	ee38 7a87 	vadd.f32	s14, s17, s14
 80090a0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80090a4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80090a8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80090ac:	ee32 9a27 	vadd.f32	s18, s4, s15
 80090b0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80090b4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80090b8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80090bc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80090c0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80090c4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80090c8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80090cc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80090d0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80090d4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80090d8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80090dc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80090e0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80090e4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80090e8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80090ec:	ee36 0a28 	vadd.f32	s0, s12, s17
 80090f0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80090f4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80090f8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80090fc:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009100:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009104:	ee75 8a85 	vadd.f32	s17, s11, s10
 8009108:	ee74 3a22 	vadd.f32	s7, s8, s5
 800910c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8009110:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009114:	ee79 1a41 	vsub.f32	s3, s18, s2
 8009118:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800911c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8009120:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009124:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009128:	ee30 4a60 	vsub.f32	s8, s0, s1
 800912c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8009130:	ee30 0a80 	vadd.f32	s0, s1, s0
 8009134:	ee77 9a85 	vadd.f32	s19, s15, s10
 8009138:	ee33 6a06 	vadd.f32	s12, s6, s12
 800913c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009140:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8009144:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009148:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800914c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009150:	ee39 1a01 	vadd.f32	s2, s18, s2
 8009154:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8009158:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800915c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8009160:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8009164:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8009168:	ee35 3a03 	vadd.f32	s6, s10, s6
 800916c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009170:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8009174:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8009178:	ed9d 4a02 	vldr	s8, [sp, #8]
 800917c:	ed82 1a01 	vstr	s2, [r2, #4]
 8009180:	ee77 3a63 	vsub.f32	s7, s14, s7
 8009184:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009188:	ed9d 7a01 	vldr	s14, [sp, #4]
 800918c:	ed81 3a00 	vstr	s6, [r1]
 8009190:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009194:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009198:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800919c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80091a0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80091a4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80091a8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80091ac:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80091b0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80091b4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80091b8:	ed9d 4a00 	vldr	s8, [sp]
 80091bc:	edc1 6a01 	vstr	s13, [r1, #4]
 80091c0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80091c4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80091c8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80091cc:	ee24 4a25 	vmul.f32	s8, s8, s11
 80091d0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80091d4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80091d8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80091dc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80091e0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80091e4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80091e8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80091ec:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80091f0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80091f4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80091f8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80091fc:	ee70 0a84 	vadd.f32	s1, s1, s8
 8009200:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009204:	44d9      	add	r9, fp
 8009206:	45ca      	cmp	sl, r9
 8009208:	ed84 9a00 	vstr	s18, [r4]
 800920c:	edc4 3a01 	vstr	s7, [r4, #4]
 8009210:	441a      	add	r2, r3
 8009212:	ed07 7a01 	vstr	s14, [r7, #-4]
 8009216:	edc7 2a00 	vstr	s5, [r7]
 800921a:	4419      	add	r1, r3
 800921c:	ed80 2a00 	vstr	s4, [r0]
 8009220:	ed80 8a01 	vstr	s16, [r0, #4]
 8009224:	441c      	add	r4, r3
 8009226:	ed48 1a01 	vstr	s3, [r8, #-4]
 800922a:	ed88 0a00 	vstr	s0, [r8]
 800922e:	441f      	add	r7, r3
 8009230:	ed46 4a01 	vstr	s9, [r6, #-4]
 8009234:	4418      	add	r0, r3
 8009236:	edc6 9a00 	vstr	s19, [r6]
 800923a:	4498      	add	r8, r3
 800923c:	edc5 0a00 	vstr	s1, [r5]
 8009240:	ed85 6a01 	vstr	s12, [r5, #4]
 8009244:	441e      	add	r6, r3
 8009246:	441d      	add	r5, r3
 8009248:	f63f aeea 	bhi.w	8009020 <arm_radix8_butterfly_f32+0x328>
 800924c:	9a03      	ldr	r2, [sp, #12]
 800924e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009250:	3201      	adds	r2, #1
 8009252:	4611      	mov	r1, r2
 8009254:	9203      	str	r2, [sp, #12]
 8009256:	9a04      	ldr	r2, [sp, #16]
 8009258:	4402      	add	r2, r0
 800925a:	9204      	str	r2, [sp, #16]
 800925c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800925e:	9a05      	ldr	r2, [sp, #20]
 8009260:	4402      	add	r2, r0
 8009262:	9205      	str	r2, [sp, #20]
 8009264:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009266:	9a07      	ldr	r2, [sp, #28]
 8009268:	4402      	add	r2, r0
 800926a:	9207      	str	r2, [sp, #28]
 800926c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800926e:	9a06      	ldr	r2, [sp, #24]
 8009270:	4402      	add	r2, r0
 8009272:	9206      	str	r2, [sp, #24]
 8009274:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009276:	4496      	add	lr, r2
 8009278:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800927a:	4494      	add	ip, r2
 800927c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800927e:	3208      	adds	r2, #8
 8009280:	920f      	str	r2, [sp, #60]	; 0x3c
 8009282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009284:	3208      	adds	r2, #8
 8009286:	920e      	str	r2, [sp, #56]	; 0x38
 8009288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800928a:	3208      	adds	r2, #8
 800928c:	920d      	str	r2, [sp, #52]	; 0x34
 800928e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009290:	3208      	adds	r2, #8
 8009292:	920c      	str	r2, [sp, #48]	; 0x30
 8009294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009296:	3208      	adds	r2, #8
 8009298:	920b      	str	r2, [sp, #44]	; 0x2c
 800929a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800929c:	3208      	adds	r2, #8
 800929e:	920a      	str	r2, [sp, #40]	; 0x28
 80092a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a2:	3208      	adds	r2, #8
 80092a4:	9209      	str	r2, [sp, #36]	; 0x24
 80092a6:	9a08      	ldr	r2, [sp, #32]
 80092a8:	3208      	adds	r2, #8
 80092aa:	9208      	str	r2, [sp, #32]
 80092ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80092ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 80092b0:	4288      	cmp	r0, r1
 80092b2:	4622      	mov	r2, r4
 80092b4:	d007      	beq.n	80092c6 <arm_radix8_butterfly_f32+0x5ce>
 80092b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80092b8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80092bc:	4621      	mov	r1, r4
 80092be:	4401      	add	r1, r0
 80092c0:	9110      	str	r1, [sp, #64]	; 0x40
 80092c2:	9804      	ldr	r0, [sp, #16]
 80092c4:	e67c      	b.n	8008fc0 <arm_radix8_butterfly_f32+0x2c8>
 80092c6:	4683      	mov	fp, r0
 80092c8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80092cc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80092ce:	e524      	b.n	8008d1a <arm_radix8_butterfly_f32+0x22>
 80092d0:	b01d      	add	sp, #116	; 0x74
 80092d2:	ecbd 8b10 	vpop	{d8-d15}
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	bf00      	nop

080092dc <sniprintf>:
 80092dc:	b40c      	push	{r2, r3}
 80092de:	b530      	push	{r4, r5, lr}
 80092e0:	4b17      	ldr	r3, [pc, #92]	; (8009340 <sniprintf+0x64>)
 80092e2:	1e0c      	subs	r4, r1, #0
 80092e4:	681d      	ldr	r5, [r3, #0]
 80092e6:	b09d      	sub	sp, #116	; 0x74
 80092e8:	da08      	bge.n	80092fc <sniprintf+0x20>
 80092ea:	238b      	movs	r3, #139	; 0x8b
 80092ec:	602b      	str	r3, [r5, #0]
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295
 80092f2:	b01d      	add	sp, #116	; 0x74
 80092f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092f8:	b002      	add	sp, #8
 80092fa:	4770      	bx	lr
 80092fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009300:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009304:	bf14      	ite	ne
 8009306:	f104 33ff 	addne.w	r3, r4, #4294967295
 800930a:	4623      	moveq	r3, r4
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	9307      	str	r3, [sp, #28]
 8009310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009314:	9002      	str	r0, [sp, #8]
 8009316:	9006      	str	r0, [sp, #24]
 8009318:	f8ad 3016 	strh.w	r3, [sp, #22]
 800931c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800931e:	ab21      	add	r3, sp, #132	; 0x84
 8009320:	a902      	add	r1, sp, #8
 8009322:	4628      	mov	r0, r5
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	f000 f98d 	bl	8009644 <_svfiprintf_r>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	bfbc      	itt	lt
 800932e:	238b      	movlt	r3, #139	; 0x8b
 8009330:	602b      	strlt	r3, [r5, #0]
 8009332:	2c00      	cmp	r4, #0
 8009334:	d0dd      	beq.n	80092f2 <sniprintf+0x16>
 8009336:	9b02      	ldr	r3, [sp, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
 800933c:	e7d9      	b.n	80092f2 <sniprintf+0x16>
 800933e:	bf00      	nop
 8009340:	200003c4 	.word	0x200003c4

08009344 <memset>:
 8009344:	4402      	add	r2, r0
 8009346:	4603      	mov	r3, r0
 8009348:	4293      	cmp	r3, r2
 800934a:	d100      	bne.n	800934e <memset+0xa>
 800934c:	4770      	bx	lr
 800934e:	f803 1b01 	strb.w	r1, [r3], #1
 8009352:	e7f9      	b.n	8009348 <memset+0x4>

08009354 <__libc_init_array>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	4d0d      	ldr	r5, [pc, #52]	; (800938c <__libc_init_array+0x38>)
 8009358:	4c0d      	ldr	r4, [pc, #52]	; (8009390 <__libc_init_array+0x3c>)
 800935a:	1b64      	subs	r4, r4, r5
 800935c:	10a4      	asrs	r4, r4, #2
 800935e:	2600      	movs	r6, #0
 8009360:	42a6      	cmp	r6, r4
 8009362:	d109      	bne.n	8009378 <__libc_init_array+0x24>
 8009364:	4d0b      	ldr	r5, [pc, #44]	; (8009394 <__libc_init_array+0x40>)
 8009366:	4c0c      	ldr	r4, [pc, #48]	; (8009398 <__libc_init_array+0x44>)
 8009368:	f000 fca0 	bl	8009cac <_init>
 800936c:	1b64      	subs	r4, r4, r5
 800936e:	10a4      	asrs	r4, r4, #2
 8009370:	2600      	movs	r6, #0
 8009372:	42a6      	cmp	r6, r4
 8009374:	d105      	bne.n	8009382 <__libc_init_array+0x2e>
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	f855 3b04 	ldr.w	r3, [r5], #4
 800937c:	4798      	blx	r3
 800937e:	3601      	adds	r6, #1
 8009380:	e7ee      	b.n	8009360 <__libc_init_array+0xc>
 8009382:	f855 3b04 	ldr.w	r3, [r5], #4
 8009386:	4798      	blx	r3
 8009388:	3601      	adds	r6, #1
 800938a:	e7f2      	b.n	8009372 <__libc_init_array+0x1e>
 800938c:	08020d94 	.word	0x08020d94
 8009390:	08020d94 	.word	0x08020d94
 8009394:	08020d94 	.word	0x08020d94
 8009398:	08020d98 	.word	0x08020d98

0800939c <__retarget_lock_acquire_recursive>:
 800939c:	4770      	bx	lr

0800939e <__retarget_lock_release_recursive>:
 800939e:	4770      	bx	lr

080093a0 <_free_r>:
 80093a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093a2:	2900      	cmp	r1, #0
 80093a4:	d044      	beq.n	8009430 <_free_r+0x90>
 80093a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093aa:	9001      	str	r0, [sp, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f1a1 0404 	sub.w	r4, r1, #4
 80093b2:	bfb8      	it	lt
 80093b4:	18e4      	addlt	r4, r4, r3
 80093b6:	f000 f8df 	bl	8009578 <__malloc_lock>
 80093ba:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <_free_r+0x94>)
 80093bc:	9801      	ldr	r0, [sp, #4]
 80093be:	6813      	ldr	r3, [r2, #0]
 80093c0:	b933      	cbnz	r3, 80093d0 <_free_r+0x30>
 80093c2:	6063      	str	r3, [r4, #4]
 80093c4:	6014      	str	r4, [r2, #0]
 80093c6:	b003      	add	sp, #12
 80093c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093cc:	f000 b8da 	b.w	8009584 <__malloc_unlock>
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	d908      	bls.n	80093e6 <_free_r+0x46>
 80093d4:	6825      	ldr	r5, [r4, #0]
 80093d6:	1961      	adds	r1, r4, r5
 80093d8:	428b      	cmp	r3, r1
 80093da:	bf01      	itttt	eq
 80093dc:	6819      	ldreq	r1, [r3, #0]
 80093de:	685b      	ldreq	r3, [r3, #4]
 80093e0:	1949      	addeq	r1, r1, r5
 80093e2:	6021      	streq	r1, [r4, #0]
 80093e4:	e7ed      	b.n	80093c2 <_free_r+0x22>
 80093e6:	461a      	mov	r2, r3
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	b10b      	cbz	r3, 80093f0 <_free_r+0x50>
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	d9fa      	bls.n	80093e6 <_free_r+0x46>
 80093f0:	6811      	ldr	r1, [r2, #0]
 80093f2:	1855      	adds	r5, r2, r1
 80093f4:	42a5      	cmp	r5, r4
 80093f6:	d10b      	bne.n	8009410 <_free_r+0x70>
 80093f8:	6824      	ldr	r4, [r4, #0]
 80093fa:	4421      	add	r1, r4
 80093fc:	1854      	adds	r4, r2, r1
 80093fe:	42a3      	cmp	r3, r4
 8009400:	6011      	str	r1, [r2, #0]
 8009402:	d1e0      	bne.n	80093c6 <_free_r+0x26>
 8009404:	681c      	ldr	r4, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	6053      	str	r3, [r2, #4]
 800940a:	440c      	add	r4, r1
 800940c:	6014      	str	r4, [r2, #0]
 800940e:	e7da      	b.n	80093c6 <_free_r+0x26>
 8009410:	d902      	bls.n	8009418 <_free_r+0x78>
 8009412:	230c      	movs	r3, #12
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	e7d6      	b.n	80093c6 <_free_r+0x26>
 8009418:	6825      	ldr	r5, [r4, #0]
 800941a:	1961      	adds	r1, r4, r5
 800941c:	428b      	cmp	r3, r1
 800941e:	bf04      	itt	eq
 8009420:	6819      	ldreq	r1, [r3, #0]
 8009422:	685b      	ldreq	r3, [r3, #4]
 8009424:	6063      	str	r3, [r4, #4]
 8009426:	bf04      	itt	eq
 8009428:	1949      	addeq	r1, r1, r5
 800942a:	6021      	streq	r1, [r4, #0]
 800942c:	6054      	str	r4, [r2, #4]
 800942e:	e7ca      	b.n	80093c6 <_free_r+0x26>
 8009430:	b003      	add	sp, #12
 8009432:	bd30      	pop	{r4, r5, pc}
 8009434:	20000bfc 	.word	0x20000bfc

08009438 <sbrk_aligned>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	4e0e      	ldr	r6, [pc, #56]	; (8009474 <sbrk_aligned+0x3c>)
 800943c:	460c      	mov	r4, r1
 800943e:	6831      	ldr	r1, [r6, #0]
 8009440:	4605      	mov	r5, r0
 8009442:	b911      	cbnz	r1, 800944a <sbrk_aligned+0x12>
 8009444:	f000 fba6 	bl	8009b94 <_sbrk_r>
 8009448:	6030      	str	r0, [r6, #0]
 800944a:	4621      	mov	r1, r4
 800944c:	4628      	mov	r0, r5
 800944e:	f000 fba1 	bl	8009b94 <_sbrk_r>
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d00a      	beq.n	800946c <sbrk_aligned+0x34>
 8009456:	1cc4      	adds	r4, r0, #3
 8009458:	f024 0403 	bic.w	r4, r4, #3
 800945c:	42a0      	cmp	r0, r4
 800945e:	d007      	beq.n	8009470 <sbrk_aligned+0x38>
 8009460:	1a21      	subs	r1, r4, r0
 8009462:	4628      	mov	r0, r5
 8009464:	f000 fb96 	bl	8009b94 <_sbrk_r>
 8009468:	3001      	adds	r0, #1
 800946a:	d101      	bne.n	8009470 <sbrk_aligned+0x38>
 800946c:	f04f 34ff 	mov.w	r4, #4294967295
 8009470:	4620      	mov	r0, r4
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	20000c00 	.word	0x20000c00

08009478 <_malloc_r>:
 8009478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947c:	1ccd      	adds	r5, r1, #3
 800947e:	f025 0503 	bic.w	r5, r5, #3
 8009482:	3508      	adds	r5, #8
 8009484:	2d0c      	cmp	r5, #12
 8009486:	bf38      	it	cc
 8009488:	250c      	movcc	r5, #12
 800948a:	2d00      	cmp	r5, #0
 800948c:	4607      	mov	r7, r0
 800948e:	db01      	blt.n	8009494 <_malloc_r+0x1c>
 8009490:	42a9      	cmp	r1, r5
 8009492:	d905      	bls.n	80094a0 <_malloc_r+0x28>
 8009494:	230c      	movs	r3, #12
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	2600      	movs	r6, #0
 800949a:	4630      	mov	r0, r6
 800949c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009574 <_malloc_r+0xfc>
 80094a4:	f000 f868 	bl	8009578 <__malloc_lock>
 80094a8:	f8d8 3000 	ldr.w	r3, [r8]
 80094ac:	461c      	mov	r4, r3
 80094ae:	bb5c      	cbnz	r4, 8009508 <_malloc_r+0x90>
 80094b0:	4629      	mov	r1, r5
 80094b2:	4638      	mov	r0, r7
 80094b4:	f7ff ffc0 	bl	8009438 <sbrk_aligned>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	4604      	mov	r4, r0
 80094bc:	d155      	bne.n	800956a <_malloc_r+0xf2>
 80094be:	f8d8 4000 	ldr.w	r4, [r8]
 80094c2:	4626      	mov	r6, r4
 80094c4:	2e00      	cmp	r6, #0
 80094c6:	d145      	bne.n	8009554 <_malloc_r+0xdc>
 80094c8:	2c00      	cmp	r4, #0
 80094ca:	d048      	beq.n	800955e <_malloc_r+0xe6>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	4631      	mov	r1, r6
 80094d0:	4638      	mov	r0, r7
 80094d2:	eb04 0903 	add.w	r9, r4, r3
 80094d6:	f000 fb5d 	bl	8009b94 <_sbrk_r>
 80094da:	4581      	cmp	r9, r0
 80094dc:	d13f      	bne.n	800955e <_malloc_r+0xe6>
 80094de:	6821      	ldr	r1, [r4, #0]
 80094e0:	1a6d      	subs	r5, r5, r1
 80094e2:	4629      	mov	r1, r5
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff ffa7 	bl	8009438 <sbrk_aligned>
 80094ea:	3001      	adds	r0, #1
 80094ec:	d037      	beq.n	800955e <_malloc_r+0xe6>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	442b      	add	r3, r5
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	f8d8 3000 	ldr.w	r3, [r8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d038      	beq.n	800956e <_malloc_r+0xf6>
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	42a2      	cmp	r2, r4
 8009500:	d12b      	bne.n	800955a <_malloc_r+0xe2>
 8009502:	2200      	movs	r2, #0
 8009504:	605a      	str	r2, [r3, #4]
 8009506:	e00f      	b.n	8009528 <_malloc_r+0xb0>
 8009508:	6822      	ldr	r2, [r4, #0]
 800950a:	1b52      	subs	r2, r2, r5
 800950c:	d41f      	bmi.n	800954e <_malloc_r+0xd6>
 800950e:	2a0b      	cmp	r2, #11
 8009510:	d917      	bls.n	8009542 <_malloc_r+0xca>
 8009512:	1961      	adds	r1, r4, r5
 8009514:	42a3      	cmp	r3, r4
 8009516:	6025      	str	r5, [r4, #0]
 8009518:	bf18      	it	ne
 800951a:	6059      	strne	r1, [r3, #4]
 800951c:	6863      	ldr	r3, [r4, #4]
 800951e:	bf08      	it	eq
 8009520:	f8c8 1000 	streq.w	r1, [r8]
 8009524:	5162      	str	r2, [r4, r5]
 8009526:	604b      	str	r3, [r1, #4]
 8009528:	4638      	mov	r0, r7
 800952a:	f104 060b 	add.w	r6, r4, #11
 800952e:	f000 f829 	bl	8009584 <__malloc_unlock>
 8009532:	f026 0607 	bic.w	r6, r6, #7
 8009536:	1d23      	adds	r3, r4, #4
 8009538:	1af2      	subs	r2, r6, r3
 800953a:	d0ae      	beq.n	800949a <_malloc_r+0x22>
 800953c:	1b9b      	subs	r3, r3, r6
 800953e:	50a3      	str	r3, [r4, r2]
 8009540:	e7ab      	b.n	800949a <_malloc_r+0x22>
 8009542:	42a3      	cmp	r3, r4
 8009544:	6862      	ldr	r2, [r4, #4]
 8009546:	d1dd      	bne.n	8009504 <_malloc_r+0x8c>
 8009548:	f8c8 2000 	str.w	r2, [r8]
 800954c:	e7ec      	b.n	8009528 <_malloc_r+0xb0>
 800954e:	4623      	mov	r3, r4
 8009550:	6864      	ldr	r4, [r4, #4]
 8009552:	e7ac      	b.n	80094ae <_malloc_r+0x36>
 8009554:	4634      	mov	r4, r6
 8009556:	6876      	ldr	r6, [r6, #4]
 8009558:	e7b4      	b.n	80094c4 <_malloc_r+0x4c>
 800955a:	4613      	mov	r3, r2
 800955c:	e7cc      	b.n	80094f8 <_malloc_r+0x80>
 800955e:	230c      	movs	r3, #12
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	4638      	mov	r0, r7
 8009564:	f000 f80e 	bl	8009584 <__malloc_unlock>
 8009568:	e797      	b.n	800949a <_malloc_r+0x22>
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	e7dc      	b.n	8009528 <_malloc_r+0xb0>
 800956e:	605b      	str	r3, [r3, #4]
 8009570:	deff      	udf	#255	; 0xff
 8009572:	bf00      	nop
 8009574:	20000bfc 	.word	0x20000bfc

08009578 <__malloc_lock>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__malloc_lock+0x8>)
 800957a:	f7ff bf0f 	b.w	800939c <__retarget_lock_acquire_recursive>
 800957e:	bf00      	nop
 8009580:	20000bf8 	.word	0x20000bf8

08009584 <__malloc_unlock>:
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <__malloc_unlock+0x8>)
 8009586:	f7ff bf0a 	b.w	800939e <__retarget_lock_release_recursive>
 800958a:	bf00      	nop
 800958c:	20000bf8 	.word	0x20000bf8

08009590 <__ssputs_r>:
 8009590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009594:	688e      	ldr	r6, [r1, #8]
 8009596:	461f      	mov	r7, r3
 8009598:	42be      	cmp	r6, r7
 800959a:	680b      	ldr	r3, [r1, #0]
 800959c:	4682      	mov	sl, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	4690      	mov	r8, r2
 80095a2:	d82c      	bhi.n	80095fe <__ssputs_r+0x6e>
 80095a4:	898a      	ldrh	r2, [r1, #12]
 80095a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095aa:	d026      	beq.n	80095fa <__ssputs_r+0x6a>
 80095ac:	6965      	ldr	r5, [r4, #20]
 80095ae:	6909      	ldr	r1, [r1, #16]
 80095b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095b4:	eba3 0901 	sub.w	r9, r3, r1
 80095b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095bc:	1c7b      	adds	r3, r7, #1
 80095be:	444b      	add	r3, r9
 80095c0:	106d      	asrs	r5, r5, #1
 80095c2:	429d      	cmp	r5, r3
 80095c4:	bf38      	it	cc
 80095c6:	461d      	movcc	r5, r3
 80095c8:	0553      	lsls	r3, r2, #21
 80095ca:	d527      	bpl.n	800961c <__ssputs_r+0x8c>
 80095cc:	4629      	mov	r1, r5
 80095ce:	f7ff ff53 	bl	8009478 <_malloc_r>
 80095d2:	4606      	mov	r6, r0
 80095d4:	b360      	cbz	r0, 8009630 <__ssputs_r+0xa0>
 80095d6:	6921      	ldr	r1, [r4, #16]
 80095d8:	464a      	mov	r2, r9
 80095da:	f000 faeb 	bl	8009bb4 <memcpy>
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	6126      	str	r6, [r4, #16]
 80095ec:	6165      	str	r5, [r4, #20]
 80095ee:	444e      	add	r6, r9
 80095f0:	eba5 0509 	sub.w	r5, r5, r9
 80095f4:	6026      	str	r6, [r4, #0]
 80095f6:	60a5      	str	r5, [r4, #8]
 80095f8:	463e      	mov	r6, r7
 80095fa:	42be      	cmp	r6, r7
 80095fc:	d900      	bls.n	8009600 <__ssputs_r+0x70>
 80095fe:	463e      	mov	r6, r7
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	4632      	mov	r2, r6
 8009604:	4641      	mov	r1, r8
 8009606:	f000 faab 	bl	8009b60 <memmove>
 800960a:	68a3      	ldr	r3, [r4, #8]
 800960c:	1b9b      	subs	r3, r3, r6
 800960e:	60a3      	str	r3, [r4, #8]
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	4433      	add	r3, r6
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	2000      	movs	r0, #0
 8009618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961c:	462a      	mov	r2, r5
 800961e:	f000 fad7 	bl	8009bd0 <_realloc_r>
 8009622:	4606      	mov	r6, r0
 8009624:	2800      	cmp	r0, #0
 8009626:	d1e0      	bne.n	80095ea <__ssputs_r+0x5a>
 8009628:	6921      	ldr	r1, [r4, #16]
 800962a:	4650      	mov	r0, sl
 800962c:	f7ff feb8 	bl	80093a0 <_free_r>
 8009630:	230c      	movs	r3, #12
 8009632:	f8ca 3000 	str.w	r3, [sl]
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	f04f 30ff 	mov.w	r0, #4294967295
 8009642:	e7e9      	b.n	8009618 <__ssputs_r+0x88>

08009644 <_svfiprintf_r>:
 8009644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009648:	4698      	mov	r8, r3
 800964a:	898b      	ldrh	r3, [r1, #12]
 800964c:	061b      	lsls	r3, r3, #24
 800964e:	b09d      	sub	sp, #116	; 0x74
 8009650:	4607      	mov	r7, r0
 8009652:	460d      	mov	r5, r1
 8009654:	4614      	mov	r4, r2
 8009656:	d50e      	bpl.n	8009676 <_svfiprintf_r+0x32>
 8009658:	690b      	ldr	r3, [r1, #16]
 800965a:	b963      	cbnz	r3, 8009676 <_svfiprintf_r+0x32>
 800965c:	2140      	movs	r1, #64	; 0x40
 800965e:	f7ff ff0b 	bl	8009478 <_malloc_r>
 8009662:	6028      	str	r0, [r5, #0]
 8009664:	6128      	str	r0, [r5, #16]
 8009666:	b920      	cbnz	r0, 8009672 <_svfiprintf_r+0x2e>
 8009668:	230c      	movs	r3, #12
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	e0d0      	b.n	8009814 <_svfiprintf_r+0x1d0>
 8009672:	2340      	movs	r3, #64	; 0x40
 8009674:	616b      	str	r3, [r5, #20]
 8009676:	2300      	movs	r3, #0
 8009678:	9309      	str	r3, [sp, #36]	; 0x24
 800967a:	2320      	movs	r3, #32
 800967c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009680:	f8cd 800c 	str.w	r8, [sp, #12]
 8009684:	2330      	movs	r3, #48	; 0x30
 8009686:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800982c <_svfiprintf_r+0x1e8>
 800968a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800968e:	f04f 0901 	mov.w	r9, #1
 8009692:	4623      	mov	r3, r4
 8009694:	469a      	mov	sl, r3
 8009696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800969a:	b10a      	cbz	r2, 80096a0 <_svfiprintf_r+0x5c>
 800969c:	2a25      	cmp	r2, #37	; 0x25
 800969e:	d1f9      	bne.n	8009694 <_svfiprintf_r+0x50>
 80096a0:	ebba 0b04 	subs.w	fp, sl, r4
 80096a4:	d00b      	beq.n	80096be <_svfiprintf_r+0x7a>
 80096a6:	465b      	mov	r3, fp
 80096a8:	4622      	mov	r2, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	4638      	mov	r0, r7
 80096ae:	f7ff ff6f 	bl	8009590 <__ssputs_r>
 80096b2:	3001      	adds	r0, #1
 80096b4:	f000 80a9 	beq.w	800980a <_svfiprintf_r+0x1c6>
 80096b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ba:	445a      	add	r2, fp
 80096bc:	9209      	str	r2, [sp, #36]	; 0x24
 80096be:	f89a 3000 	ldrb.w	r3, [sl]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 80a1 	beq.w	800980a <_svfiprintf_r+0x1c6>
 80096c8:	2300      	movs	r3, #0
 80096ca:	f04f 32ff 	mov.w	r2, #4294967295
 80096ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d2:	f10a 0a01 	add.w	sl, sl, #1
 80096d6:	9304      	str	r3, [sp, #16]
 80096d8:	9307      	str	r3, [sp, #28]
 80096da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096de:	931a      	str	r3, [sp, #104]	; 0x68
 80096e0:	4654      	mov	r4, sl
 80096e2:	2205      	movs	r2, #5
 80096e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e8:	4850      	ldr	r0, [pc, #320]	; (800982c <_svfiprintf_r+0x1e8>)
 80096ea:	f7f6 fde1 	bl	80002b0 <memchr>
 80096ee:	9a04      	ldr	r2, [sp, #16]
 80096f0:	b9d8      	cbnz	r0, 800972a <_svfiprintf_r+0xe6>
 80096f2:	06d0      	lsls	r0, r2, #27
 80096f4:	bf44      	itt	mi
 80096f6:	2320      	movmi	r3, #32
 80096f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096fc:	0711      	lsls	r1, r2, #28
 80096fe:	bf44      	itt	mi
 8009700:	232b      	movmi	r3, #43	; 0x2b
 8009702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009706:	f89a 3000 	ldrb.w	r3, [sl]
 800970a:	2b2a      	cmp	r3, #42	; 0x2a
 800970c:	d015      	beq.n	800973a <_svfiprintf_r+0xf6>
 800970e:	9a07      	ldr	r2, [sp, #28]
 8009710:	4654      	mov	r4, sl
 8009712:	2000      	movs	r0, #0
 8009714:	f04f 0c0a 	mov.w	ip, #10
 8009718:	4621      	mov	r1, r4
 800971a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800971e:	3b30      	subs	r3, #48	; 0x30
 8009720:	2b09      	cmp	r3, #9
 8009722:	d94d      	bls.n	80097c0 <_svfiprintf_r+0x17c>
 8009724:	b1b0      	cbz	r0, 8009754 <_svfiprintf_r+0x110>
 8009726:	9207      	str	r2, [sp, #28]
 8009728:	e014      	b.n	8009754 <_svfiprintf_r+0x110>
 800972a:	eba0 0308 	sub.w	r3, r0, r8
 800972e:	fa09 f303 	lsl.w	r3, r9, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	46a2      	mov	sl, r4
 8009738:	e7d2      	b.n	80096e0 <_svfiprintf_r+0x9c>
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	1d19      	adds	r1, r3, #4
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	9103      	str	r1, [sp, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	bfbb      	ittet	lt
 8009746:	425b      	neglt	r3, r3
 8009748:	f042 0202 	orrlt.w	r2, r2, #2
 800974c:	9307      	strge	r3, [sp, #28]
 800974e:	9307      	strlt	r3, [sp, #28]
 8009750:	bfb8      	it	lt
 8009752:	9204      	strlt	r2, [sp, #16]
 8009754:	7823      	ldrb	r3, [r4, #0]
 8009756:	2b2e      	cmp	r3, #46	; 0x2e
 8009758:	d10c      	bne.n	8009774 <_svfiprintf_r+0x130>
 800975a:	7863      	ldrb	r3, [r4, #1]
 800975c:	2b2a      	cmp	r3, #42	; 0x2a
 800975e:	d134      	bne.n	80097ca <_svfiprintf_r+0x186>
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	1d1a      	adds	r2, r3, #4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	9203      	str	r2, [sp, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	bfb8      	it	lt
 800976c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009770:	3402      	adds	r4, #2
 8009772:	9305      	str	r3, [sp, #20]
 8009774:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800983c <_svfiprintf_r+0x1f8>
 8009778:	7821      	ldrb	r1, [r4, #0]
 800977a:	2203      	movs	r2, #3
 800977c:	4650      	mov	r0, sl
 800977e:	f7f6 fd97 	bl	80002b0 <memchr>
 8009782:	b138      	cbz	r0, 8009794 <_svfiprintf_r+0x150>
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	eba0 000a 	sub.w	r0, r0, sl
 800978a:	2240      	movs	r2, #64	; 0x40
 800978c:	4082      	lsls	r2, r0
 800978e:	4313      	orrs	r3, r2
 8009790:	3401      	adds	r4, #1
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4825      	ldr	r0, [pc, #148]	; (8009830 <_svfiprintf_r+0x1ec>)
 800979a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800979e:	2206      	movs	r2, #6
 80097a0:	f7f6 fd86 	bl	80002b0 <memchr>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d038      	beq.n	800981a <_svfiprintf_r+0x1d6>
 80097a8:	4b22      	ldr	r3, [pc, #136]	; (8009834 <_svfiprintf_r+0x1f0>)
 80097aa:	bb1b      	cbnz	r3, 80097f4 <_svfiprintf_r+0x1b0>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	3307      	adds	r3, #7
 80097b0:	f023 0307 	bic.w	r3, r3, #7
 80097b4:	3308      	adds	r3, #8
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ba:	4433      	add	r3, r6
 80097bc:	9309      	str	r3, [sp, #36]	; 0x24
 80097be:	e768      	b.n	8009692 <_svfiprintf_r+0x4e>
 80097c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c4:	460c      	mov	r4, r1
 80097c6:	2001      	movs	r0, #1
 80097c8:	e7a6      	b.n	8009718 <_svfiprintf_r+0xd4>
 80097ca:	2300      	movs	r3, #0
 80097cc:	3401      	adds	r4, #1
 80097ce:	9305      	str	r3, [sp, #20]
 80097d0:	4619      	mov	r1, r3
 80097d2:	f04f 0c0a 	mov.w	ip, #10
 80097d6:	4620      	mov	r0, r4
 80097d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097dc:	3a30      	subs	r2, #48	; 0x30
 80097de:	2a09      	cmp	r2, #9
 80097e0:	d903      	bls.n	80097ea <_svfiprintf_r+0x1a6>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0c6      	beq.n	8009774 <_svfiprintf_r+0x130>
 80097e6:	9105      	str	r1, [sp, #20]
 80097e8:	e7c4      	b.n	8009774 <_svfiprintf_r+0x130>
 80097ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ee:	4604      	mov	r4, r0
 80097f0:	2301      	movs	r3, #1
 80097f2:	e7f0      	b.n	80097d6 <_svfiprintf_r+0x192>
 80097f4:	ab03      	add	r3, sp, #12
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	462a      	mov	r2, r5
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <_svfiprintf_r+0x1f4>)
 80097fc:	a904      	add	r1, sp, #16
 80097fe:	4638      	mov	r0, r7
 8009800:	f3af 8000 	nop.w
 8009804:	1c42      	adds	r2, r0, #1
 8009806:	4606      	mov	r6, r0
 8009808:	d1d6      	bne.n	80097b8 <_svfiprintf_r+0x174>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	065b      	lsls	r3, r3, #25
 800980e:	f53f af2d 	bmi.w	800966c <_svfiprintf_r+0x28>
 8009812:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009814:	b01d      	add	sp, #116	; 0x74
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	ab03      	add	r3, sp, #12
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	462a      	mov	r2, r5
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <_svfiprintf_r+0x1f4>)
 8009822:	a904      	add	r1, sp, #16
 8009824:	4638      	mov	r0, r7
 8009826:	f000 f879 	bl	800991c <_printf_i>
 800982a:	e7eb      	b.n	8009804 <_svfiprintf_r+0x1c0>
 800982c:	08020d58 	.word	0x08020d58
 8009830:	08020d62 	.word	0x08020d62
 8009834:	00000000 	.word	0x00000000
 8009838:	08009591 	.word	0x08009591
 800983c:	08020d5e 	.word	0x08020d5e

08009840 <_printf_common>:
 8009840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009844:	4616      	mov	r6, r2
 8009846:	4699      	mov	r9, r3
 8009848:	688a      	ldr	r2, [r1, #8]
 800984a:	690b      	ldr	r3, [r1, #16]
 800984c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009850:	4293      	cmp	r3, r2
 8009852:	bfb8      	it	lt
 8009854:	4613      	movlt	r3, r2
 8009856:	6033      	str	r3, [r6, #0]
 8009858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800985c:	4607      	mov	r7, r0
 800985e:	460c      	mov	r4, r1
 8009860:	b10a      	cbz	r2, 8009866 <_printf_common+0x26>
 8009862:	3301      	adds	r3, #1
 8009864:	6033      	str	r3, [r6, #0]
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	0699      	lsls	r1, r3, #26
 800986a:	bf42      	ittt	mi
 800986c:	6833      	ldrmi	r3, [r6, #0]
 800986e:	3302      	addmi	r3, #2
 8009870:	6033      	strmi	r3, [r6, #0]
 8009872:	6825      	ldr	r5, [r4, #0]
 8009874:	f015 0506 	ands.w	r5, r5, #6
 8009878:	d106      	bne.n	8009888 <_printf_common+0x48>
 800987a:	f104 0a19 	add.w	sl, r4, #25
 800987e:	68e3      	ldr	r3, [r4, #12]
 8009880:	6832      	ldr	r2, [r6, #0]
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	42ab      	cmp	r3, r5
 8009886:	dc26      	bgt.n	80098d6 <_printf_common+0x96>
 8009888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800988c:	1e13      	subs	r3, r2, #0
 800988e:	6822      	ldr	r2, [r4, #0]
 8009890:	bf18      	it	ne
 8009892:	2301      	movne	r3, #1
 8009894:	0692      	lsls	r2, r2, #26
 8009896:	d42b      	bmi.n	80098f0 <_printf_common+0xb0>
 8009898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800989c:	4649      	mov	r1, r9
 800989e:	4638      	mov	r0, r7
 80098a0:	47c0      	blx	r8
 80098a2:	3001      	adds	r0, #1
 80098a4:	d01e      	beq.n	80098e4 <_printf_common+0xa4>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	6922      	ldr	r2, [r4, #16]
 80098aa:	f003 0306 	and.w	r3, r3, #6
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	bf02      	ittt	eq
 80098b2:	68e5      	ldreq	r5, [r4, #12]
 80098b4:	6833      	ldreq	r3, [r6, #0]
 80098b6:	1aed      	subeq	r5, r5, r3
 80098b8:	68a3      	ldr	r3, [r4, #8]
 80098ba:	bf0c      	ite	eq
 80098bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098c0:	2500      	movne	r5, #0
 80098c2:	4293      	cmp	r3, r2
 80098c4:	bfc4      	itt	gt
 80098c6:	1a9b      	subgt	r3, r3, r2
 80098c8:	18ed      	addgt	r5, r5, r3
 80098ca:	2600      	movs	r6, #0
 80098cc:	341a      	adds	r4, #26
 80098ce:	42b5      	cmp	r5, r6
 80098d0:	d11a      	bne.n	8009908 <_printf_common+0xc8>
 80098d2:	2000      	movs	r0, #0
 80098d4:	e008      	b.n	80098e8 <_printf_common+0xa8>
 80098d6:	2301      	movs	r3, #1
 80098d8:	4652      	mov	r2, sl
 80098da:	4649      	mov	r1, r9
 80098dc:	4638      	mov	r0, r7
 80098de:	47c0      	blx	r8
 80098e0:	3001      	adds	r0, #1
 80098e2:	d103      	bne.n	80098ec <_printf_common+0xac>
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ec:	3501      	adds	r5, #1
 80098ee:	e7c6      	b.n	800987e <_printf_common+0x3e>
 80098f0:	18e1      	adds	r1, r4, r3
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	2030      	movs	r0, #48	; 0x30
 80098f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098fa:	4422      	add	r2, r4
 80098fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009904:	3302      	adds	r3, #2
 8009906:	e7c7      	b.n	8009898 <_printf_common+0x58>
 8009908:	2301      	movs	r3, #1
 800990a:	4622      	mov	r2, r4
 800990c:	4649      	mov	r1, r9
 800990e:	4638      	mov	r0, r7
 8009910:	47c0      	blx	r8
 8009912:	3001      	adds	r0, #1
 8009914:	d0e6      	beq.n	80098e4 <_printf_common+0xa4>
 8009916:	3601      	adds	r6, #1
 8009918:	e7d9      	b.n	80098ce <_printf_common+0x8e>
	...

0800991c <_printf_i>:
 800991c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009920:	7e0f      	ldrb	r7, [r1, #24]
 8009922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009924:	2f78      	cmp	r7, #120	; 0x78
 8009926:	4691      	mov	r9, r2
 8009928:	4680      	mov	r8, r0
 800992a:	460c      	mov	r4, r1
 800992c:	469a      	mov	sl, r3
 800992e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009932:	d807      	bhi.n	8009944 <_printf_i+0x28>
 8009934:	2f62      	cmp	r7, #98	; 0x62
 8009936:	d80a      	bhi.n	800994e <_printf_i+0x32>
 8009938:	2f00      	cmp	r7, #0
 800993a:	f000 80d4 	beq.w	8009ae6 <_printf_i+0x1ca>
 800993e:	2f58      	cmp	r7, #88	; 0x58
 8009940:	f000 80c0 	beq.w	8009ac4 <_printf_i+0x1a8>
 8009944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800994c:	e03a      	b.n	80099c4 <_printf_i+0xa8>
 800994e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009952:	2b15      	cmp	r3, #21
 8009954:	d8f6      	bhi.n	8009944 <_printf_i+0x28>
 8009956:	a101      	add	r1, pc, #4	; (adr r1, 800995c <_printf_i+0x40>)
 8009958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800995c:	080099b5 	.word	0x080099b5
 8009960:	080099c9 	.word	0x080099c9
 8009964:	08009945 	.word	0x08009945
 8009968:	08009945 	.word	0x08009945
 800996c:	08009945 	.word	0x08009945
 8009970:	08009945 	.word	0x08009945
 8009974:	080099c9 	.word	0x080099c9
 8009978:	08009945 	.word	0x08009945
 800997c:	08009945 	.word	0x08009945
 8009980:	08009945 	.word	0x08009945
 8009984:	08009945 	.word	0x08009945
 8009988:	08009acd 	.word	0x08009acd
 800998c:	080099f5 	.word	0x080099f5
 8009990:	08009a87 	.word	0x08009a87
 8009994:	08009945 	.word	0x08009945
 8009998:	08009945 	.word	0x08009945
 800999c:	08009aef 	.word	0x08009aef
 80099a0:	08009945 	.word	0x08009945
 80099a4:	080099f5 	.word	0x080099f5
 80099a8:	08009945 	.word	0x08009945
 80099ac:	08009945 	.word	0x08009945
 80099b0:	08009a8f 	.word	0x08009a8f
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	1d1a      	adds	r2, r3, #4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	602a      	str	r2, [r5, #0]
 80099bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099c4:	2301      	movs	r3, #1
 80099c6:	e09f      	b.n	8009b08 <_printf_i+0x1ec>
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	682b      	ldr	r3, [r5, #0]
 80099cc:	0607      	lsls	r7, r0, #24
 80099ce:	f103 0104 	add.w	r1, r3, #4
 80099d2:	6029      	str	r1, [r5, #0]
 80099d4:	d501      	bpl.n	80099da <_printf_i+0xbe>
 80099d6:	681e      	ldr	r6, [r3, #0]
 80099d8:	e003      	b.n	80099e2 <_printf_i+0xc6>
 80099da:	0646      	lsls	r6, r0, #25
 80099dc:	d5fb      	bpl.n	80099d6 <_printf_i+0xba>
 80099de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80099e2:	2e00      	cmp	r6, #0
 80099e4:	da03      	bge.n	80099ee <_printf_i+0xd2>
 80099e6:	232d      	movs	r3, #45	; 0x2d
 80099e8:	4276      	negs	r6, r6
 80099ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ee:	485a      	ldr	r0, [pc, #360]	; (8009b58 <_printf_i+0x23c>)
 80099f0:	230a      	movs	r3, #10
 80099f2:	e012      	b.n	8009a1a <_printf_i+0xfe>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	6820      	ldr	r0, [r4, #0]
 80099f8:	1d19      	adds	r1, r3, #4
 80099fa:	6029      	str	r1, [r5, #0]
 80099fc:	0605      	lsls	r5, r0, #24
 80099fe:	d501      	bpl.n	8009a04 <_printf_i+0xe8>
 8009a00:	681e      	ldr	r6, [r3, #0]
 8009a02:	e002      	b.n	8009a0a <_printf_i+0xee>
 8009a04:	0641      	lsls	r1, r0, #25
 8009a06:	d5fb      	bpl.n	8009a00 <_printf_i+0xe4>
 8009a08:	881e      	ldrh	r6, [r3, #0]
 8009a0a:	4853      	ldr	r0, [pc, #332]	; (8009b58 <_printf_i+0x23c>)
 8009a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a0e:	bf0c      	ite	eq
 8009a10:	2308      	moveq	r3, #8
 8009a12:	230a      	movne	r3, #10
 8009a14:	2100      	movs	r1, #0
 8009a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a1a:	6865      	ldr	r5, [r4, #4]
 8009a1c:	60a5      	str	r5, [r4, #8]
 8009a1e:	2d00      	cmp	r5, #0
 8009a20:	bfa2      	ittt	ge
 8009a22:	6821      	ldrge	r1, [r4, #0]
 8009a24:	f021 0104 	bicge.w	r1, r1, #4
 8009a28:	6021      	strge	r1, [r4, #0]
 8009a2a:	b90e      	cbnz	r6, 8009a30 <_printf_i+0x114>
 8009a2c:	2d00      	cmp	r5, #0
 8009a2e:	d04b      	beq.n	8009ac8 <_printf_i+0x1ac>
 8009a30:	4615      	mov	r5, r2
 8009a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a36:	fb03 6711 	mls	r7, r3, r1, r6
 8009a3a:	5dc7      	ldrb	r7, [r0, r7]
 8009a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a40:	4637      	mov	r7, r6
 8009a42:	42bb      	cmp	r3, r7
 8009a44:	460e      	mov	r6, r1
 8009a46:	d9f4      	bls.n	8009a32 <_printf_i+0x116>
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d10b      	bne.n	8009a64 <_printf_i+0x148>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	07de      	lsls	r6, r3, #31
 8009a50:	d508      	bpl.n	8009a64 <_printf_i+0x148>
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	6861      	ldr	r1, [r4, #4]
 8009a56:	4299      	cmp	r1, r3
 8009a58:	bfde      	ittt	le
 8009a5a:	2330      	movle	r3, #48	; 0x30
 8009a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a64:	1b52      	subs	r2, r2, r5
 8009a66:	6122      	str	r2, [r4, #16]
 8009a68:	f8cd a000 	str.w	sl, [sp]
 8009a6c:	464b      	mov	r3, r9
 8009a6e:	aa03      	add	r2, sp, #12
 8009a70:	4621      	mov	r1, r4
 8009a72:	4640      	mov	r0, r8
 8009a74:	f7ff fee4 	bl	8009840 <_printf_common>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d14a      	bne.n	8009b12 <_printf_i+0x1f6>
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	b004      	add	sp, #16
 8009a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	f043 0320 	orr.w	r3, r3, #32
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	4833      	ldr	r0, [pc, #204]	; (8009b5c <_printf_i+0x240>)
 8009a90:	2778      	movs	r7, #120	; 0x78
 8009a92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	6829      	ldr	r1, [r5, #0]
 8009a9a:	061f      	lsls	r7, r3, #24
 8009a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009aa0:	d402      	bmi.n	8009aa8 <_printf_i+0x18c>
 8009aa2:	065f      	lsls	r7, r3, #25
 8009aa4:	bf48      	it	mi
 8009aa6:	b2b6      	uxthmi	r6, r6
 8009aa8:	07df      	lsls	r7, r3, #31
 8009aaa:	bf48      	it	mi
 8009aac:	f043 0320 	orrmi.w	r3, r3, #32
 8009ab0:	6029      	str	r1, [r5, #0]
 8009ab2:	bf48      	it	mi
 8009ab4:	6023      	strmi	r3, [r4, #0]
 8009ab6:	b91e      	cbnz	r6, 8009ac0 <_printf_i+0x1a4>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	f023 0320 	bic.w	r3, r3, #32
 8009abe:	6023      	str	r3, [r4, #0]
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	e7a7      	b.n	8009a14 <_printf_i+0xf8>
 8009ac4:	4824      	ldr	r0, [pc, #144]	; (8009b58 <_printf_i+0x23c>)
 8009ac6:	e7e4      	b.n	8009a92 <_printf_i+0x176>
 8009ac8:	4615      	mov	r5, r2
 8009aca:	e7bd      	b.n	8009a48 <_printf_i+0x12c>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	6826      	ldr	r6, [r4, #0]
 8009ad0:	6961      	ldr	r1, [r4, #20]
 8009ad2:	1d18      	adds	r0, r3, #4
 8009ad4:	6028      	str	r0, [r5, #0]
 8009ad6:	0635      	lsls	r5, r6, #24
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	d501      	bpl.n	8009ae0 <_printf_i+0x1c4>
 8009adc:	6019      	str	r1, [r3, #0]
 8009ade:	e002      	b.n	8009ae6 <_printf_i+0x1ca>
 8009ae0:	0670      	lsls	r0, r6, #25
 8009ae2:	d5fb      	bpl.n	8009adc <_printf_i+0x1c0>
 8009ae4:	8019      	strh	r1, [r3, #0]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	4615      	mov	r5, r2
 8009aec:	e7bc      	b.n	8009a68 <_printf_i+0x14c>
 8009aee:	682b      	ldr	r3, [r5, #0]
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	602a      	str	r2, [r5, #0]
 8009af4:	681d      	ldr	r5, [r3, #0]
 8009af6:	6862      	ldr	r2, [r4, #4]
 8009af8:	2100      	movs	r1, #0
 8009afa:	4628      	mov	r0, r5
 8009afc:	f7f6 fbd8 	bl	80002b0 <memchr>
 8009b00:	b108      	cbz	r0, 8009b06 <_printf_i+0x1ea>
 8009b02:	1b40      	subs	r0, r0, r5
 8009b04:	6060      	str	r0, [r4, #4]
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b10:	e7aa      	b.n	8009a68 <_printf_i+0x14c>
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	462a      	mov	r2, r5
 8009b16:	4649      	mov	r1, r9
 8009b18:	4640      	mov	r0, r8
 8009b1a:	47d0      	blx	sl
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d0ad      	beq.n	8009a7c <_printf_i+0x160>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	079b      	lsls	r3, r3, #30
 8009b24:	d413      	bmi.n	8009b4e <_printf_i+0x232>
 8009b26:	68e0      	ldr	r0, [r4, #12]
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	4298      	cmp	r0, r3
 8009b2c:	bfb8      	it	lt
 8009b2e:	4618      	movlt	r0, r3
 8009b30:	e7a6      	b.n	8009a80 <_printf_i+0x164>
 8009b32:	2301      	movs	r3, #1
 8009b34:	4632      	mov	r2, r6
 8009b36:	4649      	mov	r1, r9
 8009b38:	4640      	mov	r0, r8
 8009b3a:	47d0      	blx	sl
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d09d      	beq.n	8009a7c <_printf_i+0x160>
 8009b40:	3501      	adds	r5, #1
 8009b42:	68e3      	ldr	r3, [r4, #12]
 8009b44:	9903      	ldr	r1, [sp, #12]
 8009b46:	1a5b      	subs	r3, r3, r1
 8009b48:	42ab      	cmp	r3, r5
 8009b4a:	dcf2      	bgt.n	8009b32 <_printf_i+0x216>
 8009b4c:	e7eb      	b.n	8009b26 <_printf_i+0x20a>
 8009b4e:	2500      	movs	r5, #0
 8009b50:	f104 0619 	add.w	r6, r4, #25
 8009b54:	e7f5      	b.n	8009b42 <_printf_i+0x226>
 8009b56:	bf00      	nop
 8009b58:	08020d69 	.word	0x08020d69
 8009b5c:	08020d7a 	.word	0x08020d7a

08009b60 <memmove>:
 8009b60:	4288      	cmp	r0, r1
 8009b62:	b510      	push	{r4, lr}
 8009b64:	eb01 0402 	add.w	r4, r1, r2
 8009b68:	d902      	bls.n	8009b70 <memmove+0x10>
 8009b6a:	4284      	cmp	r4, r0
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	d807      	bhi.n	8009b80 <memmove+0x20>
 8009b70:	1e43      	subs	r3, r0, #1
 8009b72:	42a1      	cmp	r1, r4
 8009b74:	d008      	beq.n	8009b88 <memmove+0x28>
 8009b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b7e:	e7f8      	b.n	8009b72 <memmove+0x12>
 8009b80:	4402      	add	r2, r0
 8009b82:	4601      	mov	r1, r0
 8009b84:	428a      	cmp	r2, r1
 8009b86:	d100      	bne.n	8009b8a <memmove+0x2a>
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b92:	e7f7      	b.n	8009b84 <memmove+0x24>

08009b94 <_sbrk_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d06      	ldr	r5, [pc, #24]	; (8009bb0 <_sbrk_r+0x1c>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	f000 f876 	bl	8009c90 <_sbrk>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_sbrk_r+0x1a>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_sbrk_r+0x1a>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20000bf4 	.word	0x20000bf4

08009bb4 <memcpy>:
 8009bb4:	440a      	add	r2, r1
 8009bb6:	4291      	cmp	r1, r2
 8009bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bbc:	d100      	bne.n	8009bc0 <memcpy+0xc>
 8009bbe:	4770      	bx	lr
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bca:	4291      	cmp	r1, r2
 8009bcc:	d1f9      	bne.n	8009bc2 <memcpy+0xe>
 8009bce:	bd10      	pop	{r4, pc}

08009bd0 <_realloc_r>:
 8009bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	4614      	mov	r4, r2
 8009bd8:	460e      	mov	r6, r1
 8009bda:	b921      	cbnz	r1, 8009be6 <_realloc_r+0x16>
 8009bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009be0:	4611      	mov	r1, r2
 8009be2:	f7ff bc49 	b.w	8009478 <_malloc_r>
 8009be6:	b92a      	cbnz	r2, 8009bf4 <_realloc_r+0x24>
 8009be8:	f7ff fbda 	bl	80093a0 <_free_r>
 8009bec:	4625      	mov	r5, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf4:	f000 f81b 	bl	8009c2e <_malloc_usable_size_r>
 8009bf8:	4284      	cmp	r4, r0
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	d802      	bhi.n	8009c04 <_realloc_r+0x34>
 8009bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c02:	d812      	bhi.n	8009c2a <_realloc_r+0x5a>
 8009c04:	4621      	mov	r1, r4
 8009c06:	4640      	mov	r0, r8
 8009c08:	f7ff fc36 	bl	8009478 <_malloc_r>
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d0ed      	beq.n	8009bee <_realloc_r+0x1e>
 8009c12:	42bc      	cmp	r4, r7
 8009c14:	4622      	mov	r2, r4
 8009c16:	4631      	mov	r1, r6
 8009c18:	bf28      	it	cs
 8009c1a:	463a      	movcs	r2, r7
 8009c1c:	f7ff ffca 	bl	8009bb4 <memcpy>
 8009c20:	4631      	mov	r1, r6
 8009c22:	4640      	mov	r0, r8
 8009c24:	f7ff fbbc 	bl	80093a0 <_free_r>
 8009c28:	e7e1      	b.n	8009bee <_realloc_r+0x1e>
 8009c2a:	4635      	mov	r5, r6
 8009c2c:	e7df      	b.n	8009bee <_realloc_r+0x1e>

08009c2e <_malloc_usable_size_r>:
 8009c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c32:	1f18      	subs	r0, r3, #4
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bfbc      	itt	lt
 8009c38:	580b      	ldrlt	r3, [r1, r0]
 8009c3a:	18c0      	addlt	r0, r0, r3
 8009c3c:	4770      	bx	lr
	...

08009c40 <sqrtf>:
 8009c40:	b508      	push	{r3, lr}
 8009c42:	ed2d 8b02 	vpush	{d8}
 8009c46:	eeb0 8a40 	vmov.f32	s16, s0
 8009c4a:	f000 f817 	bl	8009c7c <__ieee754_sqrtf>
 8009c4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c56:	d60c      	bvs.n	8009c72 <sqrtf+0x32>
 8009c58:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009c78 <sqrtf+0x38>
 8009c5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c64:	d505      	bpl.n	8009c72 <sqrtf+0x32>
 8009c66:	f000 f80d 	bl	8009c84 <__errno>
 8009c6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009c6e:	2321      	movs	r3, #33	; 0x21
 8009c70:	6003      	str	r3, [r0, #0]
 8009c72:	ecbd 8b02 	vpop	{d8}
 8009c76:	bd08      	pop	{r3, pc}
 8009c78:	00000000 	.word	0x00000000

08009c7c <__ieee754_sqrtf>:
 8009c7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009c80:	4770      	bx	lr
	...

08009c84 <__errno>:
 8009c84:	4b01      	ldr	r3, [pc, #4]	; (8009c8c <__errno+0x8>)
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	200003c4 	.word	0x200003c4

08009c90 <_sbrk>:
 8009c90:	4a04      	ldr	r2, [pc, #16]	; (8009ca4 <_sbrk+0x14>)
 8009c92:	6811      	ldr	r1, [r2, #0]
 8009c94:	4603      	mov	r3, r0
 8009c96:	b909      	cbnz	r1, 8009c9c <_sbrk+0xc>
 8009c98:	4903      	ldr	r1, [pc, #12]	; (8009ca8 <_sbrk+0x18>)
 8009c9a:	6011      	str	r1, [r2, #0]
 8009c9c:	6810      	ldr	r0, [r2, #0]
 8009c9e:	4403      	add	r3, r0
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	4770      	bx	lr
 8009ca4:	20000c04 	.word	0x20000c04
 8009ca8:	20000c08 	.word	0x20000c08

08009cac <_init>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	bf00      	nop
 8009cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cb2:	bc08      	pop	{r3}
 8009cb4:	469e      	mov	lr, r3
 8009cb6:	4770      	bx	lr

08009cb8 <_fini>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	bf00      	nop
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr
